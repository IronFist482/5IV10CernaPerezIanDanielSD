import { ColumnRefContext, PredicateContext, TableAliasContext, TableRefContext, FunctionCallContext, SelectAliasContext } from '../grammar/MySQLParser';
import { MySQLParserListener } from '../grammar/MySQLParserListener';
export declare enum ReferenceType {
    FunctionRef = "FunctionRef",
    KeywordRef = "KeywordRef",
    ColumnRef = "ColumnRef",
    SchemaRef = "SchemaRef",
    TableRef = "TableRef",
    AliasRef = "AliasRef",
    ValueRef = "ValueRef"
}
export declare type Reference = FunctionReference | KeywordReference | TableReference | ColumnReference | SchemaReference | AliasReference | ValueReference;
export interface KeywordReference {
    type: ReferenceType;
    keyword: string;
    start: number;
    stop: number;
}
export interface SchemaReference {
    type: ReferenceType;
    schema: string;
    start: number;
    stop: number;
}
export interface TableReference {
    type: ReferenceType;
    schemaReference: SchemaReference | null;
    aliasReference: AliasReference | null;
    table: string;
    start: number;
    stop: number;
}
export interface ColumnReference {
    type: ReferenceType;
    context: ReferenceContext | null;
    tableReference: TableReference | null;
    aliasReference: AliasReference | null;
    column: string;
    start: number;
    stop: number;
}
export interface AliasReference {
    type: ReferenceType;
    columnReference: ColumnReference | null;
    tableReference: TableReference | null;
    alias: string;
    start: number;
    stop: number;
}
declare type DataType = 'string' | 'number' | 'boolean' | 'date' | 'null';
export interface ValueReference {
    type: ReferenceType;
    context: ReferenceContext | null;
    columnReference: ColumnReference | null;
    dataType: DataType;
    value: string;
    start: number;
    stop: number;
}
export interface FunctionReference {
    type: ReferenceType;
    function: string;
    start: number;
    stop: number;
}
declare type ReferenceContext = 'valuesClause' | 'whereClause' | 'fieldsClause';
export declare class ParserListener implements MySQLParserListener {
    functionReferences: FunctionReference[];
    keywordReferences: KeywordReference[];
    columnReferences: ColumnReference[];
    tableReferences: TableReference[];
    aliasReferences: AliasReference[];
    valueReferences: ValueReference[];
    constructor();
    exitColumnRef(ctx: ColumnRefContext): void;
    exitTableRef(ctx: TableRefContext): void;
    exitTableAlias(ctx: TableAliasContext): void;
    exitSelectAlias(ctx: SelectAliasContext): void;
    exitPredicate(ctx: PredicateContext): void;
    exitFunctionCall(ctx: FunctionCallContext): void;
    exitSubquery(): void;
    exitEveryRule(): void;
}
export {};
