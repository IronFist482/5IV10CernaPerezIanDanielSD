"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("./errors");
const Interval_1 = require("antlr4ts/misc/Interval");
class LexerErrorListener {
    constructor(lexer) {
        this.lexer = lexer;
    }
    syntaxError(
    // eslint-disable-next-line
    // @ts-ignore
    _, offendingToken, line, character, message) {
        // offendingToken is only defined for parser error listeners, so its safe to return here
        if (offendingToken) {
            return;
        }
        const input = this.lexer.inputStream;
        const interval = new Interval_1.Interval(this.lexer._tokenStartCharIndex, input.index);
        const text = this.lexer.getErrorDisplay(input.getText(interval)) || ' ';
        switch (text[0]) {
            case '/':
                message = 'Unfinished multiline comment';
                break;
            case '"':
                message = 'Unfinished double quoted string literal';
                break;
            case "'":
                message = 'Unfinished single quoted string literal';
                break;
            case '`':
                message = 'Unfinished back tick quoted string literal';
                break;
            default:
                // Hex or bin string?
                if (text.length > 1 && text[1] === "'" && (text.startsWith('x') || text.startsWith('b'))) {
                    message = 'Unfinished ' + (text.startsWith('x') ? 'hex' : 'binary') + ' string literal';
                }
                else {
                    // Something else the lexer couldn't make sense of (likely there is no rule that accepts this input).
                    message = '"' + text + '" is no valid input at all';
                }
        }
        const data = {
            offset: input.index,
            position: {
                character,
                line
            }
        };
        this.error = new errors_1.LexerError(message, data);
    }
}
exports.LexerErrorListener = LexerErrorListener;
//# sourceMappingURL=lexer-error-listener.js.map