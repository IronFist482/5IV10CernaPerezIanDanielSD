"use strict";
/* eslint-disable */
// @ts-nocheck
// Generated from ./src/grammar/MySQLParser.g4 by ANTLR 4.7.3-SNAPSHOT
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const MySQLBaseParser_1 = require("./MySQLBaseParser");
const common_1 = require("./common");
const ATN_1 = require("antlr4ts/atn/ATN");
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const FailedPredicateException_1 = require("antlr4ts/FailedPredicateException");
const NoViableAltException_1 = require("antlr4ts/NoViableAltException");
const ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
const ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
const RecognitionException_1 = require("antlr4ts/RecognitionException");
const Token_1 = require("antlr4ts/Token");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = __importStar(require("antlr4ts/misc/Utils"));
class MySQLParser extends MySQLBaseParser_1.MySQLBaseParser {
    constructor(input) {
        super(input);
        this._interp = new ParserATNSimulator_1.ParserATNSimulator(MySQLParser._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return MySQLParser.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    // @Override
    get grammarFileName() { return "MySQLParser.g4"; }
    // @Override
    get ruleNames() { return MySQLParser.ruleNames; }
    // @Override
    get serializedATN() { return MySQLParser._serializedATN; }
    // @RuleVersion(0)
    query() {
        let _localctx = new QueryContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, MySQLParser.RULE_query);
        try {
            this.state = 1222;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 3, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1210;
                        this.match(MySQLParser.EOF);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1213;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 0, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1211;
                                    this.simpleStatement();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 1212;
                                    this.beginWork();
                                }
                                break;
                        }
                        this.state = 1220;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case MySQLParser.SEMICOLON_SYMBOL:
                                {
                                    this.state = 1215;
                                    this.match(MySQLParser.SEMICOLON_SYMBOL);
                                    this.state = 1217;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 1, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 1216;
                                                this.match(MySQLParser.EOF);
                                            }
                                            break;
                                    }
                                }
                                break;
                            case MySQLParser.EOF:
                                {
                                    this.state = 1219;
                                    this.match(MySQLParser.EOF);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    simpleStatement() {
        let _localctx = new SimpleStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, MySQLParser.RULE_simpleStatement);
        try {
            this.state = 1258;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 4, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1224;
                        this.alterStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1225;
                        this.createStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1226;
                        this.dropStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1227;
                        this.renameTableStatement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1228;
                        this.truncateTableStatement();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1229;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 1230;
                        this.importStatement();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1231;
                        this.callStatement();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1232;
                        this.deleteStatement();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1233;
                        this.doStatement();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1234;
                        this.handlerStatement();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1235;
                        this.insertStatement();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 1236;
                        this.loadStatement();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 1237;
                        this.replaceStatement();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 1238;
                        this.selectStatement();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 1239;
                        this.updateStatement();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 1240;
                        this.transactionOrLockingStatement();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 1241;
                        this.replicationStatement();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 1242;
                        this.preparedStatement();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 1243;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 1244;
                        this.cloneStatement();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 1245;
                        this.accountManagementStatement();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 1246;
                        this.tableAdministrationStatement();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 1247;
                        this.installUninstallStatment();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(_localctx, 23);
                    {
                        this.state = 1248;
                        this.setStatement();
                    }
                    break;
                case 24:
                    this.enterOuterAlt(_localctx, 24);
                    {
                        this.state = 1249;
                        this.showStatement();
                    }
                    break;
                case 25:
                    this.enterOuterAlt(_localctx, 25);
                    {
                        this.state = 1250;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 1251;
                        this.resourceGroupManagement();
                    }
                    break;
                case 26:
                    this.enterOuterAlt(_localctx, 26);
                    {
                        this.state = 1252;
                        this.otherAdministrativeStatement();
                    }
                    break;
                case 27:
                    this.enterOuterAlt(_localctx, 27);
                    {
                        this.state = 1253;
                        this.utilityStatement();
                    }
                    break;
                case 28:
                    this.enterOuterAlt(_localctx, 28);
                    {
                        this.state = 1254;
                        if (!(this.serverVersion >= 50604)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50604");
                        }
                        this.state = 1255;
                        this.getDiagnostics();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(_localctx, 29);
                    {
                        this.state = 1256;
                        this.signalStatement();
                    }
                    break;
                case 30:
                    this.enterOuterAlt(_localctx, 30);
                    {
                        this.state = 1257;
                        this.resignalStatement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterStatement() {
        let _localctx = new AlterStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, MySQLParser.RULE_alterStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1260;
                this.match(MySQLParser.ALTER_SYMBOL);
                this.state = 1287;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 7, this._ctx)) {
                    case 1:
                        {
                            this.state = 1261;
                            this.alterTable();
                        }
                        break;
                    case 2:
                        {
                            this.state = 1262;
                            this.alterDatabase();
                        }
                        break;
                    case 3:
                        {
                            this.state = 1263;
                            this.match(MySQLParser.PROCEDURE_SYMBOL);
                            this.state = 1264;
                            this.procedureRef();
                            this.state = 1266;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MySQLParser.COMMENT_SYMBOL) | (1 << MySQLParser.CONTAINS_SYMBOL) | (1 << MySQLParser.LANGUAGE_SYMBOL) | (1 << MySQLParser.NO_SYMBOL))) !== 0) || _la === MySQLParser.DETERMINISTIC_SYMBOL || ((((_la - 567)) & ~0x1F) === 0 && ((1 << (_la - 567)) & ((1 << (MySQLParser.MODIFIES_SYMBOL - 567)) | (1 << (MySQLParser.NOT_SYMBOL - 567)) | (1 << (MySQLParser.READS_SYMBOL - 567)))) !== 0) || _la === MySQLParser.SQL_SYMBOL) {
                                {
                                    this.state = 1265;
                                    this.routineAlterOptions();
                                }
                            }
                        }
                        break;
                    case 4:
                        {
                            this.state = 1268;
                            this.match(MySQLParser.FUNCTION_SYMBOL);
                            this.state = 1269;
                            this.functionRef();
                            this.state = 1271;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MySQLParser.COMMENT_SYMBOL) | (1 << MySQLParser.CONTAINS_SYMBOL) | (1 << MySQLParser.LANGUAGE_SYMBOL) | (1 << MySQLParser.NO_SYMBOL))) !== 0) || _la === MySQLParser.DETERMINISTIC_SYMBOL || ((((_la - 567)) & ~0x1F) === 0 && ((1 << (_la - 567)) & ((1 << (MySQLParser.MODIFIES_SYMBOL - 567)) | (1 << (MySQLParser.NOT_SYMBOL - 567)) | (1 << (MySQLParser.READS_SYMBOL - 567)))) !== 0) || _la === MySQLParser.SQL_SYMBOL) {
                                {
                                    this.state = 1270;
                                    this.routineAlterOptions();
                                }
                            }
                        }
                        break;
                    case 5:
                        {
                            this.state = 1273;
                            this.alterView();
                        }
                        break;
                    case 6:
                        {
                            this.state = 1274;
                            this.alterEvent();
                        }
                        break;
                    case 7:
                        {
                            this.state = 1275;
                            this.alterTablespace();
                        }
                        break;
                    case 8:
                        {
                            this.state = 1276;
                            if (!(this.serverVersion >= 80014)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                            }
                            this.state = 1277;
                            this.alterUndoTablespace();
                        }
                        break;
                    case 9:
                        {
                            this.state = 1278;
                            this.alterLogfileGroup();
                        }
                        break;
                    case 10:
                        {
                            this.state = 1279;
                            this.alterServer();
                        }
                        break;
                    case 11:
                        {
                            this.state = 1280;
                            if (!(this.serverVersion >= 50713)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50713");
                            }
                            this.state = 1281;
                            this.match(MySQLParser.INSTANCE_SYMBOL);
                            this.state = 1282;
                            this.match(MySQLParser.ROTATE_SYMBOL);
                            this.state = 1283;
                            this.textOrIdentifier();
                            this.state = 1284;
                            this.match(MySQLParser.MASTER_SYMBOL);
                            this.state = 1285;
                            this.match(MySQLParser.KEY_SYMBOL);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterDatabase() {
        let _localctx = new AlterDatabaseContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, MySQLParser.RULE_alterDatabase);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1289;
                this.match(MySQLParser.DATABASE_SYMBOL);
                this.state = 1290;
                this.schemaRef();
                this.state = 1301;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 9, this._ctx)) {
                    case 1:
                        {
                            this.state = 1292;
                            this._errHandler.sync(this);
                            _alt = 1;
                            do {
                                switch (_alt) {
                                    case 1:
                                        {
                                            {
                                                this.state = 1291;
                                                this.createDatabaseOption();
                                            }
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                                this.state = 1294;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 8, this._ctx);
                            } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                        }
                        break;
                    case 2:
                        {
                            this.state = 1296;
                            if (!(this.serverVersion < 80000)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80000");
                            }
                            this.state = 1297;
                            this.match(MySQLParser.UPGRADE_SYMBOL);
                            this.state = 1298;
                            this.match(MySQLParser.DATA_SYMBOL);
                            this.state = 1299;
                            this.match(MySQLParser.DIRECTORY_SYMBOL);
                            this.state = 1300;
                            this.match(MySQLParser.NAME_SYMBOL);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterEvent() {
        let _localctx = new AlterEventContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, MySQLParser.RULE_alterEvent);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1304;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.DEFINER_SYMBOL) {
                    {
                        this.state = 1303;
                        this.definerClause();
                    }
                }
                this.state = 1306;
                this.match(MySQLParser.EVENT_SYMBOL);
                this.state = 1307;
                this.eventRef();
                this.state = 1311;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 11, this._ctx)) {
                    case 1:
                        {
                            this.state = 1308;
                            this.match(MySQLParser.ON_SYMBOL);
                            this.state = 1309;
                            this.match(MySQLParser.SCHEDULE_SYMBOL);
                            this.state = 1310;
                            this.schedule();
                        }
                        break;
                }
                this.state = 1319;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ON_SYMBOL) {
                    {
                        this.state = 1313;
                        this.match(MySQLParser.ON_SYMBOL);
                        this.state = 1314;
                        this.match(MySQLParser.COMPLETION_SYMBOL);
                        this.state = 1316;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.NOT_SYMBOL) {
                            {
                                this.state = 1315;
                                this.match(MySQLParser.NOT_SYMBOL);
                            }
                        }
                        this.state = 1318;
                        this.match(MySQLParser.PRESERVE_SYMBOL);
                    }
                }
                this.state = 1324;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.RENAME_SYMBOL) {
                    {
                        this.state = 1321;
                        this.match(MySQLParser.RENAME_SYMBOL);
                        this.state = 1322;
                        this.match(MySQLParser.TO_SYMBOL);
                        this.state = 1323;
                        this.identifier();
                    }
                }
                this.state = 1332;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case MySQLParser.ENABLE_SYMBOL:
                        {
                            this.state = 1326;
                            this.match(MySQLParser.ENABLE_SYMBOL);
                        }
                        break;
                    case MySQLParser.DISABLE_SYMBOL:
                        {
                            this.state = 1327;
                            this.match(MySQLParser.DISABLE_SYMBOL);
                            this.state = 1330;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.ON_SYMBOL) {
                                {
                                    this.state = 1328;
                                    this.match(MySQLParser.ON_SYMBOL);
                                    this.state = 1329;
                                    this.match(MySQLParser.SLAVE_SYMBOL);
                                }
                            }
                        }
                        break;
                    case MySQLParser.EOF:
                    case MySQLParser.COMMENT_SYMBOL:
                    case MySQLParser.DO_SYMBOL:
                    case MySQLParser.SEMICOLON_SYMBOL:
                        break;
                    default:
                        break;
                }
                this.state = 1336;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.COMMENT_SYMBOL) {
                    {
                        this.state = 1334;
                        this.match(MySQLParser.COMMENT_SYMBOL);
                        this.state = 1335;
                        this.textLiteral();
                    }
                }
                this.state = 1340;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.DO_SYMBOL) {
                    {
                        this.state = 1338;
                        this.match(MySQLParser.DO_SYMBOL);
                        this.state = 1339;
                        this.compoundStatement();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterLogfileGroup() {
        let _localctx = new AlterLogfileGroupContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, MySQLParser.RULE_alterLogfileGroup);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1342;
                this.match(MySQLParser.LOGFILE_SYMBOL);
                this.state = 1343;
                this.match(MySQLParser.GROUP_SYMBOL);
                this.state = 1344;
                this.logfileGroupRef();
                this.state = 1345;
                this.match(MySQLParser.ADD_SYMBOL);
                this.state = 1346;
                this.match(MySQLParser.UNDOFILE_SYMBOL);
                this.state = 1347;
                this.textLiteral();
                this.state = 1349;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ENGINE_SYMBOL || _la === MySQLParser.INITIAL_SIZE_SYMBOL || _la === MySQLParser.NO_WAIT_SYMBOL || _la === MySQLParser.STORAGE_SYMBOL || _la === MySQLParser.WAIT_SYMBOL) {
                    {
                        this.state = 1348;
                        this.alterLogfileGroupOptions();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterLogfileGroupOptions() {
        let _localctx = new AlterLogfileGroupOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, MySQLParser.RULE_alterLogfileGroupOptions);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1351;
                this.alterLogfileGroupOption();
                this.state = 1358;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.ENGINE_SYMBOL || _la === MySQLParser.INITIAL_SIZE_SYMBOL || _la === MySQLParser.NO_WAIT_SYMBOL || _la === MySQLParser.STORAGE_SYMBOL || _la === MySQLParser.WAIT_SYMBOL || _la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 1353;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.COMMA_SYMBOL) {
                                {
                                    this.state = 1352;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                }
                            }
                            this.state = 1355;
                            this.alterLogfileGroupOption();
                        }
                    }
                    this.state = 1360;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterLogfileGroupOption() {
        let _localctx = new AlterLogfileGroupOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, MySQLParser.RULE_alterLogfileGroupOption);
        try {
            this.state = 1364;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.INITIAL_SIZE_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1361;
                        this.tsOptionInitialSize();
                    }
                    break;
                case MySQLParser.ENGINE_SYMBOL:
                case MySQLParser.STORAGE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1362;
                        this.tsOptionEngine();
                    }
                    break;
                case MySQLParser.NO_WAIT_SYMBOL:
                case MySQLParser.WAIT_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1363;
                        this.tsOptionWait();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterServer() {
        let _localctx = new AlterServerContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, MySQLParser.RULE_alterServer);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1366;
                this.match(MySQLParser.SERVER_SYMBOL);
                this.state = 1367;
                this.serverRef();
                this.state = 1368;
                this.serverOptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterTable() {
        let _localctx = new AlterTableContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, MySQLParser.RULE_alterTable);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1371;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 23, this._ctx)) {
                    case 1:
                        {
                            this.state = 1370;
                            this.onlineOption();
                        }
                        break;
                }
                this.state = 1375;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 24, this._ctx)) {
                    case 1:
                        {
                            this.state = 1373;
                            if (!(this.serverVersion < 50700)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 50700");
                            }
                            this.state = 1374;
                            this.match(MySQLParser.IGNORE_SYMBOL);
                        }
                        break;
                }
                this.state = 1377;
                this.match(MySQLParser.TABLE_SYMBOL);
                this.state = 1378;
                this.tableRef();
                this.state = 1380;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 25, this._ctx)) {
                    case 1:
                        {
                            this.state = 1379;
                            this.alterTableActions();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterTableActions() {
        let _localctx = new AlterTableActionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, MySQLParser.RULE_alterTableActions);
        try {
            this.state = 1395;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 28, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1382;
                        this.alterCommandList();
                        this.state = 1385;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case MySQLParser.PARTITION_SYMBOL:
                                {
                                    this.state = 1383;
                                    this.partitionClause();
                                }
                                break;
                            case MySQLParser.REMOVE_SYMBOL:
                                {
                                    this.state = 1384;
                                    this.removePartitioning();
                                }
                                break;
                            case MySQLParser.EOF:
                            case MySQLParser.SEMICOLON_SYMBOL:
                                break;
                            default:
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1387;
                        this.partitionClause();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1388;
                        this.removePartitioning();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1392;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 27, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1389;
                                    this.alterCommandsModifierList();
                                    this.state = 1390;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                }
                                break;
                        }
                        this.state = 1394;
                        this.standaloneAlterCommands();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterCommandList() {
        let _localctx = new AlterCommandListContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, MySQLParser.RULE_alterCommandList);
        try {
            this.state = 1404;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 30, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1397;
                        this.alterCommandsModifierList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1401;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 29, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1398;
                                    this.alterCommandsModifierList();
                                    this.state = 1399;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                }
                                break;
                        }
                        this.state = 1403;
                        this.alterList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterCommandsModifierList() {
        let _localctx = new AlterCommandsModifierListContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, MySQLParser.RULE_alterCommandsModifierList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1406;
                this.alterCommandsModifier();
                this.state = 1411;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 31, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1407;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 1408;
                                this.alterCommandsModifier();
                            }
                        }
                    }
                    this.state = 1413;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 31, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    standaloneAlterCommands() {
        let _localctx = new StandaloneAlterCommandsContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, MySQLParser.RULE_standaloneAlterCommands);
        let _la;
        try {
            this.state = 1421;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 32, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1414;
                        this.match(MySQLParser.DISCARD_SYMBOL);
                        this.state = 1415;
                        this.match(MySQLParser.TABLESPACE_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1416;
                        this.match(MySQLParser.IMPORT_SYMBOL);
                        this.state = 1417;
                        this.match(MySQLParser.TABLESPACE_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1418;
                        this.alterPartition();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1419;
                        if (!(this.serverVersion >= 80014)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                        }
                        this.state = 1420;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.SECONDARY_LOAD_SYMBOL || _la === MySQLParser.SECONDARY_UNLOAD_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterPartition() {
        let _localctx = new AlterPartitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, MySQLParser.RULE_alterPartition);
        let _la;
        try {
            this.state = 1520;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 46, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1423;
                        this.match(MySQLParser.ADD_SYMBOL);
                        this.state = 1424;
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.state = 1426;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.LOCAL_SYMBOL || _la === MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
                            {
                                this.state = 1425;
                                this.noWriteToBinLog();
                            }
                        }
                        this.state = 1431;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case MySQLParser.OPEN_PAR_SYMBOL:
                                {
                                    this.state = 1428;
                                    this.partitionDefinitions();
                                }
                                break;
                            case MySQLParser.PARTITIONS_SYMBOL:
                                {
                                    this.state = 1429;
                                    this.match(MySQLParser.PARTITIONS_SYMBOL);
                                    this.state = 1430;
                                    this.real_ulong_number();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1433;
                        this.match(MySQLParser.DROP_SYMBOL);
                        this.state = 1434;
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.state = 1435;
                        this.identifierList();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1436;
                        this.match(MySQLParser.REBUILD_SYMBOL);
                        this.state = 1437;
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.state = 1439;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 35, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1438;
                                    this.noWriteToBinLog();
                                }
                                break;
                        }
                        this.state = 1441;
                        this.allOrPartitionNameList();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1442;
                        this.match(MySQLParser.OPTIMIZE_SYMBOL);
                        this.state = 1443;
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.state = 1445;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 36, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1444;
                                    this.noWriteToBinLog();
                                }
                                break;
                        }
                        this.state = 1447;
                        this.allOrPartitionNameList();
                        this.state = 1449;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.LOCAL_SYMBOL || _la === MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
                            {
                                this.state = 1448;
                                this.noWriteToBinLog();
                            }
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1451;
                        this.match(MySQLParser.ANALYZE_SYMBOL);
                        this.state = 1452;
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.state = 1454;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 38, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1453;
                                    this.noWriteToBinLog();
                                }
                                break;
                        }
                        this.state = 1456;
                        this.allOrPartitionNameList();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1457;
                        this.match(MySQLParser.CHECK_SYMBOL);
                        this.state = 1458;
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.state = 1459;
                        this.allOrPartitionNameList();
                        this.state = 1463;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.CHANGED_SYMBOL || _la === MySQLParser.EXTENDED_SYMBOL || _la === MySQLParser.FAST_SYMBOL || _la === MySQLParser.MEDIUM_SYMBOL || _la === MySQLParser.QUICK_SYMBOL || _la === MySQLParser.FOR_SYMBOL) {
                            {
                                {
                                    this.state = 1460;
                                    this.checkOption();
                                }
                            }
                            this.state = 1465;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1466;
                        this.match(MySQLParser.REPAIR_SYMBOL);
                        this.state = 1467;
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.state = 1469;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 40, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1468;
                                    this.noWriteToBinLog();
                                }
                                break;
                        }
                        this.state = 1471;
                        this.allOrPartitionNameList();
                        this.state = 1475;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.EXTENDED_SYMBOL || _la === MySQLParser.QUICK_SYMBOL || _la === MySQLParser.USE_FRM_SYMBOL) {
                            {
                                {
                                    this.state = 1472;
                                    this.repairType();
                                }
                            }
                            this.state = 1477;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1478;
                        this.match(MySQLParser.COALESCE_SYMBOL);
                        this.state = 1479;
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.state = 1481;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.LOCAL_SYMBOL || _la === MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
                            {
                                this.state = 1480;
                                this.noWriteToBinLog();
                            }
                        }
                        this.state = 1483;
                        this.real_ulong_number();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1484;
                        this.match(MySQLParser.TRUNCATE_SYMBOL);
                        this.state = 1485;
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.state = 1486;
                        this.allOrPartitionNameList();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1487;
                        this.reorgPartitionRule();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1488;
                        this.match(MySQLParser.REORGANIZE_SYMBOL);
                        this.state = 1489;
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.state = 1491;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 43, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1490;
                                    this.noWriteToBinLog();
                                }
                                break;
                        }
                        this.state = 1497;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 44, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1493;
                                    this.identifierList();
                                    this.state = 1494;
                                    this.match(MySQLParser.INTO_SYMBOL);
                                    this.state = 1495;
                                    this.partitionDefinitions();
                                }
                                break;
                        }
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 1499;
                        this.match(MySQLParser.EXCHANGE_SYMBOL);
                        this.state = 1500;
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.state = 1501;
                        this.identifier();
                        this.state = 1502;
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.state = 1503;
                        this.match(MySQLParser.TABLE_SYMBOL);
                        this.state = 1504;
                        this.tableRef();
                        this.state = 1506;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 45, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1505;
                                    this.withValidation();
                                }
                                break;
                        }
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 1508;
                        if (!(this.serverVersion >= 50704)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50704");
                        }
                        this.state = 1509;
                        this.match(MySQLParser.DISCARD_SYMBOL);
                        this.state = 1510;
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.state = 1511;
                        this.allOrPartitionNameList();
                        this.state = 1512;
                        this.match(MySQLParser.TABLESPACE_SYMBOL);
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 1514;
                        if (!(this.serverVersion >= 50704)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50704");
                        }
                        this.state = 1515;
                        this.match(MySQLParser.IMPORT_SYMBOL);
                        this.state = 1516;
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.state = 1517;
                        this.allOrPartitionNameList();
                        this.state = 1518;
                        this.match(MySQLParser.TABLESPACE_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterList() {
        let _localctx = new AlterListContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, MySQLParser.RULE_alterList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1524;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 47, this._ctx)) {
                    case 1:
                        {
                            this.state = 1522;
                            this.alterListItem();
                        }
                        break;
                    case 2:
                        {
                            this.state = 1523;
                            this.createTableOptionsSpaceSeparated();
                        }
                        break;
                }
                this.state = 1534;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 1526;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 1530;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 48, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1527;
                                        this.alterListItem();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 1528;
                                        this.alterCommandsModifier();
                                    }
                                    break;
                                case 3:
                                    {
                                        this.state = 1529;
                                        this.createTableOptionsSpaceSeparated();
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 1536;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterCommandsModifier() {
        let _localctx = new AlterCommandsModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, MySQLParser.RULE_alterCommandsModifier);
        try {
            this.state = 1540;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 50, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1537;
                        this.alterAlgorithmOption();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1538;
                        this.alterLockOption();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1539;
                        this.withValidation();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterListItem() {
        let _localctx = new AlterListItemContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, MySQLParser.RULE_alterListItem);
        let _la;
        try {
            this.state = 1675;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 70, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1542;
                        this.match(MySQLParser.ADD_SYMBOL);
                        this.state = 1544;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 51, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1543;
                                    this.match(MySQLParser.COLUMN_SYMBOL);
                                }
                                break;
                        }
                        this.state = 1558;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 54, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1546;
                                    this.identifier();
                                    this.state = 1547;
                                    this.fieldDefinition();
                                    this.state = 1549;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 52, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 1548;
                                                this.checkOrReferences();
                                            }
                                            break;
                                    }
                                    this.state = 1552;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === MySQLParser.AFTER_SYMBOL || _la === MySQLParser.FIRST_SYMBOL) {
                                        {
                                            this.state = 1551;
                                            this.place();
                                        }
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.state = 1554;
                                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                    this.state = 1555;
                                    this.tableElementList();
                                    this.state = 1556;
                                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1560;
                        this.match(MySQLParser.ADD_SYMBOL);
                        this.state = 1561;
                        this.tableConstraintDef();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1562;
                        this.match(MySQLParser.CHANGE_SYMBOL);
                        this.state = 1564;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 55, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1563;
                                    this.match(MySQLParser.COLUMN_SYMBOL);
                                }
                                break;
                        }
                        this.state = 1566;
                        this.columnInternalRef();
                        this.state = 1567;
                        this.identifier();
                        this.state = 1568;
                        this.fieldDefinition();
                        this.state = 1570;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.AFTER_SYMBOL || _la === MySQLParser.FIRST_SYMBOL) {
                            {
                                this.state = 1569;
                                this.place();
                            }
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1572;
                        this.match(MySQLParser.MODIFY_SYMBOL);
                        this.state = 1574;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 57, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1573;
                                    this.match(MySQLParser.COLUMN_SYMBOL);
                                }
                                break;
                        }
                        this.state = 1576;
                        this.columnInternalRef();
                        this.state = 1577;
                        this.fieldDefinition();
                        this.state = 1579;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.AFTER_SYMBOL || _la === MySQLParser.FIRST_SYMBOL) {
                            {
                                this.state = 1578;
                                this.place();
                            }
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1581;
                        this.match(MySQLParser.DROP_SYMBOL);
                        this.state = 1604;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 63, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1583;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 59, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 1582;
                                                this.match(MySQLParser.COLUMN_SYMBOL);
                                            }
                                            break;
                                    }
                                    this.state = 1585;
                                    this.columnInternalRef();
                                    this.state = 1587;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === MySQLParser.CASCADE_SYMBOL || _la === MySQLParser.RESTRICT_SYMBOL) {
                                        {
                                            this.state = 1586;
                                            this.restrict();
                                        }
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.state = 1589;
                                    this.match(MySQLParser.FOREIGN_SYMBOL);
                                    this.state = 1590;
                                    this.match(MySQLParser.KEY_SYMBOL);
                                    this.state = 1597;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 62, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 1591;
                                                if (!(this.serverVersion >= 50700)) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50700");
                                                }
                                                this.state = 1592;
                                                this.columnInternalRef();
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.state = 1593;
                                                if (!(this.serverVersion < 50700)) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 50700");
                                                }
                                                this.state = 1595;
                                                this._errHandler.sync(this);
                                                switch (this.interpreter.adaptivePredict(this._input, 61, this._ctx)) {
                                                    case 1:
                                                        {
                                                            this.state = 1594;
                                                            this.columnInternalRef();
                                                        }
                                                        break;
                                                }
                                            }
                                            break;
                                    }
                                }
                                break;
                            case 3:
                                {
                                    this.state = 1599;
                                    this.match(MySQLParser.PRIMARY_SYMBOL);
                                    this.state = 1600;
                                    this.match(MySQLParser.KEY_SYMBOL);
                                }
                                break;
                            case 4:
                                {
                                    this.state = 1601;
                                    this.keyOrIndex();
                                    this.state = 1602;
                                    this.indexRef();
                                }
                                break;
                        }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1606;
                        this.match(MySQLParser.DISABLE_SYMBOL);
                        this.state = 1607;
                        this.match(MySQLParser.KEYS_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1608;
                        this.match(MySQLParser.ENABLE_SYMBOL);
                        this.state = 1609;
                        this.match(MySQLParser.KEYS_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1610;
                        this.match(MySQLParser.ALTER_SYMBOL);
                        this.state = 1612;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 64, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1611;
                                    this.match(MySQLParser.COLUMN_SYMBOL);
                                }
                                break;
                        }
                        this.state = 1614;
                        this.columnInternalRef();
                        this.state = 1624;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case MySQLParser.SET_SYMBOL:
                                {
                                    this.state = 1615;
                                    this.match(MySQLParser.SET_SYMBOL);
                                    this.state = 1616;
                                    this.match(MySQLParser.DEFAULT_SYMBOL);
                                    this.state = 1620;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 65, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 1617;
                                                if (!(this.serverVersion >= 80014)) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                                                }
                                                this.state = 1618;
                                                this.exprWithParentheses();
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.state = 1619;
                                                this.signedLiteral();
                                            }
                                            break;
                                    }
                                }
                                break;
                            case MySQLParser.DROP_SYMBOL:
                                {
                                    this.state = 1622;
                                    this.match(MySQLParser.DROP_SYMBOL);
                                    this.state = 1623;
                                    this.match(MySQLParser.DEFAULT_SYMBOL);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1626;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 1627;
                        this.match(MySQLParser.ALTER_SYMBOL);
                        this.state = 1628;
                        this.match(MySQLParser.INDEX_SYMBOL);
                        this.state = 1629;
                        this.indexRef();
                        this.state = 1630;
                        this.visibility();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1632;
                        if (!(this.serverVersion >= 80017)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80017");
                        }
                        this.state = 1633;
                        this.match(MySQLParser.ALTER_SYMBOL);
                        this.state = 1634;
                        this.match(MySQLParser.CHECK_SYMBOL);
                        this.state = 1635;
                        this.identifier();
                        this.state = 1636;
                        this.constraintEnforcement();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1638;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 1639;
                        this.match(MySQLParser.RENAME_SYMBOL);
                        this.state = 1640;
                        this.match(MySQLParser.COLUMN_SYMBOL);
                        this.state = 1641;
                        this.columnInternalRef();
                        this.state = 1642;
                        this.match(MySQLParser.TO_SYMBOL);
                        this.state = 1643;
                        this.identifier();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 1645;
                        this.match(MySQLParser.RENAME_SYMBOL);
                        this.state = 1647;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 67, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1646;
                                    _la = this._input.LA(1);
                                    if (!(_la === MySQLParser.AS_SYMBOL || _la === MySQLParser.TO_SYMBOL)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                }
                                break;
                        }
                        this.state = 1649;
                        this.tableName();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 1650;
                        if (!(this.serverVersion >= 50700)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50700");
                        }
                        this.state = 1651;
                        this.match(MySQLParser.RENAME_SYMBOL);
                        this.state = 1652;
                        this.keyOrIndex();
                        this.state = 1653;
                        this.indexRef();
                        this.state = 1654;
                        this.match(MySQLParser.TO_SYMBOL);
                        this.state = 1655;
                        this.indexName();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 1657;
                        this.match(MySQLParser.CONVERT_SYMBOL);
                        this.state = 1658;
                        this.match(MySQLParser.TO_SYMBOL);
                        this.state = 1659;
                        this.charset();
                        this.state = 1663;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 68, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1660;
                                    if (!(this.serverVersion >= 80014)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                                    }
                                    this.state = 1661;
                                    this.match(MySQLParser.DEFAULT_SYMBOL);
                                }
                                break;
                            case 2:
                                {
                                    this.state = 1662;
                                    this.charsetName();
                                }
                                break;
                        }
                        this.state = 1666;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.COLLATE_SYMBOL) {
                            {
                                this.state = 1665;
                                this.collate();
                            }
                        }
                    }
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 1668;
                        this.match(MySQLParser.FORCE_SYMBOL);
                    }
                    break;
                case 16:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 1669;
                        this.match(MySQLParser.ORDER_SYMBOL);
                        this.state = 1670;
                        this.match(MySQLParser.BY_SYMBOL);
                        this.state = 1671;
                        this.alterOrderList();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 1672;
                        if (!(this.serverVersion >= 50708 && this.serverVersion < 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50708 && this.serverVersion < 80000");
                        }
                        this.state = 1673;
                        this.match(MySQLParser.UPGRADE_SYMBOL);
                        this.state = 1674;
                        this.match(MySQLParser.PARTITIONING_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    place() {
        let _localctx = new PlaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, MySQLParser.RULE_place);
        try {
            this.state = 1680;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.AFTER_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1677;
                        this.match(MySQLParser.AFTER_SYMBOL);
                        this.state = 1678;
                        this.identifier();
                    }
                    break;
                case MySQLParser.FIRST_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1679;
                        this.match(MySQLParser.FIRST_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    restrict() {
        let _localctx = new RestrictContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, MySQLParser.RULE_restrict);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1682;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.CASCADE_SYMBOL || _la === MySQLParser.RESTRICT_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterOrderList() {
        let _localctx = new AlterOrderListContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, MySQLParser.RULE_alterOrderList);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1684;
                this.identifier();
                this.state = 1686;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ASC_SYMBOL || _la === MySQLParser.DESC_SYMBOL) {
                    {
                        this.state = 1685;
                        this.direction();
                    }
                }
                this.state = 1695;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 74, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1688;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 1689;
                                this.identifier();
                                this.state = 1691;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === MySQLParser.ASC_SYMBOL || _la === MySQLParser.DESC_SYMBOL) {
                                    {
                                        this.state = 1690;
                                        this.direction();
                                    }
                                }
                            }
                        }
                    }
                    this.state = 1697;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 74, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterAlgorithmOption() {
        let _localctx = new AlterAlgorithmOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, MySQLParser.RULE_alterAlgorithmOption);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1698;
                this.match(MySQLParser.ALGORITHM_SYMBOL);
                this.state = 1700;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 75, this._ctx)) {
                    case 1:
                        {
                            this.state = 1699;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.state = 1704;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 76, this._ctx)) {
                    case 1:
                        {
                            this.state = 1702;
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                            this.state = 1703;
                            this.identifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterLockOption() {
        let _localctx = new AlterLockOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 44, MySQLParser.RULE_alterLockOption);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1706;
                this.match(MySQLParser.LOCK_SYMBOL);
                this.state = 1708;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 77, this._ctx)) {
                    case 1:
                        {
                            this.state = 1707;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.state = 1712;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 78, this._ctx)) {
                    case 1:
                        {
                            this.state = 1710;
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                            this.state = 1711;
                            this.identifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    indexLockAndAlgorithm() {
        let _localctx = new IndexLockAndAlgorithmContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, MySQLParser.RULE_indexLockAndAlgorithm);
        let _la;
        try {
            this.state = 1722;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.ALGORITHM_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1714;
                        this.alterAlgorithmOption();
                        this.state = 1716;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.LOCK_SYMBOL) {
                            {
                                this.state = 1715;
                                this.alterLockOption();
                            }
                        }
                    }
                    break;
                case MySQLParser.LOCK_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1718;
                        this.alterLockOption();
                        this.state = 1720;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.ALGORITHM_SYMBOL) {
                            {
                                this.state = 1719;
                                this.alterAlgorithmOption();
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    withValidation() {
        let _localctx = new WithValidationContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, MySQLParser.RULE_withValidation);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1724;
                if (!(this.serverVersion >= 50706)) {
                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50706");
                }
                this.state = 1725;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.WITH_SYMBOL || _la === MySQLParser.WITHOUT_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1726;
                this.match(MySQLParser.VALIDATION_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    removePartitioning() {
        let _localctx = new RemovePartitioningContext(this._ctx, this.state);
        this.enterRule(_localctx, 50, MySQLParser.RULE_removePartitioning);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1728;
                this.match(MySQLParser.REMOVE_SYMBOL);
                this.state = 1729;
                this.match(MySQLParser.PARTITIONING_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    allOrPartitionNameList() {
        let _localctx = new AllOrPartitionNameListContext(this._ctx, this.state);
        this.enterRule(_localctx, 52, MySQLParser.RULE_allOrPartitionNameList);
        try {
            this.state = 1733;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 82, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1731;
                        this.match(MySQLParser.ALL_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1732;
                        this.identifierList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    reorgPartitionRule() {
        let _localctx = new ReorgPartitionRuleContext(this._ctx, this.state);
        this.enterRule(_localctx, 54, MySQLParser.RULE_reorgPartitionRule);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1735;
                this.match(MySQLParser.REORGANIZE_SYMBOL);
                this.state = 1736;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 1738;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 83, this._ctx)) {
                    case 1:
                        {
                            this.state = 1737;
                            this.noWriteToBinLog();
                        }
                        break;
                }
                this.state = 1744;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 84, this._ctx)) {
                    case 1:
                        {
                            this.state = 1740;
                            this.identifierList();
                            this.state = 1741;
                            this.match(MySQLParser.INTO_SYMBOL);
                            this.state = 1742;
                            this.partitionDefinitions();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterTablespace() {
        let _localctx = new AlterTablespaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 56, MySQLParser.RULE_alterTablespace);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1746;
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                this.state = 1747;
                this.tablespaceRef();
                this.state = 1781;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 90, this._ctx)) {
                    case 1:
                        {
                            this.state = 1748;
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.ADD_SYMBOL || _la === MySQLParser.DROP_SYMBOL)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 1749;
                            this.match(MySQLParser.DATAFILE_SYMBOL);
                            this.state = 1750;
                            this.textLiteral();
                            this.state = 1752;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.AUTOEXTEND_SIZE_SYMBOL || _la === MySQLParser.ENCRYPTION_SYMBOL || _la === MySQLParser.ENGINE_SYMBOL || _la === MySQLParser.INITIAL_SIZE_SYMBOL || _la === MySQLParser.MAX_SIZE_SYMBOL || _la === MySQLParser.NO_WAIT_SYMBOL || _la === MySQLParser.STORAGE_SYMBOL || _la === MySQLParser.WAIT_SYMBOL) {
                                {
                                    this.state = 1751;
                                    this.alterTablespaceOptions();
                                }
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 1754;
                            if (!(this.serverVersion < 80000)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80000");
                            }
                            this.state = 1774;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case MySQLParser.EOF:
                                case MySQLParser.SEMICOLON_SYMBOL:
                                    // tslint:disable-next-line:no-empty
                                    {
                                    }
                                    break;
                                case MySQLParser.CHANGE_SYMBOL:
                                    {
                                        this.state = 1756;
                                        this.match(MySQLParser.CHANGE_SYMBOL);
                                        this.state = 1757;
                                        this.match(MySQLParser.DATAFILE_SYMBOL);
                                        this.state = 1758;
                                        this.textLiteral();
                                        this.state = 1769;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === MySQLParser.AUTOEXTEND_SIZE_SYMBOL || _la === MySQLParser.INITIAL_SIZE_SYMBOL || _la === MySQLParser.MAX_SIZE_SYMBOL) {
                                            {
                                                this.state = 1759;
                                                this.changeTablespaceOption();
                                                this.state = 1766;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                while (_la === MySQLParser.AUTOEXTEND_SIZE_SYMBOL || _la === MySQLParser.INITIAL_SIZE_SYMBOL || _la === MySQLParser.MAX_SIZE_SYMBOL || _la === MySQLParser.COMMA_SYMBOL) {
                                                    {
                                                        {
                                                            this.state = 1761;
                                                            this._errHandler.sync(this);
                                                            _la = this._input.LA(1);
                                                            if (_la === MySQLParser.COMMA_SYMBOL) {
                                                                {
                                                                    this.state = 1760;
                                                                    this.match(MySQLParser.COMMA_SYMBOL);
                                                                }
                                                            }
                                                            this.state = 1763;
                                                            this.changeTablespaceOption();
                                                        }
                                                    }
                                                    this.state = 1768;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                }
                                            }
                                        }
                                    }
                                    break;
                                case MySQLParser.READ_ONLY_SYMBOL:
                                case MySQLParser.READ_WRITE_SYMBOL:
                                    {
                                        this.state = 1771;
                                        _la = this._input.LA(1);
                                        if (!(_la === MySQLParser.READ_ONLY_SYMBOL || _la === MySQLParser.READ_WRITE_SYMBOL)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                    }
                                    break;
                                case MySQLParser.NOT_SYMBOL:
                                    {
                                        this.state = 1772;
                                        this.match(MySQLParser.NOT_SYMBOL);
                                        this.state = 1773;
                                        this.match(MySQLParser.ACCESSIBLE_SYMBOL);
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                        }
                        break;
                    case 3:
                        {
                            this.state = 1776;
                            this.match(MySQLParser.RENAME_SYMBOL);
                            this.state = 1777;
                            this.match(MySQLParser.TO_SYMBOL);
                            this.state = 1778;
                            this.identifier();
                        }
                        break;
                    case 4:
                        {
                            this.state = 1779;
                            if (!(this.serverVersion >= 80014)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                            }
                            this.state = 1780;
                            this.alterTablespaceOptions();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterUndoTablespace() {
        let _localctx = new AlterUndoTablespaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 58, MySQLParser.RULE_alterUndoTablespace);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1783;
                this.match(MySQLParser.UNDO_SYMBOL);
                this.state = 1784;
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                this.state = 1785;
                this.tablespaceRef();
                this.state = 1786;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 1787;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.ACTIVE_SYMBOL || _la === MySQLParser.INACTIVE_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1789;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ENGINE_SYMBOL || _la === MySQLParser.STORAGE_SYMBOL) {
                    {
                        this.state = 1788;
                        this.undoTableSpaceOptions();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    undoTableSpaceOptions() {
        let _localctx = new UndoTableSpaceOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 60, MySQLParser.RULE_undoTableSpaceOptions);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1791;
                this.undoTableSpaceOption();
                this.state = 1798;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.ENGINE_SYMBOL || _la === MySQLParser.STORAGE_SYMBOL || _la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 1793;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.COMMA_SYMBOL) {
                                {
                                    this.state = 1792;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                }
                            }
                            this.state = 1795;
                            this.undoTableSpaceOption();
                        }
                    }
                    this.state = 1800;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    undoTableSpaceOption() {
        let _localctx = new UndoTableSpaceOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 62, MySQLParser.RULE_undoTableSpaceOption);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1801;
                this.tsOptionEngine();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterTablespaceOptions() {
        let _localctx = new AlterTablespaceOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 64, MySQLParser.RULE_alterTablespaceOptions);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1803;
                this.alterTablespaceOption();
                this.state = 1810;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.AUTOEXTEND_SIZE_SYMBOL || _la === MySQLParser.ENCRYPTION_SYMBOL || _la === MySQLParser.ENGINE_SYMBOL || _la === MySQLParser.INITIAL_SIZE_SYMBOL || _la === MySQLParser.MAX_SIZE_SYMBOL || _la === MySQLParser.NO_WAIT_SYMBOL || _la === MySQLParser.STORAGE_SYMBOL || _la === MySQLParser.WAIT_SYMBOL || _la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 1805;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.COMMA_SYMBOL) {
                                {
                                    this.state = 1804;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                }
                            }
                            this.state = 1807;
                            this.alterTablespaceOption();
                        }
                    }
                    this.state = 1812;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterTablespaceOption() {
        let _localctx = new AlterTablespaceOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 66, MySQLParser.RULE_alterTablespaceOption);
        try {
            this.state = 1823;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.INITIAL_SIZE_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1813;
                        this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
                        this.state = 1815;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 96, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1814;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.state = 1817;
                        this.sizeNumber();
                    }
                    break;
                case MySQLParser.AUTOEXTEND_SIZE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1818;
                        this.tsOptionAutoextendSize();
                    }
                    break;
                case MySQLParser.MAX_SIZE_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1819;
                        this.tsOptionMaxSize();
                    }
                    break;
                case MySQLParser.ENGINE_SYMBOL:
                case MySQLParser.STORAGE_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1820;
                        this.tsOptionEngine();
                    }
                    break;
                case MySQLParser.NO_WAIT_SYMBOL:
                case MySQLParser.WAIT_SYMBOL:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1821;
                        this.tsOptionWait();
                    }
                    break;
                case MySQLParser.ENCRYPTION_SYMBOL:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1822;
                        this.tsOptionEncryption();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    changeTablespaceOption() {
        let _localctx = new ChangeTablespaceOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 68, MySQLParser.RULE_changeTablespaceOption);
        try {
            this.state = 1832;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.INITIAL_SIZE_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1825;
                        this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
                        this.state = 1827;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 98, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1826;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.state = 1829;
                        this.sizeNumber();
                    }
                    break;
                case MySQLParser.AUTOEXTEND_SIZE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1830;
                        this.tsOptionAutoextendSize();
                    }
                    break;
                case MySQLParser.MAX_SIZE_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1831;
                        this.tsOptionMaxSize();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterView() {
        let _localctx = new AlterViewContext(this._ctx, this.state);
        this.enterRule(_localctx, 70, MySQLParser.RULE_alterView);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1835;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ALGORITHM_SYMBOL) {
                    {
                        this.state = 1834;
                        this.viewAlgorithm();
                    }
                }
                this.state = 1838;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.DEFINER_SYMBOL) {
                    {
                        this.state = 1837;
                        this.definerClause();
                    }
                }
                this.state = 1841;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.SQL_SYMBOL) {
                    {
                        this.state = 1840;
                        this.viewSuid();
                    }
                }
                this.state = 1843;
                this.match(MySQLParser.VIEW_SYMBOL);
                this.state = 1844;
                this.viewRef();
                this.state = 1845;
                this.viewTail();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    viewTail() {
        let _localctx = new ViewTailContext(this._ctx, this.state);
        this.enterRule(_localctx, 72, MySQLParser.RULE_viewTail);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1848;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.OPEN_PAR_SYMBOL) {
                    {
                        this.state = 1847;
                        this.columnInternalRefList();
                    }
                }
                this.state = 1850;
                this.match(MySQLParser.AS_SYMBOL);
                this.state = 1851;
                this.viewSelect();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    viewSelect() {
        let _localctx = new ViewSelectContext(this._ctx, this.state);
        this.enterRule(_localctx, 74, MySQLParser.RULE_viewSelect);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1853;
                this.queryExpressionOrParens();
                this.state = 1855;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.WITH_SYMBOL) {
                    {
                        this.state = 1854;
                        this.viewCheckOption();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    viewCheckOption() {
        let _localctx = new ViewCheckOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 76, MySQLParser.RULE_viewCheckOption);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1857;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 1859;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.CASCADED_SYMBOL || _la === MySQLParser.LOCAL_SYMBOL) {
                    {
                        this.state = 1858;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.CASCADED_SYMBOL || _la === MySQLParser.LOCAL_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1861;
                this.match(MySQLParser.CHECK_SYMBOL);
                this.state = 1862;
                this.match(MySQLParser.OPTION_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createStatement() {
        let _localctx = new CreateStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 78, MySQLParser.RULE_createStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1864;
                this.match(MySQLParser.CREATE_SYMBOL);
                this.state = 1883;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 106, this._ctx)) {
                    case 1:
                        {
                            this.state = 1865;
                            this.createDatabase();
                        }
                        break;
                    case 2:
                        {
                            this.state = 1866;
                            this.createTable();
                        }
                        break;
                    case 3:
                        {
                            this.state = 1867;
                            this.createFunction();
                        }
                        break;
                    case 4:
                        {
                            this.state = 1868;
                            this.createProcedure();
                        }
                        break;
                    case 5:
                        {
                            this.state = 1869;
                            this.createUdf();
                        }
                        break;
                    case 6:
                        {
                            this.state = 1870;
                            this.createLogfileGroup();
                        }
                        break;
                    case 7:
                        {
                            this.state = 1871;
                            this.createView();
                        }
                        break;
                    case 8:
                        {
                            this.state = 1872;
                            this.createTrigger();
                        }
                        break;
                    case 9:
                        {
                            this.state = 1873;
                            this.createIndex();
                        }
                        break;
                    case 10:
                        {
                            this.state = 1874;
                            this.createServer();
                        }
                        break;
                    case 11:
                        {
                            this.state = 1875;
                            this.createTablespace();
                        }
                        break;
                    case 12:
                        {
                            this.state = 1876;
                            this.createEvent();
                        }
                        break;
                    case 13:
                        {
                            this.state = 1877;
                            if (!(this.serverVersion >= 80000)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                            }
                            this.state = 1878;
                            this.createRole();
                        }
                        break;
                    case 14:
                        {
                            this.state = 1879;
                            if (!(this.serverVersion >= 80011)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80011");
                            }
                            this.state = 1880;
                            this.createSpatialReference();
                        }
                        break;
                    case 15:
                        {
                            this.state = 1881;
                            if (!(this.serverVersion >= 80014)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                            }
                            this.state = 1882;
                            this.createUndoTablespace();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createDatabase() {
        let _localctx = new CreateDatabaseContext(this._ctx, this.state);
        this.enterRule(_localctx, 80, MySQLParser.RULE_createDatabase);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1885;
                this.match(MySQLParser.DATABASE_SYMBOL);
                this.state = 1887;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 107, this._ctx)) {
                    case 1:
                        {
                            this.state = 1886;
                            this.ifNotExists();
                        }
                        break;
                }
                this.state = 1889;
                this.schemaName();
                this.state = 1893;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 108, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1890;
                                this.createDatabaseOption();
                            }
                        }
                    }
                    this.state = 1895;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 108, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createDatabaseOption() {
        let _localctx = new CreateDatabaseOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 82, MySQLParser.RULE_createDatabaseOption);
        try {
            this.state = 1900;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 109, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1896;
                        this.defaultCharset();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1897;
                        this.defaultCollation();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1898;
                        if (!(this.serverVersion >= 80016)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80016");
                        }
                        this.state = 1899;
                        this.defaultEncryption();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createTable() {
        let _localctx = new CreateTableContext(this._ctx, this.state);
        this.enterRule(_localctx, 84, MySQLParser.RULE_createTable);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1903;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.TEMPORARY_SYMBOL) {
                    {
                        this.state = 1902;
                        this.match(MySQLParser.TEMPORARY_SYMBOL);
                    }
                }
                this.state = 1905;
                this.match(MySQLParser.TABLE_SYMBOL);
                this.state = 1907;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 111, this._ctx)) {
                    case 1:
                        {
                            this.state = 1906;
                            this.ifNotExists();
                        }
                        break;
                }
                this.state = 1909;
                this.tableName();
                this.state = 1932;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 116, this._ctx)) {
                    case 1:
                        {
                            this.state = 1914;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 112, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1910;
                                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                        this.state = 1911;
                                        this.tableElementList();
                                        this.state = 1912;
                                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                    }
                                    break;
                            }
                            this.state = 1917;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 113, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1916;
                                        this.createTableOptions();
                                    }
                                    break;
                            }
                            this.state = 1920;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 114, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1919;
                                        this.partitionClause();
                                    }
                                    break;
                            }
                            this.state = 1923;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 115, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1922;
                                        this.duplicateAsQueryExpression();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 1925;
                            this.match(MySQLParser.LIKE_SYMBOL);
                            this.state = 1926;
                            this.tableRef();
                        }
                        break;
                    case 3:
                        {
                            this.state = 1927;
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.state = 1928;
                            this.match(MySQLParser.LIKE_SYMBOL);
                            this.state = 1929;
                            this.tableRef();
                            this.state = 1930;
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableElementList() {
        let _localctx = new TableElementListContext(this._ctx, this.state);
        this.enterRule(_localctx, 86, MySQLParser.RULE_tableElementList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1934;
                this.tableElement();
                this.state = 1939;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 1935;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 1936;
                            this.tableElement();
                        }
                    }
                    this.state = 1941;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableElement() {
        let _localctx = new TableElementContext(this._ctx, this.state);
        this.enterRule(_localctx, 88, MySQLParser.RULE_tableElement);
        try {
            this.state = 1944;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 118, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1942;
                        this.columnDefinition();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1943;
                        this.tableConstraintDef();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    duplicateAsQueryExpression() {
        let _localctx = new DuplicateAsQueryExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 90, MySQLParser.RULE_duplicateAsQueryExpression);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1947;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 119, this._ctx)) {
                    case 1:
                        {
                            this.state = 1946;
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.IGNORE_SYMBOL || _la === MySQLParser.REPLACE_SYMBOL)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                }
                this.state = 1950;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 120, this._ctx)) {
                    case 1:
                        {
                            this.state = 1949;
                            this.match(MySQLParser.AS_SYMBOL);
                        }
                        break;
                }
                this.state = 1952;
                this.queryExpressionOrParens();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    queryExpressionOrParens() {
        let _localctx = new QueryExpressionOrParensContext(this._ctx, this.state);
        this.enterRule(_localctx, 92, MySQLParser.RULE_queryExpressionOrParens);
        try {
            this.state = 1956;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 121, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1954;
                        this.queryExpression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1955;
                        this.queryExpressionParens();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createRoutine() {
        let _localctx = new CreateRoutineContext(this._ctx, this.state);
        this.enterRule(_localctx, 94, MySQLParser.RULE_createRoutine);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1958;
                this.match(MySQLParser.CREATE_SYMBOL);
                this.state = 1962;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 122, this._ctx)) {
                    case 1:
                        {
                            this.state = 1959;
                            this.createProcedure();
                        }
                        break;
                    case 2:
                        {
                            this.state = 1960;
                            this.createFunction();
                        }
                        break;
                    case 3:
                        {
                            this.state = 1961;
                            this.createUdf();
                        }
                        break;
                }
                this.state = 1965;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.SEMICOLON_SYMBOL) {
                    {
                        this.state = 1964;
                        this.match(MySQLParser.SEMICOLON_SYMBOL);
                    }
                }
                this.state = 1967;
                this.match(MySQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createProcedure() {
        let _localctx = new CreateProcedureContext(this._ctx, this.state);
        this.enterRule(_localctx, 96, MySQLParser.RULE_createProcedure);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1970;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.DEFINER_SYMBOL) {
                    {
                        this.state = 1969;
                        this.definerClause();
                    }
                }
                this.state = 1972;
                this.match(MySQLParser.PROCEDURE_SYMBOL);
                this.state = 1973;
                this.procedureName();
                this.state = 1974;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 1983;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 126, this._ctx)) {
                    case 1:
                        {
                            this.state = 1975;
                            this.procedureParameter();
                            this.state = 1980;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === MySQLParser.COMMA_SYMBOL) {
                                {
                                    {
                                        this.state = 1976;
                                        this.match(MySQLParser.COMMA_SYMBOL);
                                        this.state = 1977;
                                        this.procedureParameter();
                                    }
                                }
                                this.state = 1982;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                        break;
                }
                this.state = 1985;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 1989;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 127, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1986;
                                this.routineCreateOption();
                            }
                        }
                    }
                    this.state = 1991;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 127, this._ctx);
                }
                this.state = 1992;
                this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createFunction() {
        let _localctx = new CreateFunctionContext(this._ctx, this.state);
        this.enterRule(_localctx, 98, MySQLParser.RULE_createFunction);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1995;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.DEFINER_SYMBOL) {
                    {
                        this.state = 1994;
                        this.definerClause();
                    }
                }
                this.state = 1997;
                this.match(MySQLParser.FUNCTION_SYMBOL);
                this.state = 1998;
                this.functionName();
                this.state = 1999;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 2008;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 130, this._ctx)) {
                    case 1:
                        {
                            this.state = 2000;
                            this.functionParameter();
                            this.state = 2005;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === MySQLParser.COMMA_SYMBOL) {
                                {
                                    {
                                        this.state = 2001;
                                        this.match(MySQLParser.COMMA_SYMBOL);
                                        this.state = 2002;
                                        this.functionParameter();
                                    }
                                }
                                this.state = 2007;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                        break;
                }
                this.state = 2010;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 2011;
                this.match(MySQLParser.RETURNS_SYMBOL);
                this.state = 2012;
                this.typeWithOptCollate();
                this.state = 2016;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 131, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2013;
                                this.routineCreateOption();
                            }
                        }
                    }
                    this.state = 2018;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 131, this._ctx);
                }
                this.state = 2019;
                this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createUdf() {
        let _localctx = new CreateUdfContext(this._ctx, this.state);
        this.enterRule(_localctx, 100, MySQLParser.RULE_createUdf);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2022;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.AGGREGATE_SYMBOL) {
                    {
                        this.state = 2021;
                        this.match(MySQLParser.AGGREGATE_SYMBOL);
                    }
                }
                this.state = 2024;
                this.match(MySQLParser.FUNCTION_SYMBOL);
                this.state = 2025;
                this.udfName();
                this.state = 2026;
                this.match(MySQLParser.RETURNS_SYMBOL);
                this.state = 2027;
                _localctx._type = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.STRING_SYMBOL || _la === MySQLParser.DECIMAL_SYMBOL || _la === MySQLParser.INT_SYMBOL || _la === MySQLParser.REAL_SYMBOL)) {
                    _localctx._type = this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2028;
                this.match(MySQLParser.SONAME_SYMBOL);
                this.state = 2029;
                this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    routineCreateOption() {
        let _localctx = new RoutineCreateOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 102, MySQLParser.RULE_routineCreateOption);
        let _la;
        try {
            this.state = 2036;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.COMMENT_SYMBOL:
                case MySQLParser.CONTAINS_SYMBOL:
                case MySQLParser.LANGUAGE_SYMBOL:
                case MySQLParser.NO_SYMBOL:
                case MySQLParser.MODIFIES_SYMBOL:
                case MySQLParser.READS_SYMBOL:
                case MySQLParser.SQL_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2031;
                        this.routineOption();
                    }
                    break;
                case MySQLParser.DETERMINISTIC_SYMBOL:
                case MySQLParser.NOT_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2033;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.NOT_SYMBOL) {
                            {
                                this.state = 2032;
                                this.match(MySQLParser.NOT_SYMBOL);
                            }
                        }
                        this.state = 2035;
                        this.match(MySQLParser.DETERMINISTIC_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    routineAlterOptions() {
        let _localctx = new RoutineAlterOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 104, MySQLParser.RULE_routineAlterOptions);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2039;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 2038;
                            this.routineCreateOption();
                        }
                    }
                    this.state = 2041;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MySQLParser.COMMENT_SYMBOL) | (1 << MySQLParser.CONTAINS_SYMBOL) | (1 << MySQLParser.LANGUAGE_SYMBOL) | (1 << MySQLParser.NO_SYMBOL))) !== 0) || _la === MySQLParser.DETERMINISTIC_SYMBOL || ((((_la - 567)) & ~0x1F) === 0 && ((1 << (_la - 567)) & ((1 << (MySQLParser.MODIFIES_SYMBOL - 567)) | (1 << (MySQLParser.NOT_SYMBOL - 567)) | (1 << (MySQLParser.READS_SYMBOL - 567)))) !== 0) || _la === MySQLParser.SQL_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    routineOption() {
        let _localctx = new RoutineOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 106, MySQLParser.RULE_routineOption);
        let _la;
        try {
            this.state = 2060;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.COMMENT_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2043;
                        _localctx._option = this.match(MySQLParser.COMMENT_SYMBOL);
                        this.state = 2044;
                        this.textLiteral();
                    }
                    break;
                case MySQLParser.LANGUAGE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2045;
                        _localctx._option = this.match(MySQLParser.LANGUAGE_SYMBOL);
                        this.state = 2046;
                        this.match(MySQLParser.SQL_SYMBOL);
                    }
                    break;
                case MySQLParser.NO_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2047;
                        _localctx._option = this.match(MySQLParser.NO_SYMBOL);
                        this.state = 2048;
                        this.match(MySQLParser.SQL_SYMBOL);
                    }
                    break;
                case MySQLParser.CONTAINS_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2049;
                        _localctx._option = this.match(MySQLParser.CONTAINS_SYMBOL);
                        this.state = 2050;
                        this.match(MySQLParser.SQL_SYMBOL);
                    }
                    break;
                case MySQLParser.READS_SYMBOL:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2051;
                        _localctx._option = this.match(MySQLParser.READS_SYMBOL);
                        this.state = 2052;
                        this.match(MySQLParser.SQL_SYMBOL);
                        this.state = 2053;
                        this.match(MySQLParser.DATA_SYMBOL);
                    }
                    break;
                case MySQLParser.MODIFIES_SYMBOL:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2054;
                        _localctx._option = this.match(MySQLParser.MODIFIES_SYMBOL);
                        this.state = 2055;
                        this.match(MySQLParser.SQL_SYMBOL);
                        this.state = 2056;
                        this.match(MySQLParser.DATA_SYMBOL);
                    }
                    break;
                case MySQLParser.SQL_SYMBOL:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 2057;
                        _localctx._option = this.match(MySQLParser.SQL_SYMBOL);
                        this.state = 2058;
                        this.match(MySQLParser.SECURITY_SYMBOL);
                        this.state = 2059;
                        _localctx._security = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.DEFINER_SYMBOL || _la === MySQLParser.INVOKER_SYMBOL)) {
                            _localctx._security = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createIndex() {
        let _localctx = new CreateIndexContext(this._ctx, this.state);
        this.enterRule(_localctx, 108, MySQLParser.RULE_createIndex);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2063;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.OFFLINE_SYMBOL || _la === MySQLParser.ONLINE_SYMBOL) {
                    {
                        this.state = 2062;
                        this.onlineOption();
                    }
                }
                this.state = 2106;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case MySQLParser.INDEX_SYMBOL:
                    case MySQLParser.UNIQUE_SYMBOL:
                        {
                            this.state = 2066;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.UNIQUE_SYMBOL) {
                                {
                                    this.state = 2065;
                                    this.match(MySQLParser.UNIQUE_SYMBOL);
                                }
                            }
                            this.state = 2068;
                            _localctx._type = this.match(MySQLParser.INDEX_SYMBOL);
                            this.state = 2077;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 141, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 2069;
                                        if (!(this.serverVersion >= 80014)) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                                        }
                                        this.state = 2070;
                                        this.indexName();
                                        this.state = 2072;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === MySQLParser.TYPE_SYMBOL || _la === MySQLParser.USING_SYMBOL) {
                                            {
                                                this.state = 2071;
                                                this.indexTypeClause();
                                            }
                                        }
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 2075;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 140, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 2074;
                                                    this.indexNameAndType();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                            }
                            this.state = 2079;
                            this.createIndexTarget();
                            this.state = 2083;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 142, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 2080;
                                            this.indexOption();
                                        }
                                    }
                                }
                                this.state = 2085;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 142, this._ctx);
                            }
                        }
                        break;
                    case MySQLParser.FULLTEXT_SYMBOL:
                        {
                            this.state = 2086;
                            _localctx._type = this.match(MySQLParser.FULLTEXT_SYMBOL);
                            this.state = 2087;
                            this.match(MySQLParser.INDEX_SYMBOL);
                            this.state = 2088;
                            this.indexName();
                            this.state = 2089;
                            this.createIndexTarget();
                            this.state = 2093;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 143, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 2090;
                                            this.fulltextIndexOption();
                                        }
                                    }
                                }
                                this.state = 2095;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 143, this._ctx);
                            }
                        }
                        break;
                    case MySQLParser.SPATIAL_SYMBOL:
                        {
                            this.state = 2096;
                            _localctx._type = this.match(MySQLParser.SPATIAL_SYMBOL);
                            this.state = 2097;
                            this.match(MySQLParser.INDEX_SYMBOL);
                            this.state = 2098;
                            this.indexName();
                            this.state = 2099;
                            this.createIndexTarget();
                            this.state = 2103;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 144, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 2100;
                                            this.spatialIndexOption();
                                        }
                                    }
                                }
                                this.state = 2105;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 144, this._ctx);
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 2109;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ALGORITHM_SYMBOL || _la === MySQLParser.LOCK_SYMBOL) {
                    {
                        this.state = 2108;
                        this.indexLockAndAlgorithm();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    indexNameAndType() {
        let _localctx = new IndexNameAndTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 110, MySQLParser.RULE_indexNameAndType);
        try {
            this.state = 2120;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 148, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2111;
                        this.indexName();
                        this.state = 2114;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 147, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2112;
                                    this.match(MySQLParser.USING_SYMBOL);
                                    this.state = 2113;
                                    this.indexType();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2116;
                        this.indexName();
                        this.state = 2117;
                        this.match(MySQLParser.TYPE_SYMBOL);
                        this.state = 2118;
                        this.indexType();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createIndexTarget() {
        let _localctx = new CreateIndexTargetContext(this._ctx, this.state);
        this.enterRule(_localctx, 112, MySQLParser.RULE_createIndexTarget);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2122;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 2123;
                this.tableRef();
                this.state = 2124;
                this.keyListVariants();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createLogfileGroup() {
        let _localctx = new CreateLogfileGroupContext(this._ctx, this.state);
        this.enterRule(_localctx, 114, MySQLParser.RULE_createLogfileGroup);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2126;
                this.match(MySQLParser.LOGFILE_SYMBOL);
                this.state = 2127;
                this.match(MySQLParser.GROUP_SYMBOL);
                this.state = 2128;
                this.logfileGroupName();
                this.state = 2129;
                this.match(MySQLParser.ADD_SYMBOL);
                this.state = 2130;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.REDOFILE_SYMBOL || _la === MySQLParser.UNDOFILE_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2131;
                this.textLiteral();
                this.state = 2133;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.COMMENT_SYMBOL || _la === MySQLParser.ENGINE_SYMBOL || _la === MySQLParser.INITIAL_SIZE_SYMBOL || _la === MySQLParser.NO_WAIT_SYMBOL || _la === MySQLParser.NODEGROUP_SYMBOL || _la === MySQLParser.REDO_BUFFER_SIZE_SYMBOL || _la === MySQLParser.STORAGE_SYMBOL || _la === MySQLParser.UNDO_BUFFER_SIZE_SYMBOL || _la === MySQLParser.WAIT_SYMBOL) {
                    {
                        this.state = 2132;
                        this.logfileGroupOptions();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    logfileGroupOptions() {
        let _localctx = new LogfileGroupOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 116, MySQLParser.RULE_logfileGroupOptions);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2135;
                this.logfileGroupOption();
                this.state = 2142;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMENT_SYMBOL || _la === MySQLParser.ENGINE_SYMBOL || _la === MySQLParser.INITIAL_SIZE_SYMBOL || _la === MySQLParser.NO_WAIT_SYMBOL || _la === MySQLParser.NODEGROUP_SYMBOL || _la === MySQLParser.REDO_BUFFER_SIZE_SYMBOL || _la === MySQLParser.STORAGE_SYMBOL || _la === MySQLParser.UNDO_BUFFER_SIZE_SYMBOL || _la === MySQLParser.WAIT_SYMBOL || _la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 2137;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.COMMA_SYMBOL) {
                                {
                                    this.state = 2136;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                }
                            }
                            this.state = 2139;
                            this.logfileGroupOption();
                        }
                    }
                    this.state = 2144;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    logfileGroupOption() {
        let _localctx = new LogfileGroupOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 118, MySQLParser.RULE_logfileGroupOption);
        try {
            this.state = 2151;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.INITIAL_SIZE_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2145;
                        this.tsOptionInitialSize();
                    }
                    break;
                case MySQLParser.REDO_BUFFER_SIZE_SYMBOL:
                case MySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2146;
                        this.tsOptionUndoRedoBufferSize();
                    }
                    break;
                case MySQLParser.NODEGROUP_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2147;
                        this.tsOptionNodegroup();
                    }
                    break;
                case MySQLParser.ENGINE_SYMBOL:
                case MySQLParser.STORAGE_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2148;
                        this.tsOptionEngine();
                    }
                    break;
                case MySQLParser.NO_WAIT_SYMBOL:
                case MySQLParser.WAIT_SYMBOL:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2149;
                        this.tsOptionWait();
                    }
                    break;
                case MySQLParser.COMMENT_SYMBOL:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2150;
                        this.tsOptionComment();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createServer() {
        let _localctx = new CreateServerContext(this._ctx, this.state);
        this.enterRule(_localctx, 120, MySQLParser.RULE_createServer);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2153;
                this.match(MySQLParser.SERVER_SYMBOL);
                this.state = 2154;
                this.serverName();
                this.state = 2155;
                this.match(MySQLParser.FOREIGN_SYMBOL);
                this.state = 2156;
                this.match(MySQLParser.DATA_SYMBOL);
                this.state = 2157;
                this.match(MySQLParser.WRAPPER_SYMBOL);
                this.state = 2158;
                this.textOrIdentifier();
                this.state = 2159;
                this.serverOptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    serverOptions() {
        let _localctx = new ServerOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 122, MySQLParser.RULE_serverOptions);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2161;
                this.match(MySQLParser.OPTIONS_SYMBOL);
                this.state = 2162;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 2163;
                this.serverOption();
                this.state = 2168;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 2164;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 2165;
                            this.serverOption();
                        }
                    }
                    this.state = 2170;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2171;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    serverOption() {
        let _localctx = new ServerOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 124, MySQLParser.RULE_serverOption);
        try {
            this.state = 2187;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.HOST_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2173;
                        _localctx._option = this.match(MySQLParser.HOST_SYMBOL);
                        this.state = 2174;
                        this.textLiteral();
                    }
                    break;
                case MySQLParser.DATABASE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2175;
                        _localctx._option = this.match(MySQLParser.DATABASE_SYMBOL);
                        this.state = 2176;
                        this.textLiteral();
                    }
                    break;
                case MySQLParser.USER_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2177;
                        _localctx._option = this.match(MySQLParser.USER_SYMBOL);
                        this.state = 2178;
                        this.textLiteral();
                    }
                    break;
                case MySQLParser.PASSWORD_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2179;
                        _localctx._option = this.match(MySQLParser.PASSWORD_SYMBOL);
                        this.state = 2180;
                        this.textLiteral();
                    }
                    break;
                case MySQLParser.SOCKET_SYMBOL:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2181;
                        _localctx._option = this.match(MySQLParser.SOCKET_SYMBOL);
                        this.state = 2182;
                        this.textLiteral();
                    }
                    break;
                case MySQLParser.OWNER_SYMBOL:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2183;
                        _localctx._option = this.match(MySQLParser.OWNER_SYMBOL);
                        this.state = 2184;
                        this.textLiteral();
                    }
                    break;
                case MySQLParser.PORT_SYMBOL:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 2185;
                        _localctx._option = this.match(MySQLParser.PORT_SYMBOL);
                        this.state = 2186;
                        this.ulong_number();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createTablespace() {
        let _localctx = new CreateTablespaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 126, MySQLParser.RULE_createTablespace);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2189;
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                this.state = 2190;
                this.tablespaceName();
                this.state = 2191;
                this.tsDataFileName();
                this.state = 2196;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 155, this._ctx)) {
                    case 1:
                        {
                            this.state = 2192;
                            this.match(MySQLParser.USE_SYMBOL);
                            this.state = 2193;
                            this.match(MySQLParser.LOGFILE_SYMBOL);
                            this.state = 2194;
                            this.match(MySQLParser.GROUP_SYMBOL);
                            this.state = 2195;
                            this.logfileGroupRef();
                        }
                        break;
                }
                this.state = 2199;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 156, this._ctx)) {
                    case 1:
                        {
                            this.state = 2198;
                            this.tablespaceOptions();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createUndoTablespace() {
        let _localctx = new CreateUndoTablespaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 128, MySQLParser.RULE_createUndoTablespace);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2201;
                this.match(MySQLParser.UNDO_SYMBOL);
                this.state = 2202;
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                this.state = 2203;
                this.tablespaceName();
                this.state = 2204;
                this.match(MySQLParser.ADD_SYMBOL);
                this.state = 2205;
                this.tsDataFile();
                this.state = 2207;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ENGINE_SYMBOL || _la === MySQLParser.STORAGE_SYMBOL) {
                    {
                        this.state = 2206;
                        this.undoTableSpaceOptions();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tsDataFileName() {
        let _localctx = new TsDataFileNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 130, MySQLParser.RULE_tsDataFileName);
        try {
            this.state = 2216;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 159, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2209;
                        if (!(this.serverVersion >= 80014)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                        }
                        this.state = 2212;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 158, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2210;
                                    this.match(MySQLParser.ADD_SYMBOL);
                                    this.state = 2211;
                                    this.tsDataFile();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2214;
                        this.match(MySQLParser.ADD_SYMBOL);
                        this.state = 2215;
                        this.tsDataFile();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tsDataFile() {
        let _localctx = new TsDataFileContext(this._ctx, this.state);
        this.enterRule(_localctx, 132, MySQLParser.RULE_tsDataFile);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2218;
                this.match(MySQLParser.DATAFILE_SYMBOL);
                this.state = 2219;
                this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tablespaceOptions() {
        let _localctx = new TablespaceOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 134, MySQLParser.RULE_tablespaceOptions);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2221;
                this.tablespaceOption();
                this.state = 2228;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 161, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2223;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 160, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 2222;
                                            this.match(MySQLParser.COMMA_SYMBOL);
                                        }
                                        break;
                                }
                                this.state = 2225;
                                this.tablespaceOption();
                            }
                        }
                    }
                    this.state = 2230;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 161, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tablespaceOption() {
        let _localctx = new TablespaceOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 136, MySQLParser.RULE_tablespaceOption);
        try {
            this.state = 2243;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 162, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2231;
                        this.tsOptionInitialSize();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2232;
                        this.tsOptionAutoextendSize();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2233;
                        this.tsOptionMaxSize();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2234;
                        this.tsOptionExtentSize();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2235;
                        this.tsOptionNodegroup();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2236;
                        this.tsOptionEngine();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 2237;
                        this.tsOptionWait();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 2238;
                        this.tsOptionComment();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 2239;
                        if (!(this.serverVersion >= 50707)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50707");
                        }
                        this.state = 2240;
                        this.tsOptionFileblockSize();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 2241;
                        if (!(this.serverVersion >= 80014)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                        }
                        this.state = 2242;
                        this.tsOptionEncryption();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tsOptionInitialSize() {
        let _localctx = new TsOptionInitialSizeContext(this._ctx, this.state);
        this.enterRule(_localctx, 138, MySQLParser.RULE_tsOptionInitialSize);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2245;
                this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
                this.state = 2247;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 163, this._ctx)) {
                    case 1:
                        {
                            this.state = 2246;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.state = 2249;
                this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tsOptionUndoRedoBufferSize() {
        let _localctx = new TsOptionUndoRedoBufferSizeContext(this._ctx, this.state);
        this.enterRule(_localctx, 140, MySQLParser.RULE_tsOptionUndoRedoBufferSize);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2251;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.REDO_BUFFER_SIZE_SYMBOL || _la === MySQLParser.UNDO_BUFFER_SIZE_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2253;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 164, this._ctx)) {
                    case 1:
                        {
                            this.state = 2252;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.state = 2255;
                this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tsOptionAutoextendSize() {
        let _localctx = new TsOptionAutoextendSizeContext(this._ctx, this.state);
        this.enterRule(_localctx, 142, MySQLParser.RULE_tsOptionAutoextendSize);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2257;
                this.match(MySQLParser.AUTOEXTEND_SIZE_SYMBOL);
                this.state = 2259;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 165, this._ctx)) {
                    case 1:
                        {
                            this.state = 2258;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.state = 2261;
                this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tsOptionMaxSize() {
        let _localctx = new TsOptionMaxSizeContext(this._ctx, this.state);
        this.enterRule(_localctx, 144, MySQLParser.RULE_tsOptionMaxSize);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2263;
                this.match(MySQLParser.MAX_SIZE_SYMBOL);
                this.state = 2265;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 166, this._ctx)) {
                    case 1:
                        {
                            this.state = 2264;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.state = 2267;
                this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tsOptionExtentSize() {
        let _localctx = new TsOptionExtentSizeContext(this._ctx, this.state);
        this.enterRule(_localctx, 146, MySQLParser.RULE_tsOptionExtentSize);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2269;
                this.match(MySQLParser.EXTENT_SIZE_SYMBOL);
                this.state = 2271;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 167, this._ctx)) {
                    case 1:
                        {
                            this.state = 2270;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.state = 2273;
                this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tsOptionNodegroup() {
        let _localctx = new TsOptionNodegroupContext(this._ctx, this.state);
        this.enterRule(_localctx, 148, MySQLParser.RULE_tsOptionNodegroup);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2275;
                this.match(MySQLParser.NODEGROUP_SYMBOL);
                this.state = 2277;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.EQUAL_OPERATOR) {
                    {
                        this.state = 2276;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }
                this.state = 2279;
                this.real_ulong_number();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tsOptionEngine() {
        let _localctx = new TsOptionEngineContext(this._ctx, this.state);
        this.enterRule(_localctx, 150, MySQLParser.RULE_tsOptionEngine);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2282;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.STORAGE_SYMBOL) {
                    {
                        this.state = 2281;
                        this.match(MySQLParser.STORAGE_SYMBOL);
                    }
                }
                this.state = 2284;
                this.match(MySQLParser.ENGINE_SYMBOL);
                this.state = 2286;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 170, this._ctx)) {
                    case 1:
                        {
                            this.state = 2285;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.state = 2288;
                this.engineRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tsOptionWait() {
        let _localctx = new TsOptionWaitContext(this._ctx, this.state);
        this.enterRule(_localctx, 152, MySQLParser.RULE_tsOptionWait);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2290;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.NO_WAIT_SYMBOL || _la === MySQLParser.WAIT_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tsOptionComment() {
        let _localctx = new TsOptionCommentContext(this._ctx, this.state);
        this.enterRule(_localctx, 154, MySQLParser.RULE_tsOptionComment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2292;
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.state = 2294;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 171, this._ctx)) {
                    case 1:
                        {
                            this.state = 2293;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.state = 2296;
                this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tsOptionFileblockSize() {
        let _localctx = new TsOptionFileblockSizeContext(this._ctx, this.state);
        this.enterRule(_localctx, 156, MySQLParser.RULE_tsOptionFileblockSize);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2298;
                this.match(MySQLParser.FILE_BLOCK_SIZE_SYMBOL);
                this.state = 2300;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 172, this._ctx)) {
                    case 1:
                        {
                            this.state = 2299;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.state = 2302;
                this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tsOptionEncryption() {
        let _localctx = new TsOptionEncryptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 158, MySQLParser.RULE_tsOptionEncryption);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2304;
                this.match(MySQLParser.ENCRYPTION_SYMBOL);
                this.state = 2306;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 173, this._ctx)) {
                    case 1:
                        {
                            this.state = 2305;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.state = 2308;
                this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createView() {
        let _localctx = new CreateViewContext(this._ctx, this.state);
        this.enterRule(_localctx, 160, MySQLParser.RULE_createView);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2311;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ALGORITHM_SYMBOL || _la === MySQLParser.OR_SYMBOL) {
                    {
                        this.state = 2310;
                        this.viewReplaceOrAlgorithm();
                    }
                }
                this.state = 2314;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.DEFINER_SYMBOL) {
                    {
                        this.state = 2313;
                        this.definerClause();
                    }
                }
                this.state = 2317;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.SQL_SYMBOL) {
                    {
                        this.state = 2316;
                        this.viewSuid();
                    }
                }
                this.state = 2319;
                this.match(MySQLParser.VIEW_SYMBOL);
                this.state = 2320;
                this.viewName();
                this.state = 2321;
                this.viewTail();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    viewReplaceOrAlgorithm() {
        let _localctx = new ViewReplaceOrAlgorithmContext(this._ctx, this.state);
        this.enterRule(_localctx, 162, MySQLParser.RULE_viewReplaceOrAlgorithm);
        let _la;
        try {
            this.state = 2329;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.OR_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2323;
                        this.match(MySQLParser.OR_SYMBOL);
                        this.state = 2324;
                        this.match(MySQLParser.REPLACE_SYMBOL);
                        this.state = 2326;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.ALGORITHM_SYMBOL) {
                            {
                                this.state = 2325;
                                this.viewAlgorithm();
                            }
                        }
                    }
                    break;
                case MySQLParser.ALGORITHM_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2328;
                        this.viewAlgorithm();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    viewAlgorithm() {
        let _localctx = new ViewAlgorithmContext(this._ctx, this.state);
        this.enterRule(_localctx, 164, MySQLParser.RULE_viewAlgorithm);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2331;
                this.match(MySQLParser.ALGORITHM_SYMBOL);
                this.state = 2332;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 2333;
                _localctx._algorithm = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.MERGE_SYMBOL || _la === MySQLParser.TEMPTABLE_SYMBOL || _la === MySQLParser.UNDEFINED_SYMBOL)) {
                    _localctx._algorithm = this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    viewSuid() {
        let _localctx = new ViewSuidContext(this._ctx, this.state);
        this.enterRule(_localctx, 166, MySQLParser.RULE_viewSuid);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2335;
                this.match(MySQLParser.SQL_SYMBOL);
                this.state = 2336;
                this.match(MySQLParser.SECURITY_SYMBOL);
                this.state = 2337;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.DEFINER_SYMBOL || _la === MySQLParser.INVOKER_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createTrigger() {
        let _localctx = new CreateTriggerContext(this._ctx, this.state);
        this.enterRule(_localctx, 168, MySQLParser.RULE_createTrigger);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2340;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.DEFINER_SYMBOL) {
                    {
                        this.state = 2339;
                        this.definerClause();
                    }
                }
                this.state = 2342;
                this.match(MySQLParser.TRIGGER_SYMBOL);
                this.state = 2343;
                this.triggerName();
                this.state = 2344;
                _localctx._timing = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.AFTER_SYMBOL || _la === MySQLParser.BEFORE_SYMBOL)) {
                    _localctx._timing = this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2345;
                _localctx._event = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.DELETE_SYMBOL || _la === MySQLParser.INSERT_SYMBOL || _la === MySQLParser.UPDATE_SYMBOL)) {
                    _localctx._event = this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2346;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 2347;
                this.tableRef();
                this.state = 2348;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 2349;
                this.match(MySQLParser.EACH_SYMBOL);
                this.state = 2350;
                this.match(MySQLParser.ROW_SYMBOL);
                this.state = 2352;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 180, this._ctx)) {
                    case 1:
                        {
                            this.state = 2351;
                            this.triggerFollowsPrecedesClause();
                        }
                        break;
                }
                this.state = 2354;
                this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    triggerFollowsPrecedesClause() {
        let _localctx = new TriggerFollowsPrecedesClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 170, MySQLParser.RULE_triggerFollowsPrecedesClause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2356;
                if (!(this.serverVersion >= 50700)) {
                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50700");
                }
                this.state = 2357;
                _localctx._ordering = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.FOLLOWS_SYMBOL || _la === MySQLParser.PRECEDES_SYMBOL)) {
                    _localctx._ordering = this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2358;
                this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createEvent() {
        let _localctx = new CreateEventContext(this._ctx, this.state);
        this.enterRule(_localctx, 172, MySQLParser.RULE_createEvent);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2361;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.DEFINER_SYMBOL) {
                    {
                        this.state = 2360;
                        this.definerClause();
                    }
                }
                this.state = 2363;
                this.match(MySQLParser.EVENT_SYMBOL);
                this.state = 2365;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 182, this._ctx)) {
                    case 1:
                        {
                            this.state = 2364;
                            this.ifNotExists();
                        }
                        break;
                }
                this.state = 2367;
                this.eventName();
                this.state = 2368;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 2369;
                this.match(MySQLParser.SCHEDULE_SYMBOL);
                this.state = 2370;
                this.schedule();
                this.state = 2377;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ON_SYMBOL) {
                    {
                        this.state = 2371;
                        this.match(MySQLParser.ON_SYMBOL);
                        this.state = 2372;
                        this.match(MySQLParser.COMPLETION_SYMBOL);
                        this.state = 2374;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.NOT_SYMBOL) {
                            {
                                this.state = 2373;
                                this.match(MySQLParser.NOT_SYMBOL);
                            }
                        }
                        this.state = 2376;
                        this.match(MySQLParser.PRESERVE_SYMBOL);
                    }
                }
                this.state = 2385;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case MySQLParser.ENABLE_SYMBOL:
                        {
                            this.state = 2379;
                            this.match(MySQLParser.ENABLE_SYMBOL);
                        }
                        break;
                    case MySQLParser.DISABLE_SYMBOL:
                        {
                            this.state = 2380;
                            this.match(MySQLParser.DISABLE_SYMBOL);
                            this.state = 2383;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.ON_SYMBOL) {
                                {
                                    this.state = 2381;
                                    this.match(MySQLParser.ON_SYMBOL);
                                    this.state = 2382;
                                    this.match(MySQLParser.SLAVE_SYMBOL);
                                }
                            }
                        }
                        break;
                    case MySQLParser.COMMENT_SYMBOL:
                    case MySQLParser.DO_SYMBOL:
                        break;
                    default:
                        break;
                }
                this.state = 2389;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.COMMENT_SYMBOL) {
                    {
                        this.state = 2387;
                        this.match(MySQLParser.COMMENT_SYMBOL);
                        this.state = 2388;
                        this.textLiteral();
                    }
                }
                this.state = 2391;
                this.match(MySQLParser.DO_SYMBOL);
                this.state = 2392;
                this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createRole() {
        let _localctx = new CreateRoleContext(this._ctx, this.state);
        this.enterRule(_localctx, 174, MySQLParser.RULE_createRole);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2394;
                this.match(MySQLParser.ROLE_SYMBOL);
                this.state = 2396;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 188, this._ctx)) {
                    case 1:
                        {
                            this.state = 2395;
                            this.ifNotExists();
                        }
                        break;
                }
                this.state = 2398;
                this.roleList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createSpatialReference() {
        let _localctx = new CreateSpatialReferenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 176, MySQLParser.RULE_createSpatialReference);
        let _la;
        try {
            this.state = 2425;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.OR_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2400;
                        this.match(MySQLParser.OR_SYMBOL);
                        this.state = 2401;
                        this.match(MySQLParser.REPLACE_SYMBOL);
                        this.state = 2402;
                        this.match(MySQLParser.SPATIAL_SYMBOL);
                        this.state = 2403;
                        this.match(MySQLParser.REFERENCE_SYMBOL);
                        this.state = 2404;
                        this.match(MySQLParser.SYSTEM_SYMBOL);
                        this.state = 2405;
                        this.real_ulonglong_number();
                        this.state = 2409;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.NAME_SYMBOL || ((((_la - 745)) & ~0x1F) === 0 && ((1 << (_la - 745)) & ((1 << (MySQLParser.DEFINITION_SYMBOL - 745)) | (1 << (MySQLParser.DESCRIPTION_SYMBOL - 745)) | (1 << (MySQLParser.ORGANIZATION_SYMBOL - 745)))) !== 0)) {
                            {
                                {
                                    this.state = 2406;
                                    this.srsAttribute();
                                }
                            }
                            this.state = 2411;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case MySQLParser.SPATIAL_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2412;
                        this.match(MySQLParser.SPATIAL_SYMBOL);
                        this.state = 2413;
                        this.match(MySQLParser.REFERENCE_SYMBOL);
                        this.state = 2414;
                        this.match(MySQLParser.SYSTEM_SYMBOL);
                        this.state = 2416;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 190, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2415;
                                    this.ifNotExists();
                                }
                                break;
                        }
                        this.state = 2418;
                        this.real_ulonglong_number();
                        this.state = 2422;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.NAME_SYMBOL || ((((_la - 745)) & ~0x1F) === 0 && ((1 << (_la - 745)) & ((1 << (MySQLParser.DEFINITION_SYMBOL - 745)) | (1 << (MySQLParser.DESCRIPTION_SYMBOL - 745)) | (1 << (MySQLParser.ORGANIZATION_SYMBOL - 745)))) !== 0)) {
                            {
                                {
                                    this.state = 2419;
                                    this.srsAttribute();
                                }
                            }
                            this.state = 2424;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    srsAttribute() {
        let _localctx = new SrsAttributeContext(this._ctx, this.state);
        this.enterRule(_localctx, 178, MySQLParser.RULE_srsAttribute);
        try {
            this.state = 2442;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.NAME_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2427;
                        this.match(MySQLParser.NAME_SYMBOL);
                        this.state = 2428;
                        this.match(MySQLParser.TEXT_SYMBOL);
                        this.state = 2429;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.DEFINITION_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2430;
                        this.match(MySQLParser.DEFINITION_SYMBOL);
                        this.state = 2431;
                        this.match(MySQLParser.TEXT_SYMBOL);
                        this.state = 2432;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.ORGANIZATION_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2433;
                        this.match(MySQLParser.ORGANIZATION_SYMBOL);
                        this.state = 2434;
                        this.textStringNoLinebreak();
                        this.state = 2435;
                        this.match(MySQLParser.IDENTIFIED_SYMBOL);
                        this.state = 2436;
                        this.match(MySQLParser.BY_SYMBOL);
                        this.state = 2437;
                        this.real_ulonglong_number();
                    }
                    break;
                case MySQLParser.DESCRIPTION_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2439;
                        this.match(MySQLParser.DESCRIPTION_SYMBOL);
                        this.state = 2440;
                        this.match(MySQLParser.TEXT_SYMBOL);
                        this.state = 2441;
                        this.textStringNoLinebreak();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropStatement() {
        let _localctx = new DropStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 180, MySQLParser.RULE_dropStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2444;
                this.match(MySQLParser.DROP_SYMBOL);
                this.state = 2462;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 194, this._ctx)) {
                    case 1:
                        {
                            this.state = 2445;
                            this.dropDatabase();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2446;
                            this.dropEvent();
                        }
                        break;
                    case 3:
                        {
                            this.state = 2447;
                            this.dropFunction();
                        }
                        break;
                    case 4:
                        {
                            this.state = 2448;
                            this.dropProcedure();
                        }
                        break;
                    case 5:
                        {
                            this.state = 2449;
                            this.dropIndex();
                        }
                        break;
                    case 6:
                        {
                            this.state = 2450;
                            this.dropLogfileGroup();
                        }
                        break;
                    case 7:
                        {
                            this.state = 2451;
                            this.dropServer();
                        }
                        break;
                    case 8:
                        {
                            this.state = 2452;
                            this.dropTable();
                        }
                        break;
                    case 9:
                        {
                            this.state = 2453;
                            this.dropTableSpace();
                        }
                        break;
                    case 10:
                        {
                            this.state = 2454;
                            this.dropTrigger();
                        }
                        break;
                    case 11:
                        {
                            this.state = 2455;
                            this.dropView();
                        }
                        break;
                    case 12:
                        {
                            this.state = 2456;
                            if (!(this.serverVersion >= 80000)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                            }
                            this.state = 2457;
                            this.dropRole();
                        }
                        break;
                    case 13:
                        {
                            this.state = 2458;
                            if (!(this.serverVersion >= 80011)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80011");
                            }
                            this.state = 2459;
                            this.dropSpatialReference();
                        }
                        break;
                    case 14:
                        {
                            this.state = 2460;
                            if (!(this.serverVersion >= 80014)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                            }
                            this.state = 2461;
                            this.dropUndoTablespace();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropDatabase() {
        let _localctx = new DropDatabaseContext(this._ctx, this.state);
        this.enterRule(_localctx, 182, MySQLParser.RULE_dropDatabase);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2464;
                this.match(MySQLParser.DATABASE_SYMBOL);
                this.state = 2466;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 195, this._ctx)) {
                    case 1:
                        {
                            this.state = 2465;
                            this.ifExists();
                        }
                        break;
                }
                this.state = 2468;
                this.schemaRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropEvent() {
        let _localctx = new DropEventContext(this._ctx, this.state);
        this.enterRule(_localctx, 184, MySQLParser.RULE_dropEvent);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2470;
                this.match(MySQLParser.EVENT_SYMBOL);
                this.state = 2472;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 196, this._ctx)) {
                    case 1:
                        {
                            this.state = 2471;
                            this.ifExists();
                        }
                        break;
                }
                this.state = 2474;
                this.eventRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropFunction() {
        let _localctx = new DropFunctionContext(this._ctx, this.state);
        this.enterRule(_localctx, 186, MySQLParser.RULE_dropFunction);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2476;
                this.match(MySQLParser.FUNCTION_SYMBOL);
                this.state = 2478;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 197, this._ctx)) {
                    case 1:
                        {
                            this.state = 2477;
                            this.ifExists();
                        }
                        break;
                }
                this.state = 2480;
                this.functionRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropProcedure() {
        let _localctx = new DropProcedureContext(this._ctx, this.state);
        this.enterRule(_localctx, 188, MySQLParser.RULE_dropProcedure);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2482;
                this.match(MySQLParser.PROCEDURE_SYMBOL);
                this.state = 2484;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 198, this._ctx)) {
                    case 1:
                        {
                            this.state = 2483;
                            this.ifExists();
                        }
                        break;
                }
                this.state = 2486;
                this.procedureRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropIndex() {
        let _localctx = new DropIndexContext(this._ctx, this.state);
        this.enterRule(_localctx, 190, MySQLParser.RULE_dropIndex);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2489;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.OFFLINE_SYMBOL || _la === MySQLParser.ONLINE_SYMBOL) {
                    {
                        this.state = 2488;
                        this.onlineOption();
                    }
                }
                this.state = 2491;
                _localctx._type = this.match(MySQLParser.INDEX_SYMBOL);
                this.state = 2492;
                this.indexRef();
                this.state = 2493;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 2494;
                this.tableRef();
                this.state = 2496;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ALGORITHM_SYMBOL || _la === MySQLParser.LOCK_SYMBOL) {
                    {
                        this.state = 2495;
                        this.indexLockAndAlgorithm();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropLogfileGroup() {
        let _localctx = new DropLogfileGroupContext(this._ctx, this.state);
        this.enterRule(_localctx, 192, MySQLParser.RULE_dropLogfileGroup);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2498;
                this.match(MySQLParser.LOGFILE_SYMBOL);
                this.state = 2499;
                this.match(MySQLParser.GROUP_SYMBOL);
                this.state = 2500;
                this.logfileGroupRef();
                this.state = 2511;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ENGINE_SYMBOL || _la === MySQLParser.NO_WAIT_SYMBOL || _la === MySQLParser.STORAGE_SYMBOL || _la === MySQLParser.WAIT_SYMBOL) {
                    {
                        this.state = 2501;
                        this.dropLogfileGroupOption();
                        this.state = 2508;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.ENGINE_SYMBOL || _la === MySQLParser.NO_WAIT_SYMBOL || _la === MySQLParser.STORAGE_SYMBOL || _la === MySQLParser.WAIT_SYMBOL || _la === MySQLParser.COMMA_SYMBOL) {
                            {
                                {
                                    this.state = 2503;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === MySQLParser.COMMA_SYMBOL) {
                                        {
                                            this.state = 2502;
                                            this.match(MySQLParser.COMMA_SYMBOL);
                                        }
                                    }
                                    this.state = 2505;
                                    this.dropLogfileGroupOption();
                                }
                            }
                            this.state = 2510;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropLogfileGroupOption() {
        let _localctx = new DropLogfileGroupOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 194, MySQLParser.RULE_dropLogfileGroupOption);
        try {
            this.state = 2515;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.NO_WAIT_SYMBOL:
                case MySQLParser.WAIT_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2513;
                        this.tsOptionWait();
                    }
                    break;
                case MySQLParser.ENGINE_SYMBOL:
                case MySQLParser.STORAGE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2514;
                        this.tsOptionEngine();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropServer() {
        let _localctx = new DropServerContext(this._ctx, this.state);
        this.enterRule(_localctx, 196, MySQLParser.RULE_dropServer);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2517;
                this.match(MySQLParser.SERVER_SYMBOL);
                this.state = 2519;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 205, this._ctx)) {
                    case 1:
                        {
                            this.state = 2518;
                            this.ifExists();
                        }
                        break;
                }
                this.state = 2521;
                this.serverRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropTable() {
        let _localctx = new DropTableContext(this._ctx, this.state);
        this.enterRule(_localctx, 198, MySQLParser.RULE_dropTable);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2524;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.TEMPORARY_SYMBOL) {
                    {
                        this.state = 2523;
                        this.match(MySQLParser.TEMPORARY_SYMBOL);
                    }
                }
                this.state = 2526;
                _localctx._type = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.TABLES_SYMBOL || _la === MySQLParser.TABLE_SYMBOL)) {
                    _localctx._type = this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2528;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 207, this._ctx)) {
                    case 1:
                        {
                            this.state = 2527;
                            this.ifExists();
                        }
                        break;
                }
                this.state = 2530;
                this.tableRefList();
                this.state = 2532;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.CASCADE_SYMBOL || _la === MySQLParser.RESTRICT_SYMBOL) {
                    {
                        this.state = 2531;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.CASCADE_SYMBOL || _la === MySQLParser.RESTRICT_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropTableSpace() {
        let _localctx = new DropTableSpaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 200, MySQLParser.RULE_dropTableSpace);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2534;
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                this.state = 2535;
                this.tablespaceRef();
                this.state = 2546;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ENGINE_SYMBOL || _la === MySQLParser.NO_WAIT_SYMBOL || _la === MySQLParser.STORAGE_SYMBOL || _la === MySQLParser.WAIT_SYMBOL) {
                    {
                        this.state = 2536;
                        this.dropLogfileGroupOption();
                        this.state = 2543;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.ENGINE_SYMBOL || _la === MySQLParser.NO_WAIT_SYMBOL || _la === MySQLParser.STORAGE_SYMBOL || _la === MySQLParser.WAIT_SYMBOL || _la === MySQLParser.COMMA_SYMBOL) {
                            {
                                {
                                    this.state = 2538;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === MySQLParser.COMMA_SYMBOL) {
                                        {
                                            this.state = 2537;
                                            this.match(MySQLParser.COMMA_SYMBOL);
                                        }
                                    }
                                    this.state = 2540;
                                    this.dropLogfileGroupOption();
                                }
                            }
                            this.state = 2545;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropTrigger() {
        let _localctx = new DropTriggerContext(this._ctx, this.state);
        this.enterRule(_localctx, 202, MySQLParser.RULE_dropTrigger);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2548;
                this.match(MySQLParser.TRIGGER_SYMBOL);
                this.state = 2550;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 212, this._ctx)) {
                    case 1:
                        {
                            this.state = 2549;
                            this.ifExists();
                        }
                        break;
                }
                this.state = 2552;
                this.triggerRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropView() {
        let _localctx = new DropViewContext(this._ctx, this.state);
        this.enterRule(_localctx, 204, MySQLParser.RULE_dropView);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2554;
                this.match(MySQLParser.VIEW_SYMBOL);
                this.state = 2556;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 213, this._ctx)) {
                    case 1:
                        {
                            this.state = 2555;
                            this.ifExists();
                        }
                        break;
                }
                this.state = 2558;
                this.viewRefList();
                this.state = 2560;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.CASCADE_SYMBOL || _la === MySQLParser.RESTRICT_SYMBOL) {
                    {
                        this.state = 2559;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.CASCADE_SYMBOL || _la === MySQLParser.RESTRICT_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropRole() {
        let _localctx = new DropRoleContext(this._ctx, this.state);
        this.enterRule(_localctx, 206, MySQLParser.RULE_dropRole);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2562;
                this.match(MySQLParser.ROLE_SYMBOL);
                this.state = 2564;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 215, this._ctx)) {
                    case 1:
                        {
                            this.state = 2563;
                            this.ifExists();
                        }
                        break;
                }
                this.state = 2566;
                this.roleList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropSpatialReference() {
        let _localctx = new DropSpatialReferenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 208, MySQLParser.RULE_dropSpatialReference);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2568;
                this.match(MySQLParser.SPATIAL_SYMBOL);
                this.state = 2569;
                this.match(MySQLParser.REFERENCE_SYMBOL);
                this.state = 2570;
                this.match(MySQLParser.SYSTEM_SYMBOL);
                this.state = 2572;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 216, this._ctx)) {
                    case 1:
                        {
                            this.state = 2571;
                            this.ifExists();
                        }
                        break;
                }
                this.state = 2574;
                this.real_ulonglong_number();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropUndoTablespace() {
        let _localctx = new DropUndoTablespaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 210, MySQLParser.RULE_dropUndoTablespace);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2576;
                this.match(MySQLParser.UNDO_SYMBOL);
                this.state = 2577;
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                this.state = 2578;
                this.tablespaceRef();
                this.state = 2580;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ENGINE_SYMBOL || _la === MySQLParser.STORAGE_SYMBOL) {
                    {
                        this.state = 2579;
                        this.undoTableSpaceOptions();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    renameTableStatement() {
        let _localctx = new RenameTableStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 212, MySQLParser.RULE_renameTableStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2582;
                this.match(MySQLParser.RENAME_SYMBOL);
                this.state = 2583;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.TABLES_SYMBOL || _la === MySQLParser.TABLE_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2584;
                this.renamePair();
                this.state = 2589;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 2585;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 2586;
                            this.renamePair();
                        }
                    }
                    this.state = 2591;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    renamePair() {
        let _localctx = new RenamePairContext(this._ctx, this.state);
        this.enterRule(_localctx, 214, MySQLParser.RULE_renamePair);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2592;
                this.tableRef();
                this.state = 2593;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 2594;
                this.tableName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    truncateTableStatement() {
        let _localctx = new TruncateTableStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 216, MySQLParser.RULE_truncateTableStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2596;
                this.match(MySQLParser.TRUNCATE_SYMBOL);
                this.state = 2598;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 219, this._ctx)) {
                    case 1:
                        {
                            this.state = 2597;
                            this.match(MySQLParser.TABLE_SYMBOL);
                        }
                        break;
                }
                this.state = 2600;
                this.tableRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    importStatement() {
        let _localctx = new ImportStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 218, MySQLParser.RULE_importStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2602;
                this.match(MySQLParser.IMPORT_SYMBOL);
                this.state = 2603;
                this.match(MySQLParser.TABLE_SYMBOL);
                this.state = 2604;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 2605;
                this.textStringLiteralList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    callStatement() {
        let _localctx = new CallStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 220, MySQLParser.RULE_callStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2607;
                this.match(MySQLParser.CALL_SYMBOL);
                this.state = 2608;
                this.procedureRef();
                this.state = 2614;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.OPEN_PAR_SYMBOL) {
                    {
                        this.state = 2609;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 2611;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 220, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2610;
                                    this.exprList();
                                }
                                break;
                        }
                        this.state = 2613;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    deleteStatement() {
        let _localctx = new DeleteStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 222, MySQLParser.RULE_deleteStatement);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2618;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 222, this._ctx)) {
                    case 1:
                        {
                            this.state = 2616;
                            if (!(this.serverVersion >= 80000)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                            }
                            this.state = 2617;
                            this.withClause();
                        }
                        break;
                }
                this.state = 2620;
                this.match(MySQLParser.DELETE_SYMBOL);
                this.state = 2624;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 223, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2621;
                                this.deleteStatementOption();
                            }
                        }
                    }
                    this.state = 2626;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 223, this._ctx);
                }
                this.state = 2659;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 232, this._ctx)) {
                    case 1:
                        {
                            this.state = 2627;
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.state = 2651;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 230, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 2628;
                                        this.tableAliasRefList();
                                        this.state = 2629;
                                        this.match(MySQLParser.USING_SYMBOL);
                                        this.state = 2630;
                                        this.tableReferenceList();
                                        this.state = 2632;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === MySQLParser.WHERE_SYMBOL) {
                                            {
                                                this.state = 2631;
                                                this.whereClause();
                                            }
                                        }
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 2634;
                                        this.tableRef();
                                        this.state = 2637;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 225, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 2635;
                                                    if (!(this.serverVersion >= 80017)) {
                                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80017");
                                                    }
                                                    this.state = 2636;
                                                    this.tableAlias();
                                                }
                                                break;
                                        }
                                        this.state = 2640;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 226, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 2639;
                                                    this.partitionDelete();
                                                }
                                                break;
                                        }
                                        this.state = 2643;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === MySQLParser.WHERE_SYMBOL) {
                                            {
                                                this.state = 2642;
                                                this.whereClause();
                                            }
                                        }
                                        this.state = 2646;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === MySQLParser.ORDER_SYMBOL) {
                                            {
                                                this.state = 2645;
                                                this.orderClause();
                                            }
                                        }
                                        this.state = 2649;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === MySQLParser.LIMIT_SYMBOL) {
                                            {
                                                this.state = 2648;
                                                this.simpleLimitClause();
                                            }
                                        }
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 2653;
                            this.tableAliasRefList();
                            this.state = 2654;
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.state = 2655;
                            this.tableReferenceList();
                            this.state = 2657;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.WHERE_SYMBOL) {
                                {
                                    this.state = 2656;
                                    this.whereClause();
                                }
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    partitionDelete() {
        let _localctx = new PartitionDeleteContext(this._ctx, this.state);
        this.enterRule(_localctx, 224, MySQLParser.RULE_partitionDelete);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2661;
                if (!(this.serverVersion >= 50602)) {
                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50602");
                }
                this.state = 2662;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 2663;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 2664;
                this.identifierList();
                this.state = 2665;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    deleteStatementOption() {
        let _localctx = new DeleteStatementOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 226, MySQLParser.RULE_deleteStatementOption);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2667;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.QUICK_SYMBOL || _la === MySQLParser.IGNORE_SYMBOL || _la === MySQLParser.LOW_PRIORITY_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    doStatement() {
        let _localctx = new DoStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 228, MySQLParser.RULE_doStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2669;
                this.match(MySQLParser.DO_SYMBOL);
                this.state = 2674;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 233, this._ctx)) {
                    case 1:
                        {
                            this.state = 2670;
                            if (!(this.serverVersion < 50709)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 50709");
                            }
                            this.state = 2671;
                            this.exprList();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2672;
                            if (!(this.serverVersion >= 50709)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50709");
                            }
                            this.state = 2673;
                            this.selectItemList();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    handlerStatement() {
        let _localctx = new HandlerStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 230, MySQLParser.RULE_handlerStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2676;
                this.match(MySQLParser.HANDLER_SYMBOL);
                this.state = 2694;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 238, this._ctx)) {
                    case 1:
                        {
                            this.state = 2677;
                            this.tableRef();
                            this.state = 2678;
                            this.match(MySQLParser.OPEN_SYMBOL);
                            this.state = 2680;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 234, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 2679;
                                        this.tableAlias();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 2682;
                            this.identifier();
                            this.state = 2692;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case MySQLParser.CLOSE_SYMBOL:
                                    {
                                        this.state = 2683;
                                        this.match(MySQLParser.CLOSE_SYMBOL);
                                    }
                                    break;
                                case MySQLParser.READ_SYMBOL:
                                    {
                                        this.state = 2684;
                                        this.match(MySQLParser.READ_SYMBOL);
                                        this.state = 2685;
                                        this.handlerReadOrScan();
                                        this.state = 2687;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === MySQLParser.WHERE_SYMBOL) {
                                            {
                                                this.state = 2686;
                                                this.whereClause();
                                            }
                                        }
                                        this.state = 2690;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === MySQLParser.LIMIT_SYMBOL) {
                                            {
                                                this.state = 2689;
                                                this.limitClause();
                                            }
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    handlerReadOrScan() {
        let _localctx = new HandlerReadOrScanContext(this._ctx, this.state);
        this.enterRule(_localctx, 232, MySQLParser.RULE_handlerReadOrScan);
        let _la;
        try {
            this.state = 2706;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 240, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2696;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.FIRST_SYMBOL || _la === MySQLParser.NEXT_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2697;
                        this.identifier();
                        this.state = 2704;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case MySQLParser.FIRST_SYMBOL:
                            case MySQLParser.LAST_SYMBOL:
                            case MySQLParser.NEXT_SYMBOL:
                            case MySQLParser.PREV_SYMBOL:
                                {
                                    this.state = 2698;
                                    _la = this._input.LA(1);
                                    if (!(_la === MySQLParser.FIRST_SYMBOL || _la === MySQLParser.LAST_SYMBOL || _la === MySQLParser.NEXT_SYMBOL || _la === MySQLParser.PREV_SYMBOL)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                }
                                break;
                            case MySQLParser.EQUAL_OPERATOR:
                            case MySQLParser.GREATER_OR_EQUAL_OPERATOR:
                            case MySQLParser.GREATER_THAN_OPERATOR:
                            case MySQLParser.LESS_OR_EQUAL_OPERATOR:
                            case MySQLParser.LESS_THAN_OPERATOR:
                                {
                                    this.state = 2699;
                                    _la = this._input.LA(1);
                                    if (!(((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (MySQLParser.EQUAL_OPERATOR - 383)) | (1 << (MySQLParser.GREATER_OR_EQUAL_OPERATOR - 383)) | (1 << (MySQLParser.GREATER_THAN_OPERATOR - 383)) | (1 << (MySQLParser.LESS_OR_EQUAL_OPERATOR - 383)) | (1 << (MySQLParser.LESS_THAN_OPERATOR - 383)))) !== 0))) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 2700;
                                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                    this.state = 2701;
                                    this.values();
                                    this.state = 2702;
                                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    insertStatement() {
        let _localctx = new InsertStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 234, MySQLParser.RULE_insertStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2708;
                this.match(MySQLParser.INSERT_SYMBOL);
                this.state = 2710;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 241, this._ctx)) {
                    case 1:
                        {
                            this.state = 2709;
                            this.insertLockOption();
                        }
                        break;
                }
                this.state = 2713;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 242, this._ctx)) {
                    case 1:
                        {
                            this.state = 2712;
                            this.match(MySQLParser.IGNORE_SYMBOL);
                        }
                        break;
                }
                this.state = 2716;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 243, this._ctx)) {
                    case 1:
                        {
                            this.state = 2715;
                            this.match(MySQLParser.INTO_SYMBOL);
                        }
                        break;
                }
                this.state = 2718;
                this.tableRef();
                this.state = 2720;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 244, this._ctx)) {
                    case 1:
                        {
                            this.state = 2719;
                            this.usePartition();
                        }
                        break;
                }
                this.state = 2734;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 247, this._ctx)) {
                    case 1:
                        {
                            this.state = 2722;
                            this.insertFromConstructor();
                            this.state = 2725;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 245, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 2723;
                                        if (!(this.serverVersion >= 80018)) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, " this.serverVersion >= 80018");
                                        }
                                        this.state = 2724;
                                        this.valuesReference();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 2727;
                            this.match(MySQLParser.SET_SYMBOL);
                            this.state = 2728;
                            this.updateList();
                            this.state = 2731;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 246, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 2729;
                                        if (!(this.serverVersion >= 80018)) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, " this.serverVersion >= 80018");
                                        }
                                        this.state = 2730;
                                        this.valuesReference();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 3:
                        {
                            this.state = 2733;
                            this.insertQueryExpression();
                        }
                        break;
                }
                this.state = 2737;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ON_SYMBOL) {
                    {
                        this.state = 2736;
                        this.insertUpdateList();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    insertLockOption() {
        let _localctx = new InsertLockOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 236, MySQLParser.RULE_insertLockOption);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2739;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.DELAYED_SYMBOL || _la === MySQLParser.HIGH_PRIORITY_SYMBOL || _la === MySQLParser.LOW_PRIORITY_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    insertFromConstructor() {
        let _localctx = new InsertFromConstructorContext(this._ctx, this.state);
        this.enterRule(_localctx, 238, MySQLParser.RULE_insertFromConstructor);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2746;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.OPEN_PAR_SYMBOL) {
                    {
                        this.state = 2741;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 2743;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 249, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2742;
                                    this.fields();
                                }
                                break;
                        }
                        this.state = 2745;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                }
                this.state = 2748;
                this.insertValues();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fields() {
        let _localctx = new FieldsContext(this._ctx, this.state);
        this.enterRule(_localctx, 240, MySQLParser.RULE_fields);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2750;
                this.insertIdentifier();
                this.state = 2755;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 2751;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 2752;
                            this.insertIdentifier();
                        }
                    }
                    this.state = 2757;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    insertValues() {
        let _localctx = new InsertValuesContext(this._ctx, this.state);
        this.enterRule(_localctx, 242, MySQLParser.RULE_insertValues);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2758;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.VALUE_SYMBOL || _la === MySQLParser.VALUES_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2759;
                this.valueList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    insertQueryExpression() {
        let _localctx = new InsertQueryExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 244, MySQLParser.RULE_insertQueryExpression);
        try {
            this.state = 2768;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 253, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2761;
                        this.queryExpressionOrParens();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2762;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 2764;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 252, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2763;
                                    this.fields();
                                }
                                break;
                        }
                        this.state = 2766;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 2767;
                        this.queryExpressionOrParens();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    valueList() {
        let _localctx = new ValueListContext(this._ctx, this.state);
        this.enterRule(_localctx, 246, MySQLParser.RULE_valueList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2770;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 2772;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 254, this._ctx)) {
                    case 1:
                        {
                            this.state = 2771;
                            this.values();
                        }
                        break;
                }
                this.state = 2774;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 2783;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2775;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 2776;
                                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                this.state = 2778;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 255, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 2777;
                                            this.values();
                                        }
                                        break;
                                }
                                this.state = 2780;
                                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                            }
                        }
                    }
                    this.state = 2785;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    values() {
        let _localctx = new ValuesContext(this._ctx, this.state);
        this.enterRule(_localctx, 248, MySQLParser.RULE_values);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2788;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 257, this._ctx)) {
                    case 1:
                        {
                            this.state = 2786;
                            this.expr(0);
                        }
                        break;
                    case 2:
                        {
                            this.state = 2787;
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                }
                this.state = 2797;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 2790;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 2793;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 258, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 2791;
                                        this.expr(0);
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 2792;
                                        this.match(MySQLParser.DEFAULT_SYMBOL);
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 2799;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    valuesReference() {
        let _localctx = new ValuesReferenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 250, MySQLParser.RULE_valuesReference);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2800;
                this.match(MySQLParser.AS_SYMBOL);
                this.state = 2801;
                this.identifier();
                this.state = 2803;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.OPEN_PAR_SYMBOL) {
                    {
                        this.state = 2802;
                        this.columnInternalRefList();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    insertUpdateList() {
        let _localctx = new InsertUpdateListContext(this._ctx, this.state);
        this.enterRule(_localctx, 252, MySQLParser.RULE_insertUpdateList);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2805;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 2806;
                this.match(MySQLParser.DUPLICATE_SYMBOL);
                this.state = 2807;
                this.match(MySQLParser.KEY_SYMBOL);
                this.state = 2808;
                this.match(MySQLParser.UPDATE_SYMBOL);
                this.state = 2809;
                this.updateList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    loadStatement() {
        let _localctx = new LoadStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 254, MySQLParser.RULE_loadStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2811;
                this.match(MySQLParser.LOAD_SYMBOL);
                this.state = 2812;
                this.dataOrXml();
                this.state = 2814;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.CONCURRENT_SYMBOL || _la === MySQLParser.LOW_PRIORITY_SYMBOL) {
                    {
                        this.state = 2813;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.CONCURRENT_SYMBOL || _la === MySQLParser.LOW_PRIORITY_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 2817;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.LOCAL_SYMBOL) {
                    {
                        this.state = 2816;
                        this.match(MySQLParser.LOCAL_SYMBOL);
                    }
                }
                this.state = 2819;
                this.match(MySQLParser.INFILE_SYMBOL);
                this.state = 2820;
                this.textLiteral();
                this.state = 2822;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.IGNORE_SYMBOL || _la === MySQLParser.REPLACE_SYMBOL) {
                    {
                        this.state = 2821;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.IGNORE_SYMBOL || _la === MySQLParser.REPLACE_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 2824;
                this.match(MySQLParser.INTO_SYMBOL);
                this.state = 2825;
                this.match(MySQLParser.TABLE_SYMBOL);
                this.state = 2826;
                this.tableRef();
                this.state = 2828;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 264, this._ctx)) {
                    case 1:
                        {
                            this.state = 2827;
                            this.usePartition();
                        }
                        break;
                }
                this.state = 2831;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.CHARSET_SYMBOL || _la === MySQLParser.CHAR_SYMBOL) {
                    {
                        this.state = 2830;
                        this.charsetClause();
                    }
                }
                this.state = 2834;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ROWS_SYMBOL) {
                    {
                        this.state = 2833;
                        this.xmlRowsIdentifiedBy();
                    }
                }
                this.state = 2837;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.COLUMNS_SYMBOL) {
                    {
                        this.state = 2836;
                        this.fieldsClause();
                    }
                }
                this.state = 2840;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.LINES_SYMBOL) {
                    {
                        this.state = 2839;
                        this.linesClause();
                    }
                }
                this.state = 2842;
                this.loadDataFileTail();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dataOrXml() {
        let _localctx = new DataOrXmlContext(this._ctx, this.state);
        this.enterRule(_localctx, 256, MySQLParser.RULE_dataOrXml);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2844;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.DATA_SYMBOL || _la === MySQLParser.XML_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    xmlRowsIdentifiedBy() {
        let _localctx = new XmlRowsIdentifiedByContext(this._ctx, this.state);
        this.enterRule(_localctx, 258, MySQLParser.RULE_xmlRowsIdentifiedBy);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2846;
                this.match(MySQLParser.ROWS_SYMBOL);
                this.state = 2847;
                this.match(MySQLParser.IDENTIFIED_SYMBOL);
                this.state = 2848;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 2849;
                this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    loadDataFileTail() {
        let _localctx = new LoadDataFileTailContext(this._ctx, this.state);
        this.enterRule(_localctx, 260, MySQLParser.RULE_loadDataFileTail);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2854;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.IGNORE_SYMBOL) {
                    {
                        this.state = 2851;
                        this.match(MySQLParser.IGNORE_SYMBOL);
                        this.state = 2852;
                        this.match(MySQLParser.INT_NUMBER);
                        this.state = 2853;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.ROWS_SYMBOL || _la === MySQLParser.LINES_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 2857;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.OPEN_PAR_SYMBOL) {
                    {
                        this.state = 2856;
                        this.loadDataFileTargetList();
                    }
                }
                this.state = 2861;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.SET_SYMBOL) {
                    {
                        this.state = 2859;
                        this.match(MySQLParser.SET_SYMBOL);
                        this.state = 2860;
                        this.updateList();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    loadDataFileTargetList() {
        let _localctx = new LoadDataFileTargetListContext(this._ctx, this.state);
        this.enterRule(_localctx, 262, MySQLParser.RULE_loadDataFileTargetList);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2863;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 2865;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 272, this._ctx)) {
                    case 1:
                        {
                            this.state = 2864;
                            this.fieldOrVariableList();
                        }
                        break;
                }
                this.state = 2867;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fieldOrVariableList() {
        let _localctx = new FieldOrVariableListContext(this._ctx, this.state);
        this.enterRule(_localctx, 264, MySQLParser.RULE_fieldOrVariableList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2871;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 273, this._ctx)) {
                    case 1:
                        {
                            this.state = 2869;
                            this.columnRef();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2870;
                            this.userVariable();
                        }
                        break;
                }
                this.state = 2880;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 2873;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 2876;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 274, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 2874;
                                        this.columnRef();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 2875;
                                        this.userVariable();
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 2882;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    replaceStatement() {
        let _localctx = new ReplaceStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 266, MySQLParser.RULE_replaceStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2883;
                this.match(MySQLParser.REPLACE_SYMBOL);
                this.state = 2885;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 276, this._ctx)) {
                    case 1:
                        {
                            this.state = 2884;
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.DELAYED_SYMBOL || _la === MySQLParser.LOW_PRIORITY_SYMBOL)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                }
                this.state = 2888;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 277, this._ctx)) {
                    case 1:
                        {
                            this.state = 2887;
                            this.match(MySQLParser.INTO_SYMBOL);
                        }
                        break;
                }
                this.state = 2890;
                this.tableRef();
                this.state = 2892;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 278, this._ctx)) {
                    case 1:
                        {
                            this.state = 2891;
                            this.usePartition();
                        }
                        break;
                }
                this.state = 2898;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 279, this._ctx)) {
                    case 1:
                        {
                            this.state = 2894;
                            this.insertFromConstructor();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2895;
                            this.match(MySQLParser.SET_SYMBOL);
                            this.state = 2896;
                            this.updateList();
                        }
                        break;
                    case 3:
                        {
                            this.state = 2897;
                            this.insertQueryExpression();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    selectStatement() {
        let _localctx = new SelectStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 268, MySQLParser.RULE_selectStatement);
        try {
            this.state = 2903;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 280, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2900;
                        this.queryExpression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2901;
                        this.queryExpressionParens();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2902;
                        this.selectStatementWithInto();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    selectStatementWithInto() {
        let _localctx = new SelectStatementWithIntoContext(this._ctx, this.state);
        this.enterRule(_localctx, 270, MySQLParser.RULE_selectStatementWithInto);
        try {
            this.state = 2912;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 281, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2905;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 2906;
                        this.selectStatementWithInto();
                        this.state = 2907;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2909;
                        this.queryExpression();
                        this.state = 2910;
                        this.intoClause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    queryExpression() {
        let _localctx = new QueryExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 272, MySQLParser.RULE_queryExpression);
        let _la;
        try {
            this.state = 2948;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 291, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2916;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 282, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2914;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 2915;
                                    this.withClause();
                                }
                                break;
                        }
                        this.state = 2933;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 287, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2918;
                                    this.queryExpressionBody(0);
                                    this.state = 2920;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 283, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 2919;
                                                this.orderClause();
                                            }
                                            break;
                                    }
                                    this.state = 2923;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 284, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 2922;
                                                this.limitClause();
                                            }
                                            break;
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.state = 2925;
                                    this.queryExpressionParens();
                                    this.state = 2931;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case MySQLParser.ORDER_SYMBOL:
                                            {
                                                this.state = 2926;
                                                this.orderClause();
                                                this.state = 2928;
                                                this._errHandler.sync(this);
                                                switch (this.interpreter.adaptivePredict(this._input, 285, this._ctx)) {
                                                    case 1:
                                                        {
                                                            this.state = 2927;
                                                            this.limitClause();
                                                        }
                                                        break;
                                                }
                                            }
                                            break;
                                        case MySQLParser.LIMIT_SYMBOL:
                                            {
                                                this.state = 2930;
                                                this.limitClause();
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException_1.NoViableAltException(this);
                                    }
                                }
                                break;
                        }
                        this.state = 2937;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 288, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2935;
                                    if (!(this.serverVersion < 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80000");
                                    }
                                    this.state = 2936;
                                    this.procedureAnalyseClause();
                                }
                                break;
                        }
                        this.state = 2940;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.FOR_SYMBOL || _la === MySQLParser.LOCK_SYMBOL) {
                            {
                                this.state = 2939;
                                this.lockingClause();
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2942;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 2943;
                        this.withClause();
                        this.state = 2944;
                        this.queryExpressionParens();
                        this.state = 2946;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.FOR_SYMBOL || _la === MySQLParser.LOCK_SYMBOL) {
                            {
                                this.state = 2945;
                                this.lockingClause();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    queryExpressionBody(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let _localctx = new QueryExpressionBodyContext(this._ctx, _parentState);
        let _prevctx = _localctx;
        let _startState = 274;
        this.enterRecursionRule(_localctx, 274, MySQLParser.RULE_queryExpressionBody, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2961;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case MySQLParser.SELECT_SYMBOL:
                        {
                            this.state = 2951;
                            this.querySpecification();
                        }
                        break;
                    case MySQLParser.OPEN_PAR_SYMBOL:
                        {
                            this.state = 2952;
                            this.queryExpressionParens();
                            this.state = 2953;
                            this.match(MySQLParser.UNION_SYMBOL);
                            this.state = 2955;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.ALL_SYMBOL || _la === MySQLParser.DISTINCT_SYMBOL) {
                                {
                                    this.state = 2954;
                                    this.unionOption();
                                }
                            }
                            this.state = 2959;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case MySQLParser.SELECT_SYMBOL:
                                    {
                                        this.state = 2957;
                                        this.querySpecification();
                                    }
                                    break;
                                case MySQLParser.OPEN_PAR_SYMBOL:
                                    {
                                        this.state = 2958;
                                        this.queryExpressionParens();
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 2974;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 297, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            {
                                _localctx = new QueryExpressionBodyContext(_parentctx, _parentState);
                                this.pushNewRecursionContext(_localctx, _startState, MySQLParser.RULE_queryExpressionBody);
                                this.state = 2963;
                                if (!(this.precpred(this._ctx, 2))) {
                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                                }
                                this.state = 2964;
                                this.match(MySQLParser.UNION_SYMBOL);
                                this.state = 2966;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === MySQLParser.ALL_SYMBOL || _la === MySQLParser.DISTINCT_SYMBOL) {
                                    {
                                        this.state = 2965;
                                        this.unionOption();
                                    }
                                }
                                this.state = 2970;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case MySQLParser.SELECT_SYMBOL:
                                        {
                                            this.state = 2968;
                                            this.querySpecification();
                                        }
                                        break;
                                    case MySQLParser.OPEN_PAR_SYMBOL:
                                        {
                                            this.state = 2969;
                                            this.queryExpressionParens();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                            }
                        }
                    }
                    this.state = 2976;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 297, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }
    // @RuleVersion(0)
    queryExpressionParens() {
        let _localctx = new QueryExpressionParensContext(this._ctx, this.state);
        this.enterRule(_localctx, 276, MySQLParser.RULE_queryExpressionParens);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2977;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 2980;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 298, this._ctx)) {
                    case 1:
                        {
                            this.state = 2978;
                            this.queryExpressionParens();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2979;
                            this.queryExpression();
                        }
                        break;
                }
                this.state = 2982;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    querySpecification() {
        let _localctx = new QuerySpecificationContext(this._ctx, this.state);
        this.enterRule(_localctx, 278, MySQLParser.RULE_querySpecification);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2984;
                this.match(MySQLParser.SELECT_SYMBOL);
                this.state = 2988;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 299, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2985;
                                this.selectOption();
                            }
                        }
                    }
                    this.state = 2990;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 299, this._ctx);
                }
                this.state = 2991;
                this.selectItemList();
                this.state = 2993;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 300, this._ctx)) {
                    case 1:
                        {
                            this.state = 2992;
                            this.intoClause();
                        }
                        break;
                }
                this.state = 2996;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 301, this._ctx)) {
                    case 1:
                        {
                            this.state = 2995;
                            this.fromClause();
                        }
                        break;
                }
                this.state = 2999;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 302, this._ctx)) {
                    case 1:
                        {
                            this.state = 2998;
                            this.whereClause();
                        }
                        break;
                }
                this.state = 3002;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 303, this._ctx)) {
                    case 1:
                        {
                            this.state = 3001;
                            this.groupByClause();
                        }
                        break;
                }
                this.state = 3005;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 304, this._ctx)) {
                    case 1:
                        {
                            this.state = 3004;
                            this.havingClause();
                        }
                        break;
                }
                this.state = 3009;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 305, this._ctx)) {
                    case 1:
                        {
                            this.state = 3007;
                            if (!(this.serverVersion >= 80000)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                            }
                            this.state = 3008;
                            this.windowClause();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    subquery() {
        let _localctx = new SubqueryContext(this._ctx, this.state);
        this.enterRule(_localctx, 280, MySQLParser.RULE_subquery);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3011;
                this.queryExpressionParens();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    querySpecOption() {
        let _localctx = new QuerySpecOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 282, MySQLParser.RULE_querySpecOption);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3013;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.SQL_BUFFER_RESULT_SYMBOL || _la === MySQLParser.ALL_SYMBOL || _la === MySQLParser.DISTINCT_SYMBOL || _la === MySQLParser.HIGH_PRIORITY_SYMBOL || ((((_la - 629)) & ~0x1F) === 0 && ((1 << (_la - 629)) & ((1 << (MySQLParser.SQL_BIG_RESULT_SYMBOL - 629)) | (1 << (MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL - 629)) | (1 << (MySQLParser.SQL_SMALL_RESULT_SYMBOL - 629)) | (1 << (MySQLParser.STRAIGHT_JOIN_SYMBOL - 629)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    limitClause() {
        let _localctx = new LimitClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 284, MySQLParser.RULE_limitClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3015;
                this.match(MySQLParser.LIMIT_SYMBOL);
                this.state = 3016;
                this.limitOptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    simpleLimitClause() {
        let _localctx = new SimpleLimitClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 286, MySQLParser.RULE_simpleLimitClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3018;
                this.match(MySQLParser.LIMIT_SYMBOL);
                this.state = 3019;
                this.limitOption();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    limitOptions() {
        let _localctx = new LimitOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 288, MySQLParser.RULE_limitOptions);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3021;
                this.limitOption();
                this.state = 3024;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 306, this._ctx)) {
                    case 1:
                        {
                            this.state = 3022;
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.OFFSET_SYMBOL || _la === MySQLParser.COMMA_SYMBOL)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 3023;
                            this.limitOption();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    limitOption() {
        let _localctx = new LimitOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 290, MySQLParser.RULE_limitOption);
        let _la;
        try {
            this.state = 3028;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 307, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3026;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3027;
                        _la = this._input.LA(1);
                        if (!(((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (MySQLParser.INT_NUMBER - 380)) | (1 << (MySQLParser.LONG_NUMBER - 380)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || _la === MySQLParser.PARAM_MARKER)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    intoClause() {
        let _localctx = new IntoClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 292, MySQLParser.RULE_intoClause);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3030;
                this.match(MySQLParser.INTO_SYMBOL);
                this.state = 3058;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 314, this._ctx)) {
                    case 1:
                        {
                            this.state = 3031;
                            this.match(MySQLParser.OUTFILE_SYMBOL);
                            this.state = 3032;
                            this.textStringLiteral();
                            this.state = 3034;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 308, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3033;
                                        this.charsetClause();
                                    }
                                    break;
                            }
                            this.state = 3037;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 309, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3036;
                                        this.fieldsClause();
                                    }
                                    break;
                            }
                            this.state = 3040;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 310, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3039;
                                        this.linesClause();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 3042;
                            this.match(MySQLParser.DUMPFILE_SYMBOL);
                            this.state = 3043;
                            this.textStringLiteral();
                        }
                        break;
                    case 3:
                        {
                            this.state = 3046;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 311, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3044;
                                        this.textOrIdentifier();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 3045;
                                        this.userVariable();
                                    }
                                    break;
                            }
                            this.state = 3055;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 313, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 3048;
                                            this.match(MySQLParser.COMMA_SYMBOL);
                                            this.state = 3051;
                                            this._errHandler.sync(this);
                                            switch (this.interpreter.adaptivePredict(this._input, 312, this._ctx)) {
                                                case 1:
                                                    {
                                                        this.state = 3049;
                                                        this.textOrIdentifier();
                                                    }
                                                    break;
                                                case 2:
                                                    {
                                                        this.state = 3050;
                                                        this.userVariable();
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                }
                                this.state = 3057;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 313, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    procedureAnalyseClause() {
        let _localctx = new ProcedureAnalyseClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 294, MySQLParser.RULE_procedureAnalyseClause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3060;
                this.match(MySQLParser.PROCEDURE_SYMBOL);
                this.state = 3061;
                this.match(MySQLParser.ANALYSE_SYMBOL);
                this.state = 3062;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 3068;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.INT_NUMBER) {
                    {
                        this.state = 3063;
                        this.match(MySQLParser.INT_NUMBER);
                        this.state = 3066;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.COMMA_SYMBOL) {
                            {
                                this.state = 3064;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 3065;
                                this.match(MySQLParser.INT_NUMBER);
                            }
                        }
                    }
                }
                this.state = 3070;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    havingClause() {
        let _localctx = new HavingClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 296, MySQLParser.RULE_havingClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3072;
                this.match(MySQLParser.HAVING_SYMBOL);
                this.state = 3073;
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowClause() {
        let _localctx = new WindowClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 298, MySQLParser.RULE_windowClause);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3075;
                this.match(MySQLParser.WINDOW_SYMBOL);
                this.state = 3076;
                this.windowDefinition();
                this.state = 3081;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 317, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3077;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 3078;
                                this.windowDefinition();
                            }
                        }
                    }
                    this.state = 3083;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 317, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowDefinition() {
        let _localctx = new WindowDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 300, MySQLParser.RULE_windowDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3084;
                this.windowName();
                this.state = 3085;
                this.match(MySQLParser.AS_SYMBOL);
                this.state = 3086;
                this.windowSpec();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowSpec() {
        let _localctx = new WindowSpecContext(this._ctx, this.state);
        this.enterRule(_localctx, 302, MySQLParser.RULE_windowSpec);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3088;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 3089;
                this.windowSpecDetails();
                this.state = 3090;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowSpecDetails() {
        let _localctx = new WindowSpecDetailsContext(this._ctx, this.state);
        this.enterRule(_localctx, 304, MySQLParser.RULE_windowSpecDetails);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3093;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 318, this._ctx)) {
                    case 1:
                        {
                            this.state = 3092;
                            this.windowName();
                        }
                        break;
                }
                this.state = 3098;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.PARTITION_SYMBOL) {
                    {
                        this.state = 3095;
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.state = 3096;
                        this.match(MySQLParser.BY_SYMBOL);
                        this.state = 3097;
                        this.orderList();
                    }
                }
                this.state = 3101;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ORDER_SYMBOL) {
                    {
                        this.state = 3100;
                        this.orderClause();
                    }
                }
                this.state = 3104;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ROWS_SYMBOL || _la === MySQLParser.RANGE_SYMBOL || _la === MySQLParser.GROUPS_SYMBOL) {
                    {
                        this.state = 3103;
                        this.windowFrameClause();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowFrameClause() {
        let _localctx = new WindowFrameClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 306, MySQLParser.RULE_windowFrameClause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3106;
                this.windowFrameUnits();
                this.state = 3107;
                this.windowFrameExtent();
                this.state = 3109;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.EXCLUDE_SYMBOL) {
                    {
                        this.state = 3108;
                        this.windowFrameExclusion();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowFrameUnits() {
        let _localctx = new WindowFrameUnitsContext(this._ctx, this.state);
        this.enterRule(_localctx, 308, MySQLParser.RULE_windowFrameUnits);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3111;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.ROWS_SYMBOL || _la === MySQLParser.RANGE_SYMBOL || _la === MySQLParser.GROUPS_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowFrameExtent() {
        let _localctx = new WindowFrameExtentContext(this._ctx, this.state);
        this.enterRule(_localctx, 310, MySQLParser.RULE_windowFrameExtent);
        try {
            this.state = 3115;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.CURRENT_SYMBOL:
                case MySQLParser.INT_NUMBER:
                case MySQLParser.LONG_NUMBER:
                case MySQLParser.ULONGLONG_NUMBER:
                case MySQLParser.PARAM_MARKER:
                case MySQLParser.DECIMAL_NUMBER:
                case MySQLParser.FLOAT_NUMBER:
                case MySQLParser.INTERVAL_SYMBOL:
                case MySQLParser.UNBOUNDED_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3113;
                        this.windowFrameStart();
                    }
                    break;
                case MySQLParser.BETWEEN_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3114;
                        this.windowFrameBetween();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowFrameStart() {
        let _localctx = new WindowFrameStartContext(this._ctx, this.state);
        this.enterRule(_localctx, 312, MySQLParser.RULE_windowFrameStart);
        try {
            this.state = 3131;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.UNBOUNDED_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3117;
                        this.match(MySQLParser.UNBOUNDED_SYMBOL);
                        this.state = 3118;
                        this.match(MySQLParser.PRECEDING_SYMBOL);
                    }
                    break;
                case MySQLParser.INT_NUMBER:
                case MySQLParser.LONG_NUMBER:
                case MySQLParser.ULONGLONG_NUMBER:
                case MySQLParser.DECIMAL_NUMBER:
                case MySQLParser.FLOAT_NUMBER:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3119;
                        this.ulonglong_number();
                        this.state = 3120;
                        this.match(MySQLParser.PRECEDING_SYMBOL);
                    }
                    break;
                case MySQLParser.PARAM_MARKER:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3122;
                        this.match(MySQLParser.PARAM_MARKER);
                        this.state = 3123;
                        this.match(MySQLParser.PRECEDING_SYMBOL);
                    }
                    break;
                case MySQLParser.INTERVAL_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3124;
                        this.match(MySQLParser.INTERVAL_SYMBOL);
                        this.state = 3125;
                        this.expr(0);
                        this.state = 3126;
                        this.interval();
                        this.state = 3127;
                        this.match(MySQLParser.PRECEDING_SYMBOL);
                    }
                    break;
                case MySQLParser.CURRENT_SYMBOL:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3129;
                        this.match(MySQLParser.CURRENT_SYMBOL);
                        this.state = 3130;
                        this.match(MySQLParser.ROW_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowFrameBetween() {
        let _localctx = new WindowFrameBetweenContext(this._ctx, this.state);
        this.enterRule(_localctx, 314, MySQLParser.RULE_windowFrameBetween);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3133;
                this.match(MySQLParser.BETWEEN_SYMBOL);
                this.state = 3134;
                this.windowFrameBound();
                this.state = 3135;
                this.match(MySQLParser.AND_SYMBOL);
                this.state = 3136;
                this.windowFrameBound();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowFrameBound() {
        let _localctx = new WindowFrameBoundContext(this._ctx, this.state);
        this.enterRule(_localctx, 316, MySQLParser.RULE_windowFrameBound);
        try {
            this.state = 3151;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 325, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3138;
                        this.windowFrameStart();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3139;
                        this.match(MySQLParser.UNBOUNDED_SYMBOL);
                        this.state = 3140;
                        this.match(MySQLParser.FOLLOWING_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3141;
                        this.ulonglong_number();
                        this.state = 3142;
                        this.match(MySQLParser.FOLLOWING_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3144;
                        this.match(MySQLParser.PARAM_MARKER);
                        this.state = 3145;
                        this.match(MySQLParser.FOLLOWING_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3146;
                        this.match(MySQLParser.INTERVAL_SYMBOL);
                        this.state = 3147;
                        this.expr(0);
                        this.state = 3148;
                        this.interval();
                        this.state = 3149;
                        this.match(MySQLParser.FOLLOWING_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowFrameExclusion() {
        let _localctx = new WindowFrameExclusionContext(this._ctx, this.state);
        this.enterRule(_localctx, 318, MySQLParser.RULE_windowFrameExclusion);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3153;
                this.match(MySQLParser.EXCLUDE_SYMBOL);
                this.state = 3160;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case MySQLParser.CURRENT_SYMBOL:
                        {
                            this.state = 3154;
                            this.match(MySQLParser.CURRENT_SYMBOL);
                            this.state = 3155;
                            this.match(MySQLParser.ROW_SYMBOL);
                        }
                        break;
                    case MySQLParser.GROUP_SYMBOL:
                        {
                            this.state = 3156;
                            this.match(MySQLParser.GROUP_SYMBOL);
                        }
                        break;
                    case MySQLParser.TIES_SYMBOL:
                        {
                            this.state = 3157;
                            this.match(MySQLParser.TIES_SYMBOL);
                        }
                        break;
                    case MySQLParser.NO_SYMBOL:
                        {
                            this.state = 3158;
                            this.match(MySQLParser.NO_SYMBOL);
                            this.state = 3159;
                            this.match(MySQLParser.OTHERS_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    withClause() {
        let _localctx = new WithClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 320, MySQLParser.RULE_withClause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3162;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 3164;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 327, this._ctx)) {
                    case 1:
                        {
                            this.state = 3163;
                            this.match(MySQLParser.RECURSIVE_SYMBOL);
                        }
                        break;
                }
                this.state = 3166;
                this.commonTableExpression();
                this.state = 3171;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 3167;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 3168;
                            this.commonTableExpression();
                        }
                    }
                    this.state = 3173;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    commonTableExpression() {
        let _localctx = new CommonTableExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 322, MySQLParser.RULE_commonTableExpression);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3174;
                this.identifier();
                this.state = 3176;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.OPEN_PAR_SYMBOL) {
                    {
                        this.state = 3175;
                        this.columnInternalRefList();
                    }
                }
                this.state = 3178;
                this.match(MySQLParser.AS_SYMBOL);
                this.state = 3179;
                this.subquery();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    groupByClause() {
        let _localctx = new GroupByClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 324, MySQLParser.RULE_groupByClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3181;
                this.match(MySQLParser.GROUP_SYMBOL);
                this.state = 3182;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 3183;
                this.orderList();
                this.state = 3185;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 330, this._ctx)) {
                    case 1:
                        {
                            this.state = 3184;
                            this.olapOption();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    olapOption() {
        let _localctx = new OlapOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 326, MySQLParser.RULE_olapOption);
        try {
            this.state = 3192;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 331, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3187;
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.state = 3188;
                        this.match(MySQLParser.ROLLUP_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3189;
                        if (!(this.serverVersion < 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80000");
                        }
                        this.state = 3190;
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.state = 3191;
                        this.match(MySQLParser.CUBE_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    orderClause() {
        let _localctx = new OrderClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 328, MySQLParser.RULE_orderClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3194;
                this.match(MySQLParser.ORDER_SYMBOL);
                this.state = 3195;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 3196;
                this.orderList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    direction() {
        let _localctx = new DirectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 330, MySQLParser.RULE_direction);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3198;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.ASC_SYMBOL || _la === MySQLParser.DESC_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fromClause() {
        let _localctx = new FromClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 332, MySQLParser.RULE_fromClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3200;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 3203;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 332, this._ctx)) {
                    case 1:
                        {
                            this.state = 3201;
                            this.match(MySQLParser.DUAL_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                            this.state = 3202;
                            this.tableReferenceList();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableReferenceList() {
        let _localctx = new TableReferenceListContext(this._ctx, this.state);
        this.enterRule(_localctx, 334, MySQLParser.RULE_tableReferenceList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3205;
                this.tableReference();
                this.state = 3210;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3206;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 3207;
                                this.tableReference();
                            }
                        }
                    }
                    this.state = 3212;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    selectOption() {
        let _localctx = new SelectOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 336, MySQLParser.RULE_selectOption);
        try {
            this.state = 3221;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 334, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3213;
                        this.querySpecOption();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3214;
                        this.match(MySQLParser.SQL_NO_CACHE_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3215;
                        if (!(this.serverVersion < 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80000");
                        }
                        this.state = 3216;
                        this.match(MySQLParser.SQL_CACHE_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3217;
                        if (!(this.serverVersion >= 50704 && this.serverVersion < 50708)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50704 && this.serverVersion < 50708");
                        }
                        this.state = 3218;
                        this.match(MySQLParser.MAX_STATEMENT_TIME_SYMBOL);
                        this.state = 3219;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3220;
                        this.real_ulong_number();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lockingClause() {
        let _localctx = new LockingClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 338, MySQLParser.RULE_lockingClause);
        try {
            this.state = 3238;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.FOR_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3223;
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.state = 3224;
                        this.lockStrengh();
                        this.state = 3228;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 335, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3225;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 3226;
                                    this.match(MySQLParser.OF_SYMBOL);
                                    this.state = 3227;
                                    this.tableAliasRefList();
                                }
                                break;
                        }
                        this.state = 3232;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 336, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3230;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 3231;
                                    this.lockedRowAction();
                                }
                                break;
                        }
                    }
                    break;
                case MySQLParser.LOCK_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3234;
                        this.match(MySQLParser.LOCK_SYMBOL);
                        this.state = 3235;
                        this.match(MySQLParser.IN_SYMBOL);
                        this.state = 3236;
                        this.match(MySQLParser.SHARE_SYMBOL);
                        this.state = 3237;
                        this.match(MySQLParser.MODE_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lockStrengh() {
        let _localctx = new LockStrenghContext(this._ctx, this.state);
        this.enterRule(_localctx, 340, MySQLParser.RULE_lockStrengh);
        try {
            this.state = 3243;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 338, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3240;
                        this.match(MySQLParser.UPDATE_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3241;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 3242;
                        this.match(MySQLParser.SHARE_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lockedRowAction() {
        let _localctx = new LockedRowActionContext(this._ctx, this.state);
        this.enterRule(_localctx, 342, MySQLParser.RULE_lockedRowAction);
        try {
            this.state = 3248;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.SKIP_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3245;
                        this.match(MySQLParser.SKIP_SYMBOL);
                        this.state = 3246;
                        this.match(MySQLParser.LOCKED_SYMBOL);
                    }
                    break;
                case MySQLParser.NOWAIT_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3247;
                        this.match(MySQLParser.NOWAIT_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    selectItemList() {
        let _localctx = new SelectItemListContext(this._ctx, this.state);
        this.enterRule(_localctx, 344, MySQLParser.RULE_selectItemList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3252;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 340, this._ctx)) {
                    case 1:
                        {
                            this.state = 3250;
                            this.selectItem();
                        }
                        break;
                    case 2:
                        {
                            this.state = 3251;
                            this.match(MySQLParser.MULT_OPERATOR);
                        }
                        break;
                }
                this.state = 3258;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 341, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3254;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 3255;
                                this.selectItem();
                            }
                        }
                    }
                    this.state = 3260;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 341, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    selectItem() {
        let _localctx = new SelectItemContext(this._ctx, this.state);
        this.enterRule(_localctx, 346, MySQLParser.RULE_selectItem);
        try {
            this.state = 3266;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 343, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3261;
                        this.tableWild();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3262;
                        this.expr(0);
                        this.state = 3264;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 342, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3263;
                                    this.selectAlias();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    selectAlias() {
        let _localctx = new SelectAliasContext(this._ctx, this.state);
        this.enterRule(_localctx, 348, MySQLParser.RULE_selectAlias);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3269;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 344, this._ctx)) {
                    case 1:
                        {
                            this.state = 3268;
                            this.match(MySQLParser.AS_SYMBOL);
                        }
                        break;
                }
                this.state = 3273;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 345, this._ctx)) {
                    case 1:
                        {
                            this.state = 3271;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 3272;
                            this.textStringLiteral();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    whereClause() {
        let _localctx = new WhereClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 350, MySQLParser.RULE_whereClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3275;
                this.match(MySQLParser.WHERE_SYMBOL);
                this.state = 3276;
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableReference() {
        let _localctx = new TableReferenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 352, MySQLParser.RULE_tableReference);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3288;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 347, this._ctx)) {
                    case 1:
                        {
                            this.state = 3278;
                            this.tableFactor();
                        }
                        break;
                    case 2:
                        {
                            this.state = 3279;
                            this.match(MySQLParser.OPEN_CURLY_SYMBOL);
                            this.state = 3283;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 346, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 3280;
                                        if (!(this.serverVersion < 80017)) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80017");
                                        }
                                        this.state = 3281;
                                        this.identifier();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 3282;
                                        this.match(MySQLParser.OJ_SYMBOL);
                                    }
                                    break;
                            }
                            this.state = 3285;
                            this.escapedTableReference();
                            this.state = 3286;
                            this.match(MySQLParser.CLOSE_CURLY_SYMBOL);
                        }
                        break;
                }
                this.state = 3293;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 348, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3290;
                                this.joinedTable();
                            }
                        }
                    }
                    this.state = 3295;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 348, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    escapedTableReference() {
        let _localctx = new EscapedTableReferenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 354, MySQLParser.RULE_escapedTableReference);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3296;
                this.tableFactor();
                this.state = 3300;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.CROSS_SYMBOL || ((((_la - 523)) & ~0x1F) === 0 && ((1 << (_la - 523)) & ((1 << (MySQLParser.INNER_SYMBOL - 523)) | (1 << (MySQLParser.JOIN_SYMBOL - 523)) | (1 << (MySQLParser.LEFT_SYMBOL - 523)))) !== 0) || _la === MySQLParser.NATURAL_SYMBOL || _la === MySQLParser.RIGHT_SYMBOL || _la === MySQLParser.STRAIGHT_JOIN_SYMBOL) {
                    {
                        {
                            this.state = 3297;
                            this.joinedTable();
                        }
                    }
                    this.state = 3302;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    joinedTable() {
        let _localctx = new JoinedTableContext(this._ctx, this.state);
        this.enterRule(_localctx, 356, MySQLParser.RULE_joinedTable);
        try {
            this.state = 3322;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.CROSS_SYMBOL:
                case MySQLParser.INNER_SYMBOL:
                case MySQLParser.JOIN_SYMBOL:
                case MySQLParser.STRAIGHT_JOIN_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3303;
                        this.innerJoinType();
                        this.state = 3304;
                        this.tableReference();
                        this.state = 3309;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 350, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3305;
                                    this.match(MySQLParser.ON_SYMBOL);
                                    this.state = 3306;
                                    this.expr(0);
                                }
                                break;
                            case 2:
                                {
                                    this.state = 3307;
                                    this.match(MySQLParser.USING_SYMBOL);
                                    this.state = 3308;
                                    this.identifierListWithParentheses();
                                }
                                break;
                        }
                    }
                    break;
                case MySQLParser.LEFT_SYMBOL:
                case MySQLParser.RIGHT_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3311;
                        this.outerJoinType();
                        this.state = 3312;
                        this.tableReference();
                        this.state = 3317;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case MySQLParser.ON_SYMBOL:
                                {
                                    this.state = 3313;
                                    this.match(MySQLParser.ON_SYMBOL);
                                    this.state = 3314;
                                    this.expr(0);
                                }
                                break;
                            case MySQLParser.USING_SYMBOL:
                                {
                                    this.state = 3315;
                                    this.match(MySQLParser.USING_SYMBOL);
                                    this.state = 3316;
                                    this.identifierListWithParentheses();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    break;
                case MySQLParser.NATURAL_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3319;
                        this.naturalJoinType();
                        this.state = 3320;
                        this.tableFactor();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    naturalJoinType() {
        let _localctx = new NaturalJoinTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 358, MySQLParser.RULE_naturalJoinType);
        let _la;
        try {
            this.state = 3335;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 355, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3324;
                        this.match(MySQLParser.NATURAL_SYMBOL);
                        this.state = 3326;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.INNER_SYMBOL) {
                            {
                                this.state = 3325;
                                this.match(MySQLParser.INNER_SYMBOL);
                            }
                        }
                        this.state = 3328;
                        this.match(MySQLParser.JOIN_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3329;
                        this.match(MySQLParser.NATURAL_SYMBOL);
                        this.state = 3330;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.LEFT_SYMBOL || _la === MySQLParser.RIGHT_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3332;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.OUTER_SYMBOL) {
                            {
                                this.state = 3331;
                                this.match(MySQLParser.OUTER_SYMBOL);
                            }
                        }
                        this.state = 3334;
                        this.match(MySQLParser.JOIN_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    innerJoinType() {
        let _localctx = new InnerJoinTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 360, MySQLParser.RULE_innerJoinType);
        let _la;
        try {
            this.state = 3342;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.CROSS_SYMBOL:
                case MySQLParser.INNER_SYMBOL:
                case MySQLParser.JOIN_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3338;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.CROSS_SYMBOL || _la === MySQLParser.INNER_SYMBOL) {
                            {
                                this.state = 3337;
                                _localctx._type = this._input.LT(1);
                                _la = this._input.LA(1);
                                if (!(_la === MySQLParser.CROSS_SYMBOL || _la === MySQLParser.INNER_SYMBOL)) {
                                    _localctx._type = this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }
                        }
                        this.state = 3340;
                        this.match(MySQLParser.JOIN_SYMBOL);
                    }
                    break;
                case MySQLParser.STRAIGHT_JOIN_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3341;
                        _localctx._type = this.match(MySQLParser.STRAIGHT_JOIN_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    outerJoinType() {
        let _localctx = new OuterJoinTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 362, MySQLParser.RULE_outerJoinType);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3344;
                _localctx._type = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.LEFT_SYMBOL || _la === MySQLParser.RIGHT_SYMBOL)) {
                    _localctx._type = this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3346;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.OUTER_SYMBOL) {
                    {
                        this.state = 3345;
                        this.match(MySQLParser.OUTER_SYMBOL);
                    }
                }
                this.state = 3348;
                this.match(MySQLParser.JOIN_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableFactor() {
        let _localctx = new TableFactorContext(this._ctx, this.state);
        this.enterRule(_localctx, 364, MySQLParser.RULE_tableFactor);
        try {
            this.state = 3356;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 359, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3350;
                        this.singleTable();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3351;
                        this.singleTableParens();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3352;
                        this.derivedTable();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3353;
                        this.tableReferenceListParens();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3354;
                        if (!(this.serverVersion >= 80004)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80004");
                        }
                        this.state = 3355;
                        this.tableFunction();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    singleTable() {
        let _localctx = new SingleTableContext(this._ctx, this.state);
        this.enterRule(_localctx, 366, MySQLParser.RULE_singleTable);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3358;
                this.tableRef();
                this.state = 3360;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 360, this._ctx)) {
                    case 1:
                        {
                            this.state = 3359;
                            this.usePartition();
                        }
                        break;
                }
                this.state = 3363;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 361, this._ctx)) {
                    case 1:
                        {
                            this.state = 3362;
                            this.tableAlias();
                        }
                        break;
                }
                this.state = 3366;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 362, this._ctx)) {
                    case 1:
                        {
                            this.state = 3365;
                            this.indexHintList();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    singleTableParens() {
        let _localctx = new SingleTableParensContext(this._ctx, this.state);
        this.enterRule(_localctx, 368, MySQLParser.RULE_singleTableParens);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3368;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 3371;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 363, this._ctx)) {
                    case 1:
                        {
                            this.state = 3369;
                            this.singleTable();
                        }
                        break;
                    case 2:
                        {
                            this.state = 3370;
                            this.singleTableParens();
                        }
                        break;
                }
                this.state = 3373;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    derivedTable() {
        let _localctx = new DerivedTableContext(this._ctx, this.state);
        this.enterRule(_localctx, 370, MySQLParser.RULE_derivedTable);
        try {
            this.state = 3392;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 368, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3375;
                        this.subquery();
                        this.state = 3377;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 364, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3376;
                                    this.tableAlias();
                                }
                                break;
                        }
                        this.state = 3381;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 365, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3379;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 3380;
                                    this.columnInternalRefList();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3383;
                        if (!(this.serverVersion >= 80014)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                        }
                        this.state = 3384;
                        this.match(MySQLParser.LATERAL_SYMBOL);
                        this.state = 3385;
                        this.subquery();
                        this.state = 3387;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 366, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3386;
                                    this.tableAlias();
                                }
                                break;
                        }
                        this.state = 3390;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 367, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3389;
                                    this.columnInternalRefList();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableReferenceListParens() {
        let _localctx = new TableReferenceListParensContext(this._ctx, this.state);
        this.enterRule(_localctx, 372, MySQLParser.RULE_tableReferenceListParens);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3394;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 3397;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 369, this._ctx)) {
                    case 1:
                        {
                            this.state = 3395;
                            this.tableReferenceList();
                        }
                        break;
                    case 2:
                        {
                            this.state = 3396;
                            this.tableReferenceListParens();
                        }
                        break;
                }
                this.state = 3399;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableFunction() {
        let _localctx = new TableFunctionContext(this._ctx, this.state);
        this.enterRule(_localctx, 374, MySQLParser.RULE_tableFunction);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3401;
                this.match(MySQLParser.JSON_TABLE_SYMBOL);
                this.state = 3402;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 3403;
                this.expr(0);
                this.state = 3404;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 3405;
                this.textStringLiteral();
                this.state = 3406;
                this.columnsClause();
                this.state = 3407;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 3409;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 370, this._ctx)) {
                    case 1:
                        {
                            this.state = 3408;
                            this.tableAlias();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    columnsClause() {
        let _localctx = new ColumnsClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 376, MySQLParser.RULE_columnsClause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3411;
                this.match(MySQLParser.COLUMNS_SYMBOL);
                this.state = 3412;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 3413;
                this.jtColumn();
                this.state = 3418;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 3414;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 3415;
                            this.jtColumn();
                        }
                    }
                    this.state = 3420;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3421;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    jtColumn() {
        let _localctx = new JtColumnContext(this._ctx, this.state);
        this.enterRule(_localctx, 378, MySQLParser.RULE_jtColumn);
        let _la;
        try {
            this.state = 3446;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 375, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3423;
                        this.identifier();
                        this.state = 3424;
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.state = 3425;
                        this.match(MySQLParser.ORDINALITY_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3427;
                        this.identifier();
                        this.state = 3428;
                        this.dataType();
                        this.state = 3431;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 372, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3429;
                                    if (!(this.serverVersion >= 80014)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                                    }
                                    this.state = 3430;
                                    this.collate();
                                }
                                break;
                        }
                        this.state = 3434;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EXISTS_SYMBOL) {
                            {
                                this.state = 3433;
                                this.match(MySQLParser.EXISTS_SYMBOL);
                            }
                        }
                        this.state = 3436;
                        this.match(MySQLParser.PATH_SYMBOL);
                        this.state = 3437;
                        this.textStringLiteral();
                        this.state = 3439;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.ERROR_SYMBOL || _la === MySQLParser.DEFAULT_SYMBOL || _la === MySQLParser.NULL_SYMBOL) {
                            {
                                this.state = 3438;
                                this.onEmptyOrError();
                            }
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3441;
                        this.match(MySQLParser.NESTED_SYMBOL);
                        this.state = 3442;
                        this.match(MySQLParser.PATH_SYMBOL);
                        this.state = 3443;
                        this.textStringLiteral();
                        this.state = 3444;
                        this.columnsClause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    onEmptyOrError() {
        let _localctx = new OnEmptyOrErrorContext(this._ctx, this.state);
        this.enterRule(_localctx, 380, MySQLParser.RULE_onEmptyOrError);
        let _la;
        try {
            this.state = 3456;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 378, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3448;
                        this.onEmpty();
                        this.state = 3450;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.ERROR_SYMBOL || _la === MySQLParser.DEFAULT_SYMBOL || _la === MySQLParser.NULL_SYMBOL) {
                            {
                                this.state = 3449;
                                this.onError();
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3452;
                        this.onError();
                        this.state = 3454;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.ERROR_SYMBOL || _la === MySQLParser.DEFAULT_SYMBOL || _la === MySQLParser.NULL_SYMBOL) {
                            {
                                this.state = 3453;
                                this.onEmpty();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    onEmpty() {
        let _localctx = new OnEmptyContext(this._ctx, this.state);
        this.enterRule(_localctx, 382, MySQLParser.RULE_onEmpty);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3458;
                this.jtOnResponse();
                this.state = 3459;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 3460;
                this.match(MySQLParser.EMPTY_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    onError() {
        let _localctx = new OnErrorContext(this._ctx, this.state);
        this.enterRule(_localctx, 384, MySQLParser.RULE_onError);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3462;
                this.jtOnResponse();
                this.state = 3463;
                this.match(MySQLParser.ON_SYMBOL);
                this.state = 3464;
                this.match(MySQLParser.ERROR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    jtOnResponse() {
        let _localctx = new JtOnResponseContext(this._ctx, this.state);
        this.enterRule(_localctx, 386, MySQLParser.RULE_jtOnResponse);
        try {
            this.state = 3470;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.ERROR_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3466;
                        this.match(MySQLParser.ERROR_SYMBOL);
                    }
                    break;
                case MySQLParser.NULL_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3467;
                        this.match(MySQLParser.NULL_SYMBOL);
                    }
                    break;
                case MySQLParser.DEFAULT_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3468;
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        this.state = 3469;
                        this.textStringLiteral();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    unionOption() {
        let _localctx = new UnionOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 388, MySQLParser.RULE_unionOption);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3472;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.ALL_SYMBOL || _la === MySQLParser.DISTINCT_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableAlias() {
        let _localctx = new TableAliasContext(this._ctx, this.state);
        this.enterRule(_localctx, 390, MySQLParser.RULE_tableAlias);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3477;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 380, this._ctx)) {
                    case 1:
                        {
                            this.state = 3474;
                            this.match(MySQLParser.AS_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                            this.state = 3475;
                            if (!(this.serverVersion < 80017)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80017");
                            }
                            this.state = 3476;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.state = 3479;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    indexHintList() {
        let _localctx = new IndexHintListContext(this._ctx, this.state);
        this.enterRule(_localctx, 392, MySQLParser.RULE_indexHintList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3481;
                this.indexHint();
                this.state = 3486;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3482;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 3483;
                                this.indexHint();
                            }
                        }
                    }
                    this.state = 3488;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    indexHint() {
        let _localctx = new IndexHintContext(this._ctx, this.state);
        this.enterRule(_localctx, 394, MySQLParser.RULE_indexHint);
        let _la;
        try {
            this.state = 3509;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.FORCE_SYMBOL:
                case MySQLParser.IGNORE_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3489;
                        this.indexHintType();
                        this.state = 3490;
                        this.keyOrIndex();
                        this.state = 3492;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.FOR_SYMBOL) {
                            {
                                this.state = 3491;
                                this.indexHintClause();
                            }
                        }
                        this.state = 3494;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 3495;
                        this.indexList();
                        this.state = 3496;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case MySQLParser.USE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3498;
                        this.match(MySQLParser.USE_SYMBOL);
                        this.state = 3499;
                        this.keyOrIndex();
                        this.state = 3501;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.FOR_SYMBOL) {
                            {
                                this.state = 3500;
                                this.indexHintClause();
                            }
                        }
                        this.state = 3503;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 3505;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 384, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3504;
                                    this.indexList();
                                }
                                break;
                        }
                        this.state = 3507;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    indexHintType() {
        let _localctx = new IndexHintTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 396, MySQLParser.RULE_indexHintType);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3511;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.FORCE_SYMBOL || _la === MySQLParser.IGNORE_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    keyOrIndex() {
        let _localctx = new KeyOrIndexContext(this._ctx, this.state);
        this.enterRule(_localctx, 398, MySQLParser.RULE_keyOrIndex);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3513;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.INDEX_SYMBOL || _la === MySQLParser.KEY_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    constraintKeyType() {
        let _localctx = new ConstraintKeyTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 400, MySQLParser.RULE_constraintKeyType);
        let _la;
        try {
            this.state = 3521;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.PRIMARY_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3515;
                        this.match(MySQLParser.PRIMARY_SYMBOL);
                        this.state = 3516;
                        this.match(MySQLParser.KEY_SYMBOL);
                    }
                    break;
                case MySQLParser.UNIQUE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3517;
                        this.match(MySQLParser.UNIQUE_SYMBOL);
                        this.state = 3519;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.INDEX_SYMBOL || _la === MySQLParser.KEY_SYMBOL) {
                            {
                                this.state = 3518;
                                this.keyOrIndex();
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    indexHintClause() {
        let _localctx = new IndexHintClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 402, MySQLParser.RULE_indexHintClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3523;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 3529;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case MySQLParser.JOIN_SYMBOL:
                        {
                            this.state = 3524;
                            this.match(MySQLParser.JOIN_SYMBOL);
                        }
                        break;
                    case MySQLParser.ORDER_SYMBOL:
                        {
                            this.state = 3525;
                            this.match(MySQLParser.ORDER_SYMBOL);
                            this.state = 3526;
                            this.match(MySQLParser.BY_SYMBOL);
                        }
                        break;
                    case MySQLParser.GROUP_SYMBOL:
                        {
                            this.state = 3527;
                            this.match(MySQLParser.GROUP_SYMBOL);
                            this.state = 3528;
                            this.match(MySQLParser.BY_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    indexList() {
        let _localctx = new IndexListContext(this._ctx, this.state);
        this.enterRule(_localctx, 404, MySQLParser.RULE_indexList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3531;
                this.indexListElement();
                this.state = 3536;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 3532;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 3533;
                            this.indexListElement();
                        }
                    }
                    this.state = 3538;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    indexListElement() {
        let _localctx = new IndexListElementContext(this._ctx, this.state);
        this.enterRule(_localctx, 406, MySQLParser.RULE_indexListElement);
        try {
            this.state = 3541;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 390, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3539;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3540;
                        this.match(MySQLParser.PRIMARY_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    updateStatement() {
        let _localctx = new UpdateStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 408, MySQLParser.RULE_updateStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3545;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 391, this._ctx)) {
                    case 1:
                        {
                            this.state = 3543;
                            if (!(this.serverVersion >= 80000)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                            }
                            this.state = 3544;
                            this.withClause();
                        }
                        break;
                }
                this.state = 3547;
                this.match(MySQLParser.UPDATE_SYMBOL);
                this.state = 3549;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 392, this._ctx)) {
                    case 1:
                        {
                            this.state = 3548;
                            this.match(MySQLParser.LOW_PRIORITY_SYMBOL);
                        }
                        break;
                }
                this.state = 3552;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 393, this._ctx)) {
                    case 1:
                        {
                            this.state = 3551;
                            this.match(MySQLParser.IGNORE_SYMBOL);
                        }
                        break;
                }
                this.state = 3554;
                this.tableReferenceList();
                this.state = 3555;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 3556;
                this.updateList();
                this.state = 3558;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.WHERE_SYMBOL) {
                    {
                        this.state = 3557;
                        this.whereClause();
                    }
                }
                this.state = 3561;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ORDER_SYMBOL) {
                    {
                        this.state = 3560;
                        this.orderClause();
                    }
                }
                this.state = 3564;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.LIMIT_SYMBOL) {
                    {
                        this.state = 3563;
                        this.simpleLimitClause();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    transactionOrLockingStatement() {
        let _localctx = new TransactionOrLockingStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 410, MySQLParser.RULE_transactionOrLockingStatement);
        try {
            this.state = 3570;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 397, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3566;
                        this.transactionStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3567;
                        this.savepointStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3568;
                        this.lockStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3569;
                        this.xaStatement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    transactionStatement() {
        let _localctx = new TransactionStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 412, MySQLParser.RULE_transactionStatement);
        let _la;
        try {
            let _alt;
            this.state = 3597;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.START_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3572;
                        this.match(MySQLParser.START_SYMBOL);
                        this.state = 3573;
                        this.match(MySQLParser.TRANSACTION_SYMBOL);
                        this.state = 3577;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 398, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 3574;
                                        this.transactionCharacteristic();
                                    }
                                }
                            }
                            this.state = 3579;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 398, this._ctx);
                        }
                    }
                    break;
                case MySQLParser.COMMIT_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3580;
                        this.match(MySQLParser.COMMIT_SYMBOL);
                        this.state = 3582;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.WORK_SYMBOL) {
                            {
                                this.state = 3581;
                                this.match(MySQLParser.WORK_SYMBOL);
                            }
                        }
                        this.state = 3589;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.AND_SYMBOL) {
                            {
                                this.state = 3584;
                                this.match(MySQLParser.AND_SYMBOL);
                                this.state = 3586;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === MySQLParser.NO_SYMBOL) {
                                    {
                                        this.state = 3585;
                                        this.match(MySQLParser.NO_SYMBOL);
                                    }
                                }
                                this.state = 3588;
                                this.match(MySQLParser.CHAIN_SYMBOL);
                            }
                        }
                        this.state = 3595;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.NO_SYMBOL || _la === MySQLParser.RELEASE_SYMBOL) {
                            {
                                this.state = 3592;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === MySQLParser.NO_SYMBOL) {
                                    {
                                        this.state = 3591;
                                        this.match(MySQLParser.NO_SYMBOL);
                                    }
                                }
                                this.state = 3594;
                                this.match(MySQLParser.RELEASE_SYMBOL);
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    beginWork() {
        let _localctx = new BeginWorkContext(this._ctx, this.state);
        this.enterRule(_localctx, 414, MySQLParser.RULE_beginWork);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3599;
                this.match(MySQLParser.BEGIN_SYMBOL);
                this.state = 3601;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.WORK_SYMBOL) {
                    {
                        this.state = 3600;
                        this.match(MySQLParser.WORK_SYMBOL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    transactionCharacteristic() {
        let _localctx = new TransactionCharacteristicContext(this._ctx, this.state);
        this.enterRule(_localctx, 416, MySQLParser.RULE_transactionCharacteristic);
        let _la;
        try {
            this.state = 3609;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 406, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3603;
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.state = 3604;
                        this.match(MySQLParser.CONSISTENT_SYMBOL);
                        this.state = 3605;
                        this.match(MySQLParser.SNAPSHOT_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3606;
                        if (!(this.serverVersion >= 50605)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50605");
                        }
                        this.state = 3607;
                        this.match(MySQLParser.READ_SYMBOL);
                        this.state = 3608;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.ONLY_SYMBOL || _la === MySQLParser.WRITE_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    savepointStatement() {
        let _localctx = new SavepointStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 418, MySQLParser.RULE_savepointStatement);
        let _la;
        try {
            this.state = 3640;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.SAVEPOINT_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3611;
                        this.match(MySQLParser.SAVEPOINT_SYMBOL);
                        this.state = 3612;
                        this.identifier();
                    }
                    break;
                case MySQLParser.ROLLBACK_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3613;
                        this.match(MySQLParser.ROLLBACK_SYMBOL);
                        this.state = 3615;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.WORK_SYMBOL) {
                            {
                                this.state = 3614;
                                this.match(MySQLParser.WORK_SYMBOL);
                            }
                        }
                        this.state = 3635;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case MySQLParser.TO_SYMBOL:
                                {
                                    this.state = 3617;
                                    this.match(MySQLParser.TO_SYMBOL);
                                    this.state = 3619;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 408, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 3618;
                                                this.match(MySQLParser.SAVEPOINT_SYMBOL);
                                            }
                                            break;
                                    }
                                    this.state = 3621;
                                    this.identifier();
                                }
                                break;
                            case MySQLParser.EOF:
                            case MySQLParser.NO_SYMBOL:
                            case MySQLParser.SEMICOLON_SYMBOL:
                            case MySQLParser.AND_SYMBOL:
                            case MySQLParser.RELEASE_SYMBOL:
                                {
                                    this.state = 3627;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === MySQLParser.AND_SYMBOL) {
                                        {
                                            this.state = 3622;
                                            this.match(MySQLParser.AND_SYMBOL);
                                            this.state = 3624;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === MySQLParser.NO_SYMBOL) {
                                                {
                                                    this.state = 3623;
                                                    this.match(MySQLParser.NO_SYMBOL);
                                                }
                                            }
                                            this.state = 3626;
                                            this.match(MySQLParser.CHAIN_SYMBOL);
                                        }
                                    }
                                    this.state = 3633;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === MySQLParser.NO_SYMBOL || _la === MySQLParser.RELEASE_SYMBOL) {
                                        {
                                            this.state = 3630;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === MySQLParser.NO_SYMBOL) {
                                                {
                                                    this.state = 3629;
                                                    this.match(MySQLParser.NO_SYMBOL);
                                                }
                                            }
                                            this.state = 3632;
                                            this.match(MySQLParser.RELEASE_SYMBOL);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    break;
                case MySQLParser.RELEASE_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3637;
                        this.match(MySQLParser.RELEASE_SYMBOL);
                        this.state = 3638;
                        this.match(MySQLParser.SAVEPOINT_SYMBOL);
                        this.state = 3639;
                        this.identifier();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lockStatement() {
        let _localctx = new LockStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 420, MySQLParser.RULE_lockStatement);
        let _la;
        try {
            this.state = 3664;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 417, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3642;
                        this.match(MySQLParser.LOCK_SYMBOL);
                        this.state = 3643;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.TABLES_SYMBOL || _la === MySQLParser.TABLE_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3644;
                        this.lockItem();
                        this.state = 3649;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.COMMA_SYMBOL) {
                            {
                                {
                                    this.state = 3645;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.state = 3646;
                                    this.lockItem();
                                }
                            }
                            this.state = 3651;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3652;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 3653;
                        this.match(MySQLParser.LOCK_SYMBOL);
                        this.state = 3654;
                        this.match(MySQLParser.INSTANCE_SYMBOL);
                        this.state = 3655;
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.state = 3656;
                        this.match(MySQLParser.BACKUP_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3657;
                        this.match(MySQLParser.UNLOCK_SYMBOL);
                        this.state = 3662;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 416, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3658;
                                    this.match(MySQLParser.TABLES_SYMBOL);
                                }
                                break;
                            case 2:
                                {
                                    this.state = 3659;
                                    this.match(MySQLParser.TABLE_SYMBOL);
                                }
                                break;
                            case 3:
                                {
                                    this.state = 3660;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 3661;
                                    this.match(MySQLParser.INSTANCE_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lockItem() {
        let _localctx = new LockItemContext(this._ctx, this.state);
        this.enterRule(_localctx, 422, MySQLParser.RULE_lockItem);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3666;
                this.tableRef();
                this.state = 3668;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 418, this._ctx)) {
                    case 1:
                        {
                            this.state = 3667;
                            this.tableAlias();
                        }
                        break;
                }
                this.state = 3670;
                this.lockOption();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lockOption() {
        let _localctx = new LockOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 424, MySQLParser.RULE_lockOption);
        let _la;
        try {
            this.state = 3680;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.READ_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3672;
                        this.match(MySQLParser.READ_SYMBOL);
                        this.state = 3674;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.LOCAL_SYMBOL) {
                            {
                                this.state = 3673;
                                this.match(MySQLParser.LOCAL_SYMBOL);
                            }
                        }
                    }
                    break;
                case MySQLParser.LOW_PRIORITY_SYMBOL:
                case MySQLParser.WRITE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3677;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.LOW_PRIORITY_SYMBOL) {
                            {
                                this.state = 3676;
                                this.match(MySQLParser.LOW_PRIORITY_SYMBOL);
                            }
                        }
                        this.state = 3679;
                        this.match(MySQLParser.WRITE_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    xaStatement() {
        let _localctx = new XaStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 426, MySQLParser.RULE_xaStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3682;
                this.match(MySQLParser.XA_SYMBOL);
                this.state = 3709;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case MySQLParser.BEGIN_SYMBOL:
                    case MySQLParser.START_SYMBOL:
                        {
                            this.state = 3683;
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.BEGIN_SYMBOL || _la === MySQLParser.START_SYMBOL)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 3684;
                            this.xid();
                            this.state = 3686;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.RESUME_SYMBOL || _la === MySQLParser.JOIN_SYMBOL) {
                                {
                                    this.state = 3685;
                                    _la = this._input.LA(1);
                                    if (!(_la === MySQLParser.RESUME_SYMBOL || _la === MySQLParser.JOIN_SYMBOL)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                }
                            }
                        }
                        break;
                    case MySQLParser.END_SYMBOL:
                        {
                            this.state = 3688;
                            this.match(MySQLParser.END_SYMBOL);
                            this.state = 3689;
                            this.xid();
                            this.state = 3695;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.SUSPEND_SYMBOL) {
                                {
                                    this.state = 3690;
                                    this.match(MySQLParser.SUSPEND_SYMBOL);
                                    this.state = 3693;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === MySQLParser.FOR_SYMBOL) {
                                        {
                                            this.state = 3691;
                                            this.match(MySQLParser.FOR_SYMBOL);
                                            this.state = 3692;
                                            this.match(MySQLParser.MIGRATE_SYMBOL);
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case MySQLParser.PREPARE_SYMBOL:
                        {
                            this.state = 3697;
                            this.match(MySQLParser.PREPARE_SYMBOL);
                            this.state = 3698;
                            this.xid();
                        }
                        break;
                    case MySQLParser.COMMIT_SYMBOL:
                        {
                            this.state = 3699;
                            this.match(MySQLParser.COMMIT_SYMBOL);
                            this.state = 3700;
                            this.xid();
                            this.state = 3703;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.ONE_SYMBOL) {
                                {
                                    this.state = 3701;
                                    this.match(MySQLParser.ONE_SYMBOL);
                                    this.state = 3702;
                                    this.match(MySQLParser.PHASE_SYMBOL);
                                }
                            }
                        }
                        break;
                    case MySQLParser.ROLLBACK_SYMBOL:
                        {
                            this.state = 3705;
                            this.match(MySQLParser.ROLLBACK_SYMBOL);
                            this.state = 3706;
                            this.xid();
                        }
                        break;
                    case MySQLParser.RECOVER_SYMBOL:
                        {
                            this.state = 3707;
                            this.match(MySQLParser.RECOVER_SYMBOL);
                            this.state = 3708;
                            this.xaConvert();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    xaConvert() {
        let _localctx = new XaConvertContext(this._ctx, this.state);
        this.enterRule(_localctx, 428, MySQLParser.RULE_xaConvert);
        let _la;
        try {
            this.state = 3717;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 428, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3711;
                        if (!(this.serverVersion >= 50704)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50704");
                        }
                        this.state = 3714;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.CONVERT_SYMBOL) {
                            {
                                this.state = 3712;
                                this.match(MySQLParser.CONVERT_SYMBOL);
                                this.state = 3713;
                                this.match(MySQLParser.XID_SYMBOL);
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    xid() {
        let _localctx = new XidContext(this._ctx, this.state);
        this.enterRule(_localctx, 430, MySQLParser.RULE_xid);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3719;
                this.textString();
                this.state = 3726;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        this.state = 3720;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 3721;
                        this.textString();
                        this.state = 3724;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.COMMA_SYMBOL) {
                            {
                                this.state = 3722;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 3723;
                                this.ulong_number();
                            }
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    replicationStatement() {
        let _localctx = new ReplicationStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 432, MySQLParser.RULE_replicationStatement);
        let _la;
        try {
            this.state = 3761;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 434, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3728;
                        this.match(MySQLParser.PURGE_SYMBOL);
                        this.state = 3729;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.MASTER_SYMBOL || _la === MySQLParser.BINARY_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3730;
                        this.match(MySQLParser.LOGS_SYMBOL);
                        this.state = 3735;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case MySQLParser.TO_SYMBOL:
                                {
                                    this.state = 3731;
                                    this.match(MySQLParser.TO_SYMBOL);
                                    this.state = 3732;
                                    this.textLiteral();
                                }
                                break;
                            case MySQLParser.BEFORE_SYMBOL:
                                {
                                    this.state = 3733;
                                    this.match(MySQLParser.BEFORE_SYMBOL);
                                    this.state = 3734;
                                    this.expr(0);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3737;
                        this.changeMaster();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3738;
                        this.match(MySQLParser.RESET_SYMBOL);
                        this.state = 3739;
                        this.resetOption();
                        this.state = 3744;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.COMMA_SYMBOL) {
                            {
                                {
                                    this.state = 3740;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.state = 3741;
                                    this.resetOption();
                                }
                            }
                            this.state = 3746;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3747;
                        if (!(this.serverVersion > 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion > 80000");
                        }
                        this.state = 3748;
                        this.match(MySQLParser.RESET_SYMBOL);
                        this.state = 3749;
                        this.match(MySQLParser.PERSIST_SYMBOL);
                        this.state = 3753;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.IF_SYMBOL) {
                            {
                                this.state = 3750;
                                this.ifExists();
                                this.state = 3751;
                                this.identifier();
                            }
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3755;
                        this.slave();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 3756;
                        if (!(this.serverVersion >= 50700)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50700");
                        }
                        this.state = 3757;
                        this.changeReplication();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 3758;
                        this.replicationLoad();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 3759;
                        if (!(this.serverVersion > 50706)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion > 50706");
                        }
                        this.state = 3760;
                        this.groupReplication();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resetOption() {
        let _localctx = new ResetOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 434, MySQLParser.RULE_resetOption);
        try {
            this.state = 3777;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 438, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3763;
                        _localctx._option = this.match(MySQLParser.MASTER_SYMBOL);
                        this.state = 3765;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 435, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3764;
                                    this.masterResetOptions();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3767;
                        if (!(this.serverVersion < 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80000");
                        }
                        this.state = 3768;
                        _localctx._option = this.match(MySQLParser.QUERY_SYMBOL);
                        this.state = 3769;
                        this.match(MySQLParser.CACHE_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3770;
                        _localctx._option = this.match(MySQLParser.SLAVE_SYMBOL);
                        this.state = 3772;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 436, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3771;
                                    this.match(MySQLParser.ALL_SYMBOL);
                                }
                                break;
                        }
                        this.state = 3775;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 437, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3774;
                                    this.channel();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    masterResetOptions() {
        let _localctx = new MasterResetOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 436, MySQLParser.RULE_masterResetOptions);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3779;
                if (!(this.serverVersion >= 80000)) {
                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                }
                this.state = 3780;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 3785;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 439, this._ctx)) {
                    case 1:
                        {
                            this.state = 3781;
                            if (!(this.serverVersion < 80017)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80017");
                            }
                            this.state = 3782;
                            this.real_ulong_number();
                        }
                        break;
                    case 2:
                        {
                            this.state = 3783;
                            if (!(this.serverVersion >= 80017)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80017");
                            }
                            this.state = 3784;
                            this.real_ulonglong_number();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    replicationLoad() {
        let _localctx = new ReplicationLoadContext(this._ctx, this.state);
        this.enterRule(_localctx, 438, MySQLParser.RULE_replicationLoad);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3787;
                this.match(MySQLParser.LOAD_SYMBOL);
                this.state = 3791;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case MySQLParser.DATA_SYMBOL:
                        {
                            this.state = 3788;
                            this.match(MySQLParser.DATA_SYMBOL);
                        }
                        break;
                    case MySQLParser.TABLE_SYMBOL:
                        {
                            this.state = 3789;
                            this.match(MySQLParser.TABLE_SYMBOL);
                            this.state = 3790;
                            this.tableRef();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 3793;
                this.match(MySQLParser.FROM_SYMBOL);
                this.state = 3794;
                this.match(MySQLParser.MASTER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    changeMaster() {
        let _localctx = new ChangeMasterContext(this._ctx, this.state);
        this.enterRule(_localctx, 440, MySQLParser.RULE_changeMaster);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3796;
                this.match(MySQLParser.CHANGE_SYMBOL);
                this.state = 3797;
                this.match(MySQLParser.MASTER_SYMBOL);
                this.state = 3798;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 3799;
                this.changeMasterOptions();
                this.state = 3801;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 441, this._ctx)) {
                    case 1:
                        {
                            this.state = 3800;
                            this.channel();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    changeMasterOptions() {
        let _localctx = new ChangeMasterOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 442, MySQLParser.RULE_changeMasterOptions);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3803;
                this.masterOption();
                this.state = 3808;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 442, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3804;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 3805;
                                this.masterOption();
                            }
                        }
                    }
                    this.state = 3810;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 442, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    masterOption() {
        let _localctx = new MasterOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 444, MySQLParser.RULE_masterOption);
        try {
            this.state = 3896;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.MASTER_HOST_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3811;
                        this.match(MySQLParser.MASTER_HOST_SYMBOL);
                        this.state = 3812;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3813;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.NETWORK_NAMESPACE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3814;
                        this.match(MySQLParser.NETWORK_NAMESPACE_SYMBOL);
                        this.state = 3815;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3816;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.MASTER_BIND_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3817;
                        this.match(MySQLParser.MASTER_BIND_SYMBOL);
                        this.state = 3818;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3819;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.MASTER_USER_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3820;
                        this.match(MySQLParser.MASTER_USER_SYMBOL);
                        this.state = 3821;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3822;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.MASTER_PASSWORD_SYMBOL:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3823;
                        this.match(MySQLParser.MASTER_PASSWORD_SYMBOL);
                        this.state = 3824;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3825;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.MASTER_PORT_SYMBOL:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 3826;
                        this.match(MySQLParser.MASTER_PORT_SYMBOL);
                        this.state = 3827;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3828;
                        this.ulong_number();
                    }
                    break;
                case MySQLParser.MASTER_CONNECT_RETRY_SYMBOL:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 3829;
                        this.match(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL);
                        this.state = 3830;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3831;
                        this.ulong_number();
                    }
                    break;
                case MySQLParser.MASTER_RETRY_COUNT_SYMBOL:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 3832;
                        this.match(MySQLParser.MASTER_RETRY_COUNT_SYMBOL);
                        this.state = 3833;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3834;
                        this.ulong_number();
                    }
                    break;
                case MySQLParser.MASTER_DELAY_SYMBOL:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 3835;
                        this.match(MySQLParser.MASTER_DELAY_SYMBOL);
                        this.state = 3836;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3837;
                        this.ulong_number();
                    }
                    break;
                case MySQLParser.MASTER_SSL_SYMBOL:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 3838;
                        this.match(MySQLParser.MASTER_SSL_SYMBOL);
                        this.state = 3839;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3840;
                        this.ulong_number();
                    }
                    break;
                case MySQLParser.MASTER_SSL_CA_SYMBOL:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 3841;
                        this.match(MySQLParser.MASTER_SSL_CA_SYMBOL);
                        this.state = 3842;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3843;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.MASTER_SSL_CAPATH_SYMBOL:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 3844;
                        this.match(MySQLParser.MASTER_SSL_CAPATH_SYMBOL);
                        this.state = 3845;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3846;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.MASTER_TLS_VERSION_SYMBOL:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 3847;
                        this.match(MySQLParser.MASTER_TLS_VERSION_SYMBOL);
                        this.state = 3848;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3849;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.MASTER_SSL_CERT_SYMBOL:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 3850;
                        this.match(MySQLParser.MASTER_SSL_CERT_SYMBOL);
                        this.state = 3851;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3852;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 3853;
                        this.match(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL);
                        this.state = 3854;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3855;
                        this.masterTlsCiphersuitesDef();
                    }
                    break;
                case MySQLParser.MASTER_SSL_CIPHER_SYMBOL:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 3856;
                        this.match(MySQLParser.MASTER_SSL_CIPHER_SYMBOL);
                        this.state = 3857;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3858;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.MASTER_SSL_KEY_SYMBOL:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 3859;
                        this.match(MySQLParser.MASTER_SSL_KEY_SYMBOL);
                        this.state = 3860;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3861;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 3862;
                        this.match(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL);
                        this.state = 3863;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3864;
                        this.ulong_number();
                    }
                    break;
                case MySQLParser.MASTER_SSL_CRL_SYMBOL:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 3865;
                        this.match(MySQLParser.MASTER_SSL_CRL_SYMBOL);
                        this.state = 3866;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3867;
                        this.textLiteral();
                    }
                    break;
                case MySQLParser.MASTER_SSL_CRLPATH_SYMBOL:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 3868;
                        this.match(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL);
                        this.state = 3869;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3870;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 3871;
                        this.match(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL);
                        this.state = 3872;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3873;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 3874;
                        this.match(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL);
                        this.state = 3875;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3876;
                        this.ulong_number();
                    }
                    break;
                case MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL:
                    this.enterOuterAlt(_localctx, 23);
                    {
                        this.state = 3877;
                        this.match(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL);
                        this.state = 3878;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3879;
                        this.ulong_number();
                    }
                    break;
                case MySQLParser.IGNORE_SERVER_IDS_SYMBOL:
                    this.enterOuterAlt(_localctx, 24);
                    {
                        this.state = 3880;
                        this.match(MySQLParser.IGNORE_SERVER_IDS_SYMBOL);
                        this.state = 3881;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3882;
                        this.serverIdList();
                    }
                    break;
                case MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL:
                    this.enterOuterAlt(_localctx, 25);
                    {
                        this.state = 3883;
                        this.match(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL);
                        this.state = 3884;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3885;
                        this.textStringLiteral();
                    }
                    break;
                case MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
                    this.enterOuterAlt(_localctx, 26);
                    {
                        this.state = 3886;
                        this.match(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL);
                        this.state = 3887;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3888;
                        this.ulong_number();
                    }
                    break;
                case MySQLParser.MASTER_AUTO_POSITION_SYMBOL:
                    this.enterOuterAlt(_localctx, 27);
                    {
                        this.state = 3889;
                        this.match(MySQLParser.MASTER_AUTO_POSITION_SYMBOL);
                        this.state = 3890;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3891;
                        this.ulong_number();
                    }
                    break;
                case MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL:
                    this.enterOuterAlt(_localctx, 28);
                    {
                        this.state = 3892;
                        this.match(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL);
                        this.state = 3893;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3894;
                        this.privilegeCheckDef();
                    }
                    break;
                case MySQLParser.MASTER_LOG_FILE_SYMBOL:
                case MySQLParser.MASTER_LOG_POS_SYMBOL:
                case MySQLParser.RELAY_LOG_FILE_SYMBOL:
                case MySQLParser.RELAY_LOG_POS_SYMBOL:
                    this.enterOuterAlt(_localctx, 29);
                    {
                        this.state = 3895;
                        this.masterFileDef();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    privilegeCheckDef() {
        let _localctx = new PrivilegeCheckDefContext(this._ctx, this.state);
        this.enterRule(_localctx, 446, MySQLParser.RULE_privilegeCheckDef);
        try {
            this.state = 3900;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 444, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3898;
                        this.userIdentifierOrText();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3899;
                        this.match(MySQLParser.NULL_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    masterTlsCiphersuitesDef() {
        let _localctx = new MasterTlsCiphersuitesDefContext(this._ctx, this.state);
        this.enterRule(_localctx, 448, MySQLParser.RULE_masterTlsCiphersuitesDef);
        try {
            this.state = 3904;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 445, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3902;
                        this.textStringNoLinebreak();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3903;
                        this.match(MySQLParser.NULL_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    masterFileDef() {
        let _localctx = new MasterFileDefContext(this._ctx, this.state);
        this.enterRule(_localctx, 450, MySQLParser.RULE_masterFileDef);
        try {
            this.state = 3918;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.MASTER_LOG_FILE_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3906;
                        this.match(MySQLParser.MASTER_LOG_FILE_SYMBOL);
                        this.state = 3907;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3908;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.MASTER_LOG_POS_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3909;
                        this.match(MySQLParser.MASTER_LOG_POS_SYMBOL);
                        this.state = 3910;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3911;
                        this.ulonglong_number();
                    }
                    break;
                case MySQLParser.RELAY_LOG_FILE_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3912;
                        this.match(MySQLParser.RELAY_LOG_FILE_SYMBOL);
                        this.state = 3913;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3914;
                        this.textStringNoLinebreak();
                    }
                    break;
                case MySQLParser.RELAY_LOG_POS_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3915;
                        this.match(MySQLParser.RELAY_LOG_POS_SYMBOL);
                        this.state = 3916;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3917;
                        this.ulong_number();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    serverIdList() {
        let _localctx = new ServerIdListContext(this._ctx, this.state);
        this.enterRule(_localctx, 452, MySQLParser.RULE_serverIdList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3920;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 3929;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (MySQLParser.INT_NUMBER - 380)) | (1 << (MySQLParser.LONG_NUMBER - 380)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || ((((_la - 421)) & ~0x1F) === 0 && ((1 << (_la - 421)) & ((1 << (MySQLParser.HEX_NUMBER - 421)) | (1 << (MySQLParser.DECIMAL_NUMBER - 421)) | (1 << (MySQLParser.FLOAT_NUMBER - 421)))) !== 0)) {
                    {
                        this.state = 3921;
                        this.ulong_number();
                        this.state = 3926;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.COMMA_SYMBOL) {
                            {
                                {
                                    this.state = 3922;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.state = 3923;
                                    this.ulong_number();
                                }
                            }
                            this.state = 3928;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                }
                this.state = 3931;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    changeReplication() {
        let _localctx = new ChangeReplicationContext(this._ctx, this.state);
        this.enterRule(_localctx, 454, MySQLParser.RULE_changeReplication);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3933;
                this.match(MySQLParser.CHANGE_SYMBOL);
                this.state = 3934;
                this.match(MySQLParser.REPLICATION_SYMBOL);
                this.state = 3935;
                this.match(MySQLParser.FILTER_SYMBOL);
                this.state = 3936;
                this.filterDefinition();
                this.state = 3941;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 449, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3937;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 3938;
                                this.filterDefinition();
                            }
                        }
                    }
                    this.state = 3943;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 449, this._ctx);
                }
                this.state = 3946;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 450, this._ctx)) {
                    case 1:
                        {
                            this.state = 3944;
                            if (!(this.serverVersion >= 80000)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                            }
                            this.state = 3945;
                            this.channel();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    filterDefinition() {
        let _localctx = new FilterDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 456, MySQLParser.RULE_filterDefinition);
        let _la;
        try {
            this.state = 3997;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.REPLICATE_DO_DB_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3948;
                        this.match(MySQLParser.REPLICATE_DO_DB_SYMBOL);
                        this.state = 3949;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3950;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 3952;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 451, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3951;
                                    this.filterDbList();
                                }
                                break;
                        }
                        this.state = 3954;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case MySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3955;
                        this.match(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL);
                        this.state = 3956;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3957;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 3959;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 452, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3958;
                                    this.filterDbList();
                                }
                                break;
                        }
                        this.state = 3961;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case MySQLParser.REPLICATE_DO_TABLE_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3962;
                        this.match(MySQLParser.REPLICATE_DO_TABLE_SYMBOL);
                        this.state = 3963;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3964;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 3966;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 453, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3965;
                                    this.filterTableList();
                                }
                                break;
                        }
                        this.state = 3968;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3969;
                        this.match(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL);
                        this.state = 3970;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3971;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 3973;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 454, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3972;
                                    this.filterTableList();
                                }
                                break;
                        }
                        this.state = 3975;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3976;
                        this.match(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL);
                        this.state = 3977;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3978;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 3980;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 455, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3979;
                                    this.filterStringList();
                                }
                                break;
                        }
                        this.state = 3982;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 3983;
                        this.match(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
                        this.state = 3984;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3985;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 3987;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 456, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3986;
                                    this.filterStringList();
                                }
                                break;
                        }
                        this.state = 3989;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case MySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 3990;
                        this.match(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL);
                        this.state = 3991;
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.state = 3992;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 3994;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.OPEN_PAR_SYMBOL) {
                            {
                                this.state = 3993;
                                this.filterDbPairList();
                            }
                        }
                        this.state = 3996;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    filterDbList() {
        let _localctx = new FilterDbListContext(this._ctx, this.state);
        this.enterRule(_localctx, 458, MySQLParser.RULE_filterDbList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3999;
                this.schemaRef();
                this.state = 4004;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 4000;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 4001;
                            this.schemaRef();
                        }
                    }
                    this.state = 4006;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    filterTableList() {
        let _localctx = new FilterTableListContext(this._ctx, this.state);
        this.enterRule(_localctx, 460, MySQLParser.RULE_filterTableList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4007;
                this.filterTableRef();
                this.state = 4012;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 4008;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 4009;
                            this.filterTableRef();
                        }
                    }
                    this.state = 4014;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    filterStringList() {
        let _localctx = new FilterStringListContext(this._ctx, this.state);
        this.enterRule(_localctx, 462, MySQLParser.RULE_filterStringList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4015;
                this.filterWildDbTableString();
                this.state = 4020;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 4016;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 4017;
                            this.filterWildDbTableString();
                        }
                    }
                    this.state = 4022;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    filterWildDbTableString() {
        let _localctx = new FilterWildDbTableStringContext(this._ctx, this.state);
        this.enterRule(_localctx, 464, MySQLParser.RULE_filterWildDbTableString);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4023;
                this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    filterDbPairList() {
        let _localctx = new FilterDbPairListContext(this._ctx, this.state);
        this.enterRule(_localctx, 466, MySQLParser.RULE_filterDbPairList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4025;
                this.schemaIdentifierPair();
                this.state = 4030;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 4026;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 4027;
                            this.schemaIdentifierPair();
                        }
                    }
                    this.state = 4032;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    slave() {
        let _localctx = new SlaveContext(this._ctx, this.state);
        this.enterRule(_localctx, 468, MySQLParser.RULE_slave);
        try {
            this.state = 4054;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.START_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4033;
                        this.match(MySQLParser.START_SYMBOL);
                        this.state = 4034;
                        this.match(MySQLParser.SLAVE_SYMBOL);
                        this.state = 4036;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 463, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4035;
                                    this.slaveThreadOptions();
                                }
                                break;
                        }
                        this.state = 4040;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 464, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4038;
                                    this.match(MySQLParser.UNTIL_SYMBOL);
                                    this.state = 4039;
                                    this.slaveUntilOptions();
                                }
                                break;
                        }
                        this.state = 4042;
                        this.slaveConnectionOptions();
                        this.state = 4044;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 465, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4043;
                                    this.channel();
                                }
                                break;
                        }
                    }
                    break;
                case MySQLParser.STOP_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4046;
                        this.match(MySQLParser.STOP_SYMBOL);
                        this.state = 4047;
                        this.match(MySQLParser.SLAVE_SYMBOL);
                        this.state = 4049;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 466, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4048;
                                    this.slaveThreadOptions();
                                }
                                break;
                        }
                        this.state = 4052;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 467, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4051;
                                    this.channel();
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    slaveUntilOptions() {
        let _localctx = new SlaveUntilOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 470, MySQLParser.RULE_slaveUntilOptions);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4063;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 469, this._ctx)) {
                    case 1:
                        {
                            this.state = 4056;
                            this.masterFileDef();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4057;
                            if (!(this.serverVersion >= 50606)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50606");
                            }
                            this.state = 4058;
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.SQL_AFTER_GTIDS_SYMBOL || _la === MySQLParser.SQL_BEFORE_GTIDS_SYMBOL)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 4059;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            this.state = 4060;
                            this.textString();
                        }
                        break;
                    case 3:
                        {
                            this.state = 4061;
                            if (!(this.serverVersion >= 50606)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50606");
                            }
                            this.state = 4062;
                            this.match(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL);
                        }
                        break;
                }
                this.state = 4069;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 470, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4065;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 4066;
                                this.masterFileDef();
                            }
                        }
                    }
                    this.state = 4071;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 470, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    slaveConnectionOptions() {
        let _localctx = new SlaveConnectionOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 472, MySQLParser.RULE_slaveConnectionOptions);
        try {
            this.state = 4094;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 475, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4072;
                        if (!(this.serverVersion >= 50604)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50604");
                        }
                        this.state = 4076;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 471, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4073;
                                    this.match(MySQLParser.USER_SYMBOL);
                                    this.state = 4074;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                    this.state = 4075;
                                    this.textString();
                                }
                                break;
                        }
                        this.state = 4081;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 472, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4078;
                                    this.match(MySQLParser.PASSWORD_SYMBOL);
                                    this.state = 4079;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                    this.state = 4080;
                                    this.textString();
                                }
                                break;
                        }
                        this.state = 4086;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 473, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4083;
                                    this.match(MySQLParser.DEFAULT_AUTH_SYMBOL);
                                    this.state = 4084;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                    this.state = 4085;
                                    this.textString();
                                }
                                break;
                        }
                        this.state = 4091;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 474, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4088;
                                    this.match(MySQLParser.PLUGIN_DIR_SYMBOL);
                                    this.state = 4089;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                    this.state = 4090;
                                    this.textString();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    slaveThreadOptions() {
        let _localctx = new SlaveThreadOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 474, MySQLParser.RULE_slaveThreadOptions);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4096;
                this.slaveThreadOption();
                this.state = 4101;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 476, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4097;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 4098;
                                this.slaveThreadOption();
                            }
                        }
                    }
                    this.state = 4103;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 476, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    slaveThreadOption() {
        let _localctx = new SlaveThreadOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 476, MySQLParser.RULE_slaveThreadOption);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4104;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.RELAY_THREAD_SYMBOL || _la === MySQLParser.SQL_THREAD_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    groupReplication() {
        let _localctx = new GroupReplicationContext(this._ctx, this.state);
        this.enterRule(_localctx, 478, MySQLParser.RULE_groupReplication);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4106;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.START_SYMBOL || _la === MySQLParser.STOP_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4107;
                this.match(MySQLParser.GROUP_REPLICATION_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    preparedStatement() {
        let _localctx = new PreparedStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 480, MySQLParser.RULE_preparedStatement);
        let _la;
        try {
            this.state = 4120;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.PREPARE_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4109;
                        _localctx._type = this.match(MySQLParser.PREPARE_SYMBOL);
                        this.state = 4110;
                        this.identifier();
                        this.state = 4111;
                        this.match(MySQLParser.FROM_SYMBOL);
                        this.state = 4114;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 477, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4112;
                                    this.textLiteral();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 4113;
                                    this.userVariable();
                                }
                                break;
                        }
                    }
                    break;
                case MySQLParser.EXECUTE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4116;
                        this.executeStatement();
                    }
                    break;
                case MySQLParser.DEALLOCATE_SYMBOL:
                case MySQLParser.DROP_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4117;
                        _localctx._type = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.DEALLOCATE_SYMBOL || _la === MySQLParser.DROP_SYMBOL)) {
                            _localctx._type = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4118;
                        this.match(MySQLParser.PREPARE_SYMBOL);
                        this.state = 4119;
                        this.identifier();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    executeStatement() {
        let _localctx = new ExecuteStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 482, MySQLParser.RULE_executeStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4122;
                this.match(MySQLParser.EXECUTE_SYMBOL);
                this.state = 4123;
                this.identifier();
                this.state = 4126;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.USING_SYMBOL) {
                    {
                        this.state = 4124;
                        this.match(MySQLParser.USING_SYMBOL);
                        this.state = 4125;
                        this.executeVarList();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    executeVarList() {
        let _localctx = new ExecuteVarListContext(this._ctx, this.state);
        this.enterRule(_localctx, 484, MySQLParser.RULE_executeVarList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4128;
                this.userVariable();
                this.state = 4133;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 4129;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 4130;
                            this.userVariable();
                        }
                    }
                    this.state = 4135;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cloneStatement() {
        let _localctx = new CloneStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 486, MySQLParser.RULE_cloneStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4136;
                this.match(MySQLParser.CLONE_SYMBOL);
                this.state = 4161;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 484, this._ctx)) {
                    case 1:
                        {
                            this.state = 4137;
                            this.match(MySQLParser.LOCAL_SYMBOL);
                            this.state = 4138;
                            this.match(MySQLParser.DATA_SYMBOL);
                            this.state = 4139;
                            this.match(MySQLParser.DIRECTORY_SYMBOL);
                            this.state = 4141;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 481, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4140;
                                        this.equal();
                                    }
                                    break;
                            }
                            this.state = 4143;
                            this.textStringLiteral();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4144;
                            this.match(MySQLParser.REMOTE_SYMBOL);
                            this.state = 4147;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.FOR_SYMBOL) {
                                {
                                    this.state = 4145;
                                    this.match(MySQLParser.FOR_SYMBOL);
                                    this.state = 4146;
                                    this.match(MySQLParser.REPLICATION_SYMBOL);
                                }
                            }
                        }
                        break;
                    case 3:
                        {
                            this.state = 4149;
                            if (!(this.serverVersion >= 80014)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                            }
                            this.state = 4150;
                            this.match(MySQLParser.INSTANCE_SYMBOL);
                            this.state = 4151;
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.state = 4152;
                            this.user();
                            this.state = 4153;
                            this.match(MySQLParser.COLON_SYMBOL);
                            this.state = 4154;
                            this.ulong_number();
                            this.state = 4155;
                            this.match(MySQLParser.IDENTIFIED_SYMBOL);
                            this.state = 4156;
                            this.match(MySQLParser.BY_SYMBOL);
                            this.state = 4157;
                            this.textStringLiteral();
                            this.state = 4159;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.DATA_SYMBOL || _la === MySQLParser.REQUIRE_SYMBOL) {
                                {
                                    this.state = 4158;
                                    this.dataDirSSL();
                                }
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dataDirSSL() {
        let _localctx = new DataDirSSLContext(this._ctx, this.state);
        this.enterRule(_localctx, 488, MySQLParser.RULE_dataDirSSL);
        let _la;
        try {
            this.state = 4173;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.REQUIRE_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4163;
                        this.ssl();
                    }
                    break;
                case MySQLParser.DATA_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4164;
                        this.match(MySQLParser.DATA_SYMBOL);
                        this.state = 4165;
                        this.match(MySQLParser.DIRECTORY_SYMBOL);
                        this.state = 4167;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 485, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4166;
                                    this.equal();
                                }
                                break;
                        }
                        this.state = 4169;
                        this.textStringLiteral();
                        this.state = 4171;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.REQUIRE_SYMBOL) {
                            {
                                this.state = 4170;
                                this.ssl();
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ssl() {
        let _localctx = new SslContext(this._ctx, this.state);
        this.enterRule(_localctx, 490, MySQLParser.RULE_ssl);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4175;
                this.match(MySQLParser.REQUIRE_SYMBOL);
                this.state = 4177;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.NO_SYMBOL) {
                    {
                        this.state = 4176;
                        this.match(MySQLParser.NO_SYMBOL);
                    }
                }
                this.state = 4179;
                this.match(MySQLParser.SSL_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    accountManagementStatement() {
        let _localctx = new AccountManagementStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 492, MySQLParser.RULE_accountManagementStatement);
        try {
            this.state = 4190;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 489, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4181;
                        if (!(this.serverVersion >= 50606)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50606");
                        }
                        this.state = 4182;
                        this.alterUser();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4183;
                        this.createUser();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4184;
                        this.dropUser();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4185;
                        this.grant();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 4186;
                        this.renameUser();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 4187;
                        this.revoke();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 4188;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 4189;
                        this.setRole();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterUser() {
        let _localctx = new AlterUserContext(this._ctx, this.state);
        this.enterRule(_localctx, 494, MySQLParser.RULE_alterUser);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4192;
                this.match(MySQLParser.ALTER_SYMBOL);
                this.state = 4193;
                this.match(MySQLParser.USER_SYMBOL);
                this.state = 4196;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 490, this._ctx)) {
                    case 1:
                        {
                            this.state = 4194;
                            if (!(this.serverVersion >= 50706)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50706");
                            }
                            this.state = 4195;
                            this.ifExists();
                        }
                        break;
                }
                this.state = 4198;
                this.alterUserTail();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterUserTail() {
        let _localctx = new AlterUserTailContext(this._ctx, this.state);
        this.enterRule(_localctx, 496, MySQLParser.RULE_alterUserTail);
        let _la;
        try {
            this.state = 4247;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 497, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4204;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 491, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4200;
                                    if (!(this.serverVersion < 80014)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80014");
                                    }
                                    this.state = 4201;
                                    this.createUserList();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 4202;
                                    if (!(this.serverVersion >= 80014)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                                    }
                                    this.state = 4203;
                                    this.alterUserList();
                                }
                                break;
                        }
                        this.state = 4206;
                        this.createUserTail();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4208;
                        if (!(this.serverVersion >= 50706)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50706");
                        }
                        this.state = 4209;
                        this.user();
                        this.state = 4210;
                        this.match(MySQLParser.IDENTIFIED_SYMBOL);
                        this.state = 4211;
                        this.match(MySQLParser.BY_SYMBOL);
                        this.state = 4212;
                        this.textString();
                        this.state = 4215;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 492, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4213;
                                    if (!(this.serverVersion >= 80014)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                                    }
                                    this.state = 4214;
                                    this.replacePassword();
                                }
                                break;
                        }
                        this.state = 4219;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 493, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4217;
                                    if (!(this.serverVersion >= 80014)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                                    }
                                    this.state = 4218;
                                    this.retainCurrentPassword();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4221;
                        if (!(this.serverVersion >= 80014)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                        }
                        this.state = 4222;
                        this.user();
                        this.state = 4223;
                        this.discardOldPassword();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4225;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 4226;
                        this.user();
                        this.state = 4227;
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        this.state = 4228;
                        this.match(MySQLParser.ROLE_SYMBOL);
                        this.state = 4232;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 494, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4229;
                                    this.match(MySQLParser.ALL_SYMBOL);
                                }
                                break;
                            case 2:
                                {
                                    this.state = 4230;
                                    this.match(MySQLParser.NONE_SYMBOL);
                                }
                                break;
                            case 3:
                                {
                                    this.state = 4231;
                                    this.roleList();
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 4234;
                        if (!(this.serverVersion >= 80018)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80018");
                        }
                        this.state = 4235;
                        this.user();
                        this.state = 4236;
                        this.match(MySQLParser.IDENTIFIED_SYMBOL);
                        this.state = 4239;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.WITH_SYMBOL) {
                            {
                                this.state = 4237;
                                this.match(MySQLParser.WITH_SYMBOL);
                                this.state = 4238;
                                this.textOrIdentifier();
                            }
                        }
                        this.state = 4241;
                        this.match(MySQLParser.BY_SYMBOL);
                        this.state = 4242;
                        this.match(MySQLParser.RANDOM_SYMBOL);
                        this.state = 4243;
                        this.match(MySQLParser.PASSWORD_SYMBOL);
                        this.state = 4245;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.RETAIN_SYMBOL) {
                            {
                                this.state = 4244;
                                this.retainCurrentPassword();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    userFunction() {
        let _localctx = new UserFunctionContext(this._ctx, this.state);
        this.enterRule(_localctx, 498, MySQLParser.RULE_userFunction);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4249;
                this.match(MySQLParser.USER_SYMBOL);
                this.state = 4250;
                this.parentheses();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createUser() {
        let _localctx = new CreateUserContext(this._ctx, this.state);
        this.enterRule(_localctx, 500, MySQLParser.RULE_createUser);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4252;
                this.match(MySQLParser.CREATE_SYMBOL);
                this.state = 4253;
                this.match(MySQLParser.USER_SYMBOL);
                this.state = 4257;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 498, this._ctx)) {
                    case 1:
                        {
                            this.state = 4254;
                            if (!(this.serverVersion >= 50706)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50706");
                            }
                            this.state = 4255;
                            this.ifNotExists();
                        }
                        break;
                    case 2:
                        // tslint:disable-next-line:no-empty
                        {
                        }
                        break;
                }
                this.state = 4259;
                this.createUserList();
                this.state = 4260;
                this.defaultRoleClause();
                this.state = 4261;
                this.createUserTail();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createUserTail() {
        let _localctx = new CreateUserTailContext(this._ctx, this.state);
        this.enterRule(_localctx, 502, MySQLParser.RULE_createUserTail);
        let _la;
        try {
            this.state = 4277;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 502, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4263;
                        if (!(this.serverVersion >= 50706)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50706");
                        }
                        this.state = 4265;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.REQUIRE_SYMBOL) {
                            {
                                this.state = 4264;
                                this.requireClause();
                            }
                        }
                        this.state = 4268;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.WITH_SYMBOL) {
                            {
                                this.state = 4267;
                                this.connectOptions();
                            }
                        }
                        this.state = 4273;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.ACCOUNT_SYMBOL || _la === MySQLParser.PASSWORD_SYMBOL) {
                            {
                                {
                                    this.state = 4270;
                                    this.accountLockPasswordExpireOptions();
                                }
                            }
                            this.state = 4275;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    defaultRoleClause() {
        let _localctx = new DefaultRoleClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 504, MySQLParser.RULE_defaultRoleClause);
        try {
            this.state = 4286;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 504, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4279;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 4283;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 503, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4280;
                                    this.match(MySQLParser.DEFAULT_SYMBOL);
                                    this.state = 4281;
                                    this.match(MySQLParser.ROLE_SYMBOL);
                                    this.state = 4282;
                                    this.roleList();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    requireClause() {
        let _localctx = new RequireClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 506, MySQLParser.RULE_requireClause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4288;
                this.match(MySQLParser.REQUIRE_SYMBOL);
                this.state = 4291;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case MySQLParser.CIPHER_SYMBOL:
                    case MySQLParser.ISSUER_SYMBOL:
                    case MySQLParser.SUBJECT_SYMBOL:
                        {
                            this.state = 4289;
                            this.requireList();
                        }
                        break;
                    case MySQLParser.NONE_SYMBOL:
                    case MySQLParser.X509_SYMBOL:
                    case MySQLParser.SSL_SYMBOL:
                        {
                            this.state = 4290;
                            _localctx._option = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.NONE_SYMBOL || _la === MySQLParser.X509_SYMBOL || _la === MySQLParser.SSL_SYMBOL)) {
                                _localctx._option = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    connectOptions() {
        let _localctx = new ConnectOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 508, MySQLParser.RULE_connectOptions);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4293;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 4302;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 4302;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
                                {
                                    this.state = 4294;
                                    this.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
                                    this.state = 4295;
                                    this.ulong_number();
                                }
                                break;
                            case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
                                {
                                    this.state = 4296;
                                    this.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
                                    this.state = 4297;
                                    this.ulong_number();
                                }
                                break;
                            case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
                                {
                                    this.state = 4298;
                                    this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
                                    this.state = 4299;
                                    this.ulong_number();
                                }
                                break;
                            case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
                                {
                                    this.state = 4300;
                                    this.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
                                    this.state = 4301;
                                    this.ulong_number();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 4304;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & ((1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 207)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 207)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 207)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS_SYMBOL - 207)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    accountLockPasswordExpireOptions() {
        let _localctx = new AccountLockPasswordExpireOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 510, MySQLParser.RULE_accountLockPasswordExpireOptions);
        let _la;
        try {
            this.state = 4339;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.ACCOUNT_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4306;
                        this.match(MySQLParser.ACCOUNT_SYMBOL);
                        this.state = 4307;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.LOCK_SYMBOL || _la === MySQLParser.UNLOCK_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case MySQLParser.PASSWORD_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4308;
                        this.match(MySQLParser.PASSWORD_SYMBOL);
                        this.state = 4337;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 512, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4309;
                                    this.match(MySQLParser.EXPIRE_SYMBOL);
                                    this.state = 4316;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case MySQLParser.INTERVAL_SYMBOL:
                                            {
                                                this.state = 4310;
                                                this.match(MySQLParser.INTERVAL_SYMBOL);
                                                this.state = 4311;
                                                this.real_ulong_number();
                                                this.state = 4312;
                                                this.match(MySQLParser.DAY_SYMBOL);
                                            }
                                            break;
                                        case MySQLParser.NEVER_SYMBOL:
                                            {
                                                this.state = 4314;
                                                this.match(MySQLParser.NEVER_SYMBOL);
                                            }
                                            break;
                                        case MySQLParser.DEFAULT_SYMBOL:
                                            {
                                                this.state = 4315;
                                                this.match(MySQLParser.DEFAULT_SYMBOL);
                                            }
                                            break;
                                        case MySQLParser.EOF:
                                        case MySQLParser.ACCOUNT_SYMBOL:
                                        case MySQLParser.PASSWORD_SYMBOL:
                                        case MySQLParser.SEMICOLON_SYMBOL:
                                            break;
                                        default:
                                            break;
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.state = 4318;
                                    this.match(MySQLParser.HISTORY_SYMBOL);
                                    this.state = 4321;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case MySQLParser.INT_NUMBER:
                                        case MySQLParser.LONG_NUMBER:
                                        case MySQLParser.ULONGLONG_NUMBER:
                                        case MySQLParser.HEX_NUMBER:
                                            {
                                                this.state = 4319;
                                                this.real_ulong_number();
                                            }
                                            break;
                                        case MySQLParser.DEFAULT_SYMBOL:
                                            {
                                                this.state = 4320;
                                                this.match(MySQLParser.DEFAULT_SYMBOL);
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException_1.NoViableAltException(this);
                                    }
                                }
                                break;
                            case 3:
                                {
                                    this.state = 4323;
                                    this.match(MySQLParser.REUSE_SYMBOL);
                                    this.state = 4324;
                                    this.match(MySQLParser.INTERVAL_SYMBOL);
                                    this.state = 4329;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case MySQLParser.INT_NUMBER:
                                        case MySQLParser.LONG_NUMBER:
                                        case MySQLParser.ULONGLONG_NUMBER:
                                        case MySQLParser.HEX_NUMBER:
                                            {
                                                this.state = 4325;
                                                this.real_ulong_number();
                                                this.state = 4326;
                                                this.match(MySQLParser.DAY_SYMBOL);
                                            }
                                            break;
                                        case MySQLParser.DEFAULT_SYMBOL:
                                            {
                                                this.state = 4328;
                                                this.match(MySQLParser.DEFAULT_SYMBOL);
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException_1.NoViableAltException(this);
                                    }
                                }
                                break;
                            case 4:
                                {
                                    this.state = 4331;
                                    if (!(this.serverVersion >= 80014)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                                    }
                                    this.state = 4332;
                                    this.match(MySQLParser.REQUIRE_SYMBOL);
                                    this.state = 4333;
                                    this.match(MySQLParser.CURRENT_SYMBOL);
                                    this.state = 4335;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === MySQLParser.DEFAULT_SYMBOL || _la === MySQLParser.OPTIONAL_SYMBOL) {
                                        {
                                            this.state = 4334;
                                            _la = this._input.LA(1);
                                            if (!(_la === MySQLParser.DEFAULT_SYMBOL || _la === MySQLParser.OPTIONAL_SYMBOL)) {
                                                this._errHandler.recoverInline(this);
                                            }
                                            else {
                                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                                    this.matchedEOF = true;
                                                }
                                                this._errHandler.reportMatch(this);
                                                this.consume();
                                            }
                                        }
                                    }
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropUser() {
        let _localctx = new DropUserContext(this._ctx, this.state);
        this.enterRule(_localctx, 512, MySQLParser.RULE_dropUser);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4341;
                this.match(MySQLParser.DROP_SYMBOL);
                this.state = 4342;
                this.match(MySQLParser.USER_SYMBOL);
                this.state = 4345;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 514, this._ctx)) {
                    case 1:
                        {
                            this.state = 4343;
                            if (!(this.serverVersion >= 50706)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50706");
                            }
                            this.state = 4344;
                            this.ifExists();
                        }
                        break;
                }
                this.state = 4347;
                this.userList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    grant() {
        let _localctx = new GrantContext(this._ctx, this.state);
        this.enterRule(_localctx, 514, MySQLParser.RULE_grant);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4349;
                this.match(MySQLParser.GRANT_SYMBOL);
                this.state = 4392;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 523, this._ctx)) {
                    case 1:
                        {
                            this.state = 4350;
                            if (!(this.serverVersion >= 80000)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                            }
                            this.state = 4351;
                            this.roleOrPrivilegesList();
                            this.state = 4352;
                            this.match(MySQLParser.TO_SYMBOL);
                            this.state = 4353;
                            this.userList();
                            this.state = 4357;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.WITH_SYMBOL) {
                                {
                                    this.state = 4354;
                                    this.match(MySQLParser.WITH_SYMBOL);
                                    this.state = 4355;
                                    this.match(MySQLParser.ADMIN_SYMBOL);
                                    this.state = 4356;
                                    this.match(MySQLParser.OPTION_SYMBOL);
                                }
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 4364;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 517, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4359;
                                        this.roleOrPrivilegesList();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 4360;
                                        this.match(MySQLParser.ALL_SYMBOL);
                                        this.state = 4362;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === MySQLParser.PRIVILEGES_SYMBOL) {
                                            {
                                                this.state = 4361;
                                                this.match(MySQLParser.PRIVILEGES_SYMBOL);
                                            }
                                        }
                                    }
                                    break;
                            }
                            this.state = 4366;
                            this.match(MySQLParser.ON_SYMBOL);
                            this.state = 4368;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 518, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4367;
                                        this.aclType();
                                    }
                                    break;
                            }
                            this.state = 4370;
                            this.grantIdentifier();
                            this.state = 4371;
                            this.match(MySQLParser.TO_SYMBOL);
                            this.state = 4372;
                            this.grantTargetList();
                            this.state = 4374;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 519, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4373;
                                        this.versionedRequireClause();
                                    }
                                    break;
                            }
                            this.state = 4377;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 520, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4376;
                                        this.grantOptions();
                                    }
                                    break;
                            }
                            this.state = 4380;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.AS_SYMBOL) {
                                {
                                    this.state = 4379;
                                    this.grantAs();
                                }
                            }
                        }
                        break;
                    case 3:
                        {
                            this.state = 4382;
                            this.match(MySQLParser.PROXY_SYMBOL);
                            this.state = 4383;
                            this.match(MySQLParser.ON_SYMBOL);
                            this.state = 4384;
                            this.user();
                            this.state = 4385;
                            this.match(MySQLParser.TO_SYMBOL);
                            this.state = 4386;
                            this.grantTargetList();
                            this.state = 4390;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.WITH_SYMBOL) {
                                {
                                    this.state = 4387;
                                    this.match(MySQLParser.WITH_SYMBOL);
                                    this.state = 4388;
                                    this.match(MySQLParser.GRANT_SYMBOL);
                                    this.state = 4389;
                                    this.match(MySQLParser.OPTION_SYMBOL);
                                }
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    grantTargetList() {
        let _localctx = new GrantTargetListContext(this._ctx, this.state);
        this.enterRule(_localctx, 516, MySQLParser.RULE_grantTargetList);
        try {
            this.state = 4398;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 524, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4394;
                        if (!(this.serverVersion < 80011)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80011");
                        }
                        this.state = 4395;
                        this.createUserList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4396;
                        if (!(this.serverVersion >= 80011)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80011");
                        }
                        this.state = 4397;
                        this.userList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    grantOptions() {
        let _localctx = new GrantOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 518, MySQLParser.RULE_grantOptions);
        let _la;
        try {
            this.state = 4411;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 526, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4400;
                        if (!(this.serverVersion < 80011)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80011");
                        }
                        this.state = 4401;
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.state = 4403;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                {
                                    this.state = 4402;
                                    this.grantOption();
                                }
                            }
                            this.state = 4405;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & ((1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 207)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 207)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 207)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS_SYMBOL - 207)))) !== 0) || _la === MySQLParser.GRANT_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4407;
                        if (!(this.serverVersion >= 80011)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80011");
                        }
                        this.state = 4408;
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.state = 4409;
                        this.match(MySQLParser.GRANT_SYMBOL);
                        this.state = 4410;
                        this.match(MySQLParser.OPTION_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    exceptRoleList() {
        let _localctx = new ExceptRoleListContext(this._ctx, this.state);
        this.enterRule(_localctx, 520, MySQLParser.RULE_exceptRoleList);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4413;
                this.match(MySQLParser.EXCEPT_SYMBOL);
                this.state = 4414;
                this.roleList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    withRoles() {
        let _localctx = new WithRolesContext(this._ctx, this.state);
        this.enterRule(_localctx, 522, MySQLParser.RULE_withRoles);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4416;
                this.match(MySQLParser.WITH_SYMBOL);
                this.state = 4417;
                this.match(MySQLParser.ROLE_SYMBOL);
                this.state = 4425;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 528, this._ctx)) {
                    case 1:
                        {
                            this.state = 4418;
                            this.roleList();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4419;
                            this.match(MySQLParser.ALL_SYMBOL);
                            this.state = 4421;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.EXCEPT_SYMBOL) {
                                {
                                    this.state = 4420;
                                    this.exceptRoleList();
                                }
                            }
                        }
                        break;
                    case 3:
                        {
                            this.state = 4423;
                            this.match(MySQLParser.NONE_SYMBOL);
                        }
                        break;
                    case 4:
                        {
                            this.state = 4424;
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    grantAs() {
        let _localctx = new GrantAsContext(this._ctx, this.state);
        this.enterRule(_localctx, 524, MySQLParser.RULE_grantAs);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4427;
                this.match(MySQLParser.AS_SYMBOL);
                this.state = 4428;
                this.match(MySQLParser.USER_SYMBOL);
                this.state = 4430;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.WITH_SYMBOL) {
                    {
                        this.state = 4429;
                        this.withRoles();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    versionedRequireClause() {
        let _localctx = new VersionedRequireClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 526, MySQLParser.RULE_versionedRequireClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4432;
                if (!(this.serverVersion < 80011)) {
                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80011");
                }
                this.state = 4433;
                this.requireClause();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    renameUser() {
        let _localctx = new RenameUserContext(this._ctx, this.state);
        this.enterRule(_localctx, 528, MySQLParser.RULE_renameUser);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4435;
                this.match(MySQLParser.RENAME_SYMBOL);
                this.state = 4436;
                this.match(MySQLParser.USER_SYMBOL);
                this.state = 4437;
                this.user();
                this.state = 4438;
                this.match(MySQLParser.TO_SYMBOL);
                this.state = 4439;
                this.user();
                this.state = 4447;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 4440;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 4441;
                            this.user();
                            this.state = 4442;
                            this.match(MySQLParser.TO_SYMBOL);
                            this.state = 4443;
                            this.user();
                        }
                    }
                    this.state = 4449;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    revoke() {
        let _localctx = new RevokeContext(this._ctx, this.state);
        this.enterRule(_localctx, 530, MySQLParser.RULE_revoke);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4450;
                this.match(MySQLParser.REVOKE_SYMBOL);
                this.state = 4484;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 534, this._ctx)) {
                    case 1:
                        {
                            this.state = 4451;
                            if (!(this.serverVersion >= 80000)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                            }
                            this.state = 4452;
                            this.roleOrPrivilegesList();
                            this.state = 4453;
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.state = 4454;
                            this.userList();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4456;
                            this.roleOrPrivilegesList();
                            this.state = 4457;
                            this.onTypeTo();
                            this.state = 4458;
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.state = 4459;
                            this.userList();
                        }
                        break;
                    case 3:
                        {
                            this.state = 4461;
                            this.match(MySQLParser.ALL_SYMBOL);
                            this.state = 4463;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 531, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4462;
                                        this.match(MySQLParser.PRIVILEGES_SYMBOL);
                                    }
                                    break;
                            }
                            this.state = 4476;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 533, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4465;
                                        if (!(this.serverVersion >= 80000)) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                        }
                                        this.state = 4466;
                                        this.match(MySQLParser.ON_SYMBOL);
                                        this.state = 4468;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 532, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 4467;
                                                    this.aclType();
                                                }
                                                break;
                                        }
                                        this.state = 4470;
                                        this.grantIdentifier();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 4471;
                                        this.match(MySQLParser.COMMA_SYMBOL);
                                        this.state = 4472;
                                        this.match(MySQLParser.GRANT_SYMBOL);
                                        this.state = 4473;
                                        this.match(MySQLParser.OPTION_SYMBOL);
                                        this.state = 4474;
                                        this.match(MySQLParser.FROM_SYMBOL);
                                        this.state = 4475;
                                        this.userList();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 4:
                        {
                            this.state = 4478;
                            this.match(MySQLParser.PROXY_SYMBOL);
                            this.state = 4479;
                            this.match(MySQLParser.ON_SYMBOL);
                            this.state = 4480;
                            this.user();
                            this.state = 4481;
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.state = 4482;
                            this.userList();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    onTypeTo() {
        let _localctx = new OnTypeToContext(this._ctx, this.state);
        this.enterRule(_localctx, 532, MySQLParser.RULE_onTypeTo);
        let _la;
        try {
            this.state = 4500;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 538, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4486;
                        if (!(this.serverVersion < 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80000");
                        }
                        this.state = 4487;
                        this.match(MySQLParser.ON_SYMBOL);
                        this.state = 4489;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 535, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4488;
                                    this.aclType();
                                }
                                break;
                        }
                        this.state = 4491;
                        this.grantIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4492;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 4498;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.ON_SYMBOL) {
                            {
                                this.state = 4493;
                                this.match(MySQLParser.ON_SYMBOL);
                                this.state = 4495;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 536, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 4494;
                                            this.aclType();
                                        }
                                        break;
                                }
                                this.state = 4497;
                                this.grantIdentifier();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    aclType() {
        let _localctx = new AclTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 534, MySQLParser.RULE_aclType);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4502;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.FUNCTION_SYMBOL || _la === MySQLParser.PROCEDURE_SYMBOL || _la === MySQLParser.TABLE_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    roleOrPrivilegesList() {
        let _localctx = new RoleOrPrivilegesListContext(this._ctx, this.state);
        this.enterRule(_localctx, 536, MySQLParser.RULE_roleOrPrivilegesList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4504;
                this.roleOrPrivilege();
                this.state = 4509;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 539, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4505;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 4506;
                                this.roleOrPrivilege();
                            }
                        }
                    }
                    this.state = 4511;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 539, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    roleOrPrivilege() {
        let _localctx = new RoleOrPrivilegeContext(this._ctx, this.state);
        this.enterRule(_localctx, 538, MySQLParser.RULE_roleOrPrivilege);
        let _la;
        try {
            this.state = 4553;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 546, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4512;
                        if (!(this.serverVersion > 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion > 80000");
                        }
                        this.state = 4523;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 542, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4513;
                                    this.roleIdentifierOrText();
                                    this.state = 4515;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 540, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 4514;
                                                this.columnInternalRefList();
                                            }
                                            break;
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.state = 4517;
                                    this.roleIdentifierOrText();
                                    this.state = 4521;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case MySQLParser.AT_TEXT_SUFFIX:
                                            {
                                                this.state = 4518;
                                                this.match(MySQLParser.AT_TEXT_SUFFIX);
                                            }
                                            break;
                                        case MySQLParser.AT_SIGN_SYMBOL:
                                            {
                                                this.state = 4519;
                                                this.match(MySQLParser.AT_SIGN_SYMBOL);
                                                this.state = 4520;
                                                this.textOrIdentifier();
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException_1.NoViableAltException(this);
                                    }
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4525;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.INSERT_SYMBOL || _la === MySQLParser.REFERENCES_SYMBOL || _la === MySQLParser.SELECT_SYMBOL || _la === MySQLParser.UPDATE_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4527;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 543, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4526;
                                    this.columnInternalRefList();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4529;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.EXECUTE_SYMBOL || _la === MySQLParser.SHUTDOWN_SYMBOL || _la === MySQLParser.EVENT_SYMBOL || _la === MySQLParser.FILE_SYMBOL || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (MySQLParser.PROCESS_SYMBOL - 261)) | (1 << (MySQLParser.PROXY_SYMBOL - 261)) | (1 << (MySQLParser.RELOAD_SYMBOL - 261)))) !== 0) || _la === MySQLParser.SUPER_SYMBOL || _la === MySQLParser.DELETE_SYMBOL || _la === MySQLParser.DROP_SYMBOL || _la === MySQLParser.INDEX_SYMBOL || _la === MySQLParser.TRIGGER_SYMBOL || _la === MySQLParser.USAGE_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4530;
                        this.match(MySQLParser.GRANT_SYMBOL);
                        this.state = 4531;
                        this.match(MySQLParser.OPTION_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 4532;
                        this.match(MySQLParser.SHOW_SYMBOL);
                        this.state = 4533;
                        this.match(MySQLParser.DATABASES_SYMBOL);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 4534;
                        this.match(MySQLParser.CREATE_SYMBOL);
                        this.state = 4538;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 544, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4535;
                                    this.match(MySQLParser.TEMPORARY_SYMBOL);
                                    this.state = 4536;
                                    _localctx._object = this.match(MySQLParser.TABLES_SYMBOL);
                                }
                                break;
                            case 2:
                                {
                                    this.state = 4537;
                                    _localctx._object = this._input.LT(1);
                                    _la = this._input.LA(1);
                                    if (!(_la === MySQLParser.ROUTINE_SYMBOL || ((((_la - 342)) & ~0x1F) === 0 && ((1 << (_la - 342)) & ((1 << (MySQLParser.TABLESPACE_SYMBOL - 342)) | (1 << (MySQLParser.USER_SYMBOL - 342)) | (1 << (MySQLParser.VIEW_SYMBOL - 342)))) !== 0))) {
                                        _localctx._object = this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                }
                                break;
                        }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 4540;
                        this.match(MySQLParser.LOCK_SYMBOL);
                        this.state = 4541;
                        this.match(MySQLParser.TABLES_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 4542;
                        this.match(MySQLParser.REPLICATION_SYMBOL);
                        this.state = 4543;
                        _localctx._object = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.SLAVE_SYMBOL || _la === MySQLParser.CLIENT_SYMBOL)) {
                            _localctx._object = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 4544;
                        this.match(MySQLParser.SHOW_SYMBOL);
                        this.state = 4545;
                        this.match(MySQLParser.VIEW_SYMBOL);
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 4546;
                        this.match(MySQLParser.ALTER_SYMBOL);
                        this.state = 4548;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 545, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4547;
                                    this.match(MySQLParser.ROUTINE_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 4550;
                        if (!(this.serverVersion > 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion > 80000");
                        }
                        this.state = 4551;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.CREATE_SYMBOL || _la === MySQLParser.DROP_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4552;
                        this.match(MySQLParser.ROLE_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    grantIdentifier() {
        let _localctx = new GrantIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 540, MySQLParser.RULE_grantIdentifier);
        let _la;
        try {
            this.state = 4571;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 549, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4555;
                        this.match(MySQLParser.MULT_OPERATOR);
                        this.state = 4558;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.DOT_SYMBOL) {
                            {
                                this.state = 4556;
                                this.match(MySQLParser.DOT_SYMBOL);
                                this.state = 4557;
                                this.match(MySQLParser.MULT_OPERATOR);
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4560;
                        this.schemaRef();
                        this.state = 4563;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.DOT_SYMBOL) {
                            {
                                this.state = 4561;
                                this.match(MySQLParser.DOT_SYMBOL);
                                this.state = 4562;
                                this.match(MySQLParser.MULT_OPERATOR);
                            }
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4565;
                        this.tableRef();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4566;
                        if (!(this.serverVersion >= 80017)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80017");
                        }
                        this.state = 4567;
                        this.schemaRef();
                        this.state = 4568;
                        this.match(MySQLParser.DOT_SYMBOL);
                        this.state = 4569;
                        this.tableRef();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    requireList() {
        let _localctx = new RequireListContext(this._ctx, this.state);
        this.enterRule(_localctx, 542, MySQLParser.RULE_requireList);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4573;
                this.requireListElement();
                this.state = 4580;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 551, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4575;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === MySQLParser.AND_SYMBOL) {
                                    {
                                        this.state = 4574;
                                        this.match(MySQLParser.AND_SYMBOL);
                                    }
                                }
                                this.state = 4577;
                                this.requireListElement();
                            }
                        }
                    }
                    this.state = 4582;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 551, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    requireListElement() {
        let _localctx = new RequireListElementContext(this._ctx, this.state);
        this.enterRule(_localctx, 544, MySQLParser.RULE_requireListElement);
        try {
            this.state = 4589;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.CIPHER_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4583;
                        _localctx._element = this.match(MySQLParser.CIPHER_SYMBOL);
                        this.state = 4584;
                        this.textString();
                    }
                    break;
                case MySQLParser.ISSUER_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4585;
                        _localctx._element = this.match(MySQLParser.ISSUER_SYMBOL);
                        this.state = 4586;
                        this.textString();
                    }
                    break;
                case MySQLParser.SUBJECT_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4587;
                        _localctx._element = this.match(MySQLParser.SUBJECT_SYMBOL);
                        this.state = 4588;
                        this.textString();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    grantOption() {
        let _localctx = new GrantOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 546, MySQLParser.RULE_grantOption);
        try {
            this.state = 4601;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.GRANT_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4591;
                        _localctx._option = this.match(MySQLParser.GRANT_SYMBOL);
                        this.state = 4592;
                        this.match(MySQLParser.OPTION_SYMBOL);
                    }
                    break;
                case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4593;
                        _localctx._option = this.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
                        this.state = 4594;
                        this.ulong_number();
                    }
                    break;
                case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4595;
                        _localctx._option = this.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
                        this.state = 4596;
                        this.ulong_number();
                    }
                    break;
                case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4597;
                        _localctx._option = this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
                        this.state = 4598;
                        this.ulong_number();
                    }
                    break;
                case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 4599;
                        _localctx._option = this.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
                        this.state = 4600;
                        this.ulong_number();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    setRole() {
        let _localctx = new SetRoleContext(this._ctx, this.state);
        this.enterRule(_localctx, 548, MySQLParser.RULE_setRole);
        let _la;
        try {
            this.state = 4626;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 556, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4603;
                        this.match(MySQLParser.SET_SYMBOL);
                        this.state = 4604;
                        this.match(MySQLParser.ROLE_SYMBOL);
                        this.state = 4605;
                        this.roleList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4606;
                        this.match(MySQLParser.SET_SYMBOL);
                        this.state = 4607;
                        this.match(MySQLParser.ROLE_SYMBOL);
                        this.state = 4608;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.NONE_SYMBOL || _la === MySQLParser.DEFAULT_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4609;
                        this.match(MySQLParser.SET_SYMBOL);
                        this.state = 4610;
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        this.state = 4611;
                        this.match(MySQLParser.ROLE_SYMBOL);
                        this.state = 4615;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 554, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4612;
                                    this.roleList();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 4613;
                                    this.match(MySQLParser.NONE_SYMBOL);
                                }
                                break;
                            case 3:
                                {
                                    this.state = 4614;
                                    this.match(MySQLParser.ALL_SYMBOL);
                                }
                                break;
                        }
                        this.state = 4617;
                        this.match(MySQLParser.TO_SYMBOL);
                        this.state = 4618;
                        this.roleList();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4619;
                        this.match(MySQLParser.SET_SYMBOL);
                        this.state = 4620;
                        this.match(MySQLParser.ROLE_SYMBOL);
                        this.state = 4621;
                        this.match(MySQLParser.ALL_SYMBOL);
                        this.state = 4624;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EXCEPT_SYMBOL) {
                            {
                                this.state = 4622;
                                this.match(MySQLParser.EXCEPT_SYMBOL);
                                this.state = 4623;
                                this.roleList();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    roleList() {
        let _localctx = new RoleListContext(this._ctx, this.state);
        this.enterRule(_localctx, 550, MySQLParser.RULE_roleList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4628;
                this.role();
                this.state = 4633;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 557, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 4629;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 4630;
                                this.role();
                            }
                        }
                    }
                    this.state = 4635;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 557, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    role() {
        let _localctx = new RoleContext(this._ctx, this.state);
        this.enterRule(_localctx, 552, MySQLParser.RULE_role);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4636;
                this.roleIdentifierOrText();
                this.state = 4640;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 558, this._ctx)) {
                    case 1:
                        {
                            this.state = 4637;
                            this.match(MySQLParser.AT_SIGN_SYMBOL);
                            this.state = 4638;
                            this.textOrIdentifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 4639;
                            this.match(MySQLParser.AT_TEXT_SUFFIX);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableAdministrationStatement() {
        let _localctx = new TableAdministrationStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 554, MySQLParser.RULE_tableAdministrationStatement);
        let _la;
        try {
            this.state = 4685;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.ANALYZE_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4642;
                        _localctx._type = this.match(MySQLParser.ANALYZE_SYMBOL);
                        this.state = 4644;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.LOCAL_SYMBOL || _la === MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
                            {
                                this.state = 4643;
                                this.noWriteToBinLog();
                            }
                        }
                        this.state = 4646;
                        this.match(MySQLParser.TABLE_SYMBOL);
                        this.state = 4647;
                        this.tableRefList();
                        this.state = 4650;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 560, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4648;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 4649;
                                    this.histogram();
                                }
                                break;
                        }
                    }
                    break;
                case MySQLParser.CHECK_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4652;
                        _localctx._type = this.match(MySQLParser.CHECK_SYMBOL);
                        this.state = 4653;
                        this.match(MySQLParser.TABLE_SYMBOL);
                        this.state = 4654;
                        this.tableRefList();
                        this.state = 4658;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.CHANGED_SYMBOL || _la === MySQLParser.EXTENDED_SYMBOL || _la === MySQLParser.FAST_SYMBOL || _la === MySQLParser.MEDIUM_SYMBOL || _la === MySQLParser.QUICK_SYMBOL || _la === MySQLParser.FOR_SYMBOL) {
                            {
                                {
                                    this.state = 4655;
                                    this.checkOption();
                                }
                            }
                            this.state = 4660;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case MySQLParser.CHECKSUM_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4661;
                        _localctx._type = this.match(MySQLParser.CHECKSUM_SYMBOL);
                        this.state = 4662;
                        this.match(MySQLParser.TABLE_SYMBOL);
                        this.state = 4663;
                        this.tableRefList();
                        this.state = 4665;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EXTENDED_SYMBOL || _la === MySQLParser.QUICK_SYMBOL) {
                            {
                                this.state = 4664;
                                _la = this._input.LA(1);
                                if (!(_la === MySQLParser.EXTENDED_SYMBOL || _la === MySQLParser.QUICK_SYMBOL)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }
                        }
                    }
                    break;
                case MySQLParser.OPTIMIZE_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4667;
                        _localctx._type = this.match(MySQLParser.OPTIMIZE_SYMBOL);
                        this.state = 4669;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.LOCAL_SYMBOL || _la === MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
                            {
                                this.state = 4668;
                                this.noWriteToBinLog();
                            }
                        }
                        this.state = 4671;
                        this.match(MySQLParser.TABLE_SYMBOL);
                        this.state = 4672;
                        this.tableRefList();
                    }
                    break;
                case MySQLParser.REPAIR_SYMBOL:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 4673;
                        _localctx._type = this.match(MySQLParser.REPAIR_SYMBOL);
                        this.state = 4675;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.LOCAL_SYMBOL || _la === MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL) {
                            {
                                this.state = 4674;
                                this.noWriteToBinLog();
                            }
                        }
                        this.state = 4677;
                        this.match(MySQLParser.TABLE_SYMBOL);
                        this.state = 4678;
                        this.tableRefList();
                        this.state = 4682;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.EXTENDED_SYMBOL || _la === MySQLParser.QUICK_SYMBOL || _la === MySQLParser.USE_FRM_SYMBOL) {
                            {
                                {
                                    this.state = 4679;
                                    this.repairType();
                                }
                            }
                            this.state = 4684;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    histogram() {
        let _localctx = new HistogramContext(this._ctx, this.state);
        this.enterRule(_localctx, 556, MySQLParser.RULE_histogram);
        let _la;
        try {
            this.state = 4700;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.UPDATE_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4687;
                        this.match(MySQLParser.UPDATE_SYMBOL);
                        this.state = 4688;
                        this.match(MySQLParser.HISTOGRAM_SYMBOL);
                        this.state = 4689;
                        this.match(MySQLParser.ON_SYMBOL);
                        this.state = 4690;
                        this.identifierList();
                        this.state = 4694;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.WITH_SYMBOL) {
                            {
                                this.state = 4691;
                                this.match(MySQLParser.WITH_SYMBOL);
                                this.state = 4692;
                                this.match(MySQLParser.INT_NUMBER);
                                this.state = 4693;
                                this.match(MySQLParser.BUCKETS_SYMBOL);
                            }
                        }
                    }
                    break;
                case MySQLParser.DROP_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4696;
                        this.match(MySQLParser.DROP_SYMBOL);
                        this.state = 4697;
                        this.match(MySQLParser.HISTOGRAM_SYMBOL);
                        this.state = 4698;
                        this.match(MySQLParser.ON_SYMBOL);
                        this.state = 4699;
                        this.identifierList();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    checkOption() {
        let _localctx = new CheckOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 558, MySQLParser.RULE_checkOption);
        let _la;
        try {
            this.state = 4705;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.FOR_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4702;
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.state = 4703;
                        this.match(MySQLParser.UPGRADE_SYMBOL);
                    }
                    break;
                case MySQLParser.CHANGED_SYMBOL:
                case MySQLParser.EXTENDED_SYMBOL:
                case MySQLParser.FAST_SYMBOL:
                case MySQLParser.MEDIUM_SYMBOL:
                case MySQLParser.QUICK_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4704;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.CHANGED_SYMBOL || _la === MySQLParser.EXTENDED_SYMBOL || _la === MySQLParser.FAST_SYMBOL || _la === MySQLParser.MEDIUM_SYMBOL || _la === MySQLParser.QUICK_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    repairType() {
        let _localctx = new RepairTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 560, MySQLParser.RULE_repairType);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4707;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.EXTENDED_SYMBOL || _la === MySQLParser.QUICK_SYMBOL || _la === MySQLParser.USE_FRM_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    installUninstallStatment() {
        let _localctx = new InstallUninstallStatmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 562, MySQLParser.RULE_installUninstallStatment);
        let _la;
        try {
            this.state = 4731;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 571, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4709;
                        _localctx._action = this.match(MySQLParser.INSTALL_SYMBOL);
                        this.state = 4710;
                        _localctx._type = this.match(MySQLParser.PLUGIN_SYMBOL);
                        this.state = 4711;
                        this.identifier();
                        this.state = 4712;
                        this.match(MySQLParser.SONAME_SYMBOL);
                        this.state = 4713;
                        this.textStringLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4715;
                        _localctx._action = this.match(MySQLParser.INSTALL_SYMBOL);
                        this.state = 4716;
                        _localctx._type = this.match(MySQLParser.COMPONENT_SYMBOL);
                        this.state = 4717;
                        this.textStringLiteralList();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4718;
                        _localctx._action = this.match(MySQLParser.UNINSTALL_SYMBOL);
                        this.state = 4719;
                        _localctx._type = this.match(MySQLParser.PLUGIN_SYMBOL);
                        this.state = 4720;
                        this.pluginRef();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4721;
                        _localctx._action = this.match(MySQLParser.UNINSTALL_SYMBOL);
                        this.state = 4722;
                        _localctx._type = this.match(MySQLParser.COMPONENT_SYMBOL);
                        this.state = 4723;
                        this.componentRef();
                        this.state = 4728;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.COMMA_SYMBOL) {
                            {
                                {
                                    this.state = 4724;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.state = 4725;
                                    this.componentRef();
                                }
                            }
                            this.state = 4730;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    setStatement() {
        let _localctx = new SetStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 564, MySQLParser.RULE_setStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4733;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 4734;
                this.startOptionValueList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    startOptionValueList() {
        let _localctx = new StartOptionValueListContext(this._ctx, this.state);
        this.enterRule(_localctx, 566, MySQLParser.RULE_startOptionValueList);
        let _la;
        try {
            this.state = 4792;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 581, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4736;
                        this.optionValueNoOptionType();
                        this.state = 4737;
                        this.optionValueListContinued();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4739;
                        this.match(MySQLParser.TRANSACTION_SYMBOL);
                        this.state = 4740;
                        this.transactionCharacteristics();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4741;
                        this.optionType();
                        this.state = 4742;
                        this.startOptionValueListFollowingOptionType();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4744;
                        this.match(MySQLParser.PASSWORD_SYMBOL);
                        this.state = 4747;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.FOR_SYMBOL) {
                            {
                                this.state = 4745;
                                this.match(MySQLParser.FOR_SYMBOL);
                                this.state = 4746;
                                this.user();
                            }
                        }
                        this.state = 4749;
                        this.equal();
                        this.state = 4776;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 577, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4750;
                                    this.textString();
                                    this.state = 4752;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === MySQLParser.REPLACE_SYMBOL) {
                                        {
                                            this.state = 4751;
                                            this.replacePassword();
                                        }
                                    }
                                    this.state = 4755;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === MySQLParser.RETAIN_SYMBOL) {
                                        {
                                            this.state = 4754;
                                            this.retainCurrentPassword();
                                        }
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.state = 4757;
                                    this.textString();
                                    this.state = 4759;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === MySQLParser.REPLACE_SYMBOL) {
                                        {
                                            this.state = 4758;
                                            this.replacePassword();
                                        }
                                    }
                                    this.state = 4762;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === MySQLParser.RETAIN_SYMBOL) {
                                        {
                                            this.state = 4761;
                                            this.retainCurrentPassword();
                                        }
                                    }
                                }
                                break;
                            case 3:
                                {
                                    this.state = 4764;
                                    if (!(this.serverVersion < 50706)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 50706");
                                    }
                                    this.state = 4765;
                                    this.match(MySQLParser.OLD_PASSWORD_SYMBOL);
                                    this.state = 4766;
                                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                    this.state = 4767;
                                    this.textString();
                                    this.state = 4768;
                                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                }
                                break;
                            case 4:
                                {
                                    this.state = 4770;
                                    if (!(this.serverVersion < 80014)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80014");
                                    }
                                    this.state = 4771;
                                    this.match(MySQLParser.PASSWORD_SYMBOL);
                                    this.state = 4772;
                                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                    this.state = 4773;
                                    this.textString();
                                    this.state = 4774;
                                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 4778;
                        if (!(this.serverVersion >= 80018)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80018");
                        }
                        this.state = 4779;
                        this.match(MySQLParser.PASSWORD_SYMBOL);
                        this.state = 4782;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.FOR_SYMBOL) {
                            {
                                this.state = 4780;
                                this.match(MySQLParser.FOR_SYMBOL);
                                this.state = 4781;
                                this.user();
                            }
                        }
                        this.state = 4784;
                        this.match(MySQLParser.TO_SYMBOL);
                        this.state = 4785;
                        this.match(MySQLParser.RANDOM_SYMBOL);
                        this.state = 4787;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.REPLACE_SYMBOL) {
                            {
                                this.state = 4786;
                                this.replacePassword();
                            }
                        }
                        this.state = 4790;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.RETAIN_SYMBOL) {
                            {
                                this.state = 4789;
                                this.retainCurrentPassword();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    transactionCharacteristics() {
        let _localctx = new TransactionCharacteristicsContext(this._ctx, this.state);
        this.enterRule(_localctx, 568, MySQLParser.RULE_transactionCharacteristics);
        let _la;
        try {
            this.state = 4803;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.READ_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4794;
                        this.transactionAccessMode();
                        this.state = 4796;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.ISOLATION_SYMBOL) {
                            {
                                this.state = 4795;
                                this.isolationLevel();
                            }
                        }
                    }
                    break;
                case MySQLParser.ISOLATION_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4798;
                        this.isolationLevel();
                        this.state = 4801;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.COMMA_SYMBOL) {
                            {
                                this.state = 4799;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 4800;
                                this.transactionAccessMode();
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    transactionAccessMode() {
        let _localctx = new TransactionAccessModeContext(this._ctx, this.state);
        this.enterRule(_localctx, 570, MySQLParser.RULE_transactionAccessMode);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4805;
                this.match(MySQLParser.READ_SYMBOL);
                this.state = 4806;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.ONLY_SYMBOL || _la === MySQLParser.WRITE_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    isolationLevel() {
        let _localctx = new IsolationLevelContext(this._ctx, this.state);
        this.enterRule(_localctx, 572, MySQLParser.RULE_isolationLevel);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4808;
                this.match(MySQLParser.ISOLATION_SYMBOL);
                this.state = 4809;
                this.match(MySQLParser.LEVEL_SYMBOL);
                this.state = 4815;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case MySQLParser.REPEATABLE_SYMBOL:
                        {
                            this.state = 4810;
                            this.match(MySQLParser.REPEATABLE_SYMBOL);
                            this.state = 4811;
                            this.match(MySQLParser.READ_SYMBOL);
                        }
                        break;
                    case MySQLParser.READ_SYMBOL:
                        {
                            this.state = 4812;
                            this.match(MySQLParser.READ_SYMBOL);
                            this.state = 4813;
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.COMMITTED_SYMBOL || _la === MySQLParser.UNCOMMITTED_SYMBOL)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                    case MySQLParser.SERIALIZABLE_SYMBOL:
                        {
                            this.state = 4814;
                            this.match(MySQLParser.SERIALIZABLE_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    optionValueListContinued() {
        let _localctx = new OptionValueListContinuedContext(this._ctx, this.state);
        this.enterRule(_localctx, 574, MySQLParser.RULE_optionValueListContinued);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4821;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 4817;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 4818;
                            this.optionValue();
                        }
                    }
                    this.state = 4823;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    optionValueNoOptionType() {
        let _localctx = new OptionValueNoOptionTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 576, MySQLParser.RULE_optionValueNoOptionType);
        let _la;
        try {
            this.state = 4849;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 589, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4824;
                        this.internalVariableName();
                        this.state = 4825;
                        this.equal();
                        this.state = 4826;
                        this.setExprOrDefault();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4828;
                        this.charsetClause();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4829;
                        this.userVariable();
                        this.state = 4830;
                        this.equal();
                        this.state = 4831;
                        this.expr(0);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 4833;
                        this.setSystemVariable();
                        this.state = 4834;
                        this.equal();
                        this.state = 4835;
                        this.setExprOrDefault();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 4837;
                        this.match(MySQLParser.NAMES_SYMBOL);
                        this.state = 4847;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 588, this._ctx)) {
                            case 1:
                                {
                                    this.state = 4838;
                                    this.equal();
                                    this.state = 4839;
                                    this.expr(0);
                                }
                                break;
                            case 2:
                                {
                                    this.state = 4841;
                                    this.charsetName();
                                    this.state = 4843;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === MySQLParser.COLLATE_SYMBOL) {
                                        {
                                            this.state = 4842;
                                            this.collate();
                                        }
                                    }
                                }
                                break;
                            case 3:
                                {
                                    this.state = 4845;
                                    if (!(this.serverVersion >= 80011)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80011");
                                    }
                                    this.state = 4846;
                                    this.match(MySQLParser.DEFAULT_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    optionValue() {
        let _localctx = new OptionValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 578, MySQLParser.RULE_optionValue);
        try {
            this.state = 4857;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 590, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4851;
                        this.optionType();
                        this.state = 4852;
                        this.internalVariableName();
                        this.state = 4853;
                        this.equal();
                        this.state = 4854;
                        this.setExprOrDefault();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4856;
                        this.optionValueNoOptionType();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    setSystemVariable() {
        let _localctx = new SetSystemVariableContext(this._ctx, this.state);
        this.enterRule(_localctx, 580, MySQLParser.RULE_setSystemVariable);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4859;
                this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                this.state = 4861;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 591, this._ctx)) {
                    case 1:
                        {
                            this.state = 4860;
                            this.setVarIdentType();
                        }
                        break;
                }
                this.state = 4863;
                this.internalVariableName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    startOptionValueListFollowingOptionType() {
        let _localctx = new StartOptionValueListFollowingOptionTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 582, MySQLParser.RULE_startOptionValueListFollowingOptionType);
        try {
            this.state = 4870;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 592, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4865;
                        this.optionValueFollowingOptionType();
                        this.state = 4866;
                        this.optionValueListContinued();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4868;
                        this.match(MySQLParser.TRANSACTION_SYMBOL);
                        this.state = 4869;
                        this.transactionCharacteristics();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    optionValueFollowingOptionType() {
        let _localctx = new OptionValueFollowingOptionTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 584, MySQLParser.RULE_optionValueFollowingOptionType);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4872;
                this.internalVariableName();
                this.state = 4873;
                this.equal();
                this.state = 4874;
                this.setExprOrDefault();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    setExprOrDefault() {
        let _localctx = new SetExprOrDefaultContext(this._ctx, this.state);
        this.enterRule(_localctx, 586, MySQLParser.RULE_setExprOrDefault);
        let _la;
        try {
            this.state = 4880;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 593, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 4876;
                        this.expr(0);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 4877;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.ALL_SYMBOL || _la === MySQLParser.BINARY_SYMBOL || _la === MySQLParser.DEFAULT_SYMBOL || _la === MySQLParser.ON_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 4878;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 4879;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.ROW_SYMBOL || _la === MySQLParser.SYSTEM_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    showStatement() {
        let _localctx = new ShowStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 588, MySQLParser.RULE_showStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 4882;
                this.match(MySQLParser.SHOW_SYMBOL);
                this.state = 5102;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 637, this._ctx)) {
                    case 1:
                        {
                            this.state = 4883;
                            if (!(this.serverVersion < 50700)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 50700");
                            }
                            this.state = 4884;
                            _localctx._value = this.match(MySQLParser.AUTHORS_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                            this.state = 4885;
                            _localctx._value = this.match(MySQLParser.DATABASES_SYMBOL);
                            this.state = 4887;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.LIKE_SYMBOL || _la === MySQLParser.WHERE_SYMBOL) {
                                {
                                    this.state = 4886;
                                    this.likeOrWhere();
                                }
                            }
                        }
                        break;
                    case 3:
                        {
                            this.state = 4890;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 595, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4889;
                                        this.showCommandType();
                                    }
                                    break;
                            }
                            this.state = 4892;
                            _localctx._value = this.match(MySQLParser.TABLES_SYMBOL);
                            this.state = 4894;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.FROM_SYMBOL || _la === MySQLParser.IN_SYMBOL) {
                                {
                                    this.state = 4893;
                                    this.inDb();
                                }
                            }
                            this.state = 4897;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.LIKE_SYMBOL || _la === MySQLParser.WHERE_SYMBOL) {
                                {
                                    this.state = 4896;
                                    this.likeOrWhere();
                                }
                            }
                        }
                        break;
                    case 4:
                        {
                            this.state = 4900;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.FULL_SYMBOL) {
                                {
                                    this.state = 4899;
                                    this.match(MySQLParser.FULL_SYMBOL);
                                }
                            }
                            this.state = 4902;
                            _localctx._value = this.match(MySQLParser.TRIGGERS_SYMBOL);
                            this.state = 4904;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.FROM_SYMBOL || _la === MySQLParser.IN_SYMBOL) {
                                {
                                    this.state = 4903;
                                    this.inDb();
                                }
                            }
                            this.state = 4907;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.LIKE_SYMBOL || _la === MySQLParser.WHERE_SYMBOL) {
                                {
                                    this.state = 4906;
                                    this.likeOrWhere();
                                }
                            }
                        }
                        break;
                    case 5:
                        {
                            this.state = 4909;
                            _localctx._value = this.match(MySQLParser.EVENTS_SYMBOL);
                            this.state = 4911;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.FROM_SYMBOL || _la === MySQLParser.IN_SYMBOL) {
                                {
                                    this.state = 4910;
                                    this.inDb();
                                }
                            }
                            this.state = 4914;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.LIKE_SYMBOL || _la === MySQLParser.WHERE_SYMBOL) {
                                {
                                    this.state = 4913;
                                    this.likeOrWhere();
                                }
                            }
                        }
                        break;
                    case 6:
                        {
                            this.state = 4916;
                            _localctx._value = this.match(MySQLParser.TABLE_SYMBOL);
                            this.state = 4917;
                            this.match(MySQLParser.STATUS_SYMBOL);
                            this.state = 4919;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.FROM_SYMBOL || _la === MySQLParser.IN_SYMBOL) {
                                {
                                    this.state = 4918;
                                    this.inDb();
                                }
                            }
                            this.state = 4922;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.LIKE_SYMBOL || _la === MySQLParser.WHERE_SYMBOL) {
                                {
                                    this.state = 4921;
                                    this.likeOrWhere();
                                }
                            }
                        }
                        break;
                    case 7:
                        {
                            this.state = 4924;
                            _localctx._value = this.match(MySQLParser.OPEN_SYMBOL);
                            this.state = 4925;
                            this.match(MySQLParser.TABLES_SYMBOL);
                            this.state = 4927;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.FROM_SYMBOL || _la === MySQLParser.IN_SYMBOL) {
                                {
                                    this.state = 4926;
                                    this.inDb();
                                }
                            }
                            this.state = 4930;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.LIKE_SYMBOL || _la === MySQLParser.WHERE_SYMBOL) {
                                {
                                    this.state = 4929;
                                    this.likeOrWhere();
                                }
                            }
                        }
                        break;
                    case 8:
                        {
                            this.state = 4932;
                            _localctx._value = this.match(MySQLParser.PLUGINS_SYMBOL);
                        }
                        break;
                    case 9:
                        {
                            this.state = 4933;
                            _localctx._value = this.match(MySQLParser.ENGINE_SYMBOL);
                            this.state = 4936;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 607, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4934;
                                        this.engineRef();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 4935;
                                        this.match(MySQLParser.ALL_SYMBOL);
                                    }
                                    break;
                            }
                            this.state = 4938;
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.LOGS_SYMBOL || _la === MySQLParser.MUTEX_SYMBOL || _la === MySQLParser.STATUS_SYMBOL)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                    case 10:
                        {
                            this.state = 4940;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 608, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4939;
                                        this.showCommandType();
                                    }
                                    break;
                            }
                            this.state = 4942;
                            _localctx._value = this.match(MySQLParser.COLUMNS_SYMBOL);
                            this.state = 4943;
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.FROM_SYMBOL || _la === MySQLParser.IN_SYMBOL)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 4944;
                            this.tableRef();
                            this.state = 4946;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.FROM_SYMBOL || _la === MySQLParser.IN_SYMBOL) {
                                {
                                    this.state = 4945;
                                    this.inDb();
                                }
                            }
                            this.state = 4949;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.LIKE_SYMBOL || _la === MySQLParser.WHERE_SYMBOL) {
                                {
                                    this.state = 4948;
                                    this.likeOrWhere();
                                }
                            }
                        }
                        break;
                    case 11:
                        {
                            this.state = 4951;
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.MASTER_SYMBOL || _la === MySQLParser.BINARY_SYMBOL)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 4952;
                            _localctx._value = this.match(MySQLParser.LOGS_SYMBOL);
                        }
                        break;
                    case 12:
                        {
                            this.state = 4953;
                            _localctx._value = this.match(MySQLParser.SLAVE_SYMBOL);
                            this.state = 4960;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case MySQLParser.HOSTS_SYMBOL:
                                    {
                                        this.state = 4954;
                                        this.match(MySQLParser.HOSTS_SYMBOL);
                                    }
                                    break;
                                case MySQLParser.STATUS_SYMBOL:
                                    {
                                        this.state = 4955;
                                        this.match(MySQLParser.STATUS_SYMBOL);
                                        this.state = 4956;
                                        this.nonBlocking();
                                        this.state = 4958;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 611, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 4957;
                                                    this.channel();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                        }
                        break;
                    case 13:
                        {
                            this.state = 4962;
                            _localctx._value = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.BINLOG_SYMBOL || _la === MySQLParser.RELAYLOG_SYMBOL)) {
                                _localctx._value = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 4963;
                            this.match(MySQLParser.EVENTS_SYMBOL);
                            this.state = 4966;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 613, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4964;
                                        this.match(MySQLParser.IN_SYMBOL);
                                        this.state = 4965;
                                        this.textString();
                                    }
                                    break;
                            }
                            this.state = 4970;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 614, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4968;
                                        this.match(MySQLParser.FROM_SYMBOL);
                                        this.state = 4969;
                                        this.ulonglong_number();
                                    }
                                    break;
                            }
                            this.state = 4973;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 615, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4972;
                                        this.limitClause();
                                    }
                                    break;
                            }
                            this.state = 4976;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 616, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4975;
                                        this.channel();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 14:
                        {
                            this.state = 4980;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 617, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 4978;
                                        if (!(this.serverVersion >= 80000)) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                        }
                                        this.state = 4979;
                                        this.match(MySQLParser.EXTENDED_SYMBOL);
                                    }
                                    break;
                            }
                            this.state = 4982;
                            _localctx._value = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.INDEXES_SYMBOL || _la === MySQLParser.INDEX_SYMBOL || _la === MySQLParser.KEYS_SYMBOL)) {
                                _localctx._value = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 4983;
                            this.fromOrIn();
                            this.state = 4984;
                            this.tableRef();
                            this.state = 4986;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.FROM_SYMBOL || _la === MySQLParser.IN_SYMBOL) {
                                {
                                    this.state = 4985;
                                    this.inDb();
                                }
                            }
                            this.state = 4989;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.WHERE_SYMBOL) {
                                {
                                    this.state = 4988;
                                    this.whereClause();
                                }
                            }
                        }
                        break;
                    case 15:
                        {
                            this.state = 4992;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.STORAGE_SYMBOL) {
                                {
                                    this.state = 4991;
                                    this.match(MySQLParser.STORAGE_SYMBOL);
                                }
                            }
                            this.state = 4994;
                            _localctx._value = this.match(MySQLParser.ENGINES_SYMBOL);
                        }
                        break;
                    case 16:
                        {
                            this.state = 4995;
                            this.match(MySQLParser.COUNT_SYMBOL);
                            this.state = 4996;
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.state = 4997;
                            this.match(MySQLParser.MULT_OPERATOR);
                            this.state = 4998;
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                            this.state = 4999;
                            _localctx._value = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.ERRORS_SYMBOL || _la === MySQLParser.WARNINGS_SYMBOL)) {
                                _localctx._value = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                    case 17:
                        {
                            this.state = 5000;
                            _localctx._value = this.match(MySQLParser.WARNINGS_SYMBOL);
                            this.state = 5002;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.LIMIT_SYMBOL) {
                                {
                                    this.state = 5001;
                                    this.limitClause();
                                }
                            }
                        }
                        break;
                    case 18:
                        {
                            this.state = 5004;
                            _localctx._value = this.match(MySQLParser.ERRORS_SYMBOL);
                            this.state = 5006;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.LIMIT_SYMBOL) {
                                {
                                    this.state = 5005;
                                    this.limitClause();
                                }
                            }
                        }
                        break;
                    case 19:
                        {
                            this.state = 5008;
                            _localctx._value = this.match(MySQLParser.PROFILES_SYMBOL);
                        }
                        break;
                    case 20:
                        {
                            this.state = 5009;
                            _localctx._value = this.match(MySQLParser.PROFILE_SYMBOL);
                            this.state = 5018;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.BLOCK_SYMBOL || _la === MySQLParser.CONTEXT_SYMBOL || _la === MySQLParser.CPU_SYMBOL || _la === MySQLParser.IPC_SYMBOL || _la === MySQLParser.MEMORY_SYMBOL || _la === MySQLParser.PAGE_SYMBOL || _la === MySQLParser.SOURCE_SYMBOL || _la === MySQLParser.SWAPS_SYMBOL || _la === MySQLParser.ALL_SYMBOL) {
                                {
                                    this.state = 5010;
                                    this.profileType();
                                    this.state = 5015;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === MySQLParser.COMMA_SYMBOL) {
                                        {
                                            {
                                                this.state = 5011;
                                                this.match(MySQLParser.COMMA_SYMBOL);
                                                this.state = 5012;
                                                this.profileType();
                                            }
                                        }
                                        this.state = 5017;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                }
                            }
                            this.state = 5023;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.FOR_SYMBOL) {
                                {
                                    this.state = 5020;
                                    this.match(MySQLParser.FOR_SYMBOL);
                                    this.state = 5021;
                                    this.match(MySQLParser.QUERY_SYMBOL);
                                    this.state = 5022;
                                    this.match(MySQLParser.INT_NUMBER);
                                }
                            }
                            this.state = 5026;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.LIMIT_SYMBOL) {
                                {
                                    this.state = 5025;
                                    this.limitClause();
                                }
                            }
                        }
                        break;
                    case 21:
                        {
                            this.state = 5029;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.GLOBAL_SYMBOL || _la === MySQLParser.LOCAL_SYMBOL || _la === MySQLParser.SESSION_SYMBOL || _la === MySQLParser.PERSIST_SYMBOL || _la === MySQLParser.PERSIST_ONLY_SYMBOL) {
                                {
                                    this.state = 5028;
                                    this.optionType();
                                }
                            }
                            this.state = 5031;
                            _localctx._value = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.STATUS_SYMBOL || _la === MySQLParser.VARIABLES_SYMBOL)) {
                                _localctx._value = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 5033;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.LIKE_SYMBOL || _la === MySQLParser.WHERE_SYMBOL) {
                                {
                                    this.state = 5032;
                                    this.likeOrWhere();
                                }
                            }
                        }
                        break;
                    case 22:
                        {
                            this.state = 5036;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.FULL_SYMBOL) {
                                {
                                    this.state = 5035;
                                    this.match(MySQLParser.FULL_SYMBOL);
                                }
                            }
                            this.state = 5038;
                            _localctx._value = this.match(MySQLParser.PROCESSLIST_SYMBOL);
                        }
                        break;
                    case 23:
                        {
                            this.state = 5039;
                            this.charset();
                            this.state = 5041;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.LIKE_SYMBOL || _la === MySQLParser.WHERE_SYMBOL) {
                                {
                                    this.state = 5040;
                                    this.likeOrWhere();
                                }
                            }
                        }
                        break;
                    case 24:
                        {
                            this.state = 5043;
                            _localctx._value = this.match(MySQLParser.COLLATION_SYMBOL);
                            this.state = 5045;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.LIKE_SYMBOL || _la === MySQLParser.WHERE_SYMBOL) {
                                {
                                    this.state = 5044;
                                    this.likeOrWhere();
                                }
                            }
                        }
                        break;
                    case 25:
                        {
                            this.state = 5047;
                            if (!(this.serverVersion < 50700)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 50700");
                            }
                            this.state = 5048;
                            _localctx._value = this.match(MySQLParser.CONTRIBUTORS_SYMBOL);
                        }
                        break;
                    case 26:
                        {
                            this.state = 5049;
                            _localctx._value = this.match(MySQLParser.PRIVILEGES_SYMBOL);
                        }
                        break;
                    case 27:
                        {
                            this.state = 5050;
                            _localctx._value = this.match(MySQLParser.GRANTS_SYMBOL);
                            this.state = 5053;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.FOR_SYMBOL) {
                                {
                                    this.state = 5051;
                                    this.match(MySQLParser.FOR_SYMBOL);
                                    this.state = 5052;
                                    this.user();
                                }
                            }
                        }
                        break;
                    case 28:
                        {
                            this.state = 5055;
                            _localctx._value = this.match(MySQLParser.GRANTS_SYMBOL);
                            this.state = 5056;
                            this.match(MySQLParser.FOR_SYMBOL);
                            this.state = 5057;
                            this.user();
                            this.state = 5058;
                            this.match(MySQLParser.USING_SYMBOL);
                            this.state = 5059;
                            this.userList();
                        }
                        break;
                    case 29:
                        {
                            this.state = 5061;
                            _localctx._value = this.match(MySQLParser.MASTER_SYMBOL);
                            this.state = 5062;
                            this.match(MySQLParser.STATUS_SYMBOL);
                        }
                        break;
                    case 30:
                        {
                            this.state = 5063;
                            _localctx._value = this.match(MySQLParser.CREATE_SYMBOL);
                            this.state = 5084;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 634, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 5064;
                                        _localctx._object = this.match(MySQLParser.DATABASE_SYMBOL);
                                        this.state = 5066;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 633, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 5065;
                                                    this.ifNotExists();
                                                }
                                                break;
                                        }
                                        this.state = 5068;
                                        this.schemaRef();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 5069;
                                        _localctx._object = this.match(MySQLParser.EVENT_SYMBOL);
                                        this.state = 5070;
                                        this.eventRef();
                                    }
                                    break;
                                case 3:
                                    {
                                        this.state = 5071;
                                        _localctx._object = this.match(MySQLParser.FUNCTION_SYMBOL);
                                        this.state = 5072;
                                        this.functionRef();
                                    }
                                    break;
                                case 4:
                                    {
                                        this.state = 5073;
                                        _localctx._object = this.match(MySQLParser.PROCEDURE_SYMBOL);
                                        this.state = 5074;
                                        this.procedureRef();
                                    }
                                    break;
                                case 5:
                                    {
                                        this.state = 5075;
                                        _localctx._object = this.match(MySQLParser.TABLE_SYMBOL);
                                        this.state = 5076;
                                        this.tableRef();
                                    }
                                    break;
                                case 6:
                                    {
                                        this.state = 5077;
                                        _localctx._object = this.match(MySQLParser.TRIGGER_SYMBOL);
                                        this.state = 5078;
                                        this.triggerRef();
                                    }
                                    break;
                                case 7:
                                    {
                                        this.state = 5079;
                                        _localctx._object = this.match(MySQLParser.VIEW_SYMBOL);
                                        this.state = 5080;
                                        this.viewRef();
                                    }
                                    break;
                                case 8:
                                    {
                                        this.state = 5081;
                                        if (!(this.serverVersion >= 50704)) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50704");
                                        }
                                        this.state = 5082;
                                        _localctx._object = this.match(MySQLParser.USER_SYMBOL);
                                        this.state = 5083;
                                        this.user();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 31:
                        {
                            this.state = 5086;
                            _localctx._value = this.match(MySQLParser.PROCEDURE_SYMBOL);
                            this.state = 5087;
                            this.match(MySQLParser.STATUS_SYMBOL);
                            this.state = 5089;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.LIKE_SYMBOL || _la === MySQLParser.WHERE_SYMBOL) {
                                {
                                    this.state = 5088;
                                    this.likeOrWhere();
                                }
                            }
                        }
                        break;
                    case 32:
                        {
                            this.state = 5091;
                            _localctx._value = this.match(MySQLParser.FUNCTION_SYMBOL);
                            this.state = 5092;
                            this.match(MySQLParser.STATUS_SYMBOL);
                            this.state = 5094;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.LIKE_SYMBOL || _la === MySQLParser.WHERE_SYMBOL) {
                                {
                                    this.state = 5093;
                                    this.likeOrWhere();
                                }
                            }
                        }
                        break;
                    case 33:
                        {
                            this.state = 5096;
                            _localctx._value = this.match(MySQLParser.PROCEDURE_SYMBOL);
                            this.state = 5097;
                            this.match(MySQLParser.CODE_SYMBOL);
                            this.state = 5098;
                            this.procedureRef();
                        }
                        break;
                    case 34:
                        {
                            this.state = 5099;
                            _localctx._value = this.match(MySQLParser.FUNCTION_SYMBOL);
                            this.state = 5100;
                            this.match(MySQLParser.CODE_SYMBOL);
                            this.state = 5101;
                            this.functionRef();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    showCommandType() {
        let _localctx = new ShowCommandTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 590, MySQLParser.RULE_showCommandType);
        let _la;
        try {
            this.state = 5110;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 639, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5104;
                        this.match(MySQLParser.FULL_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5105;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 5106;
                        this.match(MySQLParser.EXTENDED_SYMBOL);
                        this.state = 5108;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.FULL_SYMBOL) {
                            {
                                this.state = 5107;
                                this.match(MySQLParser.FULL_SYMBOL);
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    nonBlocking() {
        let _localctx = new NonBlockingContext(this._ctx, this.state);
        this.enterRule(_localctx, 592, MySQLParser.RULE_nonBlocking);
        try {
            this.state = 5117;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 641, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5112;
                        if (!(this.serverVersion >= 50700 && this.serverVersion < 50706)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50700 && this.serverVersion < 50706");
                        }
                        this.state = 5114;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 640, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5113;
                                    this.match(MySQLParser.NONBLOCKING_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fromOrIn() {
        let _localctx = new FromOrInContext(this._ctx, this.state);
        this.enterRule(_localctx, 594, MySQLParser.RULE_fromOrIn);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5119;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.FROM_SYMBOL || _la === MySQLParser.IN_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    inDb() {
        let _localctx = new InDbContext(this._ctx, this.state);
        this.enterRule(_localctx, 596, MySQLParser.RULE_inDb);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5121;
                this.fromOrIn();
                this.state = 5122;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    profileType() {
        let _localctx = new ProfileTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 598, MySQLParser.RULE_profileType);
        let _la;
        try {
            this.state = 5131;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.BLOCK_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5124;
                        this.match(MySQLParser.BLOCK_SYMBOL);
                        this.state = 5125;
                        this.match(MySQLParser.IO_SYMBOL);
                    }
                    break;
                case MySQLParser.CONTEXT_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5126;
                        this.match(MySQLParser.CONTEXT_SYMBOL);
                        this.state = 5127;
                        this.match(MySQLParser.SWITCHES_SYMBOL);
                    }
                    break;
                case MySQLParser.PAGE_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5128;
                        this.match(MySQLParser.PAGE_SYMBOL);
                        this.state = 5129;
                        this.match(MySQLParser.FAULTS_SYMBOL);
                    }
                    break;
                case MySQLParser.CPU_SYMBOL:
                case MySQLParser.IPC_SYMBOL:
                case MySQLParser.MEMORY_SYMBOL:
                case MySQLParser.SOURCE_SYMBOL:
                case MySQLParser.SWAPS_SYMBOL:
                case MySQLParser.ALL_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 5130;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.CPU_SYMBOL || _la === MySQLParser.IPC_SYMBOL || _la === MySQLParser.MEMORY_SYMBOL || _la === MySQLParser.SOURCE_SYMBOL || _la === MySQLParser.SWAPS_SYMBOL || _la === MySQLParser.ALL_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    otherAdministrativeStatement() {
        let _localctx = new OtherAdministrativeStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 600, MySQLParser.RULE_otherAdministrativeStatement);
        let _la;
        try {
            this.state = 5170;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 648, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5133;
                        _localctx._type = this.match(MySQLParser.BINLOG_SYMBOL);
                        this.state = 5134;
                        this.textLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5135;
                        _localctx._type = this.match(MySQLParser.CACHE_SYMBOL);
                        this.state = 5136;
                        this.match(MySQLParser.INDEX_SYMBOL);
                        this.state = 5137;
                        this.keyCacheListOrParts();
                        this.state = 5138;
                        this.match(MySQLParser.IN_SYMBOL);
                        this.state = 5141;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 643, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5139;
                                    this.identifier();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 5140;
                                    this.match(MySQLParser.DEFAULT_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5143;
                        _localctx._type = this.match(MySQLParser.FLUSH_SYMBOL);
                        this.state = 5145;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 644, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5144;
                                    this.noWriteToBinLog();
                                }
                                break;
                        }
                        this.state = 5156;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 646, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5147;
                                    this.flushTables();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 5148;
                                    this.flushOption();
                                    this.state = 5153;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === MySQLParser.COMMA_SYMBOL) {
                                        {
                                            {
                                                this.state = 5149;
                                                this.match(MySQLParser.COMMA_SYMBOL);
                                                this.state = 5150;
                                                this.flushOption();
                                            }
                                        }
                                        this.state = 5155;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 5158;
                        _localctx._type = this.match(MySQLParser.KILL_SYMBOL);
                        this.state = 5160;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 647, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5159;
                                    _la = this._input.LA(1);
                                    if (!(_la === MySQLParser.CONNECTION_SYMBOL || _la === MySQLParser.QUERY_SYMBOL)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                }
                                break;
                        }
                        this.state = 5162;
                        this.expr(0);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 5163;
                        _localctx._type = this.match(MySQLParser.LOAD_SYMBOL);
                        this.state = 5164;
                        this.match(MySQLParser.INDEX_SYMBOL);
                        this.state = 5165;
                        this.match(MySQLParser.INTO_SYMBOL);
                        this.state = 5166;
                        this.match(MySQLParser.CACHE_SYMBOL);
                        this.state = 5167;
                        this.preloadTail();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 5168;
                        if (!(this.serverVersion >= 50709)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50709");
                        }
                        this.state = 5169;
                        _localctx._type = this.match(MySQLParser.SHUTDOWN_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    keyCacheListOrParts() {
        let _localctx = new KeyCacheListOrPartsContext(this._ctx, this.state);
        this.enterRule(_localctx, 602, MySQLParser.RULE_keyCacheListOrParts);
        try {
            this.state = 5174;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 649, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5172;
                        this.keyCacheList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5173;
                        this.assignToKeycachePartition();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    keyCacheList() {
        let _localctx = new KeyCacheListContext(this._ctx, this.state);
        this.enterRule(_localctx, 604, MySQLParser.RULE_keyCacheList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5176;
                this.assignToKeycache();
                this.state = 5181;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 5177;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 5178;
                            this.assignToKeycache();
                        }
                    }
                    this.state = 5183;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    assignToKeycache() {
        let _localctx = new AssignToKeycacheContext(this._ctx, this.state);
        this.enterRule(_localctx, 606, MySQLParser.RULE_assignToKeycache);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5184;
                this.tableRef();
                this.state = 5186;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.INDEX_SYMBOL || _la === MySQLParser.KEY_SYMBOL) {
                    {
                        this.state = 5185;
                        this.cacheKeyList();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    assignToKeycachePartition() {
        let _localctx = new AssignToKeycachePartitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 608, MySQLParser.RULE_assignToKeycachePartition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5188;
                this.tableRef();
                this.state = 5189;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 5190;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 5191;
                this.allOrPartitionNameList();
                this.state = 5192;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.state = 5194;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.INDEX_SYMBOL || _la === MySQLParser.KEY_SYMBOL) {
                    {
                        this.state = 5193;
                        this.cacheKeyList();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cacheKeyList() {
        let _localctx = new CacheKeyListContext(this._ctx, this.state);
        this.enterRule(_localctx, 610, MySQLParser.RULE_cacheKeyList);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5196;
                this.keyOrIndex();
                this.state = 5197;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 5199;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 653, this._ctx)) {
                    case 1:
                        {
                            this.state = 5198;
                            this.keyUsageList();
                        }
                        break;
                }
                this.state = 5201;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    keyUsageElement() {
        let _localctx = new KeyUsageElementContext(this._ctx, this.state);
        this.enterRule(_localctx, 612, MySQLParser.RULE_keyUsageElement);
        try {
            this.state = 5205;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 654, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5203;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5204;
                        this.match(MySQLParser.PRIMARY_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    keyUsageList() {
        let _localctx = new KeyUsageListContext(this._ctx, this.state);
        this.enterRule(_localctx, 614, MySQLParser.RULE_keyUsageList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5207;
                this.keyUsageElement();
                this.state = 5212;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 5208;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 5209;
                            this.keyUsageElement();
                        }
                    }
                    this.state = 5214;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    flushOption() {
        let _localctx = new FlushOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 616, MySQLParser.RULE_flushOption);
        let _la;
        try {
            this.state = 5230;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 658, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5215;
                        _localctx._option = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.DES_KEY_FILE_SYMBOL || _la === MySQLParser.HOSTS_SYMBOL || _la === MySQLParser.PRIVILEGES_SYMBOL || _la === MySQLParser.STATUS_SYMBOL || _la === MySQLParser.USER_RESOURCES_SYMBOL)) {
                            _localctx._option = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5217;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (MySQLParser.ENGINE_SYMBOL - 128)) | (1 << (MySQLParser.ERROR_SYMBOL - 128)) | (1 << (MySQLParser.GENERAL_SYMBOL - 128)))) !== 0) || _la === MySQLParser.SLOW_SYMBOL || _la === MySQLParser.BINARY_SYMBOL) {
                            {
                                this.state = 5216;
                                this.logType();
                            }
                        }
                        this.state = 5219;
                        _localctx._option = this.match(MySQLParser.LOGS_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5220;
                        _localctx._option = this.match(MySQLParser.RELAY_SYMBOL);
                        this.state = 5221;
                        this.match(MySQLParser.LOGS_SYMBOL);
                        this.state = 5223;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 657, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5222;
                                    this.channel();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 5225;
                        if (!(this.serverVersion < 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80000");
                        }
                        this.state = 5226;
                        _localctx._option = this.match(MySQLParser.QUERY_SYMBOL);
                        this.state = 5227;
                        this.match(MySQLParser.CACHE_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 5228;
                        if (!(this.serverVersion >= 50706)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50706");
                        }
                        this.state = 5229;
                        _localctx._option = this.match(MySQLParser.OPTIMIZER_COSTS_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    logType() {
        let _localctx = new LogTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 618, MySQLParser.RULE_logType);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5232;
                _la = this._input.LA(1);
                if (!(((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (MySQLParser.ENGINE_SYMBOL - 128)) | (1 << (MySQLParser.ERROR_SYMBOL - 128)) | (1 << (MySQLParser.GENERAL_SYMBOL - 128)))) !== 0) || _la === MySQLParser.SLOW_SYMBOL || _la === MySQLParser.BINARY_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    flushTables() {
        let _localctx = new FlushTablesContext(this._ctx, this.state);
        this.enterRule(_localctx, 620, MySQLParser.RULE_flushTables);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5234;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.TABLES_SYMBOL || _la === MySQLParser.TABLE_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5242;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 660, this._ctx)) {
                    case 1:
                        {
                            this.state = 5235;
                            this.match(MySQLParser.WITH_SYMBOL);
                            this.state = 5236;
                            this.match(MySQLParser.READ_SYMBOL);
                            this.state = 5237;
                            this.match(MySQLParser.LOCK_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                            this.state = 5238;
                            this.identifierList();
                            this.state = 5240;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 659, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 5239;
                                        this.flushTablesOptions();
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    flushTablesOptions() {
        let _localctx = new FlushTablesOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 622, MySQLParser.RULE_flushTablesOptions);
        try {
            this.state = 5250;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 661, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5244;
                        if (!(this.serverVersion >= 50606)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50606");
                        }
                        this.state = 5245;
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.state = 5246;
                        this.match(MySQLParser.EXPORT_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5247;
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.state = 5248;
                        this.match(MySQLParser.READ_SYMBOL);
                        this.state = 5249;
                        this.match(MySQLParser.LOCK_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    preloadTail() {
        let _localctx = new PreloadTailContext(this._ctx, this.state);
        this.enterRule(_localctx, 624, MySQLParser.RULE_preloadTail);
        let _la;
        try {
            this.state = 5262;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 664, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5252;
                        this.tableRef();
                        this.state = 5253;
                        this.adminPartition();
                        this.state = 5255;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.INDEX_SYMBOL || _la === MySQLParser.KEY_SYMBOL) {
                            {
                                this.state = 5254;
                                this.cacheKeyList();
                            }
                        }
                        this.state = 5259;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.IGNORE_SYMBOL) {
                            {
                                this.state = 5257;
                                this.match(MySQLParser.IGNORE_SYMBOL);
                                this.state = 5258;
                                this.match(MySQLParser.LEAVES_SYMBOL);
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5261;
                        this.preloadList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    preloadList() {
        let _localctx = new PreloadListContext(this._ctx, this.state);
        this.enterRule(_localctx, 626, MySQLParser.RULE_preloadList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5264;
                this.preloadKeys();
                this.state = 5269;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 5265;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 5266;
                            this.preloadKeys();
                        }
                    }
                    this.state = 5271;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    preloadKeys() {
        let _localctx = new PreloadKeysContext(this._ctx, this.state);
        this.enterRule(_localctx, 628, MySQLParser.RULE_preloadKeys);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5272;
                this.tableRef();
                this.state = 5274;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.INDEX_SYMBOL || _la === MySQLParser.KEY_SYMBOL) {
                    {
                        this.state = 5273;
                        this.cacheKeyList();
                    }
                }
                this.state = 5278;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.IGNORE_SYMBOL) {
                    {
                        this.state = 5276;
                        this.match(MySQLParser.IGNORE_SYMBOL);
                        this.state = 5277;
                        this.match(MySQLParser.LEAVES_SYMBOL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    adminPartition() {
        let _localctx = new AdminPartitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 630, MySQLParser.RULE_adminPartition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5280;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 5281;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 5282;
                this.allOrPartitionNameList();
                this.state = 5283;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resourceGroupManagement() {
        let _localctx = new ResourceGroupManagementContext(this._ctx, this.state);
        this.enterRule(_localctx, 632, MySQLParser.RULE_resourceGroupManagement);
        try {
            this.state = 5289;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.CREATE_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5285;
                        this.createResourceGroup();
                    }
                    break;
                case MySQLParser.ALTER_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5286;
                        this.alterResourceGroup();
                    }
                    break;
                case MySQLParser.SET_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5287;
                        this.setResourceGroup();
                    }
                    break;
                case MySQLParser.DROP_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 5288;
                        this.dropResourceGroup();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createResourceGroup() {
        let _localctx = new CreateResourceGroupContext(this._ctx, this.state);
        this.enterRule(_localctx, 634, MySQLParser.RULE_createResourceGroup);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5291;
                this.match(MySQLParser.CREATE_SYMBOL);
                this.state = 5292;
                this.match(MySQLParser.RESOURCE_SYMBOL);
                this.state = 5293;
                this.match(MySQLParser.GROUP_SYMBOL);
                this.state = 5294;
                this.identifier();
                this.state = 5295;
                this.match(MySQLParser.TYPE_SYMBOL);
                this.state = 5297;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.EQUAL_OPERATOR || _la === MySQLParser.ASSIGN_OPERATOR) {
                    {
                        this.state = 5296;
                        this.equal();
                    }
                }
                this.state = 5299;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.USER_SYMBOL || _la === MySQLParser.SYSTEM_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5301;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.VCPU_SYMBOL) {
                    {
                        this.state = 5300;
                        this.resourceGroupVcpuList();
                    }
                }
                this.state = 5304;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.THREAD_PRIORITY_SYMBOL) {
                    {
                        this.state = 5303;
                        this.resourceGroupPriority();
                    }
                }
                this.state = 5307;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.DISABLE_SYMBOL || _la === MySQLParser.ENABLE_SYMBOL) {
                    {
                        this.state = 5306;
                        this.resourceGroupEnableDisable();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resourceGroupVcpuList() {
        let _localctx = new ResourceGroupVcpuListContext(this._ctx, this.state);
        this.enterRule(_localctx, 636, MySQLParser.RULE_resourceGroupVcpuList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5309;
                this.match(MySQLParser.VCPU_SYMBOL);
                this.state = 5311;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.EQUAL_OPERATOR || _la === MySQLParser.ASSIGN_OPERATOR) {
                    {
                        this.state = 5310;
                        this.equal();
                    }
                }
                this.state = 5313;
                this.vcpuNumOrRange();
                this.state = 5320;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.INT_NUMBER || _la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 5315;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.COMMA_SYMBOL) {
                                {
                                    this.state = 5314;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                }
                            }
                            this.state = 5317;
                            this.vcpuNumOrRange();
                        }
                    }
                    this.state = 5322;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    vcpuNumOrRange() {
        let _localctx = new VcpuNumOrRangeContext(this._ctx, this.state);
        this.enterRule(_localctx, 638, MySQLParser.RULE_vcpuNumOrRange);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5323;
                this.match(MySQLParser.INT_NUMBER);
                this.state = 5326;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.MINUS_OPERATOR) {
                    {
                        this.state = 5324;
                        this.match(MySQLParser.MINUS_OPERATOR);
                        this.state = 5325;
                        this.match(MySQLParser.INT_NUMBER);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resourceGroupPriority() {
        let _localctx = new ResourceGroupPriorityContext(this._ctx, this.state);
        this.enterRule(_localctx, 640, MySQLParser.RULE_resourceGroupPriority);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5328;
                this.match(MySQLParser.THREAD_PRIORITY_SYMBOL);
                this.state = 5330;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.EQUAL_OPERATOR || _la === MySQLParser.ASSIGN_OPERATOR) {
                    {
                        this.state = 5329;
                        this.equal();
                    }
                }
                this.state = 5332;
                this.match(MySQLParser.INT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resourceGroupEnableDisable() {
        let _localctx = new ResourceGroupEnableDisableContext(this._ctx, this.state);
        this.enterRule(_localctx, 642, MySQLParser.RULE_resourceGroupEnableDisable);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5334;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.DISABLE_SYMBOL || _la === MySQLParser.ENABLE_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterResourceGroup() {
        let _localctx = new AlterResourceGroupContext(this._ctx, this.state);
        this.enterRule(_localctx, 644, MySQLParser.RULE_alterResourceGroup);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5336;
                this.match(MySQLParser.ALTER_SYMBOL);
                this.state = 5337;
                this.match(MySQLParser.RESOURCE_SYMBOL);
                this.state = 5338;
                this.match(MySQLParser.GROUP_SYMBOL);
                this.state = 5339;
                this.resourceGroupRef();
                this.state = 5341;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.VCPU_SYMBOL) {
                    {
                        this.state = 5340;
                        this.resourceGroupVcpuList();
                    }
                }
                this.state = 5344;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.THREAD_PRIORITY_SYMBOL) {
                    {
                        this.state = 5343;
                        this.resourceGroupPriority();
                    }
                }
                this.state = 5347;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.DISABLE_SYMBOL || _la === MySQLParser.ENABLE_SYMBOL) {
                    {
                        this.state = 5346;
                        this.resourceGroupEnableDisable();
                    }
                }
                this.state = 5350;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.FORCE_SYMBOL) {
                    {
                        this.state = 5349;
                        this.match(MySQLParser.FORCE_SYMBOL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    setResourceGroup() {
        let _localctx = new SetResourceGroupContext(this._ctx, this.state);
        this.enterRule(_localctx, 646, MySQLParser.RULE_setResourceGroup);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5352;
                this.match(MySQLParser.SET_SYMBOL);
                this.state = 5353;
                this.match(MySQLParser.RESOURCE_SYMBOL);
                this.state = 5354;
                this.match(MySQLParser.GROUP_SYMBOL);
                this.state = 5355;
                this.identifier();
                this.state = 5358;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.FOR_SYMBOL) {
                    {
                        this.state = 5356;
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.state = 5357;
                        this.threadIdList();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    threadIdList() {
        let _localctx = new ThreadIdListContext(this._ctx, this.state);
        this.enterRule(_localctx, 648, MySQLParser.RULE_threadIdList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5360;
                this.real_ulong_number();
                this.state = 5367;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (MySQLParser.INT_NUMBER - 380)) | (1 << (MySQLParser.LONG_NUMBER - 380)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 380)) | (1 << (MySQLParser.COMMA_SYMBOL - 380)))) !== 0) || _la === MySQLParser.HEX_NUMBER) {
                    {
                        {
                            this.state = 5362;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.COMMA_SYMBOL) {
                                {
                                    this.state = 5361;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                }
                            }
                            this.state = 5364;
                            this.real_ulong_number();
                        }
                    }
                    this.state = 5369;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropResourceGroup() {
        let _localctx = new DropResourceGroupContext(this._ctx, this.state);
        this.enterRule(_localctx, 650, MySQLParser.RULE_dropResourceGroup);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5370;
                this.match(MySQLParser.DROP_SYMBOL);
                this.state = 5371;
                this.match(MySQLParser.RESOURCE_SYMBOL);
                this.state = 5372;
                this.match(MySQLParser.GROUP_SYMBOL);
                this.state = 5373;
                this.resourceGroupRef();
                this.state = 5375;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.FORCE_SYMBOL) {
                    {
                        this.state = 5374;
                        this.match(MySQLParser.FORCE_SYMBOL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    utilityStatement() {
        let _localctx = new UtilityStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 652, MySQLParser.RULE_utilityStatement);
        try {
            this.state = 5383;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 686, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5377;
                        this.describeCommand();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5378;
                        this.explainCommand();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5379;
                        this.helpCommand();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 5380;
                        this.useCommand();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 5381;
                        if (!(this.serverVersion >= 80011)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80011");
                        }
                        this.state = 5382;
                        this.restartServer();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    describeCommand() {
        let _localctx = new DescribeCommandContext(this._ctx, this.state);
        this.enterRule(_localctx, 654, MySQLParser.RULE_describeCommand);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5385;
                _la = this._input.LA(1);
                if (!(((((_la - 481)) & ~0x1F) === 0 && ((1 << (_la - 481)) & ((1 << (MySQLParser.DESC_SYMBOL - 481)) | (1 << (MySQLParser.DESCRIBE_SYMBOL - 481)) | (1 << (MySQLParser.EXPLAIN_SYMBOL - 481)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5386;
                this.tableRef();
                this.state = 5389;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 687, this._ctx)) {
                    case 1:
                        {
                            this.state = 5387;
                            this.textString();
                        }
                        break;
                    case 2:
                        {
                            this.state = 5388;
                            this.columnRef();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    explainCommand() {
        let _localctx = new ExplainCommandContext(this._ctx, this.state);
        this.enterRule(_localctx, 656, MySQLParser.RULE_explainCommand);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5391;
                _la = this._input.LA(1);
                if (!(((((_la - 481)) & ~0x1F) === 0 && ((1 << (_la - 481)) & ((1 << (MySQLParser.DESC_SYMBOL - 481)) | (1 << (MySQLParser.DESCRIBE_SYMBOL - 481)) | (1 << (MySQLParser.EXPLAIN_SYMBOL - 481)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5402;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 688, this._ctx)) {
                    case 1:
                        {
                            this.state = 5392;
                            if (!(this.serverVersion < 80000)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80000");
                            }
                            this.state = 5393;
                            this.match(MySQLParser.EXTENDED_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                            this.state = 5394;
                            if (!(this.serverVersion < 80000)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80000");
                            }
                            this.state = 5395;
                            this.match(MySQLParser.PARTITIONS_SYMBOL);
                        }
                        break;
                    case 3:
                        {
                            this.state = 5396;
                            if (!(this.serverVersion >= 50605)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50605");
                            }
                            this.state = 5397;
                            this.match(MySQLParser.FORMAT_SYMBOL);
                            this.state = 5398;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            this.state = 5399;
                            this.textOrIdentifier();
                        }
                        break;
                    case 4:
                        {
                            this.state = 5400;
                            if (!(this.serverVersion >= 80018)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80018");
                            }
                            this.state = 5401;
                            this.match(MySQLParser.ANALYZE_SYMBOL);
                        }
                        break;
                }
                this.state = 5404;
                this.explainableStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    explainableStatement() {
        let _localctx = new ExplainableStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 658, MySQLParser.RULE_explainableStatement);
        try {
            this.state = 5418;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 690, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5406;
                        this.selectStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5407;
                        if (!(this.serverVersion >= 50603)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50603");
                        }
                        this.state = 5412;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 689, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5408;
                                    this.deleteStatement();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 5409;
                                    this.insertStatement();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 5410;
                                    this.replaceStatement();
                                }
                                break;
                            case 4:
                                {
                                    this.state = 5411;
                                    this.updateStatement();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5414;
                        if (!(this.serverVersion >= 50700)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50700");
                        }
                        this.state = 5415;
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.state = 5416;
                        this.match(MySQLParser.CONNECTION_SYMBOL);
                        this.state = 5417;
                        this.real_ulong_number();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    helpCommand() {
        let _localctx = new HelpCommandContext(this._ctx, this.state);
        this.enterRule(_localctx, 660, MySQLParser.RULE_helpCommand);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5420;
                this.match(MySQLParser.HELP_SYMBOL);
                this.state = 5421;
                this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    useCommand() {
        let _localctx = new UseCommandContext(this._ctx, this.state);
        this.enterRule(_localctx, 662, MySQLParser.RULE_useCommand);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5423;
                this.match(MySQLParser.USE_SYMBOL);
                this.state = 5424;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    restartServer() {
        let _localctx = new RestartServerContext(this._ctx, this.state);
        this.enterRule(_localctx, 664, MySQLParser.RULE_restartServer);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5426;
                this.match(MySQLParser.RESTART_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    expr(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let _localctx = new ExprContext(this._ctx, _parentState);
        let _prevctx = _localctx;
        let _startState = 666;
        this.enterRecursionRule(_localctx, 666, MySQLParser.RULE_expr, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5439;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 693, this._ctx)) {
                    case 1:
                        {
                            _localctx = new ExprIsContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5429;
                            this.boolPri(0);
                            this.state = 5435;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 692, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 5430;
                                        this.match(MySQLParser.IS_SYMBOL);
                                        this.state = 5432;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === MySQLParser.NOT2_SYMBOL || _la === MySQLParser.NOT_SYMBOL) {
                                            {
                                                this.state = 5431;
                                                this.notRule();
                                            }
                                        }
                                        this.state = 5434;
                                        _localctx._type = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(_la === MySQLParser.UNKNOWN_SYMBOL || _la === MySQLParser.FALSE_SYMBOL || _la === MySQLParser.TRUE_SYMBOL)) {
                                            _localctx._type = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            _localctx = new ExprNotContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5437;
                            this.match(MySQLParser.NOT_SYMBOL);
                            this.state = 5438;
                            this.expr(4);
                        }
                        break;
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 5452;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 695, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 5450;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 694, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, MySQLParser.RULE_expr);
                                        this.state = 5441;
                                        if (!(this.precpred(this._ctx, 3))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                                        }
                                        this.state = 5442;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(_la === MySQLParser.LOGICAL_AND_OPERATOR || _la === MySQLParser.AND_SYMBOL)) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 5443;
                                        this.expr(4);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new ExprXorContext(new ExprContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, MySQLParser.RULE_expr);
                                        this.state = 5444;
                                        if (!(this.precpred(this._ctx, 2))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                                        }
                                        this.state = 5445;
                                        this.match(MySQLParser.XOR_SYMBOL);
                                        this.state = 5446;
                                        this.expr(3);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, MySQLParser.RULE_expr);
                                        this.state = 5447;
                                        if (!(this.precpred(this._ctx, 1))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                        }
                                        this.state = 5448;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(_la === MySQLParser.LOGICAL_OR_OPERATOR || _la === MySQLParser.OR_SYMBOL)) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 5449;
                                        this.expr(2);
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 5454;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 695, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }
    // @RuleVersion(0)
    boolPri(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let _localctx = new BoolPriContext(this._ctx, _parentState);
        let _prevctx = _localctx;
        let _startState = 668;
        this.enterRecursionRule(_localctx, 668, MySQLParser.RULE_boolPri, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    _localctx = new PrimaryExprPredicateContext(_localctx);
                    this._ctx = _localctx;
                    _prevctx = _localctx;
                    this.state = 5456;
                    this.predicate();
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 5475;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 698, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 5473;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 697, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new PrimaryExprIsNullContext(new BoolPriContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, MySQLParser.RULE_boolPri);
                                        this.state = 5458;
                                        if (!(this.precpred(this._ctx, 3))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                                        }
                                        this.state = 5459;
                                        this.match(MySQLParser.IS_SYMBOL);
                                        this.state = 5461;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === MySQLParser.NOT2_SYMBOL || _la === MySQLParser.NOT_SYMBOL) {
                                            {
                                                this.state = 5460;
                                                this.notRule();
                                            }
                                        }
                                        this.state = 5463;
                                        this.match(MySQLParser.NULL_SYMBOL);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new PrimaryExprCompareContext(new BoolPriContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, MySQLParser.RULE_boolPri);
                                        this.state = 5464;
                                        if (!(this.precpred(this._ctx, 2))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                                        }
                                        this.state = 5465;
                                        this.compOp();
                                        this.state = 5466;
                                        this.predicate();
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new PrimaryExprAllAnyContext(new BoolPriContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, MySQLParser.RULE_boolPri);
                                        this.state = 5468;
                                        if (!(this.precpred(this._ctx, 1))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                        }
                                        this.state = 5469;
                                        this.compOp();
                                        this.state = 5470;
                                        _la = this._input.LA(1);
                                        if (!(_la === MySQLParser.ANY_SYMBOL || _la === MySQLParser.ALL_SYMBOL)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 5471;
                                        this.subquery();
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 5477;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 698, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }
    // @RuleVersion(0)
    compOp() {
        let _localctx = new CompOpContext(this._ctx, this.state);
        this.enterRule(_localctx, 670, MySQLParser.RULE_compOp);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5478;
                _la = this._input.LA(1);
                if (!(((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & ((1 << (MySQLParser.EQUAL_OPERATOR - 383)) | (1 << (MySQLParser.NULL_SAFE_EQUAL_OPERATOR - 383)) | (1 << (MySQLParser.GREATER_OR_EQUAL_OPERATOR - 383)) | (1 << (MySQLParser.GREATER_THAN_OPERATOR - 383)) | (1 << (MySQLParser.LESS_OR_EQUAL_OPERATOR - 383)) | (1 << (MySQLParser.LESS_THAN_OPERATOR - 383)) | (1 << (MySQLParser.NOT_EQUAL_OPERATOR - 383)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    predicate() {
        let _localctx = new PredicateContext(this._ctx, this.state);
        this.enterRule(_localctx, 672, MySQLParser.RULE_predicate);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5480;
                this.bitExpr(0);
                this.state = 5494;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 701, this._ctx)) {
                    case 1:
                        {
                            this.state = 5482;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.NOT2_SYMBOL || _la === MySQLParser.NOT_SYMBOL) {
                                {
                                    this.state = 5481;
                                    this.notRule();
                                }
                            }
                            this.state = 5484;
                            this.predicateOperations();
                        }
                        break;
                    case 2:
                        {
                            this.state = 5485;
                            if (!(this.serverVersion >= 80017)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80017");
                            }
                            this.state = 5486;
                            this.match(MySQLParser.MEMBER_SYMBOL);
                            this.state = 5488;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.OF_SYMBOL) {
                                {
                                    this.state = 5487;
                                    this.match(MySQLParser.OF_SYMBOL);
                                }
                            }
                            this.state = 5490;
                            this.simpleExprWithParentheses();
                        }
                        break;
                    case 3:
                        {
                            this.state = 5491;
                            this.match(MySQLParser.SOUNDS_SYMBOL);
                            this.state = 5492;
                            this.match(MySQLParser.LIKE_SYMBOL);
                            this.state = 5493;
                            this.bitExpr(0);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    predicateOperations() {
        let _localctx = new PredicateOperationsContext(this._ctx, this.state);
        this.enterRule(_localctx, 674, MySQLParser.RULE_predicateOperations);
        try {
            this.state = 5517;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.IN_SYMBOL:
                    _localctx = new PredicateExprInContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5496;
                        this.match(MySQLParser.IN_SYMBOL);
                        this.state = 5502;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 702, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5497;
                                    this.subquery();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 5498;
                                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                    this.state = 5499;
                                    this.exprList();
                                    this.state = 5500;
                                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case MySQLParser.BETWEEN_SYMBOL:
                    _localctx = new PredicateExprBetweenContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5504;
                        this.match(MySQLParser.BETWEEN_SYMBOL);
                        this.state = 5505;
                        this.bitExpr(0);
                        this.state = 5506;
                        this.match(MySQLParser.AND_SYMBOL);
                        this.state = 5507;
                        this.predicate();
                    }
                    break;
                case MySQLParser.LIKE_SYMBOL:
                    _localctx = new PredicateExprLikeContext(_localctx);
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5509;
                        this.match(MySQLParser.LIKE_SYMBOL);
                        this.state = 5510;
                        this.simpleExpr(0);
                        this.state = 5513;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 703, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5511;
                                    this.match(MySQLParser.ESCAPE_SYMBOL);
                                    this.state = 5512;
                                    this.simpleExpr(0);
                                }
                                break;
                        }
                    }
                    break;
                case MySQLParser.REGEXP_SYMBOL:
                    _localctx = new PredicateExprRegexContext(_localctx);
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 5515;
                        this.match(MySQLParser.REGEXP_SYMBOL);
                        this.state = 5516;
                        this.bitExpr(0);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bitExpr(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let _localctx = new BitExprContext(this._ctx, _parentState);
        let _prevctx = _localctx;
        let _startState = 676;
        this.enterRecursionRule(_localctx, 676, MySQLParser.RULE_bitExpr, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 5520;
                    this.simpleExpr(0);
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 5548;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 706, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 5546;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 705, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new BitExprContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, MySQLParser.RULE_bitExpr);
                                        this.state = 5522;
                                        if (!(this.precpred(this._ctx, 7))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                                        }
                                        this.state = 5523;
                                        _localctx._op = this.match(MySQLParser.BITWISE_XOR_OPERATOR);
                                        this.state = 5524;
                                        this.bitExpr(8);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new BitExprContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, MySQLParser.RULE_bitExpr);
                                        this.state = 5525;
                                        if (!(this.precpred(this._ctx, 6))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                                        }
                                        this.state = 5526;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(((((_la - 393)) & ~0x1F) === 0 && ((1 << (_la - 393)) & ((1 << (MySQLParser.MULT_OPERATOR - 393)) | (1 << (MySQLParser.DIV_OPERATOR - 393)) | (1 << (MySQLParser.MOD_OPERATOR - 393)))) !== 0) || _la === MySQLParser.DIV_SYMBOL || _la === MySQLParser.MOD_SYMBOL)) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 5527;
                                        this.bitExpr(7);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new BitExprContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, MySQLParser.RULE_bitExpr);
                                        this.state = 5528;
                                        if (!(this.precpred(this._ctx, 5))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                                        }
                                        this.state = 5529;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(_la === MySQLParser.PLUS_OPERATOR || _la === MySQLParser.MINUS_OPERATOR)) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 5530;
                                        this.bitExpr(6);
                                    }
                                    break;
                                case 4:
                                    {
                                        _localctx = new BitExprContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, MySQLParser.RULE_bitExpr);
                                        this.state = 5531;
                                        if (!(this.precpred(this._ctx, 3))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                                        }
                                        this.state = 5532;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(_la === MySQLParser.SHIFT_LEFT_OPERATOR || _la === MySQLParser.SHIFT_RIGHT_OPERATOR)) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 5533;
                                        this.bitExpr(4);
                                    }
                                    break;
                                case 5:
                                    {
                                        _localctx = new BitExprContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, MySQLParser.RULE_bitExpr);
                                        this.state = 5534;
                                        if (!(this.precpred(this._ctx, 2))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                                        }
                                        this.state = 5535;
                                        _localctx._op = this.match(MySQLParser.BITWISE_AND_OPERATOR);
                                        this.state = 5536;
                                        this.bitExpr(3);
                                    }
                                    break;
                                case 6:
                                    {
                                        _localctx = new BitExprContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, MySQLParser.RULE_bitExpr);
                                        this.state = 5537;
                                        if (!(this.precpred(this._ctx, 1))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                        }
                                        this.state = 5538;
                                        _localctx._op = this.match(MySQLParser.BITWISE_OR_OPERATOR);
                                        this.state = 5539;
                                        this.bitExpr(2);
                                    }
                                    break;
                                case 7:
                                    {
                                        _localctx = new BitExprContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, MySQLParser.RULE_bitExpr);
                                        this.state = 5540;
                                        if (!(this.precpred(this._ctx, 4))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                                        }
                                        this.state = 5541;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(_la === MySQLParser.PLUS_OPERATOR || _la === MySQLParser.MINUS_OPERATOR)) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 5542;
                                        this.match(MySQLParser.INTERVAL_SYMBOL);
                                        this.state = 5543;
                                        this.expr(0);
                                        this.state = 5544;
                                        this.interval();
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 5550;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 706, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }
    // @RuleVersion(0)
    simpleExpr(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let _localctx = new SimpleExprContext(this._ctx, _parentState);
        let _prevctx = _localctx;
        let _startState = 678;
        this.enterRecursionRule(_localctx, 678, MySQLParser.RULE_simpleExpr, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5655;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 715, this._ctx)) {
                    case 1:
                        {
                            _localctx = new SimpleExprVariableContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5552;
                            this.variable();
                        }
                        break;
                    case 2:
                        {
                            _localctx = new SimpleExprColumnRefContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5553;
                            this.columnRef();
                            this.state = 5555;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 707, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 5554;
                                        this.jsonOperator();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 3:
                        {
                            _localctx = new SimpleExprRuntimeFunctionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5557;
                            this.runtimeFunctionCall();
                        }
                        break;
                    case 4:
                        {
                            _localctx = new SimpleExprFunctionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5558;
                            this.functionCall();
                        }
                        break;
                    case 5:
                        {
                            _localctx = new SimpleExprLiteralContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5559;
                            this.literal();
                        }
                        break;
                    case 6:
                        {
                            _localctx = new SimpleExprParamMarkerContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5560;
                            this.match(MySQLParser.PARAM_MARKER);
                        }
                        break;
                    case 7:
                        {
                            _localctx = new SimpleExprSumContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5561;
                            this.sumExpr();
                        }
                        break;
                    case 8:
                        {
                            _localctx = new SimpleExprGroupingOperationContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5562;
                            if (!(this.serverVersion >= 80000)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                            }
                            this.state = 5563;
                            this.groupingOperation();
                        }
                        break;
                    case 9:
                        {
                            _localctx = new SimpleExprWindowingFunctionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5564;
                            if (!(this.serverVersion >= 80000)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                            }
                            this.state = 5565;
                            this.windowFunctionCall();
                        }
                        break;
                    case 10:
                        {
                            _localctx = new SimpleExprUnaryContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5566;
                            _localctx._op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (MySQLParser.PLUS_OPERATOR - 391)) | (1 << (MySQLParser.MINUS_OPERATOR - 391)) | (1 << (MySQLParser.BITWISE_NOT_OPERATOR - 391)))) !== 0))) {
                                _localctx._op = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 5567;
                            this.simpleExpr(14);
                        }
                        break;
                    case 11:
                        {
                            _localctx = new SimpleExprNotContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5568;
                            this.not2Rule();
                            this.state = 5569;
                            this.simpleExpr(13);
                        }
                        break;
                    case 12:
                        {
                            _localctx = new SimpleExprListContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5572;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.ROW_SYMBOL) {
                                {
                                    this.state = 5571;
                                    this.match(MySQLParser.ROW_SYMBOL);
                                }
                            }
                            this.state = 5574;
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.state = 5575;
                            this.exprList();
                            this.state = 5576;
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 13:
                        {
                            _localctx = new SimpleExprSubQueryContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5579;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.EXISTS_SYMBOL) {
                                {
                                    this.state = 5578;
                                    this.match(MySQLParser.EXISTS_SYMBOL);
                                }
                            }
                            this.state = 5581;
                            this.subquery();
                        }
                        break;
                    case 14:
                        {
                            _localctx = new SimpleExprOdbcContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5582;
                            this.match(MySQLParser.OPEN_CURLY_SYMBOL);
                            this.state = 5583;
                            this.identifier();
                            this.state = 5584;
                            this.expr(0);
                            this.state = 5585;
                            this.match(MySQLParser.CLOSE_CURLY_SYMBOL);
                        }
                        break;
                    case 15:
                        {
                            _localctx = new SimpleExprMatchContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5587;
                            this.match(MySQLParser.MATCH_SYMBOL);
                            this.state = 5588;
                            this.identListArg();
                            this.state = 5589;
                            this.match(MySQLParser.AGAINST_SYMBOL);
                            this.state = 5590;
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.state = 5591;
                            this.bitExpr(0);
                            this.state = 5593;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.IN_SYMBOL || _la === MySQLParser.WITH_SYMBOL) {
                                {
                                    this.state = 5592;
                                    this.fulltextOptions();
                                }
                            }
                            this.state = 5595;
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 16:
                        {
                            _localctx = new SimpleExprBinaryContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5597;
                            this.match(MySQLParser.BINARY_SYMBOL);
                            this.state = 5598;
                            this.simpleExpr(8);
                        }
                        break;
                    case 17:
                        {
                            _localctx = new SimpleExprCastContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5599;
                            this.match(MySQLParser.CAST_SYMBOL);
                            this.state = 5600;
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.state = 5601;
                            this.expr(0);
                            this.state = 5602;
                            this.match(MySQLParser.AS_SYMBOL);
                            this.state = 5603;
                            this.castType();
                            this.state = 5605;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 711, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 5604;
                                        this.arrayCast();
                                    }
                                    break;
                            }
                            this.state = 5607;
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 18:
                        {
                            _localctx = new SimpleExprCaseContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5609;
                            this.match(MySQLParser.CASE_SYMBOL);
                            this.state = 5611;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 712, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 5610;
                                        this.expr(0);
                                    }
                                    break;
                            }
                            this.state = 5616;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            do {
                                {
                                    {
                                        this.state = 5613;
                                        this.whenExpression();
                                        this.state = 5614;
                                        this.thenExpression();
                                    }
                                }
                                this.state = 5618;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while (_la === MySQLParser.WHEN_SYMBOL);
                            this.state = 5621;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.ELSE_SYMBOL) {
                                {
                                    this.state = 5620;
                                    this.elseExpression();
                                }
                            }
                            this.state = 5623;
                            this.match(MySQLParser.END_SYMBOL);
                        }
                        break;
                    case 19:
                        {
                            _localctx = new SimpleExprConvertContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5625;
                            this.match(MySQLParser.CONVERT_SYMBOL);
                            this.state = 5626;
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.state = 5627;
                            this.expr(0);
                            this.state = 5628;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 5629;
                            this.castType();
                            this.state = 5630;
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 20:
                        {
                            _localctx = new SimpleExprConvertUsingContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5632;
                            this.match(MySQLParser.CONVERT_SYMBOL);
                            this.state = 5633;
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.state = 5634;
                            this.expr(0);
                            this.state = 5635;
                            this.match(MySQLParser.USING_SYMBOL);
                            this.state = 5636;
                            this.charsetName();
                            this.state = 5637;
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 21:
                        {
                            _localctx = new SimpleExprDefaultContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5639;
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                            this.state = 5640;
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.state = 5641;
                            this.simpleIdentifier();
                            this.state = 5642;
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 22:
                        {
                            _localctx = new SimpleExprValuesContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5644;
                            this.match(MySQLParser.VALUES_SYMBOL);
                            this.state = 5645;
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.state = 5646;
                            this.simpleIdentifier();
                            this.state = 5647;
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 23:
                        {
                            _localctx = new SimpleExprIntervalContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 5649;
                            this.match(MySQLParser.INTERVAL_SYMBOL);
                            this.state = 5650;
                            this.expr(0);
                            this.state = 5651;
                            this.interval();
                            this.state = 5652;
                            this.match(MySQLParser.PLUS_OPERATOR);
                            this.state = 5653;
                            this.expr(0);
                        }
                        break;
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 5665;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 717, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 5663;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 716, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new SimpleExprConcatContext(new SimpleExprContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, MySQLParser.RULE_simpleExpr);
                                        this.state = 5657;
                                        if (!(this.precpred(this._ctx, 15))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                                        }
                                        this.state = 5658;
                                        this.match(MySQLParser.CONCAT_PIPES_SYMBOL);
                                        this.state = 5659;
                                        this.simpleExpr(16);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new SimpleExprCollateContext(new SimpleExprContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, MySQLParser.RULE_simpleExpr);
                                        this.state = 5660;
                                        if (!(this.precpred(this._ctx, 21))) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                                        }
                                        this.state = 5661;
                                        this.match(MySQLParser.COLLATE_SYMBOL);
                                        this.state = 5662;
                                        this.textOrIdentifier();
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 5667;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 717, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }
    // @RuleVersion(0)
    arrayCast() {
        let _localctx = new ArrayCastContext(this._ctx, this.state);
        this.enterRule(_localctx, 680, MySQLParser.RULE_arrayCast);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5668;
                if (!(this.serverVersion >= 80017)) {
                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80017");
                }
                this.state = 5669;
                this.match(MySQLParser.ARRAY_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    jsonOperator() {
        let _localctx = new JsonOperatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 682, MySQLParser.RULE_jsonOperator);
        try {
            this.state = 5677;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 718, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5671;
                        if (!(this.serverVersion >= 50708)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50708");
                        }
                        this.state = 5672;
                        this.match(MySQLParser.JSON_SEPARATOR_SYMBOL);
                        this.state = 5673;
                        this.textStringLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5674;
                        if (!(this.serverVersion >= 50713)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50713");
                        }
                        this.state = 5675;
                        this.match(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL);
                        this.state = 5676;
                        this.textStringLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sumExpr() {
        let _localctx = new SumExprContext(this._ctx, this.state);
        this.enterRule(_localctx, 684, MySQLParser.RULE_sumExpr);
        let _la;
        try {
            this.state = 5810;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 741, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5679;
                        _localctx._name = this.match(MySQLParser.AVG_SYMBOL);
                        this.state = 5680;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5682;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 719, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5681;
                                    this.match(MySQLParser.DISTINCT_SYMBOL);
                                }
                                break;
                        }
                        this.state = 5684;
                        this.inSumExpr();
                        this.state = 5685;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 5688;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 720, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5686;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 5687;
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5690;
                        _localctx._name = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(((((_la - 439)) & ~0x1F) === 0 && ((1 << (_la - 439)) & ((1 << (MySQLParser.BIT_AND_SYMBOL - 439)) | (1 << (MySQLParser.BIT_OR_SYMBOL - 439)) | (1 << (MySQLParser.BIT_XOR_SYMBOL - 439)))) !== 0))) {
                            _localctx._name = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 5691;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5692;
                        this.inSumExpr();
                        this.state = 5693;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 5696;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 721, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5694;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 5695;
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5698;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 5699;
                        this.jsonFunction();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 5700;
                        _localctx._name = this.match(MySQLParser.COUNT_SYMBOL);
                        this.state = 5701;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5703;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.ALL_SYMBOL) {
                            {
                                this.state = 5702;
                                this.match(MySQLParser.ALL_SYMBOL);
                            }
                        }
                        this.state = 5705;
                        this.match(MySQLParser.MULT_OPERATOR);
                        this.state = 5706;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 5709;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 723, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5707;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 5708;
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 5711;
                        _localctx._name = this.match(MySQLParser.COUNT_SYMBOL);
                        this.state = 5712;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5720;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 725, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5714;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === MySQLParser.ALL_SYMBOL) {
                                        {
                                            this.state = 5713;
                                            this.match(MySQLParser.ALL_SYMBOL);
                                        }
                                    }
                                    this.state = 5716;
                                    this.match(MySQLParser.MULT_OPERATOR);
                                }
                                break;
                            case 2:
                                {
                                    this.state = 5717;
                                    this.inSumExpr();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 5718;
                                    this.match(MySQLParser.DISTINCT_SYMBOL);
                                    this.state = 5719;
                                    this.exprList();
                                }
                                break;
                        }
                        this.state = 5722;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 5725;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 726, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5723;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 5724;
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 5727;
                        _localctx._name = this.match(MySQLParser.MIN_SYMBOL);
                        this.state = 5728;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5730;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 727, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5729;
                                    this.match(MySQLParser.DISTINCT_SYMBOL);
                                }
                                break;
                        }
                        this.state = 5732;
                        this.inSumExpr();
                        this.state = 5733;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 5736;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 728, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5734;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 5735;
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 5738;
                        _localctx._name = this.match(MySQLParser.MAX_SYMBOL);
                        this.state = 5739;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5741;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 729, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5740;
                                    this.match(MySQLParser.DISTINCT_SYMBOL);
                                }
                                break;
                        }
                        this.state = 5743;
                        this.inSumExpr();
                        this.state = 5744;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 5747;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 730, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5745;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 5746;
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 5749;
                        _localctx._name = this.match(MySQLParser.STD_SYMBOL);
                        this.state = 5750;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5751;
                        this.inSumExpr();
                        this.state = 5752;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 5755;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 731, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5753;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 5754;
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 5757;
                        _localctx._name = this.match(MySQLParser.VARIANCE_SYMBOL);
                        this.state = 5758;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5759;
                        this.inSumExpr();
                        this.state = 5760;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 5763;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 732, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5761;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 5762;
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 5765;
                        _localctx._name = this.match(MySQLParser.STDDEV_SAMP_SYMBOL);
                        this.state = 5766;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5767;
                        this.inSumExpr();
                        this.state = 5768;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 5771;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 733, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5769;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 5770;
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 5773;
                        _localctx._name = this.match(MySQLParser.VAR_SAMP_SYMBOL);
                        this.state = 5774;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5775;
                        this.inSumExpr();
                        this.state = 5776;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 5779;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 734, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5777;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 5778;
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 5781;
                        _localctx._name = this.match(MySQLParser.SUM_SYMBOL);
                        this.state = 5782;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5784;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 735, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5783;
                                    this.match(MySQLParser.DISTINCT_SYMBOL);
                                }
                                break;
                        }
                        this.state = 5786;
                        this.inSumExpr();
                        this.state = 5787;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 5790;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 736, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5788;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 5789;
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 5792;
                        _localctx._name = this.match(MySQLParser.GROUP_CONCAT_SYMBOL);
                        this.state = 5793;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5795;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 737, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5794;
                                    this.match(MySQLParser.DISTINCT_SYMBOL);
                                }
                                break;
                        }
                        this.state = 5797;
                        this.exprList();
                        this.state = 5799;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.ORDER_SYMBOL) {
                            {
                                this.state = 5798;
                                this.orderClause();
                            }
                        }
                        this.state = 5803;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.SEPARATOR_SYMBOL) {
                            {
                                this.state = 5801;
                                this.match(MySQLParser.SEPARATOR_SYMBOL);
                                this.state = 5802;
                                this.textString();
                            }
                        }
                        this.state = 5805;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 5808;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 740, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5806;
                                    if (!(this.serverVersion >= 80000)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                    }
                                    this.state = 5807;
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    groupingOperation() {
        let _localctx = new GroupingOperationContext(this._ctx, this.state);
        this.enterRule(_localctx, 686, MySQLParser.RULE_groupingOperation);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5812;
                this.match(MySQLParser.GROUPING_SYMBOL);
                this.state = 5813;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 5814;
                this.exprList();
                this.state = 5815;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowFunctionCall() {
        let _localctx = new WindowFunctionCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 688, MySQLParser.RULE_windowFunctionCall);
        let _la;
        try {
            this.state = 5859;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.CUME_DIST_SYMBOL:
                case MySQLParser.DENSE_RANK_SYMBOL:
                case MySQLParser.PERCENT_RANK_SYMBOL:
                case MySQLParser.RANK_SYMBOL:
                case MySQLParser.ROW_NUMBER_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5817;
                        _la = this._input.LA(1);
                        if (!(((((_la - 708)) & ~0x1F) === 0 && ((1 << (_la - 708)) & ((1 << (MySQLParser.CUME_DIST_SYMBOL - 708)) | (1 << (MySQLParser.DENSE_RANK_SYMBOL - 708)) | (1 << (MySQLParser.PERCENT_RANK_SYMBOL - 708)) | (1 << (MySQLParser.RANK_SYMBOL - 708)) | (1 << (MySQLParser.ROW_NUMBER_SYMBOL - 708)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 5818;
                        this.parentheses();
                        this.state = 5819;
                        this.windowingClause();
                    }
                    break;
                case MySQLParser.NTILE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5821;
                        this.match(MySQLParser.NTILE_SYMBOL);
                        this.state = 5822;
                        this.simpleExprWithParentheses();
                        this.state = 5823;
                        this.windowingClause();
                    }
                    break;
                case MySQLParser.LAG_SYMBOL:
                case MySQLParser.LEAD_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5825;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.LAG_SYMBOL || _la === MySQLParser.LEAD_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 5826;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5827;
                        this.expr(0);
                        this.state = 5829;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.COMMA_SYMBOL) {
                            {
                                this.state = 5828;
                                this.leadLagInfo();
                            }
                        }
                        this.state = 5831;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 5833;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.IGNORE_SYMBOL || _la === MySQLParser.RESPECT_SYMBOL) {
                            {
                                this.state = 5832;
                                this.nullTreatment();
                            }
                        }
                        this.state = 5835;
                        this.windowingClause();
                    }
                    break;
                case MySQLParser.FIRST_VALUE_SYMBOL:
                case MySQLParser.LAST_VALUE_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 5837;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.FIRST_VALUE_SYMBOL || _la === MySQLParser.LAST_VALUE_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 5838;
                        this.exprWithParentheses();
                        this.state = 5840;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.IGNORE_SYMBOL || _la === MySQLParser.RESPECT_SYMBOL) {
                            {
                                this.state = 5839;
                                this.nullTreatment();
                            }
                        }
                        this.state = 5842;
                        this.windowingClause();
                    }
                    break;
                case MySQLParser.NTH_VALUE_SYMBOL:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 5844;
                        this.match(MySQLParser.NTH_VALUE_SYMBOL);
                        this.state = 5845;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5846;
                        this.expr(0);
                        this.state = 5847;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 5848;
                        this.simpleExpr(0);
                        this.state = 5849;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 5852;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.FROM_SYMBOL) {
                            {
                                this.state = 5850;
                                this.match(MySQLParser.FROM_SYMBOL);
                                this.state = 5851;
                                _la = this._input.LA(1);
                                if (!(_la === MySQLParser.FIRST_SYMBOL || _la === MySQLParser.LAST_SYMBOL)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }
                        }
                        this.state = 5855;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.IGNORE_SYMBOL || _la === MySQLParser.RESPECT_SYMBOL) {
                            {
                                this.state = 5854;
                                this.nullTreatment();
                            }
                        }
                        this.state = 5857;
                        this.windowingClause();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowingClause() {
        let _localctx = new WindowingClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 690, MySQLParser.RULE_windowingClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5861;
                this.match(MySQLParser.OVER_SYMBOL);
                this.state = 5864;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 748, this._ctx)) {
                    case 1:
                        {
                            this.state = 5862;
                            this.windowName();
                        }
                        break;
                    case 2:
                        {
                            this.state = 5863;
                            this.windowSpec();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    leadLagInfo() {
        let _localctx = new LeadLagInfoContext(this._ctx, this.state);
        this.enterRule(_localctx, 692, MySQLParser.RULE_leadLagInfo);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5866;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 5869;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case MySQLParser.INT_NUMBER:
                    case MySQLParser.LONG_NUMBER:
                    case MySQLParser.ULONGLONG_NUMBER:
                    case MySQLParser.DECIMAL_NUMBER:
                    case MySQLParser.FLOAT_NUMBER:
                        {
                            this.state = 5867;
                            this.ulonglong_number();
                        }
                        break;
                    case MySQLParser.PARAM_MARKER:
                        {
                            this.state = 5868;
                            this.match(MySQLParser.PARAM_MARKER);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 5873;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        this.state = 5871;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 5872;
                        this.expr(0);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    nullTreatment() {
        let _localctx = new NullTreatmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 694, MySQLParser.RULE_nullTreatment);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5875;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.IGNORE_SYMBOL || _la === MySQLParser.RESPECT_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5876;
                this.match(MySQLParser.NULLS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    jsonFunction() {
        let _localctx = new JsonFunctionContext(this._ctx, this.state);
        this.enterRule(_localctx, 696, MySQLParser.RULE_jsonFunction);
        try {
            this.state = 5894;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.JSON_ARRAYAGG_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5878;
                        this.match(MySQLParser.JSON_ARRAYAGG_SYMBOL);
                        this.state = 5879;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5880;
                        this.inSumExpr();
                        this.state = 5881;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 5883;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 751, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5882;
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case MySQLParser.JSON_OBJECTAGG_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5885;
                        this.match(MySQLParser.JSON_OBJECTAGG_SYMBOL);
                        this.state = 5886;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5887;
                        this.inSumExpr();
                        this.state = 5888;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 5889;
                        this.inSumExpr();
                        this.state = 5890;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.state = 5892;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 752, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5891;
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    inSumExpr() {
        let _localctx = new InSumExprContext(this._ctx, this.state);
        this.enterRule(_localctx, 698, MySQLParser.RULE_inSumExpr);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5897;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 754, this._ctx)) {
                    case 1:
                        {
                            this.state = 5896;
                            this.match(MySQLParser.ALL_SYMBOL);
                        }
                        break;
                }
                this.state = 5899;
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    identListArg() {
        let _localctx = new IdentListArgContext(this._ctx, this.state);
        this.enterRule(_localctx, 700, MySQLParser.RULE_identListArg);
        try {
            this.state = 5906;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 755, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5901;
                        this.identList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5902;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5903;
                        this.identList();
                        this.state = 5904;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    identList() {
        let _localctx = new IdentListContext(this._ctx, this.state);
        this.enterRule(_localctx, 702, MySQLParser.RULE_identList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 5908;
                this.simpleIdentifier();
                this.state = 5913;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 5909;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 5910;
                            this.simpleIdentifier();
                        }
                    }
                    this.state = 5915;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fulltextOptions() {
        let _localctx = new FulltextOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 704, MySQLParser.RULE_fulltextOptions);
        let _la;
        try {
            this.state = 5931;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 758, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5916;
                        this.match(MySQLParser.IN_SYMBOL);
                        this.state = 5917;
                        this.match(MySQLParser.BOOLEAN_SYMBOL);
                        this.state = 5918;
                        this.match(MySQLParser.MODE_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5919;
                        this.match(MySQLParser.IN_SYMBOL);
                        this.state = 5920;
                        this.match(MySQLParser.NATURAL_SYMBOL);
                        this.state = 5921;
                        this.match(MySQLParser.LANGUAGE_SYMBOL);
                        this.state = 5922;
                        this.match(MySQLParser.MODE_SYMBOL);
                        this.state = 5926;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.WITH_SYMBOL) {
                            {
                                this.state = 5923;
                                this.match(MySQLParser.WITH_SYMBOL);
                                this.state = 5924;
                                this.match(MySQLParser.QUERY_SYMBOL);
                                this.state = 5925;
                                this.match(MySQLParser.EXPANSION_SYMBOL);
                            }
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5928;
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.state = 5929;
                        this.match(MySQLParser.QUERY_SYMBOL);
                        this.state = 5930;
                        this.match(MySQLParser.EXPANSION_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    runtimeFunctionCall() {
        let _localctx = new RuntimeFunctionCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 706, MySQLParser.RULE_runtimeFunctionCall);
        let _la;
        try {
            this.state = 6206;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 776, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 5933;
                        _localctx._name = this.match(MySQLParser.CHAR_SYMBOL);
                        this.state = 5934;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5935;
                        this.exprList();
                        this.state = 5938;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.USING_SYMBOL) {
                            {
                                this.state = 5936;
                                this.match(MySQLParser.USING_SYMBOL);
                                this.state = 5937;
                                this.charsetName();
                            }
                        }
                        this.state = 5940;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 5942;
                        _localctx._name = this.match(MySQLParser.CURRENT_USER_SYMBOL);
                        this.state = 5944;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 760, this._ctx)) {
                            case 1:
                                {
                                    this.state = 5943;
                                    this.parentheses();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 5946;
                        _localctx._name = this.match(MySQLParser.DATE_SYMBOL);
                        this.state = 5947;
                        this.exprWithParentheses();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 5948;
                        _localctx._name = this.match(MySQLParser.DAY_SYMBOL);
                        this.state = 5949;
                        this.exprWithParentheses();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 5950;
                        _localctx._name = this.match(MySQLParser.HOUR_SYMBOL);
                        this.state = 5951;
                        this.exprWithParentheses();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 5952;
                        _localctx._name = this.match(MySQLParser.INSERT_SYMBOL);
                        this.state = 5953;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5954;
                        this.expr(0);
                        this.state = 5955;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 5956;
                        this.expr(0);
                        this.state = 5957;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 5958;
                        this.expr(0);
                        this.state = 5959;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 5960;
                        this.expr(0);
                        this.state = 5961;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 5963;
                        _localctx._name = this.match(MySQLParser.INTERVAL_SYMBOL);
                        this.state = 5964;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5965;
                        this.expr(0);
                        this.state = 5968;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                {
                                    this.state = 5966;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.state = 5967;
                                    this.expr(0);
                                }
                            }
                            this.state = 5970;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (_la === MySQLParser.COMMA_SYMBOL);
                        this.state = 5972;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 5974;
                        _localctx._name = this.match(MySQLParser.LEFT_SYMBOL);
                        this.state = 5975;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5976;
                        this.expr(0);
                        this.state = 5977;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 5978;
                        this.expr(0);
                        this.state = 5979;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 5981;
                        _localctx._name = this.match(MySQLParser.MINUTE_SYMBOL);
                        this.state = 5982;
                        this.exprWithParentheses();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 5983;
                        _localctx._name = this.match(MySQLParser.MONTH_SYMBOL);
                        this.state = 5984;
                        this.exprWithParentheses();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 5985;
                        _localctx._name = this.match(MySQLParser.RIGHT_SYMBOL);
                        this.state = 5986;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5987;
                        this.expr(0);
                        this.state = 5988;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 5989;
                        this.expr(0);
                        this.state = 5990;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 5992;
                        _localctx._name = this.match(MySQLParser.SECOND_SYMBOL);
                        this.state = 5993;
                        this.exprWithParentheses();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 5994;
                        _localctx._name = this.match(MySQLParser.TIME_SYMBOL);
                        this.state = 5995;
                        this.exprWithParentheses();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 5996;
                        _localctx._name = this.match(MySQLParser.TIMESTAMP_SYMBOL);
                        this.state = 5997;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 5998;
                        this.expr(0);
                        this.state = 6001;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.COMMA_SYMBOL) {
                            {
                                this.state = 5999;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 6000;
                                this.expr(0);
                            }
                        }
                        this.state = 6003;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 6005;
                        this.trimFunction();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 6006;
                        _localctx._name = this.match(MySQLParser.USER_SYMBOL);
                        this.state = 6007;
                        this.parentheses();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 6008;
                        _localctx._name = this.match(MySQLParser.VALUES_SYMBOL);
                        this.state = 6009;
                        this.exprWithParentheses();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 6010;
                        _localctx._name = this.match(MySQLParser.YEAR_SYMBOL);
                        this.state = 6011;
                        this.exprWithParentheses();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 6012;
                        _localctx._name = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.ADDDATE_SYMBOL || _la === MySQLParser.SUBDATE_SYMBOL)) {
                            _localctx._name = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6013;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6014;
                        this.expr(0);
                        this.state = 6015;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 6021;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 763, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6016;
                                    this.expr(0);
                                }
                                break;
                            case 2:
                                {
                                    this.state = 6017;
                                    this.match(MySQLParser.INTERVAL_SYMBOL);
                                    this.state = 6018;
                                    this.expr(0);
                                    this.state = 6019;
                                    this.interval();
                                }
                                break;
                        }
                        this.state = 6023;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 20:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 6025;
                        _localctx._name = this.match(MySQLParser.CURDATE_SYMBOL);
                        this.state = 6027;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 764, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6026;
                                    this.parentheses();
                                }
                                break;
                        }
                    }
                    break;
                case 21:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 6029;
                        _localctx._name = this.match(MySQLParser.CURTIME_SYMBOL);
                        this.state = 6031;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 765, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6030;
                                    this.timeFunctionParameters();
                                }
                                break;
                        }
                    }
                    break;
                case 22:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 6033;
                        _localctx._name = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.DATE_ADD_SYMBOL || _la === MySQLParser.DATE_SUB_SYMBOL)) {
                            _localctx._name = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6034;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6035;
                        this.expr(0);
                        this.state = 6036;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 6037;
                        this.match(MySQLParser.INTERVAL_SYMBOL);
                        this.state = 6038;
                        this.expr(0);
                        this.state = 6039;
                        this.interval();
                        this.state = 6040;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 23:
                    this.enterOuterAlt(_localctx, 23);
                    {
                        this.state = 6042;
                        _localctx._name = this.match(MySQLParser.EXTRACT_SYMBOL);
                        this.state = 6043;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6044;
                        this.interval();
                        this.state = 6045;
                        this.match(MySQLParser.FROM_SYMBOL);
                        this.state = 6046;
                        this.expr(0);
                        this.state = 6047;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 24:
                    this.enterOuterAlt(_localctx, 24);
                    {
                        this.state = 6049;
                        _localctx._name = this.match(MySQLParser.GET_FORMAT_SYMBOL);
                        this.state = 6050;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6051;
                        this.dateTimeTtype();
                        this.state = 6052;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 6053;
                        this.expr(0);
                        this.state = 6054;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 25:
                    this.enterOuterAlt(_localctx, 25);
                    {
                        this.state = 6056;
                        _localctx._name = this.match(MySQLParser.NOW_SYMBOL);
                        this.state = 6058;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 766, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6057;
                                    this.timeFunctionParameters();
                                }
                                break;
                        }
                    }
                    break;
                case 26:
                    this.enterOuterAlt(_localctx, 26);
                    {
                        this.state = 6060;
                        _localctx._name = this.match(MySQLParser.POSITION_SYMBOL);
                        this.state = 6061;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6062;
                        this.bitExpr(0);
                        this.state = 6063;
                        this.match(MySQLParser.IN_SYMBOL);
                        this.state = 6064;
                        this.expr(0);
                        this.state = 6065;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 27:
                    this.enterOuterAlt(_localctx, 27);
                    {
                        this.state = 6067;
                        this.substringFunction();
                    }
                    break;
                case 28:
                    this.enterOuterAlt(_localctx, 28);
                    {
                        this.state = 6068;
                        _localctx._name = this.match(MySQLParser.SYSDATE_SYMBOL);
                        this.state = 6070;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 767, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6069;
                                    this.timeFunctionParameters();
                                }
                                break;
                        }
                    }
                    break;
                case 29:
                    this.enterOuterAlt(_localctx, 29);
                    {
                        this.state = 6072;
                        _localctx._name = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.TIMESTAMP_ADD_SYMBOL || _la === MySQLParser.TIMESTAMP_DIFF_SYMBOL)) {
                            _localctx._name = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6073;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6074;
                        this.intervalTimeStamp();
                        this.state = 6075;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 6076;
                        this.expr(0);
                        this.state = 6077;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 6078;
                        this.expr(0);
                        this.state = 6079;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 30:
                    this.enterOuterAlt(_localctx, 30);
                    {
                        this.state = 6081;
                        _localctx._name = this.match(MySQLParser.UTC_DATE_SYMBOL);
                        this.state = 6083;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 768, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6082;
                                    this.parentheses();
                                }
                                break;
                        }
                    }
                    break;
                case 31:
                    this.enterOuterAlt(_localctx, 31);
                    {
                        this.state = 6085;
                        _localctx._name = this.match(MySQLParser.UTC_TIME_SYMBOL);
                        this.state = 6087;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 769, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6086;
                                    this.timeFunctionParameters();
                                }
                                break;
                        }
                    }
                    break;
                case 32:
                    this.enterOuterAlt(_localctx, 32);
                    {
                        this.state = 6089;
                        _localctx._name = this.match(MySQLParser.UTC_TIMESTAMP_SYMBOL);
                        this.state = 6091;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 770, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6090;
                                    this.timeFunctionParameters();
                                }
                                break;
                        }
                    }
                    break;
                case 33:
                    this.enterOuterAlt(_localctx, 33);
                    {
                        this.state = 6093;
                        _localctx._name = this.match(MySQLParser.ASCII_SYMBOL);
                        this.state = 6094;
                        this.exprWithParentheses();
                    }
                    break;
                case 34:
                    this.enterOuterAlt(_localctx, 34);
                    {
                        this.state = 6095;
                        _localctx._name = this.match(MySQLParser.CHARSET_SYMBOL);
                        this.state = 6096;
                        this.exprWithParentheses();
                    }
                    break;
                case 35:
                    this.enterOuterAlt(_localctx, 35);
                    {
                        this.state = 6097;
                        _localctx._name = this.match(MySQLParser.COALESCE_SYMBOL);
                        this.state = 6098;
                        this.exprListWithParentheses();
                    }
                    break;
                case 36:
                    this.enterOuterAlt(_localctx, 36);
                    {
                        this.state = 6099;
                        _localctx._name = this.match(MySQLParser.COLLATION_SYMBOL);
                        this.state = 6100;
                        this.exprWithParentheses();
                    }
                    break;
                case 37:
                    this.enterOuterAlt(_localctx, 37);
                    {
                        this.state = 6101;
                        _localctx._name = this.match(MySQLParser.DATABASE_SYMBOL);
                        this.state = 6102;
                        this.parentheses();
                    }
                    break;
                case 38:
                    this.enterOuterAlt(_localctx, 38);
                    {
                        this.state = 6103;
                        _localctx._name = this.match(MySQLParser.IF_SYMBOL);
                        this.state = 6104;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6105;
                        this.expr(0);
                        this.state = 6106;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 6107;
                        this.expr(0);
                        this.state = 6108;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 6109;
                        this.expr(0);
                        this.state = 6110;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 39:
                    this.enterOuterAlt(_localctx, 39);
                    {
                        this.state = 6112;
                        _localctx._name = this.match(MySQLParser.FORMAT_SYMBOL);
                        this.state = 6113;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6114;
                        this.expr(0);
                        this.state = 6115;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 6116;
                        this.expr(0);
                        this.state = 6119;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.COMMA_SYMBOL) {
                            {
                                this.state = 6117;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 6118;
                                this.expr(0);
                            }
                        }
                        this.state = 6121;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 40:
                    this.enterOuterAlt(_localctx, 40);
                    {
                        this.state = 6123;
                        _localctx._name = this.match(MySQLParser.MICROSECOND_SYMBOL);
                        this.state = 6124;
                        this.exprWithParentheses();
                    }
                    break;
                case 41:
                    this.enterOuterAlt(_localctx, 41);
                    {
                        this.state = 6125;
                        _localctx._name = this.match(MySQLParser.MOD_SYMBOL);
                        this.state = 6126;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6127;
                        this.expr(0);
                        this.state = 6128;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 6129;
                        this.expr(0);
                        this.state = 6130;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 42:
                    this.enterOuterAlt(_localctx, 42);
                    {
                        this.state = 6132;
                        if (!(this.serverVersion < 50607)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 50607");
                        }
                        this.state = 6133;
                        _localctx._name = this.match(MySQLParser.OLD_PASSWORD_SYMBOL);
                        this.state = 6134;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6135;
                        this.textLiteral();
                        this.state = 6136;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 43:
                    this.enterOuterAlt(_localctx, 43);
                    {
                        this.state = 6138;
                        if (!(this.serverVersion < 80011)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80011");
                        }
                        this.state = 6139;
                        _localctx._name = this.match(MySQLParser.PASSWORD_SYMBOL);
                        this.state = 6140;
                        this.exprWithParentheses();
                    }
                    break;
                case 44:
                    this.enterOuterAlt(_localctx, 44);
                    {
                        this.state = 6141;
                        _localctx._name = this.match(MySQLParser.QUARTER_SYMBOL);
                        this.state = 6142;
                        this.exprWithParentheses();
                    }
                    break;
                case 45:
                    this.enterOuterAlt(_localctx, 45);
                    {
                        this.state = 6143;
                        _localctx._name = this.match(MySQLParser.REPEAT_SYMBOL);
                        this.state = 6144;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6145;
                        this.expr(0);
                        this.state = 6146;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 6147;
                        this.expr(0);
                        this.state = 6148;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 46:
                    this.enterOuterAlt(_localctx, 46);
                    {
                        this.state = 6150;
                        _localctx._name = this.match(MySQLParser.REPLACE_SYMBOL);
                        this.state = 6151;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6152;
                        this.expr(0);
                        this.state = 6153;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 6154;
                        this.expr(0);
                        this.state = 6155;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 6156;
                        this.expr(0);
                        this.state = 6157;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 47:
                    this.enterOuterAlt(_localctx, 47);
                    {
                        this.state = 6159;
                        _localctx._name = this.match(MySQLParser.REVERSE_SYMBOL);
                        this.state = 6160;
                        this.exprWithParentheses();
                    }
                    break;
                case 48:
                    this.enterOuterAlt(_localctx, 48);
                    {
                        this.state = 6161;
                        _localctx._name = this.match(MySQLParser.ROW_COUNT_SYMBOL);
                        this.state = 6162;
                        this.parentheses();
                    }
                    break;
                case 49:
                    this.enterOuterAlt(_localctx, 49);
                    {
                        this.state = 6163;
                        _localctx._name = this.match(MySQLParser.TRUNCATE_SYMBOL);
                        this.state = 6164;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6165;
                        this.expr(0);
                        this.state = 6166;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 6167;
                        this.expr(0);
                        this.state = 6168;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 50:
                    this.enterOuterAlt(_localctx, 50);
                    {
                        this.state = 6170;
                        _localctx._name = this.match(MySQLParser.WEEK_SYMBOL);
                        this.state = 6171;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6172;
                        this.expr(0);
                        this.state = 6175;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.COMMA_SYMBOL) {
                            {
                                this.state = 6173;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 6174;
                                this.expr(0);
                            }
                        }
                        this.state = 6177;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 51:
                    this.enterOuterAlt(_localctx, 51);
                    {
                        this.state = 6179;
                        _localctx._name = this.match(MySQLParser.WEIGHT_STRING_SYMBOL);
                        this.state = 6180;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6181;
                        this.expr(0);
                        this.state = 6201;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 775, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6185;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 773, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 6182;
                                                this.match(MySQLParser.AS_SYMBOL);
                                                this.state = 6183;
                                                this.match(MySQLParser.CHAR_SYMBOL);
                                                this.state = 6184;
                                                this.wsNumCodepoints();
                                            }
                                            break;
                                    }
                                    this.state = 6189;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 774, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 6187;
                                                if (!(this.serverVersion < 80000)) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80000");
                                                }
                                                this.state = 6188;
                                                this.weightStringLevels();
                                            }
                                            break;
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.state = 6191;
                                    this.match(MySQLParser.AS_SYMBOL);
                                    this.state = 6192;
                                    this.match(MySQLParser.BINARY_SYMBOL);
                                    this.state = 6193;
                                    this.wsNumCodepoints();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 6194;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.state = 6195;
                                    this.ulong_number();
                                    this.state = 6196;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.state = 6197;
                                    this.ulong_number();
                                    this.state = 6198;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.state = 6199;
                                    this.ulong_number();
                                }
                                break;
                        }
                        this.state = 6203;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 52:
                    this.enterOuterAlt(_localctx, 52);
                    {
                        this.state = 6205;
                        this.geometryFunction();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    geometryFunction() {
        let _localctx = new GeometryFunctionContext(this._ctx, this.state);
        this.enterRule(_localctx, 708, MySQLParser.RULE_geometryFunction);
        try {
            this.state = 6239;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 778, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6208;
                        if (!(this.serverVersion < 50706)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 50706");
                        }
                        this.state = 6209;
                        _localctx._name = this.match(MySQLParser.CONTAINS_SYMBOL);
                        this.state = 6210;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6211;
                        this.expr(0);
                        this.state = 6212;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 6213;
                        this.expr(0);
                        this.state = 6214;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6216;
                        _localctx._name = this.match(MySQLParser.GEOMETRYCOLLECTION_SYMBOL);
                        this.state = 6217;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6219;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 777, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6218;
                                    this.exprList();
                                }
                                break;
                        }
                        this.state = 6221;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6222;
                        _localctx._name = this.match(MySQLParser.LINESTRING_SYMBOL);
                        this.state = 6223;
                        this.exprListWithParentheses();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6224;
                        _localctx._name = this.match(MySQLParser.MULTILINESTRING_SYMBOL);
                        this.state = 6225;
                        this.exprListWithParentheses();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 6226;
                        _localctx._name = this.match(MySQLParser.MULTIPOINT_SYMBOL);
                        this.state = 6227;
                        this.exprListWithParentheses();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 6228;
                        _localctx._name = this.match(MySQLParser.MULTIPOLYGON_SYMBOL);
                        this.state = 6229;
                        this.exprListWithParentheses();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 6230;
                        _localctx._name = this.match(MySQLParser.POINT_SYMBOL);
                        this.state = 6231;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6232;
                        this.expr(0);
                        this.state = 6233;
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.state = 6234;
                        this.expr(0);
                        this.state = 6235;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 6237;
                        _localctx._name = this.match(MySQLParser.POLYGON_SYMBOL);
                        this.state = 6238;
                        this.exprListWithParentheses();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    timeFunctionParameters() {
        let _localctx = new TimeFunctionParametersContext(this._ctx, this.state);
        this.enterRule(_localctx, 710, MySQLParser.RULE_timeFunctionParameters);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6241;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6243;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 779, this._ctx)) {
                    case 1:
                        {
                            this.state = 6242;
                            this.fractionalPrecision();
                        }
                        break;
                }
                this.state = 6245;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fractionalPrecision() {
        let _localctx = new FractionalPrecisionContext(this._ctx, this.state);
        this.enterRule(_localctx, 712, MySQLParser.RULE_fractionalPrecision);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6247;
                if (!(this.serverVersion >= 50604)) {
                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50604");
                }
                this.state = 6248;
                this.match(MySQLParser.INT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    weightStringLevels() {
        let _localctx = new WeightStringLevelsContext(this._ctx, this.state);
        this.enterRule(_localctx, 714, MySQLParser.RULE_weightStringLevels);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6250;
                this.match(MySQLParser.LEVEL_SYMBOL);
                this.state = 6263;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 781, this._ctx)) {
                    case 1:
                        {
                            this.state = 6251;
                            this.real_ulong_number();
                            this.state = 6252;
                            this.match(MySQLParser.MINUS_OPERATOR);
                            this.state = 6253;
                            this.real_ulong_number();
                        }
                        break;
                    case 2:
                        {
                            this.state = 6255;
                            this.weightStringLevelListItem();
                            this.state = 6260;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === MySQLParser.COMMA_SYMBOL) {
                                {
                                    {
                                        this.state = 6256;
                                        this.match(MySQLParser.COMMA_SYMBOL);
                                        this.state = 6257;
                                        this.weightStringLevelListItem();
                                    }
                                }
                                this.state = 6262;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    weightStringLevelListItem() {
        let _localctx = new WeightStringLevelListItemContext(this._ctx, this.state);
        this.enterRule(_localctx, 716, MySQLParser.RULE_weightStringLevelListItem);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6265;
                this.real_ulong_number();
                this.state = 6271;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case MySQLParser.ASC_SYMBOL:
                    case MySQLParser.DESC_SYMBOL:
                        {
                            this.state = 6266;
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.ASC_SYMBOL || _la === MySQLParser.DESC_SYMBOL)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 6268;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.REVERSE_SYMBOL) {
                                {
                                    this.state = 6267;
                                    this.match(MySQLParser.REVERSE_SYMBOL);
                                }
                            }
                        }
                        break;
                    case MySQLParser.REVERSE_SYMBOL:
                        {
                            this.state = 6270;
                            this.match(MySQLParser.REVERSE_SYMBOL);
                        }
                        break;
                    case MySQLParser.COMMA_SYMBOL:
                    case MySQLParser.CLOSE_PAR_SYMBOL:
                        break;
                    default:
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dateTimeTtype() {
        let _localctx = new DateTimeTtypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 718, MySQLParser.RULE_dateTimeTtype);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6273;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.DATETIME_SYMBOL || _la === MySQLParser.DATE_SYMBOL || _la === MySQLParser.TIMESTAMP_SYMBOL || _la === MySQLParser.TIME_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    trimFunction() {
        let _localctx = new TrimFunctionContext(this._ctx, this.state);
        this.enterRule(_localctx, 720, MySQLParser.RULE_trimFunction);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6275;
                this.match(MySQLParser.TRIM_SYMBOL);
                this.state = 6276;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6300;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 788, this._ctx)) {
                    case 1:
                        {
                            this.state = 6277;
                            this.expr(0);
                            this.state = 6280;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.FROM_SYMBOL) {
                                {
                                    this.state = 6278;
                                    this.match(MySQLParser.FROM_SYMBOL);
                                    this.state = 6279;
                                    this.expr(0);
                                }
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 6282;
                            this.match(MySQLParser.LEADING_SYMBOL);
                            this.state = 6284;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 785, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 6283;
                                        this.expr(0);
                                    }
                                    break;
                            }
                            this.state = 6286;
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.state = 6287;
                            this.expr(0);
                        }
                        break;
                    case 3:
                        {
                            this.state = 6288;
                            this.match(MySQLParser.TRAILING_SYMBOL);
                            this.state = 6290;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 786, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 6289;
                                        this.expr(0);
                                    }
                                    break;
                            }
                            this.state = 6292;
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.state = 6293;
                            this.expr(0);
                        }
                        break;
                    case 4:
                        {
                            this.state = 6294;
                            this.match(MySQLParser.BOTH_SYMBOL);
                            this.state = 6296;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 787, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 6295;
                                        this.expr(0);
                                    }
                                    break;
                            }
                            this.state = 6298;
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.state = 6299;
                            this.expr(0);
                        }
                        break;
                }
                this.state = 6302;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    substringFunction() {
        let _localctx = new SubstringFunctionContext(this._ctx, this.state);
        this.enterRule(_localctx, 722, MySQLParser.RULE_substringFunction);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6304;
                this.match(MySQLParser.SUBSTRING_SYMBOL);
                this.state = 6305;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6306;
                this.expr(0);
                this.state = 6319;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case MySQLParser.COMMA_SYMBOL:
                        {
                            this.state = 6307;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 6308;
                            this.expr(0);
                            this.state = 6311;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.COMMA_SYMBOL) {
                                {
                                    this.state = 6309;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.state = 6310;
                                    this.expr(0);
                                }
                            }
                        }
                        break;
                    case MySQLParser.FROM_SYMBOL:
                        {
                            this.state = 6313;
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.state = 6314;
                            this.expr(0);
                            this.state = 6317;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.FOR_SYMBOL) {
                                {
                                    this.state = 6315;
                                    this.match(MySQLParser.FOR_SYMBOL);
                                    this.state = 6316;
                                    this.expr(0);
                                }
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 6321;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    functionCall() {
        let _localctx = new FunctionCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 724, MySQLParser.RULE_functionCall);
        try {
            this.state = 6337;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 794, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6323;
                        this.pureIdentifier();
                        this.state = 6324;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6326;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 792, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6325;
                                    this.udfExprList();
                                }
                                break;
                        }
                        this.state = 6328;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6330;
                        this.qualifiedIdentifier();
                        this.state = 6331;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 6333;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 793, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6332;
                                    this.exprList();
                                }
                                break;
                        }
                        this.state = 6335;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    udfExprList() {
        let _localctx = new UdfExprListContext(this._ctx, this.state);
        this.enterRule(_localctx, 726, MySQLParser.RULE_udfExprList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6339;
                this.udfExpr();
                this.state = 6344;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 6340;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 6341;
                            this.udfExpr();
                        }
                    }
                    this.state = 6346;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    udfExpr() {
        let _localctx = new UdfExprContext(this._ctx, this.state);
        this.enterRule(_localctx, 728, MySQLParser.RULE_udfExpr);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6347;
                this.expr(0);
                this.state = 6349;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 796, this._ctx)) {
                    case 1:
                        {
                            this.state = 6348;
                            this.selectAlias();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    variable() {
        let _localctx = new VariableContext(this._ctx, this.state);
        this.enterRule(_localctx, 730, MySQLParser.RULE_variable);
        try {
            this.state = 6357;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.AT_SIGN_SYMBOL:
                case MySQLParser.AT_TEXT_SUFFIX:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6351;
                        this.userVariable();
                        this.state = 6354;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 797, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6352;
                                    this.match(MySQLParser.ASSIGN_OPERATOR);
                                    this.state = 6353;
                                    this.expr(0);
                                }
                                break;
                        }
                    }
                    break;
                case MySQLParser.AT_AT_SIGN_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6356;
                        this.systemVariable();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    userVariable() {
        let _localctx = new UserVariableContext(this._ctx, this.state);
        this.enterRule(_localctx, 732, MySQLParser.RULE_userVariable);
        try {
            this.state = 6362;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.AT_SIGN_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6359;
                        this.match(MySQLParser.AT_SIGN_SYMBOL);
                        this.state = 6360;
                        this.textOrIdentifier();
                    }
                    break;
                case MySQLParser.AT_TEXT_SUFFIX:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6361;
                        this.match(MySQLParser.AT_TEXT_SUFFIX);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    systemVariable() {
        let _localctx = new SystemVariableContext(this._ctx, this.state);
        this.enterRule(_localctx, 734, MySQLParser.RULE_systemVariable);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6364;
                this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                this.state = 6366;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 800, this._ctx)) {
                    case 1:
                        {
                            this.state = 6365;
                            this.varIdentType();
                        }
                        break;
                }
                this.state = 6368;
                this.textOrIdentifier();
                this.state = 6370;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 801, this._ctx)) {
                    case 1:
                        {
                            this.state = 6369;
                            this.dotIdentifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    internalVariableName() {
        let _localctx = new InternalVariableNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 736, MySQLParser.RULE_internalVariableName);
        let _la;
        try {
            this.state = 6386;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 805, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6382;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 804, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6372;
                                    if (!(this.serverVersion < 80017)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80017");
                                    }
                                    this.state = 6373;
                                    this.identifier();
                                    this.state = 6375;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === MySQLParser.DOT_SYMBOL) {
                                        {
                                            this.state = 6374;
                                            this.dotIdentifier();
                                        }
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.state = 6377;
                                    if (!(this.serverVersion >= 80017)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80017");
                                    }
                                    this.state = 6378;
                                    this.lValueIdentifier();
                                    this.state = 6380;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === MySQLParser.DOT_SYMBOL) {
                                        {
                                            this.state = 6379;
                                            this.dotIdentifier();
                                        }
                                    }
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6384;
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        this.state = 6385;
                        this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    whenExpression() {
        let _localctx = new WhenExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 738, MySQLParser.RULE_whenExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6388;
                this.match(MySQLParser.WHEN_SYMBOL);
                this.state = 6389;
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    thenExpression() {
        let _localctx = new ThenExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 740, MySQLParser.RULE_thenExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6391;
                this.match(MySQLParser.THEN_SYMBOL);
                this.state = 6392;
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    elseExpression() {
        let _localctx = new ElseExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 742, MySQLParser.RULE_elseExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6394;
                this.match(MySQLParser.ELSE_SYMBOL);
                this.state = 6395;
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    castType() {
        let _localctx = new CastTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 744, MySQLParser.RULE_castType);
        try {
            this.state = 6442;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 816, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6397;
                        this.match(MySQLParser.BINARY_SYMBOL);
                        this.state = 6399;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 806, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6398;
                                    this.fieldLength();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6401;
                        this.match(MySQLParser.CHAR_SYMBOL);
                        this.state = 6403;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 807, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6402;
                                    this.fieldLength();
                                }
                                break;
                        }
                        this.state = 6406;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 808, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6405;
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6408;
                        this.nchar();
                        this.state = 6410;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 809, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6409;
                                    this.fieldLength();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6412;
                        this.match(MySQLParser.SIGNED_SYMBOL);
                        this.state = 6414;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 810, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6413;
                                    this.match(MySQLParser.INT_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 6416;
                        this.match(MySQLParser.UNSIGNED_SYMBOL);
                        this.state = 6418;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 811, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6417;
                                    this.match(MySQLParser.INT_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 6420;
                        this.match(MySQLParser.DATE_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 6421;
                        this.match(MySQLParser.TIME_SYMBOL);
                        this.state = 6423;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 812, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6422;
                                    this.typeDatetimePrecision();
                                }
                                break;
                        }
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 6425;
                        this.match(MySQLParser.DATETIME_SYMBOL);
                        this.state = 6427;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 813, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6426;
                                    this.typeDatetimePrecision();
                                }
                                break;
                        }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 6429;
                        this.match(MySQLParser.DECIMAL_SYMBOL);
                        this.state = 6431;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 814, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6430;
                                    this.floatOptions();
                                }
                                break;
                        }
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 6433;
                        if (!(this.serverVersion >= 50708)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50708");
                        }
                        this.state = 6434;
                        this.match(MySQLParser.JSON_SYMBOL);
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 6435;
                        if (!(this.serverVersion >= 80017)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80017");
                        }
                        this.state = 6436;
                        this.realType();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 6437;
                        if (!(this.serverVersion >= 80017)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80017");
                        }
                        this.state = 6438;
                        this.match(MySQLParser.FLOAT_SYMBOL);
                        this.state = 6440;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 815, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6439;
                                    this.standardFloatOptions();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    exprList() {
        let _localctx = new ExprListContext(this._ctx, this.state);
        this.enterRule(_localctx, 746, MySQLParser.RULE_exprList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6444;
                this.expr(0);
                this.state = 6449;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 6445;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 6446;
                            this.expr(0);
                        }
                    }
                    this.state = 6451;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    charset() {
        let _localctx = new CharsetContext(this._ctx, this.state);
        this.enterRule(_localctx, 748, MySQLParser.RULE_charset);
        try {
            this.state = 6455;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.CHAR_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6452;
                        this.match(MySQLParser.CHAR_SYMBOL);
                        this.state = 6453;
                        this.match(MySQLParser.SET_SYMBOL);
                    }
                    break;
                case MySQLParser.CHARSET_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6454;
                        this.match(MySQLParser.CHARSET_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    notRule() {
        let _localctx = new NotRuleContext(this._ctx, this.state);
        this.enterRule(_localctx, 750, MySQLParser.RULE_notRule);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6457;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.NOT2_SYMBOL || _la === MySQLParser.NOT_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    not2Rule() {
        let _localctx = new Not2RuleContext(this._ctx, this.state);
        this.enterRule(_localctx, 752, MySQLParser.RULE_not2Rule);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6459;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.NOT2_SYMBOL || _la === MySQLParser.LOGICAL_NOT_OPERATOR)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    interval() {
        let _localctx = new IntervalContext(this._ctx, this.state);
        this.enterRule(_localctx, 754, MySQLParser.RULE_interval);
        let _la;
        try {
            this.state = 6463;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.DAY_SYMBOL:
                case MySQLParser.HOUR_SYMBOL:
                case MySQLParser.MICROSECOND_SYMBOL:
                case MySQLParser.MINUTE_SYMBOL:
                case MySQLParser.MONTH_SYMBOL:
                case MySQLParser.QUARTER_SYMBOL:
                case MySQLParser.SECOND_SYMBOL:
                case MySQLParser.WEEK_SYMBOL:
                case MySQLParser.YEAR_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6461;
                        this.intervalTimeStamp();
                    }
                    break;
                case MySQLParser.DAY_HOUR_SYMBOL:
                case MySQLParser.DAY_MICROSECOND_SYMBOL:
                case MySQLParser.DAY_MINUTE_SYMBOL:
                case MySQLParser.DAY_SECOND_SYMBOL:
                case MySQLParser.HOUR_MICROSECOND_SYMBOL:
                case MySQLParser.HOUR_MINUTE_SYMBOL:
                case MySQLParser.HOUR_SECOND_SYMBOL:
                case MySQLParser.MINUTE_MICROSECOND_SYMBOL:
                case MySQLParser.MINUTE_SECOND_SYMBOL:
                case MySQLParser.SECOND_MICROSECOND_SYMBOL:
                case MySQLParser.YEAR_MONTH_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6462;
                        _la = this._input.LA(1);
                        if (!(((((_la - 471)) & ~0x1F) === 0 && ((1 << (_la - 471)) & ((1 << (MySQLParser.DAY_HOUR_SYMBOL - 471)) | (1 << (MySQLParser.DAY_MICROSECOND_SYMBOL - 471)) | (1 << (MySQLParser.DAY_MINUTE_SYMBOL - 471)) | (1 << (MySQLParser.DAY_SECOND_SYMBOL - 471)))) !== 0) || ((((_la - 516)) & ~0x1F) === 0 && ((1 << (_la - 516)) & ((1 << (MySQLParser.HOUR_MICROSECOND_SYMBOL - 516)) | (1 << (MySQLParser.HOUR_MINUTE_SYMBOL - 516)) | (1 << (MySQLParser.HOUR_SECOND_SYMBOL - 516)))) !== 0) || _la === MySQLParser.MINUTE_MICROSECOND_SYMBOL || _la === MySQLParser.MINUTE_SECOND_SYMBOL || _la === MySQLParser.SECOND_MICROSECOND_SYMBOL || _la === MySQLParser.YEAR_MONTH_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    intervalTimeStamp() {
        let _localctx = new IntervalTimeStampContext(this._ctx, this.state);
        this.enterRule(_localctx, 756, MySQLParser.RULE_intervalTimeStamp);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6465;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.DAY_SYMBOL || _la === MySQLParser.HOUR_SYMBOL || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySQLParser.MICROSECOND_SYMBOL - 217)) | (1 << (MySQLParser.MINUTE_SYMBOL - 217)) | (1 << (MySQLParser.MONTH_SYMBOL - 217)))) !== 0) || _la === MySQLParser.QUARTER_SYMBOL || _la === MySQLParser.SECOND_SYMBOL || _la === MySQLParser.WEEK_SYMBOL || _la === MySQLParser.YEAR_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    exprListWithParentheses() {
        let _localctx = new ExprListWithParenthesesContext(this._ctx, this.state);
        this.enterRule(_localctx, 758, MySQLParser.RULE_exprListWithParentheses);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6467;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6468;
                this.exprList();
                this.state = 6469;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    exprWithParentheses() {
        let _localctx = new ExprWithParenthesesContext(this._ctx, this.state);
        this.enterRule(_localctx, 760, MySQLParser.RULE_exprWithParentheses);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6471;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6472;
                this.expr(0);
                this.state = 6473;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    simpleExprWithParentheses() {
        let _localctx = new SimpleExprWithParenthesesContext(this._ctx, this.state);
        this.enterRule(_localctx, 762, MySQLParser.RULE_simpleExprWithParentheses);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6475;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 6476;
                this.simpleExpr(0);
                this.state = 6477;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    orderList() {
        let _localctx = new OrderListContext(this._ctx, this.state);
        this.enterRule(_localctx, 764, MySQLParser.RULE_orderList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6479;
                this.orderExpression();
                this.state = 6484;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 820, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 6480;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 6481;
                                this.orderExpression();
                            }
                        }
                    }
                    this.state = 6486;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 820, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    orderExpression() {
        let _localctx = new OrderExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 766, MySQLParser.RULE_orderExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6487;
                this.expr(0);
                this.state = 6489;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 821, this._ctx)) {
                    case 1:
                        {
                            this.state = 6488;
                            this.direction();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    groupList() {
        let _localctx = new GroupListContext(this._ctx, this.state);
        this.enterRule(_localctx, 768, MySQLParser.RULE_groupList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6491;
                this.groupingExpression();
                this.state = 6496;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 6492;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 6493;
                            this.groupingExpression();
                        }
                    }
                    this.state = 6498;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    groupingExpression() {
        let _localctx = new GroupingExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 770, MySQLParser.RULE_groupingExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6499;
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    channel() {
        let _localctx = new ChannelContext(this._ctx, this.state);
        this.enterRule(_localctx, 772, MySQLParser.RULE_channel);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6501;
                if (!(this.serverVersion >= 50706)) {
                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50706");
                }
                this.state = 6502;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 6503;
                this.match(MySQLParser.CHANNEL_SYMBOL);
                this.state = 6504;
                this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    compoundStatement() {
        let _localctx = new CompoundStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 774, MySQLParser.RULE_compoundStatement);
        try {
            this.state = 6519;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 823, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6506;
                        this.simpleStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6507;
                        this.returnStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6508;
                        this.ifStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6509;
                        this.caseStatement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 6510;
                        this.labeledBlock();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 6511;
                        this.unlabeledBlock();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 6512;
                        this.labeledControl();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 6513;
                        this.unlabeledControl();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 6514;
                        this.leaveStatement();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 6515;
                        this.iterateStatement();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 6516;
                        this.cursorOpen();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 6517;
                        this.cursorFetch();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 6518;
                        this.cursorClose();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    returnStatement() {
        let _localctx = new ReturnStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 776, MySQLParser.RULE_returnStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6521;
                this.match(MySQLParser.RETURN_SYMBOL);
                this.state = 6522;
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ifStatement() {
        let _localctx = new IfStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 778, MySQLParser.RULE_ifStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6524;
                this.match(MySQLParser.IF_SYMBOL);
                this.state = 6525;
                this.ifBody();
                this.state = 6526;
                this.match(MySQLParser.END_SYMBOL);
                this.state = 6527;
                this.match(MySQLParser.IF_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ifBody() {
        let _localctx = new IfBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 780, MySQLParser.RULE_ifBody);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6529;
                this.expr(0);
                this.state = 6530;
                this.thenStatement();
                this.state = 6535;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case MySQLParser.ELSEIF_SYMBOL:
                        {
                            this.state = 6531;
                            this.match(MySQLParser.ELSEIF_SYMBOL);
                            this.state = 6532;
                            this.ifBody();
                        }
                        break;
                    case MySQLParser.ELSE_SYMBOL:
                        {
                            this.state = 6533;
                            this.match(MySQLParser.ELSE_SYMBOL);
                            this.state = 6534;
                            this.compoundStatementList();
                        }
                        break;
                    case MySQLParser.END_SYMBOL:
                        break;
                    default:
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    thenStatement() {
        let _localctx = new ThenStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 782, MySQLParser.RULE_thenStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6537;
                this.match(MySQLParser.THEN_SYMBOL);
                this.state = 6538;
                this.compoundStatementList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    compoundStatementList() {
        let _localctx = new CompoundStatementListContext(this._ctx, this.state);
        this.enterRule(_localctx, 784, MySQLParser.RULE_compoundStatementList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6543;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 6540;
                                    this.compoundStatement();
                                    this.state = 6541;
                                    this.match(MySQLParser.SEMICOLON_SYMBOL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 6545;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 825, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    caseStatement() {
        let _localctx = new CaseStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 786, MySQLParser.RULE_caseStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6547;
                this.match(MySQLParser.CASE_SYMBOL);
                this.state = 6549;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 826, this._ctx)) {
                    case 1:
                        {
                            this.state = 6548;
                            this.expr(0);
                        }
                        break;
                }
                this.state = 6554;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 6551;
                            this.whenExpression();
                            this.state = 6552;
                            this.thenStatement();
                        }
                    }
                    this.state = 6556;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === MySQLParser.WHEN_SYMBOL);
                this.state = 6559;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ELSE_SYMBOL) {
                    {
                        this.state = 6558;
                        this.elseStatement();
                    }
                }
                this.state = 6561;
                this.match(MySQLParser.END_SYMBOL);
                this.state = 6562;
                this.match(MySQLParser.CASE_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    elseStatement() {
        let _localctx = new ElseStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 788, MySQLParser.RULE_elseStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6564;
                this.match(MySQLParser.ELSE_SYMBOL);
                this.state = 6565;
                this.compoundStatementList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    labeledBlock() {
        let _localctx = new LabeledBlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 790, MySQLParser.RULE_labeledBlock);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6567;
                this.label();
                this.state = 6568;
                this.beginEndBlock();
                this.state = 6570;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 829, this._ctx)) {
                    case 1:
                        {
                            this.state = 6569;
                            this.labelRef();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    unlabeledBlock() {
        let _localctx = new UnlabeledBlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 792, MySQLParser.RULE_unlabeledBlock);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6572;
                this.beginEndBlock();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    label() {
        let _localctx = new LabelContext(this._ctx, this.state);
        this.enterRule(_localctx, 794, MySQLParser.RULE_label);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6574;
                this.labelIdentifier();
                this.state = 6575;
                this.match(MySQLParser.COLON_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    beginEndBlock() {
        let _localctx = new BeginEndBlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 796, MySQLParser.RULE_beginEndBlock);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6577;
                this.match(MySQLParser.BEGIN_SYMBOL);
                this.state = 6579;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 830, this._ctx)) {
                    case 1:
                        {
                            this.state = 6578;
                            this.spDeclarations();
                        }
                        break;
                }
                this.state = 6582;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 831, this._ctx)) {
                    case 1:
                        {
                            this.state = 6581;
                            this.compoundStatementList();
                        }
                        break;
                }
                this.state = 6584;
                this.match(MySQLParser.END_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    labeledControl() {
        let _localctx = new LabeledControlContext(this._ctx, this.state);
        this.enterRule(_localctx, 798, MySQLParser.RULE_labeledControl);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6586;
                this.label();
                this.state = 6587;
                this.unlabeledControl();
                this.state = 6589;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 832, this._ctx)) {
                    case 1:
                        {
                            this.state = 6588;
                            this.labelRef();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    unlabeledControl() {
        let _localctx = new UnlabeledControlContext(this._ctx, this.state);
        this.enterRule(_localctx, 800, MySQLParser.RULE_unlabeledControl);
        try {
            this.state = 6594;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.LOOP_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6591;
                        this.loopBlock();
                    }
                    break;
                case MySQLParser.WHILE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6592;
                        this.whileDoBlock();
                    }
                    break;
                case MySQLParser.REPEAT_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6593;
                        this.repeatUntilBlock();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    loopBlock() {
        let _localctx = new LoopBlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 802, MySQLParser.RULE_loopBlock);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6596;
                this.match(MySQLParser.LOOP_SYMBOL);
                this.state = 6597;
                this.compoundStatementList();
                this.state = 6598;
                this.match(MySQLParser.END_SYMBOL);
                this.state = 6599;
                this.match(MySQLParser.LOOP_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    whileDoBlock() {
        let _localctx = new WhileDoBlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 804, MySQLParser.RULE_whileDoBlock);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6601;
                this.match(MySQLParser.WHILE_SYMBOL);
                this.state = 6602;
                this.expr(0);
                this.state = 6603;
                this.match(MySQLParser.DO_SYMBOL);
                this.state = 6604;
                this.compoundStatementList();
                this.state = 6605;
                this.match(MySQLParser.END_SYMBOL);
                this.state = 6606;
                this.match(MySQLParser.WHILE_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    repeatUntilBlock() {
        let _localctx = new RepeatUntilBlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 806, MySQLParser.RULE_repeatUntilBlock);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6608;
                this.match(MySQLParser.REPEAT_SYMBOL);
                this.state = 6609;
                this.compoundStatementList();
                this.state = 6610;
                this.match(MySQLParser.UNTIL_SYMBOL);
                this.state = 6611;
                this.expr(0);
                this.state = 6612;
                this.match(MySQLParser.END_SYMBOL);
                this.state = 6613;
                this.match(MySQLParser.REPEAT_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    spDeclarations() {
        let _localctx = new SpDeclarationsContext(this._ctx, this.state);
        this.enterRule(_localctx, 808, MySQLParser.RULE_spDeclarations);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6618;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 6615;
                                    this.spDeclaration();
                                    this.state = 6616;
                                    this.match(MySQLParser.SEMICOLON_SYMBOL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 6620;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 834, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    spDeclaration() {
        let _localctx = new SpDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 810, MySQLParser.RULE_spDeclaration);
        try {
            this.state = 6626;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 835, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6622;
                        this.variableDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6623;
                        this.conditionDeclaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6624;
                        this.handlerDeclaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6625;
                        this.cursorDeclaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    variableDeclaration() {
        let _localctx = new VariableDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 812, MySQLParser.RULE_variableDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6628;
                this.match(MySQLParser.DECLARE_SYMBOL);
                this.state = 6629;
                this.identifierList();
                this.state = 6630;
                this.dataType();
                this.state = 6632;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.COLLATE_SYMBOL) {
                    {
                        this.state = 6631;
                        this.collate();
                    }
                }
                this.state = 6636;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.DEFAULT_SYMBOL) {
                    {
                        this.state = 6634;
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        this.state = 6635;
                        this.expr(0);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    conditionDeclaration() {
        let _localctx = new ConditionDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 814, MySQLParser.RULE_conditionDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6638;
                this.match(MySQLParser.DECLARE_SYMBOL);
                this.state = 6639;
                this.identifier();
                this.state = 6640;
                this.match(MySQLParser.CONDITION_SYMBOL);
                this.state = 6641;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 6642;
                this.spCondition();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    spCondition() {
        let _localctx = new SpConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 816, MySQLParser.RULE_spCondition);
        try {
            this.state = 6646;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.INT_NUMBER:
                case MySQLParser.LONG_NUMBER:
                case MySQLParser.ULONGLONG_NUMBER:
                case MySQLParser.HEX_NUMBER:
                case MySQLParser.DECIMAL_NUMBER:
                case MySQLParser.FLOAT_NUMBER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6644;
                        this.ulong_number();
                    }
                    break;
                case MySQLParser.SQLSTATE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6645;
                        this.sqlstate();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sqlstate() {
        let _localctx = new SqlstateContext(this._ctx, this.state);
        this.enterRule(_localctx, 818, MySQLParser.RULE_sqlstate);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6648;
                this.match(MySQLParser.SQLSTATE_SYMBOL);
                this.state = 6650;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 839, this._ctx)) {
                    case 1:
                        {
                            this.state = 6649;
                            this.match(MySQLParser.VALUE_SYMBOL);
                        }
                        break;
                }
                this.state = 6652;
                this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    handlerDeclaration() {
        let _localctx = new HandlerDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 820, MySQLParser.RULE_handlerDeclaration);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6654;
                this.match(MySQLParser.DECLARE_SYMBOL);
                this.state = 6655;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.CONTINUE_SYMBOL || _la === MySQLParser.EXIT_SYMBOL || _la === MySQLParser.UNDO_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6656;
                this.match(MySQLParser.HANDLER_SYMBOL);
                this.state = 6657;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 6658;
                this.handlerCondition();
                this.state = 6663;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 840, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 6659;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 6660;
                                this.handlerCondition();
                            }
                        }
                    }
                    this.state = 6665;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 840, this._ctx);
                }
                this.state = 6666;
                this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    handlerCondition() {
        let _localctx = new HandlerConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 822, MySQLParser.RULE_handlerCondition);
        try {
            this.state = 6675;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 841, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6668;
                        this.spCondition();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6669;
                        this.identifier();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6670;
                        this.match(MySQLParser.SQLWARNING_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6671;
                        this.notRule();
                        this.state = 6672;
                        this.match(MySQLParser.FOUND_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 6674;
                        this.match(MySQLParser.SQLEXCEPTION_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cursorDeclaration() {
        let _localctx = new CursorDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 824, MySQLParser.RULE_cursorDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6677;
                this.match(MySQLParser.DECLARE_SYMBOL);
                this.state = 6678;
                this.identifier();
                this.state = 6679;
                this.match(MySQLParser.CURSOR_SYMBOL);
                this.state = 6680;
                this.match(MySQLParser.FOR_SYMBOL);
                this.state = 6681;
                this.selectStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    iterateStatement() {
        let _localctx = new IterateStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 826, MySQLParser.RULE_iterateStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6683;
                this.match(MySQLParser.ITERATE_SYMBOL);
                this.state = 6684;
                this.labelRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    leaveStatement() {
        let _localctx = new LeaveStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 828, MySQLParser.RULE_leaveStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6686;
                this.match(MySQLParser.LEAVE_SYMBOL);
                this.state = 6687;
                this.labelRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    getDiagnostics() {
        let _localctx = new GetDiagnosticsContext(this._ctx, this.state);
        this.enterRule(_localctx, 830, MySQLParser.RULE_getDiagnostics);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6689;
                this.match(MySQLParser.GET_SYMBOL);
                this.state = 6693;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 842, this._ctx)) {
                    case 1:
                        {
                            this.state = 6690;
                            this.match(MySQLParser.CURRENT_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                            this.state = 6691;
                            if (!(this.serverVersion >= 50700)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50700");
                            }
                            this.state = 6692;
                            this.match(MySQLParser.STACKED_SYMBOL);
                        }
                        break;
                }
                this.state = 6695;
                this.match(MySQLParser.DIAGNOSTICS_SYMBOL);
                this.state = 6714;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 845, this._ctx)) {
                    case 1:
                        {
                            this.state = 6696;
                            this.statementInformationItem();
                            this.state = 6701;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === MySQLParser.COMMA_SYMBOL) {
                                {
                                    {
                                        this.state = 6697;
                                        this.match(MySQLParser.COMMA_SYMBOL);
                                        this.state = 6698;
                                        this.statementInformationItem();
                                    }
                                }
                                this.state = 6703;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 6704;
                            this.match(MySQLParser.CONDITION_SYMBOL);
                            this.state = 6705;
                            this.signalAllowedExpr();
                            this.state = 6706;
                            this.conditionInformationItem();
                            this.state = 6711;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === MySQLParser.COMMA_SYMBOL) {
                                {
                                    {
                                        this.state = 6707;
                                        this.match(MySQLParser.COMMA_SYMBOL);
                                        this.state = 6708;
                                        this.conditionInformationItem();
                                    }
                                }
                                this.state = 6713;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    signalAllowedExpr() {
        let _localctx = new SignalAllowedExprContext(this._ctx, this.state);
        this.enterRule(_localctx, 832, MySQLParser.RULE_signalAllowedExpr);
        try {
            this.state = 6719;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 846, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6716;
                        this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6717;
                        this.variable();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6718;
                        this.qualifiedIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    statementInformationItem() {
        let _localctx = new StatementInformationItemContext(this._ctx, this.state);
        this.enterRule(_localctx, 834, MySQLParser.RULE_statementInformationItem);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6723;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 847, this._ctx)) {
                    case 1:
                        {
                            this.state = 6721;
                            this.variable();
                        }
                        break;
                    case 2:
                        {
                            this.state = 6722;
                            this.identifier();
                        }
                        break;
                }
                this.state = 6725;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 6726;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.NUMBER_SYMBOL || _la === MySQLParser.ROW_COUNT_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    conditionInformationItem() {
        let _localctx = new ConditionInformationItemContext(this._ctx, this.state);
        this.enterRule(_localctx, 836, MySQLParser.RULE_conditionInformationItem);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6730;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 848, this._ctx)) {
                    case 1:
                        {
                            this.state = 6728;
                            this.variable();
                        }
                        break;
                    case 2:
                        {
                            this.state = 6729;
                            this.identifier();
                        }
                        break;
                }
                this.state = 6732;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 6735;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case MySQLParser.CATALOG_NAME_SYMBOL:
                    case MySQLParser.CLASS_ORIGIN_SYMBOL:
                    case MySQLParser.COLUMN_NAME_SYMBOL:
                    case MySQLParser.CONSTRAINT_CATALOG_SYMBOL:
                    case MySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
                    case MySQLParser.CONSTRAINT_NAME_SYMBOL:
                    case MySQLParser.CURSOR_NAME_SYMBOL:
                    case MySQLParser.MESSAGE_TEXT_SYMBOL:
                    case MySQLParser.MYSQL_ERRNO_SYMBOL:
                    case MySQLParser.SCHEMA_NAME_SYMBOL:
                    case MySQLParser.SUBCLASS_ORIGIN_SYMBOL:
                    case MySQLParser.TABLE_NAME_SYMBOL:
                        {
                            this.state = 6733;
                            this.signalInformationItemName();
                        }
                        break;
                    case MySQLParser.RETURNED_SQLSTATE_SYMBOL:
                        {
                            this.state = 6734;
                            this.match(MySQLParser.RETURNED_SQLSTATE_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    signalInformationItemName() {
        let _localctx = new SignalInformationItemNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 838, MySQLParser.RULE_signalInformationItemName);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6737;
                _la = this._input.LA(1);
                if (!(((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & ((1 << (MySQLParser.CATALOG_NAME_SYMBOL - 78)) | (1 << (MySQLParser.CLASS_ORIGIN_SYMBOL - 78)) | (1 << (MySQLParser.COLUMN_NAME_SYMBOL - 78)) | (1 << (MySQLParser.CONSTRAINT_CATALOG_SYMBOL - 78)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA_SYMBOL - 78)) | (1 << (MySQLParser.CONSTRAINT_NAME_SYMBOL - 78)) | (1 << (MySQLParser.CURSOR_NAME_SYMBOL - 78)))) !== 0) || _la === MySQLParser.MESSAGE_TEXT_SYMBOL || _la === MySQLParser.MYSQL_ERRNO_SYMBOL || _la === MySQLParser.SCHEMA_NAME_SYMBOL || _la === MySQLParser.SUBCLASS_ORIGIN_SYMBOL || _la === MySQLParser.TABLE_NAME_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    signalStatement() {
        let _localctx = new SignalStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 840, MySQLParser.RULE_signalStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6739;
                this.match(MySQLParser.SIGNAL_SYMBOL);
                this.state = 6742;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 850, this._ctx)) {
                    case 1:
                        {
                            this.state = 6740;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 6741;
                            this.sqlstate();
                        }
                        break;
                }
                this.state = 6753;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.SET_SYMBOL) {
                    {
                        this.state = 6744;
                        this.match(MySQLParser.SET_SYMBOL);
                        this.state = 6745;
                        this.signalInformationItem();
                        this.state = 6750;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.COMMA_SYMBOL) {
                            {
                                {
                                    this.state = 6746;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.state = 6747;
                                    this.signalInformationItem();
                                }
                            }
                            this.state = 6752;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resignalStatement() {
        let _localctx = new ResignalStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 842, MySQLParser.RULE_resignalStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6755;
                this.match(MySQLParser.RESIGNAL_SYMBOL);
                this.state = 6761;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.SQLSTATE_SYMBOL) {
                    {
                        this.state = 6756;
                        this.match(MySQLParser.SQLSTATE_SYMBOL);
                        this.state = 6758;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 853, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6757;
                                    this.match(MySQLParser.VALUE_SYMBOL);
                                }
                                break;
                        }
                        this.state = 6760;
                        this.textOrIdentifier();
                    }
                }
                this.state = 6772;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.SET_SYMBOL) {
                    {
                        this.state = 6763;
                        this.match(MySQLParser.SET_SYMBOL);
                        this.state = 6764;
                        this.signalInformationItem();
                        this.state = 6769;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.COMMA_SYMBOL) {
                            {
                                {
                                    this.state = 6765;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.state = 6766;
                                    this.signalInformationItem();
                                }
                            }
                            this.state = 6771;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    signalInformationItem() {
        let _localctx = new SignalInformationItemContext(this._ctx, this.state);
        this.enterRule(_localctx, 844, MySQLParser.RULE_signalInformationItem);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6774;
                this.signalInformationItemName();
                this.state = 6775;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 6776;
                this.signalAllowedExpr();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cursorOpen() {
        let _localctx = new CursorOpenContext(this._ctx, this.state);
        this.enterRule(_localctx, 846, MySQLParser.RULE_cursorOpen);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6778;
                this.match(MySQLParser.OPEN_SYMBOL);
                this.state = 6779;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cursorClose() {
        let _localctx = new CursorCloseContext(this._ctx, this.state);
        this.enterRule(_localctx, 848, MySQLParser.RULE_cursorClose);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6781;
                this.match(MySQLParser.CLOSE_SYMBOL);
                this.state = 6782;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    cursorFetch() {
        let _localctx = new CursorFetchContext(this._ctx, this.state);
        this.enterRule(_localctx, 850, MySQLParser.RULE_cursorFetch);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6784;
                this.match(MySQLParser.FETCH_SYMBOL);
                this.state = 6789;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 858, this._ctx)) {
                    case 1:
                        {
                            this.state = 6786;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.NEXT_SYMBOL) {
                                {
                                    this.state = 6785;
                                    this.match(MySQLParser.NEXT_SYMBOL);
                                }
                            }
                            this.state = 6788;
                            this.match(MySQLParser.FROM_SYMBOL);
                        }
                        break;
                }
                this.state = 6791;
                this.identifier();
                this.state = 6792;
                this.match(MySQLParser.INTO_SYMBOL);
                this.state = 6793;
                this.identifierList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    schedule() {
        let _localctx = new ScheduleContext(this._ctx, this.state);
        this.enterRule(_localctx, 852, MySQLParser.RULE_schedule);
        let _la;
        try {
            this.state = 6808;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.AT_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6795;
                        this.match(MySQLParser.AT_SYMBOL);
                        this.state = 6796;
                        this.expr(0);
                    }
                    break;
                case MySQLParser.EVERY_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6797;
                        this.match(MySQLParser.EVERY_SYMBOL);
                        this.state = 6798;
                        this.expr(0);
                        this.state = 6799;
                        this.interval();
                        this.state = 6802;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.STARTS_SYMBOL) {
                            {
                                this.state = 6800;
                                this.match(MySQLParser.STARTS_SYMBOL);
                                this.state = 6801;
                                this.expr(0);
                            }
                        }
                        this.state = 6806;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.ENDS_SYMBOL) {
                            {
                                this.state = 6804;
                                this.match(MySQLParser.ENDS_SYMBOL);
                                this.state = 6805;
                                this.expr(0);
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    columnDefinition() {
        let _localctx = new ColumnDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 854, MySQLParser.RULE_columnDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6810;
                this.columnName();
                this.state = 6811;
                this.fieldDefinition();
                this.state = 6813;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 862, this._ctx)) {
                    case 1:
                        {
                            this.state = 6812;
                            this.checkOrReferences();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    checkOrReferences() {
        let _localctx = new CheckOrReferencesContext(this._ctx, this.state);
        this.enterRule(_localctx, 856, MySQLParser.RULE_checkOrReferences);
        try {
            this.state = 6818;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 863, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6815;
                        if (!(this.serverVersion < 80016)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80016");
                        }
                        this.state = 6816;
                        this.checkConstraint();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6817;
                        this.references();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    checkConstraint() {
        let _localctx = new CheckConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 858, MySQLParser.RULE_checkConstraint);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6820;
                this.match(MySQLParser.CHECK_SYMBOL);
                this.state = 6821;
                this.exprWithParentheses();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    constraintEnforcement() {
        let _localctx = new ConstraintEnforcementContext(this._ctx, this.state);
        this.enterRule(_localctx, 860, MySQLParser.RULE_constraintEnforcement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6824;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.NOT_SYMBOL) {
                    {
                        this.state = 6823;
                        this.match(MySQLParser.NOT_SYMBOL);
                    }
                }
                this.state = 6826;
                this.match(MySQLParser.ENFORCED_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableConstraintDef() {
        let _localctx = new TableConstraintDefContext(this._ctx, this.state);
        this.enterRule(_localctx, 862, MySQLParser.RULE_tableConstraintDef);
        let _la;
        try {
            let _alt;
            this.state = 6903;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.INDEX_SYMBOL:
                case MySQLParser.KEY_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6828;
                        _localctx._type = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.INDEX_SYMBOL || _la === MySQLParser.KEY_SYMBOL)) {
                            _localctx._type = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6830;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 865, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6829;
                                    this.indexNameAndType();
                                }
                                break;
                        }
                        this.state = 6832;
                        this.keyListVariants();
                        this.state = 6836;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 866, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 6833;
                                        this.indexOption();
                                    }
                                }
                            }
                            this.state = 6838;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 866, this._ctx);
                        }
                    }
                    break;
                case MySQLParser.FULLTEXT_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6839;
                        _localctx._type = this.match(MySQLParser.FULLTEXT_SYMBOL);
                        this.state = 6841;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 867, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6840;
                                    this.keyOrIndex();
                                }
                                break;
                        }
                        this.state = 6844;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 868, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6843;
                                    this.indexName();
                                }
                                break;
                        }
                        this.state = 6846;
                        this.keyListVariants();
                        this.state = 6850;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 869, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 6847;
                                        this.fulltextIndexOption();
                                    }
                                }
                            }
                            this.state = 6852;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 869, this._ctx);
                        }
                    }
                    break;
                case MySQLParser.SPATIAL_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6853;
                        _localctx._type = this.match(MySQLParser.SPATIAL_SYMBOL);
                        this.state = 6855;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 870, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6854;
                                    this.keyOrIndex();
                                }
                                break;
                        }
                        this.state = 6858;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 871, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6857;
                                    this.indexName();
                                }
                                break;
                        }
                        this.state = 6860;
                        this.keyListVariants();
                        this.state = 6864;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 872, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 6861;
                                        this.spatialIndexOption();
                                    }
                                }
                            }
                            this.state = 6866;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 872, this._ctx);
                        }
                    }
                    break;
                case MySQLParser.CHECK_SYMBOL:
                case MySQLParser.CONSTRAINT_SYMBOL:
                case MySQLParser.FOREIGN_SYMBOL:
                case MySQLParser.PRIMARY_SYMBOL:
                case MySQLParser.UNIQUE_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6868;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.CONSTRAINT_SYMBOL) {
                            {
                                this.state = 6867;
                                this.constraintName();
                            }
                        }
                        this.state = 6901;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case MySQLParser.PRIMARY_SYMBOL:
                            case MySQLParser.UNIQUE_SYMBOL:
                                {
                                    this.state = 6876;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case MySQLParser.PRIMARY_SYMBOL:
                                            {
                                                this.state = 6870;
                                                _localctx._type = this.match(MySQLParser.PRIMARY_SYMBOL);
                                                this.state = 6871;
                                                this.match(MySQLParser.KEY_SYMBOL);
                                            }
                                            break;
                                        case MySQLParser.UNIQUE_SYMBOL:
                                            {
                                                this.state = 6872;
                                                _localctx._type = this.match(MySQLParser.UNIQUE_SYMBOL);
                                                this.state = 6874;
                                                this._errHandler.sync(this);
                                                switch (this.interpreter.adaptivePredict(this._input, 874, this._ctx)) {
                                                    case 1:
                                                        {
                                                            this.state = 6873;
                                                            this.keyOrIndex();
                                                        }
                                                        break;
                                                }
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException_1.NoViableAltException(this);
                                    }
                                    this.state = 6879;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 876, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 6878;
                                                this.indexNameAndType();
                                            }
                                            break;
                                    }
                                    this.state = 6881;
                                    this.keyListVariants();
                                    this.state = 6885;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 877, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 6882;
                                                    this.indexOption();
                                                }
                                            }
                                        }
                                        this.state = 6887;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 877, this._ctx);
                                    }
                                }
                                break;
                            case MySQLParser.FOREIGN_SYMBOL:
                                {
                                    this.state = 6888;
                                    _localctx._type = this.match(MySQLParser.FOREIGN_SYMBOL);
                                    this.state = 6889;
                                    this.match(MySQLParser.KEY_SYMBOL);
                                    this.state = 6891;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 878, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 6890;
                                                this.indexName();
                                            }
                                            break;
                                    }
                                    this.state = 6893;
                                    this.keyList();
                                    this.state = 6894;
                                    this.references();
                                }
                                break;
                            case MySQLParser.CHECK_SYMBOL:
                                {
                                    this.state = 6896;
                                    this.checkConstraint();
                                    this.state = 6899;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 879, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 6897;
                                                if (!(this.serverVersion >= 80017)) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80017");
                                                }
                                                this.state = 6898;
                                                this.constraintEnforcement();
                                            }
                                            break;
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    constraintName() {
        let _localctx = new ConstraintNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 864, MySQLParser.RULE_constraintName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6905;
                this.match(MySQLParser.CONSTRAINT_SYMBOL);
                this.state = 6907;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 882, this._ctx)) {
                    case 1:
                        {
                            this.state = 6906;
                            this.identifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fieldDefinition() {
        let _localctx = new FieldDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 866, MySQLParser.RULE_fieldDefinition);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 6909;
                this.dataType();
                this.state = 6945;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 890, this._ctx)) {
                    case 1:
                        {
                            this.state = 6913;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 883, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 6910;
                                            this.columnAttribute();
                                        }
                                    }
                                }
                                this.state = 6915;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 883, this._ctx);
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 6916;
                            if (!(this.serverVersion >= 50707)) {
                                throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50707");
                            }
                            this.state = 6918;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.COLLATE_SYMBOL) {
                                {
                                    this.state = 6917;
                                    this.collate();
                                }
                            }
                            this.state = 6922;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.GENERATED_SYMBOL) {
                                {
                                    this.state = 6920;
                                    this.match(MySQLParser.GENERATED_SYMBOL);
                                    this.state = 6921;
                                    this.match(MySQLParser.ALWAYS_SYMBOL);
                                }
                            }
                            this.state = 6924;
                            this.match(MySQLParser.AS_SYMBOL);
                            this.state = 6925;
                            this.exprWithParentheses();
                            this.state = 6927;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 886, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 6926;
                                        _la = this._input.LA(1);
                                        if (!(_la === MySQLParser.STORED_SYMBOL || _la === MySQLParser.VIRTUAL_SYMBOL)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                    }
                                    break;
                            }
                            this.state = 6943;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 889, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 6929;
                                        if (!(this.serverVersion < 80000)) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80000");
                                        }
                                        this.state = 6933;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 887, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 6930;
                                                        this.gcolAttribute();
                                                    }
                                                }
                                            }
                                            this.state = 6935;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 887, this._ctx);
                                        }
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 6936;
                                        if (!(this.serverVersion >= 80000)) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                                        }
                                        this.state = 6940;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 888, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 6937;
                                                        this.columnAttribute();
                                                    }
                                                }
                                            }
                                            this.state = 6942;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 888, this._ctx);
                                        }
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    columnAttribute() {
        let _localctx = new ColumnAttributeContext(this._ctx, this.state);
        this.enterRule(_localctx, 868, MySQLParser.RULE_columnAttribute);
        let _la;
        try {
            this.state = 6999;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 898, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 6948;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.NOT_SYMBOL) {
                            {
                                this.state = 6947;
                                this.match(MySQLParser.NOT_SYMBOL);
                            }
                        }
                        this.state = 6950;
                        this.nullLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 6951;
                        if (!(this.serverVersion >= 80014)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                        }
                        this.state = 6952;
                        this.match(MySQLParser.NOT_SYMBOL);
                        this.state = 6953;
                        this.match(MySQLParser.SECONDARY_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 6954;
                        _localctx._value = this.match(MySQLParser.DEFAULT_SYMBOL);
                        this.state = 6962;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 893, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6955;
                                    this.signedLiteral();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 6956;
                                    this.match(MySQLParser.NOW_SYMBOL);
                                    this.state = 6958;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 892, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 6957;
                                                this.timeFunctionParameters();
                                            }
                                            break;
                                    }
                                }
                                break;
                            case 3:
                                {
                                    this.state = 6960;
                                    if (!(this.serverVersion >= 80013)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80013");
                                    }
                                    this.state = 6961;
                                    this.exprWithParentheses();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 6964;
                        _localctx._value = this.match(MySQLParser.ON_SYMBOL);
                        this.state = 6965;
                        this.match(MySQLParser.UPDATE_SYMBOL);
                        this.state = 6966;
                        this.match(MySQLParser.NOW_SYMBOL);
                        this.state = 6968;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 894, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6967;
                                    this.timeFunctionParameters();
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 6970;
                        _localctx._value = this.match(MySQLParser.AUTO_INCREMENT_SYMBOL);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 6971;
                        _localctx._value = this.match(MySQLParser.SERIAL_SYMBOL);
                        this.state = 6972;
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        this.state = 6973;
                        this.match(MySQLParser.VALUE_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 6975;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.PRIMARY_SYMBOL) {
                            {
                                this.state = 6974;
                                this.match(MySQLParser.PRIMARY_SYMBOL);
                            }
                        }
                        this.state = 6977;
                        _localctx._value = this.match(MySQLParser.KEY_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 6978;
                        _localctx._value = this.match(MySQLParser.UNIQUE_SYMBOL);
                        this.state = 6980;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 896, this._ctx)) {
                            case 1:
                                {
                                    this.state = 6979;
                                    this.match(MySQLParser.KEY_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 6982;
                        _localctx._value = this.match(MySQLParser.COMMENT_SYMBOL);
                        this.state = 6983;
                        this.textLiteral();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 6984;
                        this.collate();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 6985;
                        _localctx._value = this.match(MySQLParser.COLUMN_FORMAT_SYMBOL);
                        this.state = 6986;
                        this.columnFormat();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 6987;
                        _localctx._value = this.match(MySQLParser.STORAGE_SYMBOL);
                        this.state = 6988;
                        this.storageMedia();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 6989;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 6990;
                        _localctx._value = this.match(MySQLParser.SRID_SYMBOL);
                        this.state = 6991;
                        this.real_ulonglong_number();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 6992;
                        if (!(this.serverVersion >= 80017)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80017");
                        }
                        this.state = 6994;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.CONSTRAINT_SYMBOL) {
                            {
                                this.state = 6993;
                                this.constraintName();
                            }
                        }
                        this.state = 6996;
                        this.checkConstraint();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 6997;
                        if (!(this.serverVersion >= 80017)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80017");
                        }
                        this.state = 6998;
                        this.constraintEnforcement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    columnFormat() {
        let _localctx = new ColumnFormatContext(this._ctx, this.state);
        this.enterRule(_localctx, 870, MySQLParser.RULE_columnFormat);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7001;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.DYNAMIC_SYMBOL || _la === MySQLParser.FIXED_SYMBOL || _la === MySQLParser.DEFAULT_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    storageMedia() {
        let _localctx = new StorageMediaContext(this._ctx, this.state);
        this.enterRule(_localctx, 872, MySQLParser.RULE_storageMedia);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7003;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.DISK_SYMBOL || _la === MySQLParser.MEMORY_SYMBOL || _la === MySQLParser.DEFAULT_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    gcolAttribute() {
        let _localctx = new GcolAttributeContext(this._ctx, this.state);
        this.enterRule(_localctx, 874, MySQLParser.RULE_gcolAttribute);
        let _la;
        try {
            this.state = 7019;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.UNIQUE_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7005;
                        this.match(MySQLParser.UNIQUE_SYMBOL);
                        this.state = 7007;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 899, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7006;
                                    this.match(MySQLParser.KEY_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case MySQLParser.COMMENT_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7009;
                        this.match(MySQLParser.COMMENT_SYMBOL);
                        this.state = 7010;
                        this.textString();
                    }
                    break;
                case MySQLParser.NOT2_SYMBOL:
                case MySQLParser.NOT_SYMBOL:
                case MySQLParser.NULL_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 7012;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.NOT2_SYMBOL || _la === MySQLParser.NOT_SYMBOL) {
                            {
                                this.state = 7011;
                                this.notRule();
                            }
                        }
                        this.state = 7014;
                        this.match(MySQLParser.NULL_SYMBOL);
                    }
                    break;
                case MySQLParser.KEY_SYMBOL:
                case MySQLParser.PRIMARY_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 7016;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.PRIMARY_SYMBOL) {
                            {
                                this.state = 7015;
                                this.match(MySQLParser.PRIMARY_SYMBOL);
                            }
                        }
                        this.state = 7018;
                        this.match(MySQLParser.KEY_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    references() {
        let _localctx = new ReferencesContext(this._ctx, this.state);
        this.enterRule(_localctx, 876, MySQLParser.RULE_references);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7021;
                this.match(MySQLParser.REFERENCES_SYMBOL);
                this.state = 7022;
                this.tableRef();
                this.state = 7024;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.OPEN_PAR_SYMBOL) {
                    {
                        this.state = 7023;
                        this.identifierListWithParentheses();
                    }
                }
                this.state = 7028;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.MATCH_SYMBOL) {
                    {
                        this.state = 7026;
                        this.match(MySQLParser.MATCH_SYMBOL);
                        this.state = 7027;
                        _localctx._match = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.FULL_SYMBOL || _la === MySQLParser.PARTIAL_SYMBOL || _la === MySQLParser.SIMPLE_SYMBOL)) {
                            _localctx._match = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 7046;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 907, this._ctx)) {
                    case 1:
                        {
                            this.state = 7030;
                            this.match(MySQLParser.ON_SYMBOL);
                            this.state = 7031;
                            _localctx._option = this.match(MySQLParser.UPDATE_SYMBOL);
                            this.state = 7032;
                            this.deleteOption();
                            this.state = 7036;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.ON_SYMBOL) {
                                {
                                    this.state = 7033;
                                    this.match(MySQLParser.ON_SYMBOL);
                                    this.state = 7034;
                                    this.match(MySQLParser.DELETE_SYMBOL);
                                    this.state = 7035;
                                    this.deleteOption();
                                }
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 7038;
                            this.match(MySQLParser.ON_SYMBOL);
                            this.state = 7039;
                            _localctx._option = this.match(MySQLParser.DELETE_SYMBOL);
                            this.state = 7040;
                            this.deleteOption();
                            this.state = 7044;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === MySQLParser.ON_SYMBOL) {
                                {
                                    this.state = 7041;
                                    this.match(MySQLParser.ON_SYMBOL);
                                    this.state = 7042;
                                    this.match(MySQLParser.UPDATE_SYMBOL);
                                    this.state = 7043;
                                    this.deleteOption();
                                }
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    deleteOption() {
        let _localctx = new DeleteOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 878, MySQLParser.RULE_deleteOption);
        let _la;
        try {
            this.state = 7053;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.CASCADE_SYMBOL:
                case MySQLParser.RESTRICT_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7048;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.CASCADE_SYMBOL || _la === MySQLParser.RESTRICT_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case MySQLParser.SET_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7049;
                        this.match(MySQLParser.SET_SYMBOL);
                        this.state = 7050;
                        this.nullLiteral();
                    }
                    break;
                case MySQLParser.NO_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 7051;
                        this.match(MySQLParser.NO_SYMBOL);
                        this.state = 7052;
                        this.match(MySQLParser.ACTION_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    keyList() {
        let _localctx = new KeyListContext(this._ctx, this.state);
        this.enterRule(_localctx, 880, MySQLParser.RULE_keyList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7055;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7056;
                this.keyPart();
                this.state = 7061;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 7057;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 7058;
                            this.keyPart();
                        }
                    }
                    this.state = 7063;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 7064;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    keyPart() {
        let _localctx = new KeyPartContext(this._ctx, this.state);
        this.enterRule(_localctx, 882, MySQLParser.RULE_keyPart);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7066;
                this.identifier();
                this.state = 7068;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.OPEN_PAR_SYMBOL) {
                    {
                        this.state = 7067;
                        this.fieldLength();
                    }
                }
                this.state = 7071;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.ASC_SYMBOL || _la === MySQLParser.DESC_SYMBOL) {
                    {
                        this.state = 7070;
                        this.direction();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    keyListWithExpression() {
        let _localctx = new KeyListWithExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 884, MySQLParser.RULE_keyListWithExpression);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7073;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7074;
                this.keyPartOrExpression();
                this.state = 7079;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 7075;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 7076;
                            this.keyPartOrExpression();
                        }
                    }
                    this.state = 7081;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 7082;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    keyPartOrExpression() {
        let _localctx = new KeyPartOrExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 886, MySQLParser.RULE_keyPartOrExpression);
        let _la;
        try {
            this.state = 7089;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 914, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7084;
                        this.keyPart();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7085;
                        this.exprWithParentheses();
                        this.state = 7087;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.ASC_SYMBOL || _la === MySQLParser.DESC_SYMBOL) {
                            {
                                this.state = 7086;
                                this.direction();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    keyListVariants() {
        let _localctx = new KeyListVariantsContext(this._ctx, this.state);
        this.enterRule(_localctx, 888, MySQLParser.RULE_keyListVariants);
        try {
            this.state = 7095;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 915, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7091;
                        if (!(this.serverVersion >= 80013)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80013");
                        }
                        this.state = 7092;
                        this.keyListWithExpression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7093;
                        if (!(this.serverVersion < 80013)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80013");
                        }
                        this.state = 7094;
                        this.keyList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    indexType() {
        let _localctx = new IndexTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 890, MySQLParser.RULE_indexType);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7097;
                _localctx._algorithm = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.BTREE_SYMBOL || _la === MySQLParser.HASH_SYMBOL || _la === MySQLParser.RTREE_SYMBOL)) {
                    _localctx._algorithm = this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    indexOption() {
        let _localctx = new IndexOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 892, MySQLParser.RULE_indexOption);
        try {
            this.state = 7101;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 916, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7099;
                        this.commonIndexOption();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7100;
                        this.indexTypeClause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    commonIndexOption() {
        let _localctx = new CommonIndexOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 894, MySQLParser.RULE_commonIndexOption);
        let _la;
        try {
            this.state = 7112;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 918, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7103;
                        this.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL);
                        this.state = 7105;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EQUAL_OPERATOR) {
                            {
                                this.state = 7104;
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }
                        this.state = 7107;
                        this.ulong_number();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7108;
                        this.match(MySQLParser.COMMENT_SYMBOL);
                        this.state = 7109;
                        this.textLiteral();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 7110;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 7111;
                        this.visibility();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    visibility() {
        let _localctx = new VisibilityContext(this._ctx, this.state);
        this.enterRule(_localctx, 896, MySQLParser.RULE_visibility);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7114;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.INVISIBLE_SYMBOL || _la === MySQLParser.VISIBLE_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    indexTypeClause() {
        let _localctx = new IndexTypeClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 898, MySQLParser.RULE_indexTypeClause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7116;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.TYPE_SYMBOL || _la === MySQLParser.USING_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7117;
                this.indexType();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fulltextIndexOption() {
        let _localctx = new FulltextIndexOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 900, MySQLParser.RULE_fulltextIndexOption);
        try {
            this.state = 7123;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 919, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7119;
                        this.commonIndexOption();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7120;
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.state = 7121;
                        this.match(MySQLParser.PARSER_SYMBOL);
                        this.state = 7122;
                        this.identifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    spatialIndexOption() {
        let _localctx = new SpatialIndexOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 902, MySQLParser.RULE_spatialIndexOption);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7125;
                this.commonIndexOption();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dataTypeDefinition() {
        let _localctx = new DataTypeDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 904, MySQLParser.RULE_dataTypeDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7127;
                this.dataType();
                this.state = 7128;
                this.match(MySQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dataType() {
        let _localctx = new DataTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 906, MySQLParser.RULE_dataType);
        let _la;
        try {
            this.state = 7277;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 953, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7130;
                        _localctx._type = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.BIGINT_SYMBOL || _la === MySQLParser.INT_SYMBOL || _la === MySQLParser.MEDIUMINT_SYMBOL || _la === MySQLParser.SMALLINT_SYMBOL || _la === MySQLParser.TINYINT_SYMBOL)) {
                            _localctx._type = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 7132;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 920, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7131;
                                    this.fieldLength();
                                }
                                break;
                        }
                        this.state = 7135;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 921, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7134;
                                    this.fieldOptions();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7142;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case MySQLParser.REAL_SYMBOL:
                                {
                                    this.state = 7137;
                                    _localctx._type = this.match(MySQLParser.REAL_SYMBOL);
                                }
                                break;
                            case MySQLParser.DOUBLE_SYMBOL:
                                {
                                    this.state = 7138;
                                    _localctx._type = this.match(MySQLParser.DOUBLE_SYMBOL);
                                    this.state = 7140;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 922, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 7139;
                                                this.match(MySQLParser.PRECISION_SYMBOL);
                                            }
                                            break;
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                        this.state = 7145;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 924, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7144;
                                    this.precision();
                                }
                                break;
                        }
                        this.state = 7148;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 925, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7147;
                                    this.fieldOptions();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 7150;
                        _localctx._type = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.FIXED_SYMBOL || _la === MySQLParser.DECIMAL_SYMBOL || _la === MySQLParser.FLOAT_SYMBOL || _la === MySQLParser.NUMERIC_SYMBOL)) {
                            _localctx._type = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 7152;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 926, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7151;
                                    this.floatOptions();
                                }
                                break;
                        }
                        this.state = 7155;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 927, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7154;
                                    this.fieldOptions();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 7157;
                        _localctx._type = this.match(MySQLParser.BIT_SYMBOL);
                        this.state = 7159;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 928, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7158;
                                    this.fieldLength();
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 7161;
                        _localctx._type = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.BOOL_SYMBOL || _la === MySQLParser.BOOLEAN_SYMBOL)) {
                            _localctx._type = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 7162;
                        _localctx._type = this.match(MySQLParser.CHAR_SYMBOL);
                        this.state = 7164;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 929, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7163;
                                    this.fieldLength();
                                }
                                break;
                        }
                        this.state = 7167;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 930, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7166;
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 7169;
                        this.nchar();
                        this.state = 7171;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 931, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7170;
                                    this.fieldLength();
                                }
                                break;
                        }
                        this.state = 7174;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 932, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7173;
                                    this.match(MySQLParser.BINARY_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 7176;
                        _localctx._type = this.match(MySQLParser.BINARY_SYMBOL);
                        this.state = 7178;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 933, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7177;
                                    this.fieldLength();
                                }
                                break;
                        }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 7183;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case MySQLParser.CHAR_SYMBOL:
                                {
                                    this.state = 7180;
                                    _localctx._type = this.match(MySQLParser.CHAR_SYMBOL);
                                    this.state = 7181;
                                    this.match(MySQLParser.VARYING_SYMBOL);
                                }
                                break;
                            case MySQLParser.VARCHAR_SYMBOL:
                                {
                                    this.state = 7182;
                                    _localctx._type = this.match(MySQLParser.VARCHAR_SYMBOL);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                        this.state = 7185;
                        this.fieldLength();
                        this.state = 7187;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 935, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7186;
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 7199;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 936, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7189;
                                    _localctx._type = this.match(MySQLParser.NATIONAL_SYMBOL);
                                    this.state = 7190;
                                    this.match(MySQLParser.VARCHAR_SYMBOL);
                                }
                                break;
                            case 2:
                                {
                                    this.state = 7191;
                                    _localctx._type = this.match(MySQLParser.NVARCHAR_SYMBOL);
                                }
                                break;
                            case 3:
                                {
                                    this.state = 7192;
                                    _localctx._type = this.match(MySQLParser.NCHAR_SYMBOL);
                                    this.state = 7193;
                                    this.match(MySQLParser.VARCHAR_SYMBOL);
                                }
                                break;
                            case 4:
                                {
                                    this.state = 7194;
                                    _localctx._type = this.match(MySQLParser.NATIONAL_SYMBOL);
                                    this.state = 7195;
                                    this.match(MySQLParser.CHAR_SYMBOL);
                                    this.state = 7196;
                                    this.match(MySQLParser.VARYING_SYMBOL);
                                }
                                break;
                            case 5:
                                {
                                    this.state = 7197;
                                    _localctx._type = this.match(MySQLParser.NCHAR_SYMBOL);
                                    this.state = 7198;
                                    this.match(MySQLParser.VARYING_SYMBOL);
                                }
                                break;
                        }
                        this.state = 7201;
                        this.fieldLength();
                        this.state = 7203;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 937, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7202;
                                    this.match(MySQLParser.BINARY_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 7205;
                        _localctx._type = this.match(MySQLParser.VARBINARY_SYMBOL);
                        this.state = 7206;
                        this.fieldLength();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 7207;
                        _localctx._type = this.match(MySQLParser.YEAR_SYMBOL);
                        this.state = 7209;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 938, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7208;
                                    this.fieldLength();
                                }
                                break;
                        }
                        this.state = 7212;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 939, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7211;
                                    this.fieldOptions();
                                }
                                break;
                        }
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 7214;
                        _localctx._type = this.match(MySQLParser.DATE_SYMBOL);
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 7215;
                        _localctx._type = this.match(MySQLParser.TIME_SYMBOL);
                        this.state = 7217;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 940, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7216;
                                    this.typeDatetimePrecision();
                                }
                                break;
                        }
                    }
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 7219;
                        _localctx._type = this.match(MySQLParser.TIMESTAMP_SYMBOL);
                        this.state = 7221;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 941, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7220;
                                    this.typeDatetimePrecision();
                                }
                                break;
                        }
                    }
                    break;
                case 16:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 7223;
                        _localctx._type = this.match(MySQLParser.DATETIME_SYMBOL);
                        this.state = 7225;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 942, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7224;
                                    this.typeDatetimePrecision();
                                }
                                break;
                        }
                    }
                    break;
                case 17:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 7227;
                        _localctx._type = this.match(MySQLParser.TINYBLOB_SYMBOL);
                    }
                    break;
                case 18:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 7228;
                        _localctx._type = this.match(MySQLParser.BLOB_SYMBOL);
                        this.state = 7230;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 943, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7229;
                                    this.fieldLength();
                                }
                                break;
                        }
                    }
                    break;
                case 19:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 7232;
                        _localctx._type = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.LONGBLOB_SYMBOL || _la === MySQLParser.MEDIUMBLOB_SYMBOL)) {
                            _localctx._type = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 20:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 7233;
                        _localctx._type = this.match(MySQLParser.LONG_SYMBOL);
                        this.state = 7234;
                        this.match(MySQLParser.VARBINARY_SYMBOL);
                    }
                    break;
                case 21:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 7235;
                        _localctx._type = this.match(MySQLParser.LONG_SYMBOL);
                        this.state = 7239;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 944, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7236;
                                    this.match(MySQLParser.CHAR_SYMBOL);
                                    this.state = 7237;
                                    this.match(MySQLParser.VARYING_SYMBOL);
                                }
                                break;
                            case 2:
                                {
                                    this.state = 7238;
                                    this.match(MySQLParser.VARCHAR_SYMBOL);
                                }
                                break;
                        }
                        this.state = 7242;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 945, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7241;
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 22:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 7244;
                        _localctx._type = this.match(MySQLParser.TINYTEXT_SYMBOL);
                        this.state = 7246;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 946, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7245;
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 23:
                    this.enterOuterAlt(_localctx, 23);
                    {
                        this.state = 7248;
                        _localctx._type = this.match(MySQLParser.TEXT_SYMBOL);
                        this.state = 7250;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 947, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7249;
                                    this.fieldLength();
                                }
                                break;
                        }
                        this.state = 7253;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 948, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7252;
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 24:
                    this.enterOuterAlt(_localctx, 24);
                    {
                        this.state = 7255;
                        _localctx._type = this.match(MySQLParser.MEDIUMTEXT_SYMBOL);
                        this.state = 7257;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 949, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7256;
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 25:
                    this.enterOuterAlt(_localctx, 25);
                    {
                        this.state = 7259;
                        _localctx._type = this.match(MySQLParser.LONGTEXT_SYMBOL);
                        this.state = 7261;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 950, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7260;
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 26:
                    this.enterOuterAlt(_localctx, 26);
                    {
                        this.state = 7263;
                        _localctx._type = this.match(MySQLParser.ENUM_SYMBOL);
                        this.state = 7264;
                        this.stringList();
                        this.state = 7266;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 951, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7265;
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 27:
                    this.enterOuterAlt(_localctx, 27);
                    {
                        this.state = 7268;
                        _localctx._type = this.match(MySQLParser.SET_SYMBOL);
                        this.state = 7269;
                        this.stringList();
                        this.state = 7271;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 952, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7270;
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 28:
                    this.enterOuterAlt(_localctx, 28);
                    {
                        this.state = 7273;
                        _localctx._type = this.match(MySQLParser.SERIAL_SYMBOL);
                    }
                    break;
                case 29:
                    this.enterOuterAlt(_localctx, 29);
                    {
                        this.state = 7274;
                        if (!(this.serverVersion >= 50708)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50708");
                        }
                        this.state = 7275;
                        _localctx._type = this.match(MySQLParser.JSON_SYMBOL);
                    }
                    break;
                case 30:
                    this.enterOuterAlt(_localctx, 30);
                    {
                        this.state = 7276;
                        _localctx._type = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(((((_la - 151)) & ~0x1F) === 0 && ((1 << (_la - 151)) & ((1 << (MySQLParser.GEOMETRY_SYMBOL - 151)) | (1 << (MySQLParser.GEOMETRYCOLLECTION_SYMBOL - 151)) | (1 << (MySQLParser.LINESTRING_SYMBOL - 151)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (MySQLParser.MULTILINESTRING_SYMBOL - 224)) | (1 << (MySQLParser.MULTIPOINT_SYMBOL - 224)) | (1 << (MySQLParser.MULTIPOLYGON_SYMBOL - 224)))) !== 0) || _la === MySQLParser.POINT_SYMBOL || _la === MySQLParser.POLYGON_SYMBOL)) {
                            _localctx._type = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    nchar() {
        let _localctx = new NcharContext(this._ctx, this.state);
        this.enterRule(_localctx, 908, MySQLParser.RULE_nchar);
        try {
            this.state = 7282;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.NCHAR_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7279;
                        _localctx._type = this.match(MySQLParser.NCHAR_SYMBOL);
                    }
                    break;
                case MySQLParser.NATIONAL_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7280;
                        _localctx._type = this.match(MySQLParser.NATIONAL_SYMBOL);
                        this.state = 7281;
                        this.match(MySQLParser.CHAR_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    realType() {
        let _localctx = new RealTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 910, MySQLParser.RULE_realType);
        try {
            this.state = 7289;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.REAL_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7284;
                        _localctx._type = this.match(MySQLParser.REAL_SYMBOL);
                    }
                    break;
                case MySQLParser.DOUBLE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7285;
                        _localctx._type = this.match(MySQLParser.DOUBLE_SYMBOL);
                        this.state = 7287;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 955, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7286;
                                    this.match(MySQLParser.PRECISION_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fieldLength() {
        let _localctx = new FieldLengthContext(this._ctx, this.state);
        this.enterRule(_localctx, 912, MySQLParser.RULE_fieldLength);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7291;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7294;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 957, this._ctx)) {
                    case 1:
                        {
                            this.state = 7292;
                            this.real_ulonglong_number();
                        }
                        break;
                    case 2:
                        {
                            this.state = 7293;
                            this.match(MySQLParser.DECIMAL_NUMBER);
                        }
                        break;
                }
                this.state = 7296;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fieldOptions() {
        let _localctx = new FieldOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 914, MySQLParser.RULE_fieldOptions);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7299;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 7298;
                                    _la = this._input.LA(1);
                                    if (!(_la === MySQLParser.SIGNED_SYMBOL || _la === MySQLParser.UNSIGNED_SYMBOL || _la === MySQLParser.ZEROFILL_SYMBOL)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 7301;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 958, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    charsetWithOptBinary() {
        let _localctx = new CharsetWithOptBinaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 916, MySQLParser.RULE_charsetWithOptBinary);
        try {
            this.state = 7317;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 961, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7303;
                        this.ascii();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7304;
                        this.unicode();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 7305;
                        this.match(MySQLParser.BYTE_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 7306;
                        this.charset();
                        this.state = 7307;
                        this.charsetName();
                        this.state = 7309;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 959, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7308;
                                    this.match(MySQLParser.BINARY_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 7311;
                        this.match(MySQLParser.BINARY_SYMBOL);
                        this.state = 7315;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 960, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7312;
                                    this.charset();
                                    this.state = 7313;
                                    this.charsetName();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ascii() {
        let _localctx = new AsciiContext(this._ctx, this.state);
        this.enterRule(_localctx, 918, MySQLParser.RULE_ascii);
        try {
            this.state = 7325;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.ASCII_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7319;
                        this.match(MySQLParser.ASCII_SYMBOL);
                        this.state = 7321;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 962, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7320;
                                    this.match(MySQLParser.BINARY_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case MySQLParser.BINARY_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7323;
                        this.match(MySQLParser.BINARY_SYMBOL);
                        this.state = 7324;
                        this.match(MySQLParser.ASCII_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    unicode() {
        let _localctx = new UnicodeContext(this._ctx, this.state);
        this.enterRule(_localctx, 920, MySQLParser.RULE_unicode);
        try {
            this.state = 7333;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.UNICODE_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7327;
                        this.match(MySQLParser.UNICODE_SYMBOL);
                        this.state = 7329;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 964, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7328;
                                    this.match(MySQLParser.BINARY_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case MySQLParser.BINARY_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7331;
                        this.match(MySQLParser.BINARY_SYMBOL);
                        this.state = 7332;
                        this.match(MySQLParser.UNICODE_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    wsNumCodepoints() {
        let _localctx = new WsNumCodepointsContext(this._ctx, this.state);
        this.enterRule(_localctx, 922, MySQLParser.RULE_wsNumCodepoints);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7335;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7336;
                this.real_ulong_number();
                this.state = 7337;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeDatetimePrecision() {
        let _localctx = new TypeDatetimePrecisionContext(this._ctx, this.state);
        this.enterRule(_localctx, 924, MySQLParser.RULE_typeDatetimePrecision);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7339;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7340;
                this.match(MySQLParser.INT_NUMBER);
                this.state = 7341;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    charsetName() {
        let _localctx = new CharsetNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 926, MySQLParser.RULE_charsetName);
        try {
            this.state = 7347;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 966, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7343;
                        this.textOrIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7344;
                        this.match(MySQLParser.BINARY_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 7345;
                        if (!(this.serverVersion < 80011)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80011");
                        }
                        this.state = 7346;
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    collationName() {
        let _localctx = new CollationNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 928, MySQLParser.RULE_collationName);
        try {
            this.state = 7354;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 967, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7349;
                        this.textOrIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7350;
                        if (!(this.serverVersion < 80011)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80011");
                        }
                        this.state = 7351;
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 7352;
                        if (!(this.serverVersion >= 80018)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80018");
                        }
                        this.state = 7353;
                        this.match(MySQLParser.BINARY_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createTableOptions() {
        let _localctx = new CreateTableOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 930, MySQLParser.RULE_createTableOptions);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7356;
                this.createTableOption();
                this.state = 7363;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 969, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 7358;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 968, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 7357;
                                            this.match(MySQLParser.COMMA_SYMBOL);
                                        }
                                        break;
                                }
                                this.state = 7360;
                                this.createTableOption();
                            }
                        }
                    }
                    this.state = 7365;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 969, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createTableOptionsSpaceSeparated() {
        let _localctx = new CreateTableOptionsSpaceSeparatedContext(this._ctx, this.state);
        this.enterRule(_localctx, 932, MySQLParser.RULE_createTableOptionsSpaceSeparated);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7367;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 7366;
                                    this.createTableOption();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 7369;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 970, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createTableOption() {
        let _localctx = new CreateTableOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 934, MySQLParser.RULE_createTableOption);
        let _la;
        try {
            this.state = 7500;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 995, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7371;
                        _localctx._option = this.match(MySQLParser.ENGINE_SYMBOL);
                        this.state = 7373;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 971, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7372;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.state = 7375;
                        this.engineRef();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7376;
                        if (!(this.serverVersion >= 80014)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                        }
                        this.state = 7377;
                        _localctx._option = this.match(MySQLParser.SECONDARY_ENGINE_SYMBOL);
                        this.state = 7379;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 972, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7378;
                                    this.equal();
                                }
                                break;
                        }
                        this.state = 7383;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 973, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7381;
                                    this.match(MySQLParser.NULL_SYMBOL);
                                }
                                break;
                            case 2:
                                {
                                    this.state = 7382;
                                    this.textOrIdentifier();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 7385;
                        _localctx._option = this.match(MySQLParser.MAX_ROWS_SYMBOL);
                        this.state = 7387;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EQUAL_OPERATOR) {
                            {
                                this.state = 7386;
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }
                        this.state = 7389;
                        this.ulonglong_number();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 7390;
                        _localctx._option = this.match(MySQLParser.MIN_ROWS_SYMBOL);
                        this.state = 7392;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EQUAL_OPERATOR) {
                            {
                                this.state = 7391;
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }
                        this.state = 7394;
                        this.ulonglong_number();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 7395;
                        _localctx._option = this.match(MySQLParser.AVG_ROW_LENGTH_SYMBOL);
                        this.state = 7397;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EQUAL_OPERATOR) {
                            {
                                this.state = 7396;
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }
                        this.state = 7399;
                        this.ulong_number();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 7400;
                        _localctx._option = this.match(MySQLParser.PASSWORD_SYMBOL);
                        this.state = 7402;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 977, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7401;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.state = 7404;
                        this.textStringLiteral();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 7405;
                        _localctx._option = this.match(MySQLParser.COMMENT_SYMBOL);
                        this.state = 7407;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 978, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7406;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.state = 7409;
                        this.textStringLiteral();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 7410;
                        if (!(this.serverVersion >= 50708)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50708");
                        }
                        this.state = 7411;
                        _localctx._option = this.match(MySQLParser.COMPRESSION_SYMBOL);
                        this.state = 7413;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 979, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7412;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.state = 7415;
                        this.textString();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 7416;
                        if (!(this.serverVersion >= 50711)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50711");
                        }
                        this.state = 7417;
                        _localctx._option = this.match(MySQLParser.ENCRYPTION_SYMBOL);
                        this.state = 7419;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 980, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7418;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.state = 7421;
                        this.textString();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 7422;
                        _localctx._option = this.match(MySQLParser.AUTO_INCREMENT_SYMBOL);
                        this.state = 7424;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EQUAL_OPERATOR) {
                            {
                                this.state = 7423;
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }
                        this.state = 7426;
                        this.ulonglong_number();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 7427;
                        _localctx._option = this.match(MySQLParser.PACK_KEYS_SYMBOL);
                        this.state = 7429;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EQUAL_OPERATOR) {
                            {
                                this.state = 7428;
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }
                        this.state = 7431;
                        this.ternaryOption();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 7432;
                        _localctx._option = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & ((1 << (MySQLParser.STATS_AUTO_RECALC_SYMBOL - 324)) | (1 << (MySQLParser.STATS_PERSISTENT_SYMBOL - 324)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES_SYMBOL - 324)))) !== 0))) {
                            _localctx._option = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 7434;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EQUAL_OPERATOR) {
                            {
                                this.state = 7433;
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }
                        this.state = 7436;
                        this.ternaryOption();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 7437;
                        _localctx._option = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.CHECKSUM_SYMBOL || _la === MySQLParser.TABLE_CHECKSUM_SYMBOL)) {
                            _localctx._option = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 7439;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EQUAL_OPERATOR) {
                            {
                                this.state = 7438;
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }
                        this.state = 7441;
                        this.ulong_number();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 7442;
                        _localctx._option = this.match(MySQLParser.DELAY_KEY_WRITE_SYMBOL);
                        this.state = 7444;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EQUAL_OPERATOR) {
                            {
                                this.state = 7443;
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }
                        this.state = 7446;
                        this.ulong_number();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 7447;
                        _localctx._option = this.match(MySQLParser.ROW_FORMAT_SYMBOL);
                        this.state = 7449;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EQUAL_OPERATOR) {
                            {
                                this.state = 7448;
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }
                        this.state = 7451;
                        _localctx._format = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.COMPACT_SYMBOL || _la === MySQLParser.COMPRESSED_SYMBOL || _la === MySQLParser.DYNAMIC_SYMBOL || _la === MySQLParser.FIXED_SYMBOL || _la === MySQLParser.REDUNDANT_SYMBOL || _la === MySQLParser.DEFAULT_SYMBOL)) {
                            _localctx._format = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 16:
                    this.enterOuterAlt(_localctx, 16);
                    {
                        this.state = 7452;
                        _localctx._option = this.match(MySQLParser.UNION_SYMBOL);
                        this.state = 7454;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EQUAL_OPERATOR) {
                            {
                                this.state = 7453;
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }
                        this.state = 7456;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 7457;
                        this.tableRefList();
                        this.state = 7458;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 17:
                    this.enterOuterAlt(_localctx, 17);
                    {
                        this.state = 7460;
                        this.defaultCharset();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(_localctx, 18);
                    {
                        this.state = 7461;
                        this.defaultCollation();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(_localctx, 19);
                    {
                        this.state = 7462;
                        _localctx._option = this.match(MySQLParser.INSERT_METHOD_SYMBOL);
                        this.state = 7464;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EQUAL_OPERATOR) {
                            {
                                this.state = 7463;
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }
                        this.state = 7466;
                        _localctx._method = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.NO_SYMBOL || _la === MySQLParser.FIRST_SYMBOL || _la === MySQLParser.LAST_SYMBOL)) {
                            _localctx._method = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 20:
                    this.enterOuterAlt(_localctx, 20);
                    {
                        this.state = 7467;
                        _localctx._option = this.match(MySQLParser.DATA_SYMBOL);
                        this.state = 7468;
                        this.match(MySQLParser.DIRECTORY_SYMBOL);
                        this.state = 7470;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 989, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7469;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.state = 7472;
                        this.textString();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(_localctx, 21);
                    {
                        this.state = 7473;
                        _localctx._option = this.match(MySQLParser.INDEX_SYMBOL);
                        this.state = 7474;
                        this.match(MySQLParser.DIRECTORY_SYMBOL);
                        this.state = 7476;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 990, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7475;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.state = 7478;
                        this.textString();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(_localctx, 22);
                    {
                        this.state = 7479;
                        _localctx._option = this.match(MySQLParser.TABLESPACE_SYMBOL);
                        this.state = 7485;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 992, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7480;
                                    if (!(this.serverVersion >= 50707)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50707");
                                    }
                                    this.state = 7482;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 991, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 7481;
                                                this.match(MySQLParser.EQUAL_OPERATOR);
                                            }
                                            break;
                                    }
                                }
                                break;
                            case 2:
                                // tslint:disable-next-line:no-empty
                                {
                                }
                                break;
                        }
                        this.state = 7487;
                        this.identifier();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(_localctx, 23);
                    {
                        this.state = 7488;
                        _localctx._option = this.match(MySQLParser.STORAGE_SYMBOL);
                        this.state = 7489;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.DISK_SYMBOL || _la === MySQLParser.MEMORY_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 24:
                    this.enterOuterAlt(_localctx, 24);
                    {
                        this.state = 7490;
                        _localctx._option = this.match(MySQLParser.CONNECTION_SYMBOL);
                        this.state = 7492;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 993, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7491;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.state = 7494;
                        this.textString();
                    }
                    break;
                case 25:
                    this.enterOuterAlt(_localctx, 25);
                    {
                        this.state = 7495;
                        _localctx._option = this.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL);
                        this.state = 7497;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EQUAL_OPERATOR) {
                            {
                                this.state = 7496;
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }
                        this.state = 7499;
                        this.ulong_number();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ternaryOption() {
        let _localctx = new TernaryOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 936, MySQLParser.RULE_ternaryOption);
        try {
            this.state = 7504;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.INT_NUMBER:
                case MySQLParser.LONG_NUMBER:
                case MySQLParser.ULONGLONG_NUMBER:
                case MySQLParser.HEX_NUMBER:
                case MySQLParser.DECIMAL_NUMBER:
                case MySQLParser.FLOAT_NUMBER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7502;
                        this.ulong_number();
                    }
                    break;
                case MySQLParser.DEFAULT_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7503;
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    defaultCollation() {
        let _localctx = new DefaultCollationContext(this._ctx, this.state);
        this.enterRule(_localctx, 938, MySQLParser.RULE_defaultCollation);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7507;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.DEFAULT_SYMBOL) {
                    {
                        this.state = 7506;
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                }
                this.state = 7509;
                this.match(MySQLParser.COLLATE_SYMBOL);
                this.state = 7511;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 998, this._ctx)) {
                    case 1:
                        {
                            this.state = 7510;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.state = 7513;
                this.collationName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    defaultEncryption() {
        let _localctx = new DefaultEncryptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 940, MySQLParser.RULE_defaultEncryption);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7516;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.DEFAULT_SYMBOL) {
                    {
                        this.state = 7515;
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                }
                this.state = 7518;
                this.match(MySQLParser.ENCRYPTION_SYMBOL);
                this.state = 7520;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1000, this._ctx)) {
                    case 1:
                        {
                            this.state = 7519;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.state = 7522;
                this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    defaultCharset() {
        let _localctx = new DefaultCharsetContext(this._ctx, this.state);
        this.enterRule(_localctx, 942, MySQLParser.RULE_defaultCharset);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7525;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.DEFAULT_SYMBOL) {
                    {
                        this.state = 7524;
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                }
                this.state = 7527;
                this.charset();
                this.state = 7529;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1002, this._ctx)) {
                    case 1:
                        {
                            this.state = 7528;
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.state = 7531;
                this.charsetName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    partitionClause() {
        let _localctx = new PartitionClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 944, MySQLParser.RULE_partitionClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7533;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 7534;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 7535;
                this.partitionTypeDef();
                this.state = 7538;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1003, this._ctx)) {
                    case 1:
                        {
                            this.state = 7536;
                            this.match(MySQLParser.PARTITIONS_SYMBOL);
                            this.state = 7537;
                            this.real_ulong_number();
                        }
                        break;
                }
                this.state = 7541;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1004, this._ctx)) {
                    case 1:
                        {
                            this.state = 7540;
                            this.subPartitions();
                        }
                        break;
                }
                this.state = 7544;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1005, this._ctx)) {
                    case 1:
                        {
                            this.state = 7543;
                            this.partitionDefinitions();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    partitionTypeDef() {
        let _localctx = new PartitionTypeDefContext(this._ctx, this.state);
        this.enterRule(_localctx, 946, MySQLParser.RULE_partitionTypeDef);
        let _la;
        try {
            this.state = 7579;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1012, this._ctx)) {
                case 1:
                    _localctx = new PartitionDefKeyContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7547;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.LINEAR_SYMBOL) {
                            {
                                this.state = 7546;
                                this.match(MySQLParser.LINEAR_SYMBOL);
                            }
                        }
                        this.state = 7549;
                        this.match(MySQLParser.KEY_SYMBOL);
                        this.state = 7551;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 1007, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7550;
                                    this.partitionKeyAlgorithm();
                                }
                                break;
                        }
                        this.state = 7553;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 7555;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 1008, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7554;
                                    this.identifierList();
                                }
                                break;
                        }
                        this.state = 7557;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    _localctx = new PartitionDefHashContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7559;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.LINEAR_SYMBOL) {
                            {
                                this.state = 7558;
                                this.match(MySQLParser.LINEAR_SYMBOL);
                            }
                        }
                        this.state = 7561;
                        this.match(MySQLParser.HASH_SYMBOL);
                        this.state = 7562;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 7563;
                        this.bitExpr(0);
                        this.state = 7564;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 3:
                    _localctx = new PartitionDefRangeListContext(_localctx);
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 7566;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.LIST_SYMBOL || _la === MySQLParser.RANGE_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 7577;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case MySQLParser.OPEN_PAR_SYMBOL:
                                {
                                    this.state = 7567;
                                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                    this.state = 7568;
                                    this.bitExpr(0);
                                    this.state = 7569;
                                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                }
                                break;
                            case MySQLParser.COLUMNS_SYMBOL:
                                {
                                    this.state = 7571;
                                    this.match(MySQLParser.COLUMNS_SYMBOL);
                                    this.state = 7572;
                                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                    this.state = 7574;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 1010, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 7573;
                                                this.identifierList();
                                            }
                                            break;
                                    }
                                    this.state = 7576;
                                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    subPartitions() {
        let _localctx = new SubPartitionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 948, MySQLParser.RULE_subPartitions);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7581;
                this.match(MySQLParser.SUBPARTITION_SYMBOL);
                this.state = 7582;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 7584;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.LINEAR_SYMBOL) {
                    {
                        this.state = 7583;
                        this.match(MySQLParser.LINEAR_SYMBOL);
                    }
                }
                this.state = 7596;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case MySQLParser.HASH_SYMBOL:
                        {
                            this.state = 7586;
                            this.match(MySQLParser.HASH_SYMBOL);
                            this.state = 7587;
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.state = 7588;
                            this.bitExpr(0);
                            this.state = 7589;
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case MySQLParser.KEY_SYMBOL:
                        {
                            this.state = 7591;
                            this.match(MySQLParser.KEY_SYMBOL);
                            this.state = 7593;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 1014, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 7592;
                                        this.partitionKeyAlgorithm();
                                    }
                                    break;
                            }
                            this.state = 7595;
                            this.identifierListWithParentheses();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 7600;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1016, this._ctx)) {
                    case 1:
                        {
                            this.state = 7598;
                            this.match(MySQLParser.SUBPARTITIONS_SYMBOL);
                            this.state = 7599;
                            this.real_ulong_number();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    partitionKeyAlgorithm() {
        let _localctx = new PartitionKeyAlgorithmContext(this._ctx, this.state);
        this.enterRule(_localctx, 950, MySQLParser.RULE_partitionKeyAlgorithm);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7602;
                if (!(this.serverVersion >= 50700)) {
                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50700");
                }
                this.state = 7603;
                this.match(MySQLParser.ALGORITHM_SYMBOL);
                this.state = 7604;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 7605;
                this.real_ulong_number();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    partitionDefinitions() {
        let _localctx = new PartitionDefinitionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 952, MySQLParser.RULE_partitionDefinitions);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7607;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7608;
                this.partitionDefinition();
                this.state = 7613;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 7609;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 7610;
                            this.partitionDefinition();
                        }
                    }
                    this.state = 7615;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 7616;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    partitionDefinition() {
        let _localctx = new PartitionDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 954, MySQLParser.RULE_partitionDefinition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7618;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 7619;
                this.identifier();
                this.state = 7630;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1019, this._ctx)) {
                    case 1:
                        {
                            this.state = 7620;
                            this.match(MySQLParser.VALUES_SYMBOL);
                            this.state = 7621;
                            this.match(MySQLParser.LESS_SYMBOL);
                            this.state = 7622;
                            this.match(MySQLParser.THAN_SYMBOL);
                            this.state = 7625;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case MySQLParser.OPEN_PAR_SYMBOL:
                                    {
                                        this.state = 7623;
                                        this.partitionValueItemListParen();
                                    }
                                    break;
                                case MySQLParser.MAXVALUE_SYMBOL:
                                    {
                                        this.state = 7624;
                                        this.match(MySQLParser.MAXVALUE_SYMBOL);
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 7627;
                            this.match(MySQLParser.VALUES_SYMBOL);
                            this.state = 7628;
                            this.match(MySQLParser.IN_SYMBOL);
                            this.state = 7629;
                            this.partitionValuesIn();
                        }
                        break;
                }
                this.state = 7635;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMENT_SYMBOL || _la === MySQLParser.DATA_SYMBOL || _la === MySQLParser.ENGINE_SYMBOL || _la === MySQLParser.MAX_ROWS_SYMBOL || _la === MySQLParser.MIN_ROWS_SYMBOL || _la === MySQLParser.NODEGROUP_SYMBOL || _la === MySQLParser.STORAGE_SYMBOL || _la === MySQLParser.TABLESPACE_SYMBOL || _la === MySQLParser.INDEX_SYMBOL) {
                    {
                        {
                            this.state = 7632;
                            this.partitionOption();
                        }
                    }
                    this.state = 7637;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 7649;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === MySQLParser.OPEN_PAR_SYMBOL) {
                    {
                        this.state = 7638;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 7639;
                        this.subpartitionDefinition();
                        this.state = 7644;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.COMMA_SYMBOL) {
                            {
                                {
                                    this.state = 7640;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.state = 7641;
                                    this.subpartitionDefinition();
                                }
                            }
                            this.state = 7646;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 7647;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    partitionValuesIn() {
        let _localctx = new PartitionValuesInContext(this._ctx, this.state);
        this.enterRule(_localctx, 956, MySQLParser.RULE_partitionValuesIn);
        let _la;
        try {
            this.state = 7663;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1024, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7651;
                        this.partitionValueItemListParen();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7652;
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.state = 7653;
                        this.partitionValueItemListParen();
                        this.state = 7658;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === MySQLParser.COMMA_SYMBOL) {
                            {
                                {
                                    this.state = 7654;
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.state = 7655;
                                    this.partitionValueItemListParen();
                                }
                            }
                            this.state = 7660;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 7661;
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    partitionOption() {
        let _localctx = new PartitionOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 958, MySQLParser.RULE_partitionOption);
        let _la;
        try {
            this.state = 7699;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.TABLESPACE_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7665;
                        _localctx._option = this.match(MySQLParser.TABLESPACE_SYMBOL);
                        this.state = 7667;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 1025, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7666;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.state = 7669;
                        this.identifier();
                    }
                    break;
                case MySQLParser.ENGINE_SYMBOL:
                case MySQLParser.STORAGE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7671;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.STORAGE_SYMBOL) {
                            {
                                this.state = 7670;
                                this.match(MySQLParser.STORAGE_SYMBOL);
                            }
                        }
                        this.state = 7673;
                        _localctx._option = this.match(MySQLParser.ENGINE_SYMBOL);
                        this.state = 7675;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 1027, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7674;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.state = 7677;
                        this.engineRef();
                    }
                    break;
                case MySQLParser.NODEGROUP_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 7678;
                        _localctx._option = this.match(MySQLParser.NODEGROUP_SYMBOL);
                        this.state = 7680;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EQUAL_OPERATOR) {
                            {
                                this.state = 7679;
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }
                        this.state = 7682;
                        this.real_ulong_number();
                    }
                    break;
                case MySQLParser.MAX_ROWS_SYMBOL:
                case MySQLParser.MIN_ROWS_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 7683;
                        _localctx._option = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.MAX_ROWS_SYMBOL || _la === MySQLParser.MIN_ROWS_SYMBOL)) {
                            _localctx._option = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 7685;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.EQUAL_OPERATOR) {
                            {
                                this.state = 7684;
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }
                        this.state = 7687;
                        this.real_ulong_number();
                    }
                    break;
                case MySQLParser.DATA_SYMBOL:
                case MySQLParser.INDEX_SYMBOL:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 7688;
                        _localctx._option = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.DATA_SYMBOL || _la === MySQLParser.INDEX_SYMBOL)) {
                            _localctx._option = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 7689;
                        this.match(MySQLParser.DIRECTORY_SYMBOL);
                        this.state = 7691;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 1030, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7690;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.state = 7693;
                        this.textLiteral();
                    }
                    break;
                case MySQLParser.COMMENT_SYMBOL:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 7694;
                        _localctx._option = this.match(MySQLParser.COMMENT_SYMBOL);
                        this.state = 7696;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 1031, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7695;
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.state = 7698;
                        this.textLiteral();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    subpartitionDefinition() {
        let _localctx = new SubpartitionDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 960, MySQLParser.RULE_subpartitionDefinition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7701;
                this.match(MySQLParser.SUBPARTITION_SYMBOL);
                this.state = 7702;
                this.textOrIdentifier();
                this.state = 7706;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMENT_SYMBOL || _la === MySQLParser.DATA_SYMBOL || _la === MySQLParser.ENGINE_SYMBOL || _la === MySQLParser.MAX_ROWS_SYMBOL || _la === MySQLParser.MIN_ROWS_SYMBOL || _la === MySQLParser.NODEGROUP_SYMBOL || _la === MySQLParser.STORAGE_SYMBOL || _la === MySQLParser.TABLESPACE_SYMBOL || _la === MySQLParser.INDEX_SYMBOL) {
                    {
                        {
                            this.state = 7703;
                            this.partitionOption();
                        }
                    }
                    this.state = 7708;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    partitionValueItemListParen() {
        let _localctx = new PartitionValueItemListParenContext(this._ctx, this.state);
        this.enterRule(_localctx, 962, MySQLParser.RULE_partitionValueItemListParen);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7709;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7710;
                this.partitionValueItem();
                this.state = 7715;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 7711;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 7712;
                            this.partitionValueItem();
                        }
                    }
                    this.state = 7717;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 7718;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    partitionValueItem() {
        let _localctx = new PartitionValueItemContext(this._ctx, this.state);
        this.enterRule(_localctx, 964, MySQLParser.RULE_partitionValueItem);
        try {
            this.state = 7722;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1035, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7720;
                        this.bitExpr(0);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7721;
                        this.match(MySQLParser.MAXVALUE_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    definerClause() {
        let _localctx = new DefinerClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 966, MySQLParser.RULE_definerClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7724;
                this.match(MySQLParser.DEFINER_SYMBOL);
                this.state = 7725;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 7726;
                this.user();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ifExists() {
        let _localctx = new IfExistsContext(this._ctx, this.state);
        this.enterRule(_localctx, 968, MySQLParser.RULE_ifExists);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7728;
                this.match(MySQLParser.IF_SYMBOL);
                this.state = 7729;
                this.match(MySQLParser.EXISTS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ifNotExists() {
        let _localctx = new IfNotExistsContext(this._ctx, this.state);
        this.enterRule(_localctx, 970, MySQLParser.RULE_ifNotExists);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7731;
                this.match(MySQLParser.IF_SYMBOL);
                this.state = 7732;
                this.notRule();
                this.state = 7733;
                this.match(MySQLParser.EXISTS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    procedureParameter() {
        let _localctx = new ProcedureParameterContext(this._ctx, this.state);
        this.enterRule(_localctx, 972, MySQLParser.RULE_procedureParameter);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7736;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1036, this._ctx)) {
                    case 1:
                        {
                            this.state = 7735;
                            _localctx._type = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === MySQLParser.INOUT_SYMBOL || _la === MySQLParser.IN_SYMBOL || _la === MySQLParser.OUT_SYMBOL)) {
                                _localctx._type = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                }
                this.state = 7738;
                this.functionParameter();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    functionParameter() {
        let _localctx = new FunctionParameterContext(this._ctx, this.state);
        this.enterRule(_localctx, 974, MySQLParser.RULE_functionParameter);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7740;
                this.parameterName();
                this.state = 7741;
                this.typeWithOptCollate();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    collate() {
        let _localctx = new CollateContext(this._ctx, this.state);
        this.enterRule(_localctx, 976, MySQLParser.RULE_collate);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7743;
                this.match(MySQLParser.COLLATE_SYMBOL);
                this.state = 7744;
                this.collationName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeWithOptCollate() {
        let _localctx = new TypeWithOptCollateContext(this._ctx, this.state);
        this.enterRule(_localctx, 978, MySQLParser.RULE_typeWithOptCollate);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7746;
                this.dataType();
                this.state = 7748;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1037, this._ctx)) {
                    case 1:
                        {
                            this.state = 7747;
                            this.collate();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    schemaIdentifierPair() {
        let _localctx = new SchemaIdentifierPairContext(this._ctx, this.state);
        this.enterRule(_localctx, 980, MySQLParser.RULE_schemaIdentifierPair);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7750;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7751;
                this.schemaRef();
                this.state = 7752;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 7753;
                this.schemaRef();
                this.state = 7754;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    viewRefList() {
        let _localctx = new ViewRefListContext(this._ctx, this.state);
        this.enterRule(_localctx, 982, MySQLParser.RULE_viewRefList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7756;
                this.viewRef();
                this.state = 7761;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 7757;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 7758;
                            this.viewRef();
                        }
                    }
                    this.state = 7763;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    updateList() {
        let _localctx = new UpdateListContext(this._ctx, this.state);
        this.enterRule(_localctx, 984, MySQLParser.RULE_updateList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7764;
                this.updateElement();
                this.state = 7769;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 1039, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 7765;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 7766;
                                this.updateElement();
                            }
                        }
                    }
                    this.state = 7771;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 1039, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    updateElement() {
        let _localctx = new UpdateElementContext(this._ctx, this.state);
        this.enterRule(_localctx, 986, MySQLParser.RULE_updateElement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7772;
                this.columnRef();
                this.state = 7773;
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.state = 7776;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1040, this._ctx)) {
                    case 1:
                        {
                            this.state = 7774;
                            this.expr(0);
                        }
                        break;
                    case 2:
                        {
                            this.state = 7775;
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    charsetClause() {
        let _localctx = new CharsetClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 988, MySQLParser.RULE_charsetClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7778;
                this.charset();
                this.state = 7779;
                this.charsetName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fieldsClause() {
        let _localctx = new FieldsClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 990, MySQLParser.RULE_fieldsClause);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7781;
                this.match(MySQLParser.COLUMNS_SYMBOL);
                this.state = 7783;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 7782;
                                    this.fieldTerm();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 7785;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 1041, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fieldTerm() {
        let _localctx = new FieldTermContext(this._ctx, this.state);
        this.enterRule(_localctx, 992, MySQLParser.RULE_fieldTerm);
        let _la;
        try {
            this.state = 7799;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.TERMINATED_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7787;
                        this.match(MySQLParser.TERMINATED_SYMBOL);
                        this.state = 7788;
                        this.match(MySQLParser.BY_SYMBOL);
                        this.state = 7789;
                        this.textString();
                    }
                    break;
                case MySQLParser.ENCLOSED_SYMBOL:
                case MySQLParser.OPTIONALLY_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7791;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.OPTIONALLY_SYMBOL) {
                            {
                                this.state = 7790;
                                this.match(MySQLParser.OPTIONALLY_SYMBOL);
                            }
                        }
                        this.state = 7793;
                        this.match(MySQLParser.ENCLOSED_SYMBOL);
                        this.state = 7794;
                        this.match(MySQLParser.BY_SYMBOL);
                        this.state = 7795;
                        this.textString();
                    }
                    break;
                case MySQLParser.ESCAPED_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 7796;
                        this.match(MySQLParser.ESCAPED_SYMBOL);
                        this.state = 7797;
                        this.match(MySQLParser.BY_SYMBOL);
                        this.state = 7798;
                        this.textString();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    linesClause() {
        let _localctx = new LinesClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 994, MySQLParser.RULE_linesClause);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7801;
                this.match(MySQLParser.LINES_SYMBOL);
                this.state = 7803;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 7802;
                                    this.lineTerm();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 7805;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 1044, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lineTerm() {
        let _localctx = new LineTermContext(this._ctx, this.state);
        this.enterRule(_localctx, 996, MySQLParser.RULE_lineTerm);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7807;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.STARTING_SYMBOL || _la === MySQLParser.TERMINATED_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7808;
                this.match(MySQLParser.BY_SYMBOL);
                this.state = 7809;
                this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    userList() {
        let _localctx = new UserListContext(this._ctx, this.state);
        this.enterRule(_localctx, 998, MySQLParser.RULE_userList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7811;
                this.user();
                this.state = 7816;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 1045, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 7812;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 7813;
                                this.user();
                            }
                        }
                    }
                    this.state = 7818;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 1045, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createUserList() {
        let _localctx = new CreateUserListContext(this._ctx, this.state);
        this.enterRule(_localctx, 1000, MySQLParser.RULE_createUserList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7819;
                this.createUserEntry();
                this.state = 7824;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 1046, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 7820;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 7821;
                                this.createUserEntry();
                            }
                        }
                    }
                    this.state = 7826;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 1046, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterUserList() {
        let _localctx = new AlterUserListContext(this._ctx, this.state);
        this.enterRule(_localctx, 1002, MySQLParser.RULE_alterUserList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7827;
                this.alterUserEntry();
                this.state = 7832;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 1047, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 7828;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 7829;
                                this.alterUserEntry();
                            }
                        }
                    }
                    this.state = 7834;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 1047, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createUserEntry() {
        let _localctx = new CreateUserEntryContext(this._ctx, this.state);
        this.enterRule(_localctx, 1004, MySQLParser.RULE_createUserEntry);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7835;
                this.user();
                this.state = 7862;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1052, this._ctx)) {
                    case 1:
                        {
                            this.state = 7836;
                            this.match(MySQLParser.IDENTIFIED_SYMBOL);
                            this.state = 7860;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 1051, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 7837;
                                        this.match(MySQLParser.BY_SYMBOL);
                                        this.state = 7840;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 1048, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 7838;
                                                    if (!(this.serverVersion < 80011)) {
                                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80011");
                                                    }
                                                    this.state = 7839;
                                                    this.match(MySQLParser.PASSWORD_SYMBOL);
                                                }
                                                break;
                                        }
                                        this.state = 7842;
                                        this.textString();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 7843;
                                        this.match(MySQLParser.WITH_SYMBOL);
                                        this.state = 7844;
                                        this.textOrIdentifier();
                                        this.state = 7850;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 1049, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 7845;
                                                    this.match(MySQLParser.AS_SYMBOL);
                                                    this.state = 7846;
                                                    this.textStringHash();
                                                }
                                                break;
                                            case 2:
                                                {
                                                    this.state = 7847;
                                                    if (!(this.serverVersion >= 50706)) {
                                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50706");
                                                    }
                                                    this.state = 7848;
                                                    this.match(MySQLParser.BY_SYMBOL);
                                                    this.state = 7849;
                                                    this.textString();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case 3:
                                    {
                                        this.state = 7852;
                                        if (!(this.serverVersion >= 80018)) {
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80018");
                                        }
                                        this.state = 7855;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === MySQLParser.WITH_SYMBOL) {
                                            {
                                                this.state = 7853;
                                                this.match(MySQLParser.WITH_SYMBOL);
                                                this.state = 7854;
                                                this.textOrIdentifier();
                                            }
                                        }
                                        this.state = 7857;
                                        this.match(MySQLParser.BY_SYMBOL);
                                        this.state = 7858;
                                        this.match(MySQLParser.RANDOM_SYMBOL);
                                        this.state = 7859;
                                        this.match(MySQLParser.PASSWORD_SYMBOL);
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterUserEntry() {
        let _localctx = new AlterUserEntryContext(this._ctx, this.state);
        this.enterRule(_localctx, 1006, MySQLParser.RULE_alterUserEntry);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7864;
                this.user();
                this.state = 7893;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1060, this._ctx)) {
                    case 1:
                        {
                            this.state = 7865;
                            this.match(MySQLParser.IDENTIFIED_SYMBOL);
                            this.state = 7888;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 1058, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 7868;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === MySQLParser.WITH_SYMBOL) {
                                            {
                                                this.state = 7866;
                                                this.match(MySQLParser.WITH_SYMBOL);
                                                this.state = 7867;
                                                this.textOrIdentifier();
                                            }
                                        }
                                        this.state = 7870;
                                        this.match(MySQLParser.BY_SYMBOL);
                                        this.state = 7871;
                                        this.textString();
                                        this.state = 7874;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 1054, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 7872;
                                                    this.match(MySQLParser.REPLACE_SYMBOL);
                                                    this.state = 7873;
                                                    this.textString();
                                                }
                                                break;
                                        }
                                        this.state = 7877;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 1055, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 7876;
                                                    this.retainCurrentPassword();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 7879;
                                        this.match(MySQLParser.WITH_SYMBOL);
                                        this.state = 7880;
                                        this.textOrIdentifier();
                                        this.state = 7886;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 1057, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 7881;
                                                    this.match(MySQLParser.AS_SYMBOL);
                                                    this.state = 7882;
                                                    this.textStringHash();
                                                    this.state = 7884;
                                                    this._errHandler.sync(this);
                                                    switch (this.interpreter.adaptivePredict(this._input, 1056, this._ctx)) {
                                                        case 1:
                                                            {
                                                                this.state = 7883;
                                                                this.retainCurrentPassword();
                                                            }
                                                            break;
                                                    }
                                                }
                                                break;
                                        }
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 7891;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 1059, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 7890;
                                        this.discardOldPassword();
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    retainCurrentPassword() {
        let _localctx = new RetainCurrentPasswordContext(this._ctx, this.state);
        this.enterRule(_localctx, 1008, MySQLParser.RULE_retainCurrentPassword);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7895;
                this.match(MySQLParser.RETAIN_SYMBOL);
                this.state = 7896;
                this.match(MySQLParser.CURRENT_SYMBOL);
                this.state = 7897;
                this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    discardOldPassword() {
        let _localctx = new DiscardOldPasswordContext(this._ctx, this.state);
        this.enterRule(_localctx, 1010, MySQLParser.RULE_discardOldPassword);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7899;
                this.match(MySQLParser.DISCARD_SYMBOL);
                this.state = 7900;
                this.match(MySQLParser.OLD_SYMBOL);
                this.state = 7901;
                this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    replacePassword() {
        let _localctx = new ReplacePasswordContext(this._ctx, this.state);
        this.enterRule(_localctx, 1012, MySQLParser.RULE_replacePassword);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7903;
                this.match(MySQLParser.REPLACE_SYMBOL);
                this.state = 7904;
                this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    userIdentifierOrText() {
        let _localctx = new UserIdentifierOrTextContext(this._ctx, this.state);
        this.enterRule(_localctx, 1014, MySQLParser.RULE_userIdentifierOrText);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7906;
                this.textOrIdentifier();
                this.state = 7910;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1061, this._ctx)) {
                    case 1:
                        {
                            this.state = 7907;
                            this.match(MySQLParser.AT_SIGN_SYMBOL);
                            this.state = 7908;
                            this.textOrIdentifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 7909;
                            this.match(MySQLParser.AT_TEXT_SUFFIX);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    user() {
        let _localctx = new UserContext(this._ctx, this.state);
        this.enterRule(_localctx, 1016, MySQLParser.RULE_user);
        try {
            this.state = 7917;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1063, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7912;
                        this.userIdentifierOrText();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7913;
                        this.match(MySQLParser.CURRENT_USER_SYMBOL);
                        this.state = 7915;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 1062, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7914;
                                    this.parentheses();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    likeClause() {
        let _localctx = new LikeClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 1018, MySQLParser.RULE_likeClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7919;
                this.match(MySQLParser.LIKE_SYMBOL);
                this.state = 7920;
                this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    likeOrWhere() {
        let _localctx = new LikeOrWhereContext(this._ctx, this.state);
        this.enterRule(_localctx, 1020, MySQLParser.RULE_likeOrWhere);
        try {
            this.state = 7924;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.LIKE_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7922;
                        this.likeClause();
                    }
                    break;
                case MySQLParser.WHERE_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7923;
                        this.whereClause();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    onlineOption() {
        let _localctx = new OnlineOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 1022, MySQLParser.RULE_onlineOption);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7926;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.OFFLINE_SYMBOL || _la === MySQLParser.ONLINE_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    noWriteToBinLog() {
        let _localctx = new NoWriteToBinLogContext(this._ctx, this.state);
        this.enterRule(_localctx, 1024, MySQLParser.RULE_noWriteToBinLog);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7928;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.LOCAL_SYMBOL || _la === MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    usePartition() {
        let _localctx = new UsePartitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 1026, MySQLParser.RULE_usePartition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7930;
                if (!(this.serverVersion >= 50602)) {
                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50602");
                }
                this.state = 7931;
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.state = 7932;
                this.identifierListWithParentheses();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fieldIdentifier() {
        let _localctx = new FieldIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 1028, MySQLParser.RULE_fieldIdentifier);
        try {
            this.state = 7939;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1066, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7934;
                        this.dotIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7935;
                        this.qualifiedIdentifier();
                        this.state = 7937;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 1065, this._ctx)) {
                            case 1:
                                {
                                    this.state = 7936;
                                    this.dotIdentifier();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    columnName() {
        let _localctx = new ColumnNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1030, MySQLParser.RULE_columnName);
        try {
            this.state = 7945;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1067, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7941;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 7942;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7943;
                        if (!(this.serverVersion < 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80000");
                        }
                        this.state = 7944;
                        this.fieldIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    columnInternalRef() {
        let _localctx = new ColumnInternalRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1032, MySQLParser.RULE_columnInternalRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7947;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    columnInternalRefList() {
        let _localctx = new ColumnInternalRefListContext(this._ctx, this.state);
        this.enterRule(_localctx, 1034, MySQLParser.RULE_columnInternalRefList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7949;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 7950;
                this.columnInternalRef();
                this.state = 7955;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 7951;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 7952;
                            this.columnInternalRef();
                        }
                    }
                    this.state = 7957;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 7958;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    columnRef() {
        let _localctx = new ColumnRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1036, MySQLParser.RULE_columnRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7960;
                this.fieldIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    insertIdentifier() {
        let _localctx = new InsertIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 1038, MySQLParser.RULE_insertIdentifier);
        try {
            this.state = 7964;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1069, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7962;
                        this.columnRef();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7963;
                        this.tableWild();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    indexName() {
        let _localctx = new IndexNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1040, MySQLParser.RULE_indexName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7966;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    indexRef() {
        let _localctx = new IndexRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1042, MySQLParser.RULE_indexRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7968;
                this.fieldIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableWild() {
        let _localctx = new TableWildContext(this._ctx, this.state);
        this.enterRule(_localctx, 1044, MySQLParser.RULE_tableWild);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7970;
                this.identifier();
                this.state = 7971;
                this.match(MySQLParser.DOT_SYMBOL);
                this.state = 7975;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1070, this._ctx)) {
                    case 1:
                        {
                            this.state = 7972;
                            this.identifier();
                            this.state = 7973;
                            this.match(MySQLParser.DOT_SYMBOL);
                        }
                        break;
                }
                this.state = 7977;
                this.match(MySQLParser.MULT_OPERATOR);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    schemaName() {
        let _localctx = new SchemaNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1046, MySQLParser.RULE_schemaName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7979;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    schemaRef() {
        let _localctx = new SchemaRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1048, MySQLParser.RULE_schemaRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7981;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    procedureName() {
        let _localctx = new ProcedureNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1050, MySQLParser.RULE_procedureName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7983;
                this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    procedureRef() {
        let _localctx = new ProcedureRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1052, MySQLParser.RULE_procedureRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7985;
                this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    functionName() {
        let _localctx = new FunctionNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1054, MySQLParser.RULE_functionName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7987;
                this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    functionRef() {
        let _localctx = new FunctionRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1056, MySQLParser.RULE_functionRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7989;
                this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    triggerName() {
        let _localctx = new TriggerNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1058, MySQLParser.RULE_triggerName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7991;
                this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    triggerRef() {
        let _localctx = new TriggerRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1060, MySQLParser.RULE_triggerRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 7993;
                this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    viewName() {
        let _localctx = new ViewNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1062, MySQLParser.RULE_viewName);
        try {
            this.state = 7997;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1071, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7995;
                        this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 7996;
                        this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    viewRef() {
        let _localctx = new ViewRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1064, MySQLParser.RULE_viewRef);
        try {
            this.state = 8001;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1072, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 7999;
                        this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8000;
                        this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tablespaceName() {
        let _localctx = new TablespaceNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1066, MySQLParser.RULE_tablespaceName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8003;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tablespaceRef() {
        let _localctx = new TablespaceRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1068, MySQLParser.RULE_tablespaceRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8005;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    logfileGroupName() {
        let _localctx = new LogfileGroupNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1070, MySQLParser.RULE_logfileGroupName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8007;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    logfileGroupRef() {
        let _localctx = new LogfileGroupRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1072, MySQLParser.RULE_logfileGroupRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8009;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    eventName() {
        let _localctx = new EventNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1074, MySQLParser.RULE_eventName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8011;
                this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    eventRef() {
        let _localctx = new EventRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1076, MySQLParser.RULE_eventRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8013;
                this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    udfName() {
        let _localctx = new UdfNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1078, MySQLParser.RULE_udfName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8015;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    serverName() {
        let _localctx = new ServerNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1080, MySQLParser.RULE_serverName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8017;
                this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    serverRef() {
        let _localctx = new ServerRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1082, MySQLParser.RULE_serverRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8019;
                this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    engineRef() {
        let _localctx = new EngineRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1084, MySQLParser.RULE_engineRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8021;
                this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableName() {
        let _localctx = new TableNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1086, MySQLParser.RULE_tableName);
        try {
            this.state = 8025;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1073, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8023;
                        this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8024;
                        this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    filterTableRef() {
        let _localctx = new FilterTableRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1088, MySQLParser.RULE_filterTableRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8027;
                this.schemaRef();
                this.state = 8028;
                this.dotIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableRefWithWildcard() {
        let _localctx = new TableRefWithWildcardContext(this._ctx, this.state);
        this.enterRule(_localctx, 1090, MySQLParser.RULE_tableRefWithWildcard);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8030;
                this.identifier();
                this.state = 8038;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1075, this._ctx)) {
                    case 1:
                        {
                            this.state = 8031;
                            this.match(MySQLParser.DOT_SYMBOL);
                            this.state = 8032;
                            this.match(MySQLParser.MULT_OPERATOR);
                        }
                        break;
                    case 2:
                        {
                            this.state = 8033;
                            this.dotIdentifier();
                            this.state = 8036;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 1074, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 8034;
                                        this.match(MySQLParser.DOT_SYMBOL);
                                        this.state = 8035;
                                        this.match(MySQLParser.MULT_OPERATOR);
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableRef() {
        let _localctx = new TableRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1092, MySQLParser.RULE_tableRef);
        try {
            this.state = 8042;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1076, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8040;
                        this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8041;
                        this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableRefList() {
        let _localctx = new TableRefListContext(this._ctx, this.state);
        this.enterRule(_localctx, 1094, MySQLParser.RULE_tableRefList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8044;
                this.tableRef();
                this.state = 8049;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 1077, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 8045;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 8046;
                                this.tableRef();
                            }
                        }
                    }
                    this.state = 8051;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 1077, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableAliasRefList() {
        let _localctx = new TableAliasRefListContext(this._ctx, this.state);
        this.enterRule(_localctx, 1096, MySQLParser.RULE_tableAliasRefList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8052;
                this.tableRefWithWildcard();
                this.state = 8057;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 1078, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 8053;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 8054;
                                this.tableRefWithWildcard();
                            }
                        }
                    }
                    this.state = 8059;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 1078, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    parameterName() {
        let _localctx = new ParameterNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1098, MySQLParser.RULE_parameterName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8060;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    labelIdentifier() {
        let _localctx = new LabelIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 1100, MySQLParser.RULE_labelIdentifier);
        try {
            this.state = 8064;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1079, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8062;
                        this.pureIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8063;
                        this.labelKeyword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    labelRef() {
        let _localctx = new LabelRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1102, MySQLParser.RULE_labelRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8066;
                this.labelIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    roleIdentifier() {
        let _localctx = new RoleIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 1104, MySQLParser.RULE_roleIdentifier);
        try {
            this.state = 8070;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1080, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8068;
                        this.pureIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8069;
                        this.roleKeyword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    roleRef() {
        let _localctx = new RoleRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1106, MySQLParser.RULE_roleRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8072;
                this.roleIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    pluginRef() {
        let _localctx = new PluginRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1108, MySQLParser.RULE_pluginRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8074;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    componentRef() {
        let _localctx = new ComponentRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1110, MySQLParser.RULE_componentRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8076;
                this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resourceGroupRef() {
        let _localctx = new ResourceGroupRefContext(this._ctx, this.state);
        this.enterRule(_localctx, 1112, MySQLParser.RULE_resourceGroupRef);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8078;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowName() {
        let _localctx = new WindowNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 1114, MySQLParser.RULE_windowName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8080;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    pureIdentifier() {
        let _localctx = new PureIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 1116, MySQLParser.RULE_pureIdentifier);
        let _la;
        try {
            this.state = 8085;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1081, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8082;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.IDENTIFIER || _la === MySQLParser.BACK_TICK_QUOTED_ID)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8083;
                        if (!(this.isSqlModeActive(common_1.SqlMode.AnsiQuotes))) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.isSqlModeActive(SqlMode.AnsiQuotes)");
                        }
                        this.state = 8084;
                        this.match(MySQLParser.DOUBLE_QUOTED_TEXT);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    identifier() {
        let _localctx = new IdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 1118, MySQLParser.RULE_identifier);
        try {
            this.state = 8089;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1082, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8087;
                        this.pureIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8088;
                        this.identifierKeyword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    identifierList() {
        let _localctx = new IdentifierListContext(this._ctx, this.state);
        this.enterRule(_localctx, 1120, MySQLParser.RULE_identifierList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8091;
                this.identifier();
                this.state = 8096;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 1083, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 8092;
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.state = 8093;
                                this.identifier();
                            }
                        }
                    }
                    this.state = 8098;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 1083, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    identifierListWithParentheses() {
        let _localctx = new IdentifierListWithParenthesesContext(this._ctx, this.state);
        this.enterRule(_localctx, 1122, MySQLParser.RULE_identifierListWithParentheses);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8099;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 8100;
                this.identifierList();
                this.state = 8101;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    qualifiedIdentifier() {
        let _localctx = new QualifiedIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 1124, MySQLParser.RULE_qualifiedIdentifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8103;
                this.identifier();
                this.state = 8105;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1084, this._ctx)) {
                    case 1:
                        {
                            this.state = 8104;
                            this.dotIdentifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    simpleIdentifier() {
        let _localctx = new SimpleIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 1126, MySQLParser.RULE_simpleIdentifier);
        let _la;
        try {
            this.state = 8118;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1087, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8107;
                        this.identifier();
                        this.state = 8112;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.DOT_SYMBOL) {
                            {
                                this.state = 8108;
                                this.dotIdentifier();
                                this.state = 8110;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === MySQLParser.DOT_SYMBOL) {
                                    {
                                        this.state = 8109;
                                        this.dotIdentifier();
                                    }
                                }
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8114;
                        if (!(this.serverVersion < 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80000");
                        }
                        this.state = 8115;
                        this.dotIdentifier();
                        this.state = 8116;
                        this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dotIdentifier() {
        let _localctx = new DotIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 1128, MySQLParser.RULE_dotIdentifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8120;
                this.match(MySQLParser.DOT_SYMBOL);
                this.state = 8121;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ulong_number() {
        let _localctx = new Ulong_numberContext(this._ctx, this.state);
        this.enterRule(_localctx, 1130, MySQLParser.RULE_ulong_number);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8123;
                _la = this._input.LA(1);
                if (!(((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (MySQLParser.INT_NUMBER - 380)) | (1 << (MySQLParser.LONG_NUMBER - 380)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || ((((_la - 421)) & ~0x1F) === 0 && ((1 << (_la - 421)) & ((1 << (MySQLParser.HEX_NUMBER - 421)) | (1 << (MySQLParser.DECIMAL_NUMBER - 421)) | (1 << (MySQLParser.FLOAT_NUMBER - 421)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    real_ulong_number() {
        let _localctx = new Real_ulong_numberContext(this._ctx, this.state);
        this.enterRule(_localctx, 1132, MySQLParser.RULE_real_ulong_number);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8125;
                _la = this._input.LA(1);
                if (!(((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (MySQLParser.INT_NUMBER - 380)) | (1 << (MySQLParser.LONG_NUMBER - 380)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || _la === MySQLParser.HEX_NUMBER)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ulonglong_number() {
        let _localctx = new Ulonglong_numberContext(this._ctx, this.state);
        this.enterRule(_localctx, 1134, MySQLParser.RULE_ulonglong_number);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8127;
                _la = this._input.LA(1);
                if (!(((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (MySQLParser.INT_NUMBER - 380)) | (1 << (MySQLParser.LONG_NUMBER - 380)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || _la === MySQLParser.DECIMAL_NUMBER || _la === MySQLParser.FLOAT_NUMBER)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    real_ulonglong_number() {
        let _localctx = new Real_ulonglong_numberContext(this._ctx, this.state);
        this.enterRule(_localctx, 1136, MySQLParser.RULE_real_ulonglong_number);
        try {
            this.state = 8134;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1088, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8129;
                        this.match(MySQLParser.INT_NUMBER);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8130;
                        if (!(this.serverVersion >= 80017)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80017");
                        }
                        this.state = 8131;
                        this.match(MySQLParser.HEX_NUMBER);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 8132;
                        this.match(MySQLParser.ULONGLONG_NUMBER);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 8133;
                        this.match(MySQLParser.LONG_NUMBER);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    literal() {
        let _localctx = new LiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 1138, MySQLParser.RULE_literal);
        let _la;
        try {
            this.state = 8145;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1090, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8136;
                        this.textLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8137;
                        this.numLiteral();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 8138;
                        this.temporalLiteral();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 8139;
                        this.nullLiteral();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 8140;
                        this.boolLiteral();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 8142;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === MySQLParser.UNDERSCORE_CHARSET) {
                            {
                                this.state = 8141;
                                this.match(MySQLParser.UNDERSCORE_CHARSET);
                            }
                        }
                        this.state = 8144;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.HEX_NUMBER || _la === MySQLParser.BIN_NUMBER)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    signedLiteral() {
        let _localctx = new SignedLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 1140, MySQLParser.RULE_signedLiteral);
        try {
            this.state = 8152;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1091, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8147;
                        this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8148;
                        this.match(MySQLParser.PLUS_OPERATOR);
                        this.state = 8149;
                        this.ulong_number();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 8150;
                        this.match(MySQLParser.MINUS_OPERATOR);
                        this.state = 8151;
                        this.ulong_number();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    stringList() {
        let _localctx = new StringListContext(this._ctx, this.state);
        this.enterRule(_localctx, 1142, MySQLParser.RULE_stringList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8154;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 8155;
                this.textString();
                this.state = 8160;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 8156;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 8157;
                            this.textString();
                        }
                    }
                    this.state = 8162;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 8163;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    textStringLiteral() {
        let _localctx = new TextStringLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 1144, MySQLParser.RULE_textStringLiteral);
        try {
            this.state = 8168;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1093, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8165;
                        _localctx._value = this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8166;
                        if (!(!this.isSqlModeActive(common_1.SqlMode.AnsiQuotes))) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "!this.isSqlModeActive(SqlMode.AnsiQuotes)");
                        }
                        this.state = 8167;
                        _localctx._value = this.match(MySQLParser.DOUBLE_QUOTED_TEXT);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    textString() {
        let _localctx = new TextStringContext(this._ctx, this.state);
        this.enterRule(_localctx, 1146, MySQLParser.RULE_textString);
        try {
            this.state = 8173;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1094, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8170;
                        this.textStringLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8171;
                        this.match(MySQLParser.HEX_NUMBER);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 8172;
                        this.match(MySQLParser.BIN_NUMBER);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    textStringHash() {
        let _localctx = new TextStringHashContext(this._ctx, this.state);
        this.enterRule(_localctx, 1148, MySQLParser.RULE_textStringHash);
        try {
            this.state = 8178;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1095, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8175;
                        this.textStringLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8176;
                        if (!(this.serverVersion >= 80017)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80017");
                        }
                        this.state = 8177;
                        this.match(MySQLParser.HEX_NUMBER);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    textLiteral() {
        let _localctx = new TextLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 1150, MySQLParser.RULE_textLiteral);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8185;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 1097, this._ctx)) {
                    case 1:
                        {
                            this.state = 8181;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 1096, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 8180;
                                        this.match(MySQLParser.UNDERSCORE_CHARSET);
                                    }
                                    break;
                            }
                            this.state = 8183;
                            this.textStringLiteral();
                        }
                        break;
                    case 2:
                        {
                            this.state = 8184;
                            this.match(MySQLParser.NCHAR_TEXT);
                        }
                        break;
                }
                this.state = 8190;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 1098, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 8187;
                                this.textStringLiteral();
                            }
                        }
                    }
                    this.state = 8192;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 1098, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    textStringNoLinebreak() {
        let _localctx = new TextStringNoLinebreakContext(this._ctx, this.state);
        this.enterRule(_localctx, 1152, MySQLParser.RULE_textStringNoLinebreak);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8193;
                this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    textStringLiteralList() {
        let _localctx = new TextStringLiteralListContext(this._ctx, this.state);
        this.enterRule(_localctx, 1154, MySQLParser.RULE_textStringLiteralList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8195;
                this.textStringLiteral();
                this.state = 8200;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === MySQLParser.COMMA_SYMBOL) {
                    {
                        {
                            this.state = 8196;
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.state = 8197;
                            this.textStringLiteral();
                        }
                    }
                    this.state = 8202;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    numLiteral() {
        let _localctx = new NumLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 1156, MySQLParser.RULE_numLiteral);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8203;
                _la = this._input.LA(1);
                if (!(((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (MySQLParser.INT_NUMBER - 380)) | (1 << (MySQLParser.LONG_NUMBER - 380)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 380)))) !== 0) || _la === MySQLParser.DECIMAL_NUMBER || _la === MySQLParser.FLOAT_NUMBER)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    boolLiteral() {
        let _localctx = new BoolLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 1158, MySQLParser.RULE_boolLiteral);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8205;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.FALSE_SYMBOL || _la === MySQLParser.TRUE_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    nullLiteral() {
        let _localctx = new NullLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 1160, MySQLParser.RULE_nullLiteral);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8207;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.NULL2_SYMBOL || _la === MySQLParser.NULL_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    temporalLiteral() {
        let _localctx = new TemporalLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 1162, MySQLParser.RULE_temporalLiteral);
        try {
            this.state = 8215;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.DATE_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8209;
                        this.match(MySQLParser.DATE_SYMBOL);
                        this.state = 8210;
                        this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                    }
                    break;
                case MySQLParser.TIME_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8211;
                        this.match(MySQLParser.TIME_SYMBOL);
                        this.state = 8212;
                        this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                    }
                    break;
                case MySQLParser.TIMESTAMP_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 8213;
                        this.match(MySQLParser.TIMESTAMP_SYMBOL);
                        this.state = 8214;
                        this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    floatOptions() {
        let _localctx = new FloatOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 1164, MySQLParser.RULE_floatOptions);
        try {
            this.state = 8219;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1101, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8217;
                        this.fieldLength();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8218;
                        this.precision();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    standardFloatOptions() {
        let _localctx = new StandardFloatOptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 1166, MySQLParser.RULE_standardFloatOptions);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8221;
                this.precision();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    precision() {
        let _localctx = new PrecisionContext(this._ctx, this.state);
        this.enterRule(_localctx, 1168, MySQLParser.RULE_precision);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8223;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 8224;
                this.match(MySQLParser.INT_NUMBER);
                this.state = 8225;
                this.match(MySQLParser.COMMA_SYMBOL);
                this.state = 8226;
                this.match(MySQLParser.INT_NUMBER);
                this.state = 8227;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    textOrIdentifier() {
        let _localctx = new TextOrIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 1170, MySQLParser.RULE_textOrIdentifier);
        try {
            this.state = 8231;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1102, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8229;
                        this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8230;
                        this.identifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lValueIdentifier() {
        let _localctx = new LValueIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 1172, MySQLParser.RULE_lValueIdentifier);
        try {
            this.state = 8235;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1103, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8233;
                        this.pureIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8234;
                        this.lValueKeyword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    roleIdentifierOrText() {
        let _localctx = new RoleIdentifierOrTextContext(this._ctx, this.state);
        this.enterRule(_localctx, 1174, MySQLParser.RULE_roleIdentifierOrText);
        try {
            this.state = 8239;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1104, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8237;
                        this.roleIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8238;
                        this.textStringLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sizeNumber() {
        let _localctx = new SizeNumberContext(this._ctx, this.state);
        this.enterRule(_localctx, 1176, MySQLParser.RULE_sizeNumber);
        try {
            this.state = 8243;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1105, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8241;
                        this.real_ulonglong_number();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8242;
                        this.pureIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    parentheses() {
        let _localctx = new ParenthesesContext(this._ctx, this.state);
        this.enterRule(_localctx, 1178, MySQLParser.RULE_parentheses);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8245;
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.state = 8246;
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    equal() {
        let _localctx = new EqualContext(this._ctx, this.state);
        this.enterRule(_localctx, 1180, MySQLParser.RULE_equal);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8248;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.EQUAL_OPERATOR || _la === MySQLParser.ASSIGN_OPERATOR)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    optionType() {
        let _localctx = new OptionTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 1182, MySQLParser.RULE_optionType);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8250;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.GLOBAL_SYMBOL || _la === MySQLParser.LOCAL_SYMBOL || _la === MySQLParser.SESSION_SYMBOL || _la === MySQLParser.PERSIST_SYMBOL || _la === MySQLParser.PERSIST_ONLY_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    varIdentType() {
        let _localctx = new VarIdentTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 1184, MySQLParser.RULE_varIdentType);
        try {
            this.state = 8258;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.GLOBAL_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8252;
                        this.match(MySQLParser.GLOBAL_SYMBOL);
                        this.state = 8253;
                        this.match(MySQLParser.DOT_SYMBOL);
                    }
                    break;
                case MySQLParser.LOCAL_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8254;
                        this.match(MySQLParser.LOCAL_SYMBOL);
                        this.state = 8255;
                        this.match(MySQLParser.DOT_SYMBOL);
                    }
                    break;
                case MySQLParser.SESSION_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 8256;
                        this.match(MySQLParser.SESSION_SYMBOL);
                        this.state = 8257;
                        this.match(MySQLParser.DOT_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    setVarIdentType() {
        let _localctx = new SetVarIdentTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 1186, MySQLParser.RULE_setVarIdentType);
        try {
            this.state = 8270;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.PERSIST_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8260;
                        this.match(MySQLParser.PERSIST_SYMBOL);
                        this.state = 8261;
                        this.match(MySQLParser.DOT_SYMBOL);
                    }
                    break;
                case MySQLParser.PERSIST_ONLY_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8262;
                        this.match(MySQLParser.PERSIST_ONLY_SYMBOL);
                        this.state = 8263;
                        this.match(MySQLParser.DOT_SYMBOL);
                    }
                    break;
                case MySQLParser.GLOBAL_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 8264;
                        this.match(MySQLParser.GLOBAL_SYMBOL);
                        this.state = 8265;
                        this.match(MySQLParser.DOT_SYMBOL);
                    }
                    break;
                case MySQLParser.LOCAL_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 8266;
                        this.match(MySQLParser.LOCAL_SYMBOL);
                        this.state = 8267;
                        this.match(MySQLParser.DOT_SYMBOL);
                    }
                    break;
                case MySQLParser.SESSION_SYMBOL:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 8268;
                        this.match(MySQLParser.SESSION_SYMBOL);
                        this.state = 8269;
                        this.match(MySQLParser.DOT_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    identifierKeyword() {
        let _localctx = new IdentifierKeywordContext(this._ctx, this.state);
        this.enterRule(_localctx, 1188, MySQLParser.RULE_identifierKeyword);
        try {
            this.state = 8289;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1110, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8272;
                        if (!(this.serverVersion < 80017)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80017");
                        }
                        this.state = 8280;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 1108, this._ctx)) {
                            case 1:
                                {
                                    this.state = 8273;
                                    this.labelKeyword();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 8274;
                                    this.roleOrIdentifierKeyword();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 8275;
                                    this.match(MySQLParser.EXECUTE_SYMBOL);
                                }
                                break;
                            case 4:
                                {
                                    this.state = 8276;
                                    if (!(this.serverVersion >= 50709)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50709");
                                    }
                                    this.state = 8277;
                                    this.match(MySQLParser.SHUTDOWN_SYMBOL);
                                }
                                break;
                            case 5:
                                {
                                    this.state = 8278;
                                    if (!(this.serverVersion >= 80011)) {
                                        throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80011");
                                    }
                                    this.state = 8279;
                                    this.match(MySQLParser.RESTART_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8287;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case MySQLParser.ACCOUNT_SYMBOL:
                            case MySQLParser.ALWAYS_SYMBOL:
                            case MySQLParser.BACKUP_SYMBOL:
                            case MySQLParser.CLOSE_SYMBOL:
                            case MySQLParser.FORMAT_SYMBOL:
                            case MySQLParser.GROUP_REPLICATION_SYMBOL:
                            case MySQLParser.HOST_SYMBOL:
                            case MySQLParser.OPEN_SYMBOL:
                            case MySQLParser.OPTIONS_SYMBOL:
                            case MySQLParser.OWNER_SYMBOL:
                            case MySQLParser.PARSER_SYMBOL:
                            case MySQLParser.PORT_SYMBOL:
                            case MySQLParser.REMOVE_SYMBOL:
                            case MySQLParser.RESTORE_SYMBOL:
                            case MySQLParser.SECURITY_SYMBOL:
                            case MySQLParser.SERVER_SYMBOL:
                            case MySQLParser.SOCKET_SYMBOL:
                            case MySQLParser.SONAME_SYMBOL:
                            case MySQLParser.UPGRADE_SYMBOL:
                            case MySQLParser.WRAPPER_SYMBOL:
                            case MySQLParser.ACTION_SYMBOL:
                            case MySQLParser.ADDDATE_SYMBOL:
                            case MySQLParser.AFTER_SYMBOL:
                            case MySQLParser.AGAINST_SYMBOL:
                            case MySQLParser.AGGREGATE_SYMBOL:
                            case MySQLParser.ALGORITHM_SYMBOL:
                            case MySQLParser.ANY_SYMBOL:
                            case MySQLParser.AT_SYMBOL:
                            case MySQLParser.AUTO_INCREMENT_SYMBOL:
                            case MySQLParser.AUTOEXTEND_SIZE_SYMBOL:
                            case MySQLParser.AVG_ROW_LENGTH_SYMBOL:
                            case MySQLParser.AVG_SYMBOL:
                            case MySQLParser.BINLOG_SYMBOL:
                            case MySQLParser.BIT_SYMBOL:
                            case MySQLParser.BLOCK_SYMBOL:
                            case MySQLParser.BOOL_SYMBOL:
                            case MySQLParser.BOOLEAN_SYMBOL:
                            case MySQLParser.BTREE_SYMBOL:
                            case MySQLParser.CASCADED_SYMBOL:
                            case MySQLParser.CATALOG_NAME_SYMBOL:
                            case MySQLParser.CHAIN_SYMBOL:
                            case MySQLParser.CHANGED_SYMBOL:
                            case MySQLParser.CHANNEL_SYMBOL:
                            case MySQLParser.CIPHER_SYMBOL:
                            case MySQLParser.CLIENT_SYMBOL:
                            case MySQLParser.CLASS_ORIGIN_SYMBOL:
                            case MySQLParser.COALESCE_SYMBOL:
                            case MySQLParser.CODE_SYMBOL:
                            case MySQLParser.COLLATION_SYMBOL:
                            case MySQLParser.COLUMN_NAME_SYMBOL:
                            case MySQLParser.COLUMN_FORMAT_SYMBOL:
                            case MySQLParser.COLUMNS_SYMBOL:
                            case MySQLParser.COMMITTED_SYMBOL:
                            case MySQLParser.COMPACT_SYMBOL:
                            case MySQLParser.COMPLETION_SYMBOL:
                            case MySQLParser.COMPRESSED_SYMBOL:
                            case MySQLParser.COMPRESSION_SYMBOL:
                            case MySQLParser.ENCRYPTION_SYMBOL:
                            case MySQLParser.CONCURRENT_SYMBOL:
                            case MySQLParser.CONNECTION_SYMBOL:
                            case MySQLParser.CONSISTENT_SYMBOL:
                            case MySQLParser.CONSTRAINT_CATALOG_SYMBOL:
                            case MySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
                            case MySQLParser.CONSTRAINT_NAME_SYMBOL:
                            case MySQLParser.CONTEXT_SYMBOL:
                            case MySQLParser.CPU_SYMBOL:
                            case MySQLParser.CURRENT_SYMBOL:
                            case MySQLParser.CURSOR_NAME_SYMBOL:
                            case MySQLParser.DATA_SYMBOL:
                            case MySQLParser.DATAFILE_SYMBOL:
                            case MySQLParser.DATETIME_SYMBOL:
                            case MySQLParser.DATE_SYMBOL:
                            case MySQLParser.DAY_SYMBOL:
                            case MySQLParser.DEFAULT_AUTH_SYMBOL:
                            case MySQLParser.DEFINER_SYMBOL:
                            case MySQLParser.DELAY_KEY_WRITE_SYMBOL:
                            case MySQLParser.DIAGNOSTICS_SYMBOL:
                            case MySQLParser.DIRECTORY_SYMBOL:
                            case MySQLParser.DISABLE_SYMBOL:
                            case MySQLParser.DISCARD_SYMBOL:
                            case MySQLParser.DISK_SYMBOL:
                            case MySQLParser.DUMPFILE_SYMBOL:
                            case MySQLParser.DUPLICATE_SYMBOL:
                            case MySQLParser.DYNAMIC_SYMBOL:
                            case MySQLParser.ENDS_SYMBOL:
                            case MySQLParser.ENUM_SYMBOL:
                            case MySQLParser.ENGINE_SYMBOL:
                            case MySQLParser.ENGINES_SYMBOL:
                            case MySQLParser.ERROR_SYMBOL:
                            case MySQLParser.ERRORS_SYMBOL:
                            case MySQLParser.ESCAPE_SYMBOL:
                            case MySQLParser.EVENTS_SYMBOL:
                            case MySQLParser.EVERY_SYMBOL:
                            case MySQLParser.EXPANSION_SYMBOL:
                            case MySQLParser.EXPORT_SYMBOL:
                            case MySQLParser.EXTENDED_SYMBOL:
                            case MySQLParser.EXTENT_SIZE_SYMBOL:
                            case MySQLParser.FAULTS_SYMBOL:
                            case MySQLParser.FAST_SYMBOL:
                            case MySQLParser.FOUND_SYMBOL:
                            case MySQLParser.ENABLE_SYMBOL:
                            case MySQLParser.FULL_SYMBOL:
                            case MySQLParser.FILE_BLOCK_SIZE_SYMBOL:
                            case MySQLParser.FILTER_SYMBOL:
                            case MySQLParser.FIRST_SYMBOL:
                            case MySQLParser.FIXED_SYMBOL:
                            case MySQLParser.GENERAL_SYMBOL:
                            case MySQLParser.GEOMETRY_SYMBOL:
                            case MySQLParser.GEOMETRYCOLLECTION_SYMBOL:
                            case MySQLParser.GET_FORMAT_SYMBOL:
                            case MySQLParser.GRANTS_SYMBOL:
                            case MySQLParser.HASH_SYMBOL:
                            case MySQLParser.HOSTS_SYMBOL:
                            case MySQLParser.HOUR_SYMBOL:
                            case MySQLParser.IDENTIFIED_SYMBOL:
                            case MySQLParser.IGNORE_SERVER_IDS_SYMBOL:
                            case MySQLParser.INVOKER_SYMBOL:
                            case MySQLParser.INDEXES_SYMBOL:
                            case MySQLParser.INITIAL_SIZE_SYMBOL:
                            case MySQLParser.INSTANCE_SYMBOL:
                            case MySQLParser.IO_SYMBOL:
                            case MySQLParser.IPC_SYMBOL:
                            case MySQLParser.ISOLATION_SYMBOL:
                            case MySQLParser.ISSUER_SYMBOL:
                            case MySQLParser.INSERT_METHOD_SYMBOL:
                            case MySQLParser.JSON_SYMBOL:
                            case MySQLParser.KEY_BLOCK_SIZE_SYMBOL:
                            case MySQLParser.LAST_SYMBOL:
                            case MySQLParser.LEAVES_SYMBOL:
                            case MySQLParser.LESS_SYMBOL:
                            case MySQLParser.LEVEL_SYMBOL:
                            case MySQLParser.LINESTRING_SYMBOL:
                            case MySQLParser.LIST_SYMBOL:
                            case MySQLParser.LOCKS_SYMBOL:
                            case MySQLParser.LOGFILE_SYMBOL:
                            case MySQLParser.LOGS_SYMBOL:
                            case MySQLParser.MAX_ROWS_SYMBOL:
                            case MySQLParser.MASTER_SYMBOL:
                            case MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL:
                            case MySQLParser.MASTER_HOST_SYMBOL:
                            case MySQLParser.MASTER_PORT_SYMBOL:
                            case MySQLParser.MASTER_LOG_FILE_SYMBOL:
                            case MySQLParser.MASTER_LOG_POS_SYMBOL:
                            case MySQLParser.MASTER_USER_SYMBOL:
                            case MySQLParser.MASTER_PASSWORD_SYMBOL:
                            case MySQLParser.MASTER_SERVER_ID_SYMBOL:
                            case MySQLParser.MASTER_CONNECT_RETRY_SYMBOL:
                            case MySQLParser.MASTER_RETRY_COUNT_SYMBOL:
                            case MySQLParser.MASTER_DELAY_SYMBOL:
                            case MySQLParser.MASTER_SSL_SYMBOL:
                            case MySQLParser.MASTER_SSL_CA_SYMBOL:
                            case MySQLParser.MASTER_SSL_CAPATH_SYMBOL:
                            case MySQLParser.MASTER_TLS_VERSION_SYMBOL:
                            case MySQLParser.MASTER_SSL_CERT_SYMBOL:
                            case MySQLParser.MASTER_SSL_CIPHER_SYMBOL:
                            case MySQLParser.MASTER_SSL_CRL_SYMBOL:
                            case MySQLParser.MASTER_SSL_CRLPATH_SYMBOL:
                            case MySQLParser.MASTER_SSL_KEY_SYMBOL:
                            case MySQLParser.MASTER_AUTO_POSITION_SYMBOL:
                            case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
                            case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
                            case MySQLParser.MAX_SIZE_SYMBOL:
                            case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
                            case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
                            case MySQLParser.MEDIUM_SYMBOL:
                            case MySQLParser.MEMORY_SYMBOL:
                            case MySQLParser.MERGE_SYMBOL:
                            case MySQLParser.MESSAGE_TEXT_SYMBOL:
                            case MySQLParser.MICROSECOND_SYMBOL:
                            case MySQLParser.MIGRATE_SYMBOL:
                            case MySQLParser.MINUTE_SYMBOL:
                            case MySQLParser.MIN_ROWS_SYMBOL:
                            case MySQLParser.MODIFY_SYMBOL:
                            case MySQLParser.MODE_SYMBOL:
                            case MySQLParser.MONTH_SYMBOL:
                            case MySQLParser.MULTILINESTRING_SYMBOL:
                            case MySQLParser.MULTIPOINT_SYMBOL:
                            case MySQLParser.MULTIPOLYGON_SYMBOL:
                            case MySQLParser.MUTEX_SYMBOL:
                            case MySQLParser.MYSQL_ERRNO_SYMBOL:
                            case MySQLParser.NAME_SYMBOL:
                            case MySQLParser.NAMES_SYMBOL:
                            case MySQLParser.NATIONAL_SYMBOL:
                            case MySQLParser.NCHAR_SYMBOL:
                            case MySQLParser.NDBCLUSTER_SYMBOL:
                            case MySQLParser.NEVER_SYMBOL:
                            case MySQLParser.NEXT_SYMBOL:
                            case MySQLParser.NEW_SYMBOL:
                            case MySQLParser.NO_WAIT_SYMBOL:
                            case MySQLParser.NODEGROUP_SYMBOL:
                            case MySQLParser.NUMBER_SYMBOL:
                            case MySQLParser.NVARCHAR_SYMBOL:
                            case MySQLParser.OFFSET_SYMBOL:
                            case MySQLParser.ONE_SYMBOL:
                            case MySQLParser.PACK_KEYS_SYMBOL:
                            case MySQLParser.PAGE_SYMBOL:
                            case MySQLParser.PARTIAL_SYMBOL:
                            case MySQLParser.PARTITIONING_SYMBOL:
                            case MySQLParser.PARTITIONS_SYMBOL:
                            case MySQLParser.PASSWORD_SYMBOL:
                            case MySQLParser.PHASE_SYMBOL:
                            case MySQLParser.PLUGIN_DIR_SYMBOL:
                            case MySQLParser.PLUGIN_SYMBOL:
                            case MySQLParser.PLUGINS_SYMBOL:
                            case MySQLParser.POINT_SYMBOL:
                            case MySQLParser.POLYGON_SYMBOL:
                            case MySQLParser.PRESERVE_SYMBOL:
                            case MySQLParser.PREV_SYMBOL:
                            case MySQLParser.PRIVILEGES_SYMBOL:
                            case MySQLParser.PROCESSLIST_SYMBOL:
                            case MySQLParser.PROFILE_SYMBOL:
                            case MySQLParser.PROFILES_SYMBOL:
                            case MySQLParser.QUARTER_SYMBOL:
                            case MySQLParser.QUERY_SYMBOL:
                            case MySQLParser.QUICK_SYMBOL:
                            case MySQLParser.READ_ONLY_SYMBOL:
                            case MySQLParser.REBUILD_SYMBOL:
                            case MySQLParser.RECOVER_SYMBOL:
                            case MySQLParser.REDO_BUFFER_SIZE_SYMBOL:
                            case MySQLParser.REDUNDANT_SYMBOL:
                            case MySQLParser.RELAY_SYMBOL:
                            case MySQLParser.RELAYLOG_SYMBOL:
                            case MySQLParser.RELAY_LOG_FILE_SYMBOL:
                            case MySQLParser.RELAY_LOG_POS_SYMBOL:
                            case MySQLParser.RELAY_THREAD_SYMBOL:
                            case MySQLParser.REORGANIZE_SYMBOL:
                            case MySQLParser.REPEATABLE_SYMBOL:
                            case MySQLParser.REPLICATE_DO_DB_SYMBOL:
                            case MySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
                            case MySQLParser.REPLICATE_DO_TABLE_SYMBOL:
                            case MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
                            case MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
                            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
                            case MySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
                            case MySQLParser.RESUME_SYMBOL:
                            case MySQLParser.RETURNED_SQLSTATE_SYMBOL:
                            case MySQLParser.RETURNS_SYMBOL:
                            case MySQLParser.REVERSE_SYMBOL:
                            case MySQLParser.ROLLUP_SYMBOL:
                            case MySQLParser.ROTATE_SYMBOL:
                            case MySQLParser.ROUTINE_SYMBOL:
                            case MySQLParser.ROW_COUNT_SYMBOL:
                            case MySQLParser.ROW_FORMAT_SYMBOL:
                            case MySQLParser.RTREE_SYMBOL:
                            case MySQLParser.SCHEDULE_SYMBOL:
                            case MySQLParser.SCHEMA_NAME_SYMBOL:
                            case MySQLParser.SECOND_SYMBOL:
                            case MySQLParser.SERIAL_SYMBOL:
                            case MySQLParser.SERIALIZABLE_SYMBOL:
                            case MySQLParser.SIMPLE_SYMBOL:
                            case MySQLParser.SHARE_SYMBOL:
                            case MySQLParser.SLOW_SYMBOL:
                            case MySQLParser.SNAPSHOT_SYMBOL:
                            case MySQLParser.SOUNDS_SYMBOL:
                            case MySQLParser.SOURCE_SYMBOL:
                            case MySQLParser.SQL_AFTER_GTIDS_SYMBOL:
                            case MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL:
                            case MySQLParser.SQL_BEFORE_GTIDS_SYMBOL:
                            case MySQLParser.SQL_BUFFER_RESULT_SYMBOL:
                            case MySQLParser.SQL_NO_CACHE_SYMBOL:
                            case MySQLParser.SQL_THREAD_SYMBOL:
                            case MySQLParser.STACKED_SYMBOL:
                            case MySQLParser.STARTS_SYMBOL:
                            case MySQLParser.STATS_AUTO_RECALC_SYMBOL:
                            case MySQLParser.STATS_PERSISTENT_SYMBOL:
                            case MySQLParser.STATS_SAMPLE_PAGES_SYMBOL:
                            case MySQLParser.STATUS_SYMBOL:
                            case MySQLParser.STORAGE_SYMBOL:
                            case MySQLParser.STRING_SYMBOL:
                            case MySQLParser.SUBCLASS_ORIGIN_SYMBOL:
                            case MySQLParser.SUBDATE_SYMBOL:
                            case MySQLParser.SUBJECT_SYMBOL:
                            case MySQLParser.SUBPARTITION_SYMBOL:
                            case MySQLParser.SUBPARTITIONS_SYMBOL:
                            case MySQLParser.SUSPEND_SYMBOL:
                            case MySQLParser.SWAPS_SYMBOL:
                            case MySQLParser.SWITCHES_SYMBOL:
                            case MySQLParser.TABLE_NAME_SYMBOL:
                            case MySQLParser.TABLES_SYMBOL:
                            case MySQLParser.TABLE_CHECKSUM_SYMBOL:
                            case MySQLParser.TABLESPACE_SYMBOL:
                            case MySQLParser.TEMPORARY_SYMBOL:
                            case MySQLParser.TEMPTABLE_SYMBOL:
                            case MySQLParser.TEXT_SYMBOL:
                            case MySQLParser.THAN_SYMBOL:
                            case MySQLParser.TRANSACTION_SYMBOL:
                            case MySQLParser.TRIGGERS_SYMBOL:
                            case MySQLParser.TIMESTAMP_SYMBOL:
                            case MySQLParser.TIMESTAMP_ADD_SYMBOL:
                            case MySQLParser.TIMESTAMP_DIFF_SYMBOL:
                            case MySQLParser.TIME_SYMBOL:
                            case MySQLParser.TYPES_SYMBOL:
                            case MySQLParser.TYPE_SYMBOL:
                            case MySQLParser.UNCOMMITTED_SYMBOL:
                            case MySQLParser.UNDEFINED_SYMBOL:
                            case MySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
                            case MySQLParser.UNDOFILE_SYMBOL:
                            case MySQLParser.UNKNOWN_SYMBOL:
                            case MySQLParser.UNTIL_SYMBOL:
                            case MySQLParser.USER_RESOURCES_SYMBOL:
                            case MySQLParser.USER_SYMBOL:
                            case MySQLParser.USE_FRM_SYMBOL:
                            case MySQLParser.VARIABLES_SYMBOL:
                            case MySQLParser.VIEW_SYMBOL:
                            case MySQLParser.VALUE_SYMBOL:
                            case MySQLParser.WARNINGS_SYMBOL:
                            case MySQLParser.WAIT_SYMBOL:
                            case MySQLParser.WEEK_SYMBOL:
                            case MySQLParser.WORK_SYMBOL:
                            case MySQLParser.WEIGHT_STRING_SYMBOL:
                            case MySQLParser.X509_SYMBOL:
                            case MySQLParser.XID_SYMBOL:
                            case MySQLParser.XML_SYMBOL:
                            case MySQLParser.YEAR_SYMBOL:
                            case MySQLParser.EXCHANGE_SYMBOL:
                            case MySQLParser.EXPIRE_SYMBOL:
                            case MySQLParser.ONLY_SYMBOL:
                            case MySQLParser.VALIDATION_SYMBOL:
                            case MySQLParser.WITHOUT_SYMBOL:
                            case MySQLParser.ROLE_SYMBOL:
                            case MySQLParser.ADMIN_SYMBOL:
                            case MySQLParser.INVISIBLE_SYMBOL:
                            case MySQLParser.VISIBLE_SYMBOL:
                            case MySQLParser.COMPONENT_SYMBOL:
                            case MySQLParser.SKIP_SYMBOL:
                            case MySQLParser.LOCKED_SYMBOL:
                            case MySQLParser.NOWAIT_SYMBOL:
                            case MySQLParser.HISTOGRAM_SYMBOL:
                            case MySQLParser.BUCKETS_SYMBOL:
                            case MySQLParser.EXCLUDE_SYMBOL:
                            case MySQLParser.FOLLOWING_SYMBOL:
                            case MySQLParser.NULLS_SYMBOL:
                            case MySQLParser.OTHERS_SYMBOL:
                            case MySQLParser.PRECEDING_SYMBOL:
                            case MySQLParser.RESPECT_SYMBOL:
                            case MySQLParser.TIES_SYMBOL:
                            case MySQLParser.UNBOUNDED_SYMBOL:
                            case MySQLParser.NESTED_SYMBOL:
                            case MySQLParser.ORDINALITY_SYMBOL:
                            case MySQLParser.PATH_SYMBOL:
                            case MySQLParser.HISTORY_SYMBOL:
                            case MySQLParser.REUSE_SYMBOL:
                            case MySQLParser.SRID_SYMBOL:
                            case MySQLParser.THREAD_PRIORITY_SYMBOL:
                            case MySQLParser.VCPU_SYMBOL:
                            case MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL:
                            case MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL:
                            case MySQLParser.DEFINITION_SYMBOL:
                            case MySQLParser.DESCRIPTION_SYMBOL:
                            case MySQLParser.ORGANIZATION_SYMBOL:
                            case MySQLParser.REFERENCE_SYMBOL:
                            case MySQLParser.OPTIONAL_SYMBOL:
                            case MySQLParser.SECONDARY_SYMBOL:
                            case MySQLParser.SECONDARY_ENGINE_SYMBOL:
                            case MySQLParser.SECONDARY_LOAD_SYMBOL:
                            case MySQLParser.SECONDARY_UNLOAD_SYMBOL:
                            case MySQLParser.ACTIVE_SYMBOL:
                            case MySQLParser.INACTIVE_SYMBOL:
                            case MySQLParser.RETAIN_SYMBOL:
                            case MySQLParser.OLD_SYMBOL:
                            case MySQLParser.NETWORK_NAMESPACE_SYMBOL:
                            case MySQLParser.ENFORCED_SYMBOL:
                            case MySQLParser.OJ_SYMBOL:
                            case MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL:
                            case MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
                            case MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL:
                            case MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL:
                                {
                                    this.state = 8282;
                                    this.identifierKeywordsUnambiguous();
                                }
                                break;
                            case MySQLParser.EXECUTE_SYMBOL:
                            case MySQLParser.SHUTDOWN_SYMBOL:
                            case MySQLParser.RESTART_SYMBOL:
                                {
                                    this.state = 8283;
                                    this.identifierKeywordsAmbiguous1RolesAndLabels();
                                }
                                break;
                            case MySQLParser.ASCII_SYMBOL:
                            case MySQLParser.BEGIN_SYMBOL:
                            case MySQLParser.BYTE_SYMBOL:
                            case MySQLParser.CACHE_SYMBOL:
                            case MySQLParser.CHARSET_SYMBOL:
                            case MySQLParser.CHECKSUM_SYMBOL:
                            case MySQLParser.COMMENT_SYMBOL:
                            case MySQLParser.COMMIT_SYMBOL:
                            case MySQLParser.CONTAINS_SYMBOL:
                            case MySQLParser.DEALLOCATE_SYMBOL:
                            case MySQLParser.DO_SYMBOL:
                            case MySQLParser.END_SYMBOL:
                            case MySQLParser.FLUSH_SYMBOL:
                            case MySQLParser.FOLLOWS_SYMBOL:
                            case MySQLParser.HANDLER_SYMBOL:
                            case MySQLParser.HELP_SYMBOL:
                            case MySQLParser.INSTALL_SYMBOL:
                            case MySQLParser.LANGUAGE_SYMBOL:
                            case MySQLParser.NO_SYMBOL:
                            case MySQLParser.PRECEDES_SYMBOL:
                            case MySQLParser.PREPARE_SYMBOL:
                            case MySQLParser.REPAIR_SYMBOL:
                            case MySQLParser.RESET_SYMBOL:
                            case MySQLParser.ROLLBACK_SYMBOL:
                            case MySQLParser.SAVEPOINT_SYMBOL:
                            case MySQLParser.SIGNED_SYMBOL:
                            case MySQLParser.SLAVE_SYMBOL:
                            case MySQLParser.START_SYMBOL:
                            case MySQLParser.STOP_SYMBOL:
                            case MySQLParser.TRUNCATE_SYMBOL:
                            case MySQLParser.UNICODE_SYMBOL:
                            case MySQLParser.UNINSTALL_SYMBOL:
                            case MySQLParser.XA_SYMBOL:
                            case MySQLParser.IMPORT_SYMBOL:
                            case MySQLParser.CLONE_SYMBOL:
                                {
                                    this.state = 8284;
                                    this.identifierKeywordsAmbiguous2Labels();
                                }
                                break;
                            case MySQLParser.EVENT_SYMBOL:
                            case MySQLParser.FILE_SYMBOL:
                            case MySQLParser.NONE_SYMBOL:
                            case MySQLParser.PROCESS_SYMBOL:
                            case MySQLParser.PROXY_SYMBOL:
                            case MySQLParser.RELOAD_SYMBOL:
                            case MySQLParser.REPLICATION_SYMBOL:
                            case MySQLParser.SUPER_SYMBOL:
                            case MySQLParser.RESOURCE_SYMBOL:
                                {
                                    this.state = 8285;
                                    this.identifierKeywordsAmbiguous3Roles();
                                }
                                break;
                            case MySQLParser.GLOBAL_SYMBOL:
                            case MySQLParser.LOCAL_SYMBOL:
                            case MySQLParser.SESSION_SYMBOL:
                            case MySQLParser.PERSIST_SYMBOL:
                            case MySQLParser.PERSIST_ONLY_SYMBOL:
                                {
                                    this.state = 8286;
                                    this.identifierKeywordsAmbiguous4SystemVariables();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    identifierKeywordsAmbiguous1RolesAndLabels() {
        let _localctx = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(this._ctx, this.state);
        this.enterRule(_localctx, 1190, MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8291;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.EXECUTE_SYMBOL || _la === MySQLParser.SHUTDOWN_SYMBOL || _la === MySQLParser.RESTART_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    identifierKeywordsAmbiguous2Labels() {
        let _localctx = new IdentifierKeywordsAmbiguous2LabelsContext(this._ctx, this.state);
        this.enterRule(_localctx, 1192, MySQLParser.RULE_identifierKeywordsAmbiguous2Labels);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8293;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MySQLParser.ASCII_SYMBOL) | (1 << MySQLParser.BEGIN_SYMBOL) | (1 << MySQLParser.BYTE_SYMBOL) | (1 << MySQLParser.CACHE_SYMBOL) | (1 << MySQLParser.CHARSET_SYMBOL) | (1 << MySQLParser.CHECKSUM_SYMBOL) | (1 << MySQLParser.COMMENT_SYMBOL) | (1 << MySQLParser.COMMIT_SYMBOL) | (1 << MySQLParser.CONTAINS_SYMBOL) | (1 << MySQLParser.DEALLOCATE_SYMBOL) | (1 << MySQLParser.DO_SYMBOL) | (1 << MySQLParser.END_SYMBOL) | (1 << MySQLParser.FLUSH_SYMBOL) | (1 << MySQLParser.FOLLOWS_SYMBOL) | (1 << MySQLParser.HANDLER_SYMBOL) | (1 << MySQLParser.HELP_SYMBOL) | (1 << MySQLParser.INSTALL_SYMBOL) | (1 << MySQLParser.LANGUAGE_SYMBOL) | (1 << MySQLParser.NO_SYMBOL))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (MySQLParser.PRECEDES_SYMBOL - 34)) | (1 << (MySQLParser.PREPARE_SYMBOL - 34)) | (1 << (MySQLParser.REPAIR_SYMBOL - 34)) | (1 << (MySQLParser.RESET_SYMBOL - 34)) | (1 << (MySQLParser.ROLLBACK_SYMBOL - 34)) | (1 << (MySQLParser.SAVEPOINT_SYMBOL - 34)) | (1 << (MySQLParser.SIGNED_SYMBOL - 34)) | (1 << (MySQLParser.SLAVE_SYMBOL - 34)) | (1 << (MySQLParser.START_SYMBOL - 34)) | (1 << (MySQLParser.STOP_SYMBOL - 34)) | (1 << (MySQLParser.TRUNCATE_SYMBOL - 34)) | (1 << (MySQLParser.UNICODE_SYMBOL - 34)) | (1 << (MySQLParser.UNINSTALL_SYMBOL - 34)) | (1 << (MySQLParser.XA_SYMBOL - 34)))) !== 0) || _la === MySQLParser.IMPORT_SYMBOL || _la === MySQLParser.CLONE_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    labelKeyword() {
        let _localctx = new LabelKeywordContext(this._ctx, this.state);
        this.enterRule(_localctx, 1194, MySQLParser.RULE_labelKeyword);
        try {
            this.state = 8313;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1113, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8295;
                        if (!(this.serverVersion < 80017)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80017");
                        }
                        this.state = 8306;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 1111, this._ctx)) {
                            case 1:
                                {
                                    this.state = 8296;
                                    this.roleOrLabelKeyword();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 8297;
                                    this.match(MySQLParser.EVENT_SYMBOL);
                                }
                                break;
                            case 3:
                                {
                                    this.state = 8298;
                                    this.match(MySQLParser.FILE_SYMBOL);
                                }
                                break;
                            case 4:
                                {
                                    this.state = 8299;
                                    this.match(MySQLParser.NONE_SYMBOL);
                                }
                                break;
                            case 5:
                                {
                                    this.state = 8300;
                                    this.match(MySQLParser.PROCESS_SYMBOL);
                                }
                                break;
                            case 6:
                                {
                                    this.state = 8301;
                                    this.match(MySQLParser.PROXY_SYMBOL);
                                }
                                break;
                            case 7:
                                {
                                    this.state = 8302;
                                    this.match(MySQLParser.RELOAD_SYMBOL);
                                }
                                break;
                            case 8:
                                {
                                    this.state = 8303;
                                    this.match(MySQLParser.REPLICATION_SYMBOL);
                                }
                                break;
                            case 9:
                                {
                                    this.state = 8304;
                                    this.match(MySQLParser.RESOURCE_SYMBOL);
                                }
                                break;
                            case 10:
                                {
                                    this.state = 8305;
                                    this.match(MySQLParser.SUPER_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8311;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case MySQLParser.ACCOUNT_SYMBOL:
                            case MySQLParser.ALWAYS_SYMBOL:
                            case MySQLParser.BACKUP_SYMBOL:
                            case MySQLParser.CLOSE_SYMBOL:
                            case MySQLParser.FORMAT_SYMBOL:
                            case MySQLParser.GROUP_REPLICATION_SYMBOL:
                            case MySQLParser.HOST_SYMBOL:
                            case MySQLParser.OPEN_SYMBOL:
                            case MySQLParser.OPTIONS_SYMBOL:
                            case MySQLParser.OWNER_SYMBOL:
                            case MySQLParser.PARSER_SYMBOL:
                            case MySQLParser.PORT_SYMBOL:
                            case MySQLParser.REMOVE_SYMBOL:
                            case MySQLParser.RESTORE_SYMBOL:
                            case MySQLParser.SECURITY_SYMBOL:
                            case MySQLParser.SERVER_SYMBOL:
                            case MySQLParser.SOCKET_SYMBOL:
                            case MySQLParser.SONAME_SYMBOL:
                            case MySQLParser.UPGRADE_SYMBOL:
                            case MySQLParser.WRAPPER_SYMBOL:
                            case MySQLParser.ACTION_SYMBOL:
                            case MySQLParser.ADDDATE_SYMBOL:
                            case MySQLParser.AFTER_SYMBOL:
                            case MySQLParser.AGAINST_SYMBOL:
                            case MySQLParser.AGGREGATE_SYMBOL:
                            case MySQLParser.ALGORITHM_SYMBOL:
                            case MySQLParser.ANY_SYMBOL:
                            case MySQLParser.AT_SYMBOL:
                            case MySQLParser.AUTO_INCREMENT_SYMBOL:
                            case MySQLParser.AUTOEXTEND_SIZE_SYMBOL:
                            case MySQLParser.AVG_ROW_LENGTH_SYMBOL:
                            case MySQLParser.AVG_SYMBOL:
                            case MySQLParser.BINLOG_SYMBOL:
                            case MySQLParser.BIT_SYMBOL:
                            case MySQLParser.BLOCK_SYMBOL:
                            case MySQLParser.BOOL_SYMBOL:
                            case MySQLParser.BOOLEAN_SYMBOL:
                            case MySQLParser.BTREE_SYMBOL:
                            case MySQLParser.CASCADED_SYMBOL:
                            case MySQLParser.CATALOG_NAME_SYMBOL:
                            case MySQLParser.CHAIN_SYMBOL:
                            case MySQLParser.CHANGED_SYMBOL:
                            case MySQLParser.CHANNEL_SYMBOL:
                            case MySQLParser.CIPHER_SYMBOL:
                            case MySQLParser.CLIENT_SYMBOL:
                            case MySQLParser.CLASS_ORIGIN_SYMBOL:
                            case MySQLParser.COALESCE_SYMBOL:
                            case MySQLParser.CODE_SYMBOL:
                            case MySQLParser.COLLATION_SYMBOL:
                            case MySQLParser.COLUMN_NAME_SYMBOL:
                            case MySQLParser.COLUMN_FORMAT_SYMBOL:
                            case MySQLParser.COLUMNS_SYMBOL:
                            case MySQLParser.COMMITTED_SYMBOL:
                            case MySQLParser.COMPACT_SYMBOL:
                            case MySQLParser.COMPLETION_SYMBOL:
                            case MySQLParser.COMPRESSED_SYMBOL:
                            case MySQLParser.COMPRESSION_SYMBOL:
                            case MySQLParser.ENCRYPTION_SYMBOL:
                            case MySQLParser.CONCURRENT_SYMBOL:
                            case MySQLParser.CONNECTION_SYMBOL:
                            case MySQLParser.CONSISTENT_SYMBOL:
                            case MySQLParser.CONSTRAINT_CATALOG_SYMBOL:
                            case MySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
                            case MySQLParser.CONSTRAINT_NAME_SYMBOL:
                            case MySQLParser.CONTEXT_SYMBOL:
                            case MySQLParser.CPU_SYMBOL:
                            case MySQLParser.CURRENT_SYMBOL:
                            case MySQLParser.CURSOR_NAME_SYMBOL:
                            case MySQLParser.DATA_SYMBOL:
                            case MySQLParser.DATAFILE_SYMBOL:
                            case MySQLParser.DATETIME_SYMBOL:
                            case MySQLParser.DATE_SYMBOL:
                            case MySQLParser.DAY_SYMBOL:
                            case MySQLParser.DEFAULT_AUTH_SYMBOL:
                            case MySQLParser.DEFINER_SYMBOL:
                            case MySQLParser.DELAY_KEY_WRITE_SYMBOL:
                            case MySQLParser.DIAGNOSTICS_SYMBOL:
                            case MySQLParser.DIRECTORY_SYMBOL:
                            case MySQLParser.DISABLE_SYMBOL:
                            case MySQLParser.DISCARD_SYMBOL:
                            case MySQLParser.DISK_SYMBOL:
                            case MySQLParser.DUMPFILE_SYMBOL:
                            case MySQLParser.DUPLICATE_SYMBOL:
                            case MySQLParser.DYNAMIC_SYMBOL:
                            case MySQLParser.ENDS_SYMBOL:
                            case MySQLParser.ENUM_SYMBOL:
                            case MySQLParser.ENGINE_SYMBOL:
                            case MySQLParser.ENGINES_SYMBOL:
                            case MySQLParser.ERROR_SYMBOL:
                            case MySQLParser.ERRORS_SYMBOL:
                            case MySQLParser.ESCAPE_SYMBOL:
                            case MySQLParser.EVENTS_SYMBOL:
                            case MySQLParser.EVERY_SYMBOL:
                            case MySQLParser.EXPANSION_SYMBOL:
                            case MySQLParser.EXPORT_SYMBOL:
                            case MySQLParser.EXTENDED_SYMBOL:
                            case MySQLParser.EXTENT_SIZE_SYMBOL:
                            case MySQLParser.FAULTS_SYMBOL:
                            case MySQLParser.FAST_SYMBOL:
                            case MySQLParser.FOUND_SYMBOL:
                            case MySQLParser.ENABLE_SYMBOL:
                            case MySQLParser.FULL_SYMBOL:
                            case MySQLParser.FILE_BLOCK_SIZE_SYMBOL:
                            case MySQLParser.FILTER_SYMBOL:
                            case MySQLParser.FIRST_SYMBOL:
                            case MySQLParser.FIXED_SYMBOL:
                            case MySQLParser.GENERAL_SYMBOL:
                            case MySQLParser.GEOMETRY_SYMBOL:
                            case MySQLParser.GEOMETRYCOLLECTION_SYMBOL:
                            case MySQLParser.GET_FORMAT_SYMBOL:
                            case MySQLParser.GRANTS_SYMBOL:
                            case MySQLParser.HASH_SYMBOL:
                            case MySQLParser.HOSTS_SYMBOL:
                            case MySQLParser.HOUR_SYMBOL:
                            case MySQLParser.IDENTIFIED_SYMBOL:
                            case MySQLParser.IGNORE_SERVER_IDS_SYMBOL:
                            case MySQLParser.INVOKER_SYMBOL:
                            case MySQLParser.INDEXES_SYMBOL:
                            case MySQLParser.INITIAL_SIZE_SYMBOL:
                            case MySQLParser.INSTANCE_SYMBOL:
                            case MySQLParser.IO_SYMBOL:
                            case MySQLParser.IPC_SYMBOL:
                            case MySQLParser.ISOLATION_SYMBOL:
                            case MySQLParser.ISSUER_SYMBOL:
                            case MySQLParser.INSERT_METHOD_SYMBOL:
                            case MySQLParser.JSON_SYMBOL:
                            case MySQLParser.KEY_BLOCK_SIZE_SYMBOL:
                            case MySQLParser.LAST_SYMBOL:
                            case MySQLParser.LEAVES_SYMBOL:
                            case MySQLParser.LESS_SYMBOL:
                            case MySQLParser.LEVEL_SYMBOL:
                            case MySQLParser.LINESTRING_SYMBOL:
                            case MySQLParser.LIST_SYMBOL:
                            case MySQLParser.LOCKS_SYMBOL:
                            case MySQLParser.LOGFILE_SYMBOL:
                            case MySQLParser.LOGS_SYMBOL:
                            case MySQLParser.MAX_ROWS_SYMBOL:
                            case MySQLParser.MASTER_SYMBOL:
                            case MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL:
                            case MySQLParser.MASTER_HOST_SYMBOL:
                            case MySQLParser.MASTER_PORT_SYMBOL:
                            case MySQLParser.MASTER_LOG_FILE_SYMBOL:
                            case MySQLParser.MASTER_LOG_POS_SYMBOL:
                            case MySQLParser.MASTER_USER_SYMBOL:
                            case MySQLParser.MASTER_PASSWORD_SYMBOL:
                            case MySQLParser.MASTER_SERVER_ID_SYMBOL:
                            case MySQLParser.MASTER_CONNECT_RETRY_SYMBOL:
                            case MySQLParser.MASTER_RETRY_COUNT_SYMBOL:
                            case MySQLParser.MASTER_DELAY_SYMBOL:
                            case MySQLParser.MASTER_SSL_SYMBOL:
                            case MySQLParser.MASTER_SSL_CA_SYMBOL:
                            case MySQLParser.MASTER_SSL_CAPATH_SYMBOL:
                            case MySQLParser.MASTER_TLS_VERSION_SYMBOL:
                            case MySQLParser.MASTER_SSL_CERT_SYMBOL:
                            case MySQLParser.MASTER_SSL_CIPHER_SYMBOL:
                            case MySQLParser.MASTER_SSL_CRL_SYMBOL:
                            case MySQLParser.MASTER_SSL_CRLPATH_SYMBOL:
                            case MySQLParser.MASTER_SSL_KEY_SYMBOL:
                            case MySQLParser.MASTER_AUTO_POSITION_SYMBOL:
                            case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
                            case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
                            case MySQLParser.MAX_SIZE_SYMBOL:
                            case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
                            case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
                            case MySQLParser.MEDIUM_SYMBOL:
                            case MySQLParser.MEMORY_SYMBOL:
                            case MySQLParser.MERGE_SYMBOL:
                            case MySQLParser.MESSAGE_TEXT_SYMBOL:
                            case MySQLParser.MICROSECOND_SYMBOL:
                            case MySQLParser.MIGRATE_SYMBOL:
                            case MySQLParser.MINUTE_SYMBOL:
                            case MySQLParser.MIN_ROWS_SYMBOL:
                            case MySQLParser.MODIFY_SYMBOL:
                            case MySQLParser.MODE_SYMBOL:
                            case MySQLParser.MONTH_SYMBOL:
                            case MySQLParser.MULTILINESTRING_SYMBOL:
                            case MySQLParser.MULTIPOINT_SYMBOL:
                            case MySQLParser.MULTIPOLYGON_SYMBOL:
                            case MySQLParser.MUTEX_SYMBOL:
                            case MySQLParser.MYSQL_ERRNO_SYMBOL:
                            case MySQLParser.NAME_SYMBOL:
                            case MySQLParser.NAMES_SYMBOL:
                            case MySQLParser.NATIONAL_SYMBOL:
                            case MySQLParser.NCHAR_SYMBOL:
                            case MySQLParser.NDBCLUSTER_SYMBOL:
                            case MySQLParser.NEVER_SYMBOL:
                            case MySQLParser.NEXT_SYMBOL:
                            case MySQLParser.NEW_SYMBOL:
                            case MySQLParser.NO_WAIT_SYMBOL:
                            case MySQLParser.NODEGROUP_SYMBOL:
                            case MySQLParser.NUMBER_SYMBOL:
                            case MySQLParser.NVARCHAR_SYMBOL:
                            case MySQLParser.OFFSET_SYMBOL:
                            case MySQLParser.ONE_SYMBOL:
                            case MySQLParser.PACK_KEYS_SYMBOL:
                            case MySQLParser.PAGE_SYMBOL:
                            case MySQLParser.PARTIAL_SYMBOL:
                            case MySQLParser.PARTITIONING_SYMBOL:
                            case MySQLParser.PARTITIONS_SYMBOL:
                            case MySQLParser.PASSWORD_SYMBOL:
                            case MySQLParser.PHASE_SYMBOL:
                            case MySQLParser.PLUGIN_DIR_SYMBOL:
                            case MySQLParser.PLUGIN_SYMBOL:
                            case MySQLParser.PLUGINS_SYMBOL:
                            case MySQLParser.POINT_SYMBOL:
                            case MySQLParser.POLYGON_SYMBOL:
                            case MySQLParser.PRESERVE_SYMBOL:
                            case MySQLParser.PREV_SYMBOL:
                            case MySQLParser.PRIVILEGES_SYMBOL:
                            case MySQLParser.PROCESSLIST_SYMBOL:
                            case MySQLParser.PROFILE_SYMBOL:
                            case MySQLParser.PROFILES_SYMBOL:
                            case MySQLParser.QUARTER_SYMBOL:
                            case MySQLParser.QUERY_SYMBOL:
                            case MySQLParser.QUICK_SYMBOL:
                            case MySQLParser.READ_ONLY_SYMBOL:
                            case MySQLParser.REBUILD_SYMBOL:
                            case MySQLParser.RECOVER_SYMBOL:
                            case MySQLParser.REDO_BUFFER_SIZE_SYMBOL:
                            case MySQLParser.REDUNDANT_SYMBOL:
                            case MySQLParser.RELAY_SYMBOL:
                            case MySQLParser.RELAYLOG_SYMBOL:
                            case MySQLParser.RELAY_LOG_FILE_SYMBOL:
                            case MySQLParser.RELAY_LOG_POS_SYMBOL:
                            case MySQLParser.RELAY_THREAD_SYMBOL:
                            case MySQLParser.REORGANIZE_SYMBOL:
                            case MySQLParser.REPEATABLE_SYMBOL:
                            case MySQLParser.REPLICATE_DO_DB_SYMBOL:
                            case MySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
                            case MySQLParser.REPLICATE_DO_TABLE_SYMBOL:
                            case MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
                            case MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
                            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
                            case MySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
                            case MySQLParser.RESUME_SYMBOL:
                            case MySQLParser.RETURNED_SQLSTATE_SYMBOL:
                            case MySQLParser.RETURNS_SYMBOL:
                            case MySQLParser.REVERSE_SYMBOL:
                            case MySQLParser.ROLLUP_SYMBOL:
                            case MySQLParser.ROTATE_SYMBOL:
                            case MySQLParser.ROUTINE_SYMBOL:
                            case MySQLParser.ROW_COUNT_SYMBOL:
                            case MySQLParser.ROW_FORMAT_SYMBOL:
                            case MySQLParser.RTREE_SYMBOL:
                            case MySQLParser.SCHEDULE_SYMBOL:
                            case MySQLParser.SCHEMA_NAME_SYMBOL:
                            case MySQLParser.SECOND_SYMBOL:
                            case MySQLParser.SERIAL_SYMBOL:
                            case MySQLParser.SERIALIZABLE_SYMBOL:
                            case MySQLParser.SIMPLE_SYMBOL:
                            case MySQLParser.SHARE_SYMBOL:
                            case MySQLParser.SLOW_SYMBOL:
                            case MySQLParser.SNAPSHOT_SYMBOL:
                            case MySQLParser.SOUNDS_SYMBOL:
                            case MySQLParser.SOURCE_SYMBOL:
                            case MySQLParser.SQL_AFTER_GTIDS_SYMBOL:
                            case MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL:
                            case MySQLParser.SQL_BEFORE_GTIDS_SYMBOL:
                            case MySQLParser.SQL_BUFFER_RESULT_SYMBOL:
                            case MySQLParser.SQL_NO_CACHE_SYMBOL:
                            case MySQLParser.SQL_THREAD_SYMBOL:
                            case MySQLParser.STACKED_SYMBOL:
                            case MySQLParser.STARTS_SYMBOL:
                            case MySQLParser.STATS_AUTO_RECALC_SYMBOL:
                            case MySQLParser.STATS_PERSISTENT_SYMBOL:
                            case MySQLParser.STATS_SAMPLE_PAGES_SYMBOL:
                            case MySQLParser.STATUS_SYMBOL:
                            case MySQLParser.STORAGE_SYMBOL:
                            case MySQLParser.STRING_SYMBOL:
                            case MySQLParser.SUBCLASS_ORIGIN_SYMBOL:
                            case MySQLParser.SUBDATE_SYMBOL:
                            case MySQLParser.SUBJECT_SYMBOL:
                            case MySQLParser.SUBPARTITION_SYMBOL:
                            case MySQLParser.SUBPARTITIONS_SYMBOL:
                            case MySQLParser.SUSPEND_SYMBOL:
                            case MySQLParser.SWAPS_SYMBOL:
                            case MySQLParser.SWITCHES_SYMBOL:
                            case MySQLParser.TABLE_NAME_SYMBOL:
                            case MySQLParser.TABLES_SYMBOL:
                            case MySQLParser.TABLE_CHECKSUM_SYMBOL:
                            case MySQLParser.TABLESPACE_SYMBOL:
                            case MySQLParser.TEMPORARY_SYMBOL:
                            case MySQLParser.TEMPTABLE_SYMBOL:
                            case MySQLParser.TEXT_SYMBOL:
                            case MySQLParser.THAN_SYMBOL:
                            case MySQLParser.TRANSACTION_SYMBOL:
                            case MySQLParser.TRIGGERS_SYMBOL:
                            case MySQLParser.TIMESTAMP_SYMBOL:
                            case MySQLParser.TIMESTAMP_ADD_SYMBOL:
                            case MySQLParser.TIMESTAMP_DIFF_SYMBOL:
                            case MySQLParser.TIME_SYMBOL:
                            case MySQLParser.TYPES_SYMBOL:
                            case MySQLParser.TYPE_SYMBOL:
                            case MySQLParser.UNCOMMITTED_SYMBOL:
                            case MySQLParser.UNDEFINED_SYMBOL:
                            case MySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
                            case MySQLParser.UNDOFILE_SYMBOL:
                            case MySQLParser.UNKNOWN_SYMBOL:
                            case MySQLParser.UNTIL_SYMBOL:
                            case MySQLParser.USER_RESOURCES_SYMBOL:
                            case MySQLParser.USER_SYMBOL:
                            case MySQLParser.USE_FRM_SYMBOL:
                            case MySQLParser.VARIABLES_SYMBOL:
                            case MySQLParser.VIEW_SYMBOL:
                            case MySQLParser.VALUE_SYMBOL:
                            case MySQLParser.WARNINGS_SYMBOL:
                            case MySQLParser.WAIT_SYMBOL:
                            case MySQLParser.WEEK_SYMBOL:
                            case MySQLParser.WORK_SYMBOL:
                            case MySQLParser.WEIGHT_STRING_SYMBOL:
                            case MySQLParser.X509_SYMBOL:
                            case MySQLParser.XID_SYMBOL:
                            case MySQLParser.XML_SYMBOL:
                            case MySQLParser.YEAR_SYMBOL:
                            case MySQLParser.EXCHANGE_SYMBOL:
                            case MySQLParser.EXPIRE_SYMBOL:
                            case MySQLParser.ONLY_SYMBOL:
                            case MySQLParser.VALIDATION_SYMBOL:
                            case MySQLParser.WITHOUT_SYMBOL:
                            case MySQLParser.ROLE_SYMBOL:
                            case MySQLParser.ADMIN_SYMBOL:
                            case MySQLParser.INVISIBLE_SYMBOL:
                            case MySQLParser.VISIBLE_SYMBOL:
                            case MySQLParser.COMPONENT_SYMBOL:
                            case MySQLParser.SKIP_SYMBOL:
                            case MySQLParser.LOCKED_SYMBOL:
                            case MySQLParser.NOWAIT_SYMBOL:
                            case MySQLParser.HISTOGRAM_SYMBOL:
                            case MySQLParser.BUCKETS_SYMBOL:
                            case MySQLParser.EXCLUDE_SYMBOL:
                            case MySQLParser.FOLLOWING_SYMBOL:
                            case MySQLParser.NULLS_SYMBOL:
                            case MySQLParser.OTHERS_SYMBOL:
                            case MySQLParser.PRECEDING_SYMBOL:
                            case MySQLParser.RESPECT_SYMBOL:
                            case MySQLParser.TIES_SYMBOL:
                            case MySQLParser.UNBOUNDED_SYMBOL:
                            case MySQLParser.NESTED_SYMBOL:
                            case MySQLParser.ORDINALITY_SYMBOL:
                            case MySQLParser.PATH_SYMBOL:
                            case MySQLParser.HISTORY_SYMBOL:
                            case MySQLParser.REUSE_SYMBOL:
                            case MySQLParser.SRID_SYMBOL:
                            case MySQLParser.THREAD_PRIORITY_SYMBOL:
                            case MySQLParser.VCPU_SYMBOL:
                            case MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL:
                            case MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL:
                            case MySQLParser.DEFINITION_SYMBOL:
                            case MySQLParser.DESCRIPTION_SYMBOL:
                            case MySQLParser.ORGANIZATION_SYMBOL:
                            case MySQLParser.REFERENCE_SYMBOL:
                            case MySQLParser.OPTIONAL_SYMBOL:
                            case MySQLParser.SECONDARY_SYMBOL:
                            case MySQLParser.SECONDARY_ENGINE_SYMBOL:
                            case MySQLParser.SECONDARY_LOAD_SYMBOL:
                            case MySQLParser.SECONDARY_UNLOAD_SYMBOL:
                            case MySQLParser.ACTIVE_SYMBOL:
                            case MySQLParser.INACTIVE_SYMBOL:
                            case MySQLParser.RETAIN_SYMBOL:
                            case MySQLParser.OLD_SYMBOL:
                            case MySQLParser.NETWORK_NAMESPACE_SYMBOL:
                            case MySQLParser.ENFORCED_SYMBOL:
                            case MySQLParser.OJ_SYMBOL:
                            case MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL:
                            case MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
                            case MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL:
                            case MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL:
                                {
                                    this.state = 8308;
                                    this.identifierKeywordsUnambiguous();
                                }
                                break;
                            case MySQLParser.EVENT_SYMBOL:
                            case MySQLParser.FILE_SYMBOL:
                            case MySQLParser.NONE_SYMBOL:
                            case MySQLParser.PROCESS_SYMBOL:
                            case MySQLParser.PROXY_SYMBOL:
                            case MySQLParser.RELOAD_SYMBOL:
                            case MySQLParser.REPLICATION_SYMBOL:
                            case MySQLParser.SUPER_SYMBOL:
                            case MySQLParser.RESOURCE_SYMBOL:
                                {
                                    this.state = 8309;
                                    this.identifierKeywordsAmbiguous3Roles();
                                }
                                break;
                            case MySQLParser.GLOBAL_SYMBOL:
                            case MySQLParser.LOCAL_SYMBOL:
                            case MySQLParser.SESSION_SYMBOL:
                            case MySQLParser.PERSIST_SYMBOL:
                            case MySQLParser.PERSIST_ONLY_SYMBOL:
                                {
                                    this.state = 8310;
                                    this.identifierKeywordsAmbiguous4SystemVariables();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    identifierKeywordsAmbiguous3Roles() {
        let _localctx = new IdentifierKeywordsAmbiguous3RolesContext(this._ctx, this.state);
        this.enterRule(_localctx, 1196, MySQLParser.RULE_identifierKeywordsAmbiguous3Roles);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8315;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.EVENT_SYMBOL || _la === MySQLParser.FILE_SYMBOL || ((((_la - 239)) & ~0x1F) === 0 && ((1 << (_la - 239)) & ((1 << (MySQLParser.NONE_SYMBOL - 239)) | (1 << (MySQLParser.PROCESS_SYMBOL - 239)) | (1 << (MySQLParser.PROXY_SYMBOL - 239)))) !== 0) || _la === MySQLParser.RELOAD_SYMBOL || _la === MySQLParser.REPLICATION_SYMBOL || _la === MySQLParser.SUPER_SYMBOL || _la === MySQLParser.RESOURCE_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    identifierKeywordsUnambiguous() {
        let _localctx = new IdentifierKeywordsUnambiguousContext(this._ctx, this.state);
        this.enterRule(_localctx, 1198, MySQLParser.RULE_identifierKeywordsUnambiguous);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8317;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MySQLParser.ACCOUNT_SYMBOL) | (1 << MySQLParser.ALWAYS_SYMBOL) | (1 << MySQLParser.BACKUP_SYMBOL) | (1 << MySQLParser.CLOSE_SYMBOL) | (1 << MySQLParser.FORMAT_SYMBOL) | (1 << MySQLParser.GROUP_REPLICATION_SYMBOL) | (1 << MySQLParser.HOST_SYMBOL) | (1 << MySQLParser.OPEN_SYMBOL) | (1 << MySQLParser.OPTIONS_SYMBOL) | (1 << MySQLParser.OWNER_SYMBOL) | (1 << MySQLParser.PARSER_SYMBOL))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (MySQLParser.PORT_SYMBOL - 33)) | (1 << (MySQLParser.REMOVE_SYMBOL - 33)) | (1 << (MySQLParser.RESTORE_SYMBOL - 33)) | (1 << (MySQLParser.SECURITY_SYMBOL - 33)) | (1 << (MySQLParser.SERVER_SYMBOL - 33)) | (1 << (MySQLParser.SOCKET_SYMBOL - 33)) | (1 << (MySQLParser.SONAME_SYMBOL - 33)) | (1 << (MySQLParser.UPGRADE_SYMBOL - 33)) | (1 << (MySQLParser.WRAPPER_SYMBOL - 33)) | (1 << (MySQLParser.ACTION_SYMBOL - 33)) | (1 << (MySQLParser.ADDDATE_SYMBOL - 33)) | (1 << (MySQLParser.AFTER_SYMBOL - 33)) | (1 << (MySQLParser.AGAINST_SYMBOL - 33)) | (1 << (MySQLParser.AGGREGATE_SYMBOL - 33)) | (1 << (MySQLParser.ALGORITHM_SYMBOL - 33)) | (1 << (MySQLParser.ANY_SYMBOL - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (MySQLParser.AT_SYMBOL - 65)) | (1 << (MySQLParser.AUTO_INCREMENT_SYMBOL - 65)) | (1 << (MySQLParser.AUTOEXTEND_SIZE_SYMBOL - 65)) | (1 << (MySQLParser.AVG_ROW_LENGTH_SYMBOL - 65)) | (1 << (MySQLParser.AVG_SYMBOL - 65)) | (1 << (MySQLParser.BINLOG_SYMBOL - 65)) | (1 << (MySQLParser.BIT_SYMBOL - 65)) | (1 << (MySQLParser.BLOCK_SYMBOL - 65)) | (1 << (MySQLParser.BOOL_SYMBOL - 65)) | (1 << (MySQLParser.BOOLEAN_SYMBOL - 65)) | (1 << (MySQLParser.BTREE_SYMBOL - 65)) | (1 << (MySQLParser.CASCADED_SYMBOL - 65)) | (1 << (MySQLParser.CATALOG_NAME_SYMBOL - 65)) | (1 << (MySQLParser.CHAIN_SYMBOL - 65)) | (1 << (MySQLParser.CHANGED_SYMBOL - 65)) | (1 << (MySQLParser.CHANNEL_SYMBOL - 65)) | (1 << (MySQLParser.CIPHER_SYMBOL - 65)) | (1 << (MySQLParser.CLIENT_SYMBOL - 65)) | (1 << (MySQLParser.CLASS_ORIGIN_SYMBOL - 65)) | (1 << (MySQLParser.COALESCE_SYMBOL - 65)) | (1 << (MySQLParser.CODE_SYMBOL - 65)) | (1 << (MySQLParser.COLLATION_SYMBOL - 65)) | (1 << (MySQLParser.COLUMN_NAME_SYMBOL - 65)) | (1 << (MySQLParser.COLUMN_FORMAT_SYMBOL - 65)) | (1 << (MySQLParser.COLUMNS_SYMBOL - 65)) | (1 << (MySQLParser.COMMITTED_SYMBOL - 65)) | (1 << (MySQLParser.COMPACT_SYMBOL - 65)) | (1 << (MySQLParser.COMPLETION_SYMBOL - 65)) | (1 << (MySQLParser.COMPRESSED_SYMBOL - 65)) | (1 << (MySQLParser.COMPRESSION_SYMBOL - 65)) | (1 << (MySQLParser.ENCRYPTION_SYMBOL - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (MySQLParser.CONCURRENT_SYMBOL - 97)) | (1 << (MySQLParser.CONNECTION_SYMBOL - 97)) | (1 << (MySQLParser.CONSISTENT_SYMBOL - 97)) | (1 << (MySQLParser.CONSTRAINT_CATALOG_SYMBOL - 97)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA_SYMBOL - 97)) | (1 << (MySQLParser.CONSTRAINT_NAME_SYMBOL - 97)) | (1 << (MySQLParser.CONTEXT_SYMBOL - 97)) | (1 << (MySQLParser.CPU_SYMBOL - 97)) | (1 << (MySQLParser.CURRENT_SYMBOL - 97)) | (1 << (MySQLParser.CURSOR_NAME_SYMBOL - 97)) | (1 << (MySQLParser.DATA_SYMBOL - 97)) | (1 << (MySQLParser.DATAFILE_SYMBOL - 97)) | (1 << (MySQLParser.DATETIME_SYMBOL - 97)) | (1 << (MySQLParser.DATE_SYMBOL - 97)) | (1 << (MySQLParser.DAY_SYMBOL - 97)) | (1 << (MySQLParser.DEFAULT_AUTH_SYMBOL - 97)) | (1 << (MySQLParser.DEFINER_SYMBOL - 97)) | (1 << (MySQLParser.DELAY_KEY_WRITE_SYMBOL - 97)) | (1 << (MySQLParser.DIAGNOSTICS_SYMBOL - 97)) | (1 << (MySQLParser.DIRECTORY_SYMBOL - 97)) | (1 << (MySQLParser.DISABLE_SYMBOL - 97)) | (1 << (MySQLParser.DISCARD_SYMBOL - 97)) | (1 << (MySQLParser.DISK_SYMBOL - 97)) | (1 << (MySQLParser.DUMPFILE_SYMBOL - 97)) | (1 << (MySQLParser.DUPLICATE_SYMBOL - 97)) | (1 << (MySQLParser.DYNAMIC_SYMBOL - 97)) | (1 << (MySQLParser.ENDS_SYMBOL - 97)) | (1 << (MySQLParser.ENUM_SYMBOL - 97)) | (1 << (MySQLParser.ENGINE_SYMBOL - 97)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (MySQLParser.ENGINES_SYMBOL - 129)) | (1 << (MySQLParser.ERROR_SYMBOL - 129)) | (1 << (MySQLParser.ERRORS_SYMBOL - 129)) | (1 << (MySQLParser.ESCAPE_SYMBOL - 129)) | (1 << (MySQLParser.EVENTS_SYMBOL - 129)) | (1 << (MySQLParser.EVERY_SYMBOL - 129)) | (1 << (MySQLParser.EXPANSION_SYMBOL - 129)) | (1 << (MySQLParser.EXPORT_SYMBOL - 129)) | (1 << (MySQLParser.EXTENDED_SYMBOL - 129)) | (1 << (MySQLParser.EXTENT_SIZE_SYMBOL - 129)) | (1 << (MySQLParser.FAULTS_SYMBOL - 129)) | (1 << (MySQLParser.FAST_SYMBOL - 129)) | (1 << (MySQLParser.FOUND_SYMBOL - 129)) | (1 << (MySQLParser.ENABLE_SYMBOL - 129)) | (1 << (MySQLParser.FULL_SYMBOL - 129)) | (1 << (MySQLParser.FILE_BLOCK_SIZE_SYMBOL - 129)) | (1 << (MySQLParser.FILTER_SYMBOL - 129)) | (1 << (MySQLParser.FIRST_SYMBOL - 129)) | (1 << (MySQLParser.FIXED_SYMBOL - 129)) | (1 << (MySQLParser.GENERAL_SYMBOL - 129)) | (1 << (MySQLParser.GEOMETRY_SYMBOL - 129)) | (1 << (MySQLParser.GEOMETRYCOLLECTION_SYMBOL - 129)) | (1 << (MySQLParser.GET_FORMAT_SYMBOL - 129)) | (1 << (MySQLParser.GRANTS_SYMBOL - 129)) | (1 << (MySQLParser.HASH_SYMBOL - 129)) | (1 << (MySQLParser.HOSTS_SYMBOL - 129)) | (1 << (MySQLParser.HOUR_SYMBOL - 129)) | (1 << (MySQLParser.IDENTIFIED_SYMBOL - 129)) | (1 << (MySQLParser.IGNORE_SERVER_IDS_SYMBOL - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (MySQLParser.INVOKER_SYMBOL - 161)) | (1 << (MySQLParser.INDEXES_SYMBOL - 161)) | (1 << (MySQLParser.INITIAL_SIZE_SYMBOL - 161)) | (1 << (MySQLParser.INSTANCE_SYMBOL - 161)) | (1 << (MySQLParser.IO_SYMBOL - 161)) | (1 << (MySQLParser.IPC_SYMBOL - 161)) | (1 << (MySQLParser.ISOLATION_SYMBOL - 161)) | (1 << (MySQLParser.ISSUER_SYMBOL - 161)) | (1 << (MySQLParser.INSERT_METHOD_SYMBOL - 161)) | (1 << (MySQLParser.JSON_SYMBOL - 161)) | (1 << (MySQLParser.KEY_BLOCK_SIZE_SYMBOL - 161)) | (1 << (MySQLParser.LAST_SYMBOL - 161)) | (1 << (MySQLParser.LEAVES_SYMBOL - 161)) | (1 << (MySQLParser.LESS_SYMBOL - 161)) | (1 << (MySQLParser.LEVEL_SYMBOL - 161)) | (1 << (MySQLParser.LINESTRING_SYMBOL - 161)) | (1 << (MySQLParser.LIST_SYMBOL - 161)) | (1 << (MySQLParser.LOCKS_SYMBOL - 161)) | (1 << (MySQLParser.LOGFILE_SYMBOL - 161)) | (1 << (MySQLParser.LOGS_SYMBOL - 161)) | (1 << (MySQLParser.MAX_ROWS_SYMBOL - 161)) | (1 << (MySQLParser.MASTER_SYMBOL - 161)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL - 161)) | (1 << (MySQLParser.MASTER_HOST_SYMBOL - 161)) | (1 << (MySQLParser.MASTER_PORT_SYMBOL - 161)) | (1 << (MySQLParser.MASTER_LOG_FILE_SYMBOL - 161)) | (1 << (MySQLParser.MASTER_LOG_POS_SYMBOL - 161)) | (1 << (MySQLParser.MASTER_USER_SYMBOL - 161)) | (1 << (MySQLParser.MASTER_PASSWORD_SYMBOL - 161)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (MySQLParser.MASTER_SERVER_ID_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_RETRY_COUNT_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_DELAY_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_SSL_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_SSL_CA_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_SSL_CAPATH_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_TLS_VERSION_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_SSL_CERT_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_SSL_CIPHER_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_SSL_CRL_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_SSL_KEY_SYMBOL - 193)) | (1 << (MySQLParser.MASTER_AUTO_POSITION_SYMBOL - 193)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 193)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 193)) | (1 << (MySQLParser.MAX_SIZE_SYMBOL - 193)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 193)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS_SYMBOL - 193)) | (1 << (MySQLParser.MEDIUM_SYMBOL - 193)) | (1 << (MySQLParser.MEMORY_SYMBOL - 193)) | (1 << (MySQLParser.MERGE_SYMBOL - 193)) | (1 << (MySQLParser.MESSAGE_TEXT_SYMBOL - 193)) | (1 << (MySQLParser.MICROSECOND_SYMBOL - 193)) | (1 << (MySQLParser.MIGRATE_SYMBOL - 193)) | (1 << (MySQLParser.MINUTE_SYMBOL - 193)) | (1 << (MySQLParser.MIN_ROWS_SYMBOL - 193)) | (1 << (MySQLParser.MODIFY_SYMBOL - 193)) | (1 << (MySQLParser.MODE_SYMBOL - 193)) | (1 << (MySQLParser.MONTH_SYMBOL - 193)) | (1 << (MySQLParser.MULTILINESTRING_SYMBOL - 193)))) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & ((1 << (MySQLParser.MULTIPOINT_SYMBOL - 225)) | (1 << (MySQLParser.MULTIPOLYGON_SYMBOL - 225)) | (1 << (MySQLParser.MUTEX_SYMBOL - 225)) | (1 << (MySQLParser.MYSQL_ERRNO_SYMBOL - 225)) | (1 << (MySQLParser.NAME_SYMBOL - 225)) | (1 << (MySQLParser.NAMES_SYMBOL - 225)) | (1 << (MySQLParser.NATIONAL_SYMBOL - 225)) | (1 << (MySQLParser.NCHAR_SYMBOL - 225)) | (1 << (MySQLParser.NDBCLUSTER_SYMBOL - 225)) | (1 << (MySQLParser.NEVER_SYMBOL - 225)) | (1 << (MySQLParser.NEXT_SYMBOL - 225)) | (1 << (MySQLParser.NEW_SYMBOL - 225)) | (1 << (MySQLParser.NO_WAIT_SYMBOL - 225)) | (1 << (MySQLParser.NODEGROUP_SYMBOL - 225)) | (1 << (MySQLParser.NUMBER_SYMBOL - 225)) | (1 << (MySQLParser.NVARCHAR_SYMBOL - 225)) | (1 << (MySQLParser.OFFSET_SYMBOL - 225)) | (1 << (MySQLParser.ONE_SYMBOL - 225)) | (1 << (MySQLParser.PACK_KEYS_SYMBOL - 225)) | (1 << (MySQLParser.PAGE_SYMBOL - 225)) | (1 << (MySQLParser.PARTIAL_SYMBOL - 225)) | (1 << (MySQLParser.PARTITIONING_SYMBOL - 225)) | (1 << (MySQLParser.PARTITIONS_SYMBOL - 225)) | (1 << (MySQLParser.PASSWORD_SYMBOL - 225)) | (1 << (MySQLParser.PHASE_SYMBOL - 225)) | (1 << (MySQLParser.PLUGIN_DIR_SYMBOL - 225)) | (1 << (MySQLParser.PLUGIN_SYMBOL - 225)) | (1 << (MySQLParser.PLUGINS_SYMBOL - 225)) | (1 << (MySQLParser.POINT_SYMBOL - 225)))) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & ((1 << (MySQLParser.POLYGON_SYMBOL - 257)) | (1 << (MySQLParser.PRESERVE_SYMBOL - 257)) | (1 << (MySQLParser.PREV_SYMBOL - 257)) | (1 << (MySQLParser.PRIVILEGES_SYMBOL - 257)) | (1 << (MySQLParser.PROCESSLIST_SYMBOL - 257)) | (1 << (MySQLParser.PROFILE_SYMBOL - 257)) | (1 << (MySQLParser.PROFILES_SYMBOL - 257)) | (1 << (MySQLParser.QUARTER_SYMBOL - 257)) | (1 << (MySQLParser.QUERY_SYMBOL - 257)) | (1 << (MySQLParser.QUICK_SYMBOL - 257)) | (1 << (MySQLParser.READ_ONLY_SYMBOL - 257)) | (1 << (MySQLParser.REBUILD_SYMBOL - 257)) | (1 << (MySQLParser.RECOVER_SYMBOL - 257)) | (1 << (MySQLParser.REDO_BUFFER_SIZE_SYMBOL - 257)) | (1 << (MySQLParser.REDUNDANT_SYMBOL - 257)) | (1 << (MySQLParser.RELAY_SYMBOL - 257)) | (1 << (MySQLParser.RELAYLOG_SYMBOL - 257)) | (1 << (MySQLParser.RELAY_LOG_FILE_SYMBOL - 257)) | (1 << (MySQLParser.RELAY_LOG_POS_SYMBOL - 257)) | (1 << (MySQLParser.RELAY_THREAD_SYMBOL - 257)) | (1 << (MySQLParser.REORGANIZE_SYMBOL - 257)) | (1 << (MySQLParser.REPEATABLE_SYMBOL - 257)) | (1 << (MySQLParser.REPLICATE_DO_DB_SYMBOL - 257)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB_SYMBOL - 257)) | (1 << (MySQLParser.REPLICATE_DO_TABLE_SYMBOL - 257)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL - 257)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL - 257)))) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & ((1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 289)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB_SYMBOL - 289)) | (1 << (MySQLParser.RESUME_SYMBOL - 289)) | (1 << (MySQLParser.RETURNED_SQLSTATE_SYMBOL - 289)) | (1 << (MySQLParser.RETURNS_SYMBOL - 289)) | (1 << (MySQLParser.REVERSE_SYMBOL - 289)) | (1 << (MySQLParser.ROLLUP_SYMBOL - 289)) | (1 << (MySQLParser.ROTATE_SYMBOL - 289)) | (1 << (MySQLParser.ROUTINE_SYMBOL - 289)) | (1 << (MySQLParser.ROW_COUNT_SYMBOL - 289)) | (1 << (MySQLParser.ROW_FORMAT_SYMBOL - 289)) | (1 << (MySQLParser.RTREE_SYMBOL - 289)) | (1 << (MySQLParser.SCHEDULE_SYMBOL - 289)) | (1 << (MySQLParser.SCHEMA_NAME_SYMBOL - 289)) | (1 << (MySQLParser.SECOND_SYMBOL - 289)) | (1 << (MySQLParser.SERIAL_SYMBOL - 289)) | (1 << (MySQLParser.SERIALIZABLE_SYMBOL - 289)) | (1 << (MySQLParser.SIMPLE_SYMBOL - 289)) | (1 << (MySQLParser.SHARE_SYMBOL - 289)) | (1 << (MySQLParser.SLOW_SYMBOL - 289)) | (1 << (MySQLParser.SNAPSHOT_SYMBOL - 289)) | (1 << (MySQLParser.SOUNDS_SYMBOL - 289)) | (1 << (MySQLParser.SOURCE_SYMBOL - 289)) | (1 << (MySQLParser.SQL_AFTER_GTIDS_SYMBOL - 289)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL - 289)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS_SYMBOL - 289)) | (1 << (MySQLParser.SQL_BUFFER_RESULT_SYMBOL - 289)) | (1 << (MySQLParser.SQL_NO_CACHE_SYMBOL - 289)))) !== 0) || ((((_la - 321)) & ~0x1F) === 0 && ((1 << (_la - 321)) & ((1 << (MySQLParser.SQL_THREAD_SYMBOL - 321)) | (1 << (MySQLParser.STACKED_SYMBOL - 321)) | (1 << (MySQLParser.STARTS_SYMBOL - 321)) | (1 << (MySQLParser.STATS_AUTO_RECALC_SYMBOL - 321)) | (1 << (MySQLParser.STATS_PERSISTENT_SYMBOL - 321)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES_SYMBOL - 321)) | (1 << (MySQLParser.STATUS_SYMBOL - 321)) | (1 << (MySQLParser.STORAGE_SYMBOL - 321)) | (1 << (MySQLParser.STRING_SYMBOL - 321)) | (1 << (MySQLParser.SUBCLASS_ORIGIN_SYMBOL - 321)) | (1 << (MySQLParser.SUBDATE_SYMBOL - 321)) | (1 << (MySQLParser.SUBJECT_SYMBOL - 321)) | (1 << (MySQLParser.SUBPARTITION_SYMBOL - 321)) | (1 << (MySQLParser.SUBPARTITIONS_SYMBOL - 321)) | (1 << (MySQLParser.SUSPEND_SYMBOL - 321)) | (1 << (MySQLParser.SWAPS_SYMBOL - 321)) | (1 << (MySQLParser.SWITCHES_SYMBOL - 321)) | (1 << (MySQLParser.TABLE_NAME_SYMBOL - 321)) | (1 << (MySQLParser.TABLES_SYMBOL - 321)) | (1 << (MySQLParser.TABLE_CHECKSUM_SYMBOL - 321)) | (1 << (MySQLParser.TABLESPACE_SYMBOL - 321)) | (1 << (MySQLParser.TEMPORARY_SYMBOL - 321)) | (1 << (MySQLParser.TEMPTABLE_SYMBOL - 321)) | (1 << (MySQLParser.TEXT_SYMBOL - 321)) | (1 << (MySQLParser.THAN_SYMBOL - 321)) | (1 << (MySQLParser.TRANSACTION_SYMBOL - 321)) | (1 << (MySQLParser.TRIGGERS_SYMBOL - 321)) | (1 << (MySQLParser.TIMESTAMP_SYMBOL - 321)) | (1 << (MySQLParser.TIMESTAMP_ADD_SYMBOL - 321)) | (1 << (MySQLParser.TIMESTAMP_DIFF_SYMBOL - 321)) | (1 << (MySQLParser.TIME_SYMBOL - 321)))) !== 0) || ((((_la - 353)) & ~0x1F) === 0 && ((1 << (_la - 353)) & ((1 << (MySQLParser.TYPES_SYMBOL - 353)) | (1 << (MySQLParser.TYPE_SYMBOL - 353)) | (1 << (MySQLParser.UNCOMMITTED_SYMBOL - 353)) | (1 << (MySQLParser.UNDEFINED_SYMBOL - 353)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE_SYMBOL - 353)) | (1 << (MySQLParser.UNDOFILE_SYMBOL - 353)) | (1 << (MySQLParser.UNKNOWN_SYMBOL - 353)) | (1 << (MySQLParser.UNTIL_SYMBOL - 353)) | (1 << (MySQLParser.USER_RESOURCES_SYMBOL - 353)) | (1 << (MySQLParser.USER_SYMBOL - 353)) | (1 << (MySQLParser.USE_FRM_SYMBOL - 353)) | (1 << (MySQLParser.VARIABLES_SYMBOL - 353)) | (1 << (MySQLParser.VIEW_SYMBOL - 353)) | (1 << (MySQLParser.VALUE_SYMBOL - 353)) | (1 << (MySQLParser.WARNINGS_SYMBOL - 353)) | (1 << (MySQLParser.WAIT_SYMBOL - 353)) | (1 << (MySQLParser.WEEK_SYMBOL - 353)) | (1 << (MySQLParser.WORK_SYMBOL - 353)) | (1 << (MySQLParser.WEIGHT_STRING_SYMBOL - 353)) | (1 << (MySQLParser.X509_SYMBOL - 353)) | (1 << (MySQLParser.XID_SYMBOL - 353)) | (1 << (MySQLParser.XML_SYMBOL - 353)) | (1 << (MySQLParser.YEAR_SYMBOL - 353)))) !== 0) || _la === MySQLParser.EXCHANGE_SYMBOL || _la === MySQLParser.EXPIRE_SYMBOL || _la === MySQLParser.ONLY_SYMBOL || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySQLParser.VALIDATION_SYMBOL - 670)) | (1 << (MySQLParser.WITHOUT_SYMBOL - 670)) | (1 << (MySQLParser.ROLE_SYMBOL - 670)) | (1 << (MySQLParser.ADMIN_SYMBOL - 670)) | (1 << (MySQLParser.INVISIBLE_SYMBOL - 670)) | (1 << (MySQLParser.VISIBLE_SYMBOL - 670)) | (1 << (MySQLParser.COMPONENT_SYMBOL - 670)) | (1 << (MySQLParser.SKIP_SYMBOL - 670)) | (1 << (MySQLParser.LOCKED_SYMBOL - 670)) | (1 << (MySQLParser.NOWAIT_SYMBOL - 670)))) !== 0) || ((((_la - 704)) & ~0x1F) === 0 && ((1 << (_la - 704)) & ((1 << (MySQLParser.HISTOGRAM_SYMBOL - 704)) | (1 << (MySQLParser.BUCKETS_SYMBOL - 704)) | (1 << (MySQLParser.EXCLUDE_SYMBOL - 704)) | (1 << (MySQLParser.FOLLOWING_SYMBOL - 704)) | (1 << (MySQLParser.NULLS_SYMBOL - 704)) | (1 << (MySQLParser.OTHERS_SYMBOL - 704)) | (1 << (MySQLParser.PRECEDING_SYMBOL - 704)) | (1 << (MySQLParser.RESPECT_SYMBOL - 704)) | (1 << (MySQLParser.TIES_SYMBOL - 704)) | (1 << (MySQLParser.UNBOUNDED_SYMBOL - 704)) | (1 << (MySQLParser.NESTED_SYMBOL - 704)) | (1 << (MySQLParser.ORDINALITY_SYMBOL - 704)) | (1 << (MySQLParser.PATH_SYMBOL - 704)) | (1 << (MySQLParser.HISTORY_SYMBOL - 704)))) !== 0) || ((((_la - 736)) & ~0x1F) === 0 && ((1 << (_la - 736)) & ((1 << (MySQLParser.REUSE_SYMBOL - 736)) | (1 << (MySQLParser.SRID_SYMBOL - 736)) | (1 << (MySQLParser.THREAD_PRIORITY_SYMBOL - 736)) | (1 << (MySQLParser.VCPU_SYMBOL - 736)) | (1 << (MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL - 736)) | (1 << (MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL - 736)) | (1 << (MySQLParser.DEFINITION_SYMBOL - 736)) | (1 << (MySQLParser.DESCRIPTION_SYMBOL - 736)) | (1 << (MySQLParser.ORGANIZATION_SYMBOL - 736)) | (1 << (MySQLParser.REFERENCE_SYMBOL - 736)) | (1 << (MySQLParser.OPTIONAL_SYMBOL - 736)) | (1 << (MySQLParser.SECONDARY_SYMBOL - 736)) | (1 << (MySQLParser.SECONDARY_ENGINE_SYMBOL - 736)) | (1 << (MySQLParser.SECONDARY_LOAD_SYMBOL - 736)) | (1 << (MySQLParser.SECONDARY_UNLOAD_SYMBOL - 736)) | (1 << (MySQLParser.ACTIVE_SYMBOL - 736)) | (1 << (MySQLParser.INACTIVE_SYMBOL - 736)) | (1 << (MySQLParser.RETAIN_SYMBOL - 736)) | (1 << (MySQLParser.OLD_SYMBOL - 736)) | (1 << (MySQLParser.NETWORK_NAMESPACE_SYMBOL - 736)) | (1 << (MySQLParser.ENFORCED_SYMBOL - 736)) | (1 << (MySQLParser.OJ_SYMBOL - 736)) | (1 << (MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL - 736)) | (1 << (MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL - 736)) | (1 << (MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL - 736)))) !== 0) || _la === MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    roleKeyword() {
        let _localctx = new RoleKeywordContext(this._ctx, this.state);
        this.enterRule(_localctx, 1200, MySQLParser.RULE_roleKeyword);
        try {
            this.state = 8329;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1116, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8319;
                        if (!(this.serverVersion < 80017)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80017");
                        }
                        this.state = 8322;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 1114, this._ctx)) {
                            case 1:
                                {
                                    this.state = 8320;
                                    this.roleOrLabelKeyword();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 8321;
                                    this.roleOrIdentifierKeyword();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8327;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case MySQLParser.ACCOUNT_SYMBOL:
                            case MySQLParser.ALWAYS_SYMBOL:
                            case MySQLParser.BACKUP_SYMBOL:
                            case MySQLParser.CLOSE_SYMBOL:
                            case MySQLParser.FORMAT_SYMBOL:
                            case MySQLParser.GROUP_REPLICATION_SYMBOL:
                            case MySQLParser.HOST_SYMBOL:
                            case MySQLParser.OPEN_SYMBOL:
                            case MySQLParser.OPTIONS_SYMBOL:
                            case MySQLParser.OWNER_SYMBOL:
                            case MySQLParser.PARSER_SYMBOL:
                            case MySQLParser.PORT_SYMBOL:
                            case MySQLParser.REMOVE_SYMBOL:
                            case MySQLParser.RESTORE_SYMBOL:
                            case MySQLParser.SECURITY_SYMBOL:
                            case MySQLParser.SERVER_SYMBOL:
                            case MySQLParser.SOCKET_SYMBOL:
                            case MySQLParser.SONAME_SYMBOL:
                            case MySQLParser.UPGRADE_SYMBOL:
                            case MySQLParser.WRAPPER_SYMBOL:
                            case MySQLParser.ACTION_SYMBOL:
                            case MySQLParser.ADDDATE_SYMBOL:
                            case MySQLParser.AFTER_SYMBOL:
                            case MySQLParser.AGAINST_SYMBOL:
                            case MySQLParser.AGGREGATE_SYMBOL:
                            case MySQLParser.ALGORITHM_SYMBOL:
                            case MySQLParser.ANY_SYMBOL:
                            case MySQLParser.AT_SYMBOL:
                            case MySQLParser.AUTO_INCREMENT_SYMBOL:
                            case MySQLParser.AUTOEXTEND_SIZE_SYMBOL:
                            case MySQLParser.AVG_ROW_LENGTH_SYMBOL:
                            case MySQLParser.AVG_SYMBOL:
                            case MySQLParser.BINLOG_SYMBOL:
                            case MySQLParser.BIT_SYMBOL:
                            case MySQLParser.BLOCK_SYMBOL:
                            case MySQLParser.BOOL_SYMBOL:
                            case MySQLParser.BOOLEAN_SYMBOL:
                            case MySQLParser.BTREE_SYMBOL:
                            case MySQLParser.CASCADED_SYMBOL:
                            case MySQLParser.CATALOG_NAME_SYMBOL:
                            case MySQLParser.CHAIN_SYMBOL:
                            case MySQLParser.CHANGED_SYMBOL:
                            case MySQLParser.CHANNEL_SYMBOL:
                            case MySQLParser.CIPHER_SYMBOL:
                            case MySQLParser.CLIENT_SYMBOL:
                            case MySQLParser.CLASS_ORIGIN_SYMBOL:
                            case MySQLParser.COALESCE_SYMBOL:
                            case MySQLParser.CODE_SYMBOL:
                            case MySQLParser.COLLATION_SYMBOL:
                            case MySQLParser.COLUMN_NAME_SYMBOL:
                            case MySQLParser.COLUMN_FORMAT_SYMBOL:
                            case MySQLParser.COLUMNS_SYMBOL:
                            case MySQLParser.COMMITTED_SYMBOL:
                            case MySQLParser.COMPACT_SYMBOL:
                            case MySQLParser.COMPLETION_SYMBOL:
                            case MySQLParser.COMPRESSED_SYMBOL:
                            case MySQLParser.COMPRESSION_SYMBOL:
                            case MySQLParser.ENCRYPTION_SYMBOL:
                            case MySQLParser.CONCURRENT_SYMBOL:
                            case MySQLParser.CONNECTION_SYMBOL:
                            case MySQLParser.CONSISTENT_SYMBOL:
                            case MySQLParser.CONSTRAINT_CATALOG_SYMBOL:
                            case MySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
                            case MySQLParser.CONSTRAINT_NAME_SYMBOL:
                            case MySQLParser.CONTEXT_SYMBOL:
                            case MySQLParser.CPU_SYMBOL:
                            case MySQLParser.CURRENT_SYMBOL:
                            case MySQLParser.CURSOR_NAME_SYMBOL:
                            case MySQLParser.DATA_SYMBOL:
                            case MySQLParser.DATAFILE_SYMBOL:
                            case MySQLParser.DATETIME_SYMBOL:
                            case MySQLParser.DATE_SYMBOL:
                            case MySQLParser.DAY_SYMBOL:
                            case MySQLParser.DEFAULT_AUTH_SYMBOL:
                            case MySQLParser.DEFINER_SYMBOL:
                            case MySQLParser.DELAY_KEY_WRITE_SYMBOL:
                            case MySQLParser.DIAGNOSTICS_SYMBOL:
                            case MySQLParser.DIRECTORY_SYMBOL:
                            case MySQLParser.DISABLE_SYMBOL:
                            case MySQLParser.DISCARD_SYMBOL:
                            case MySQLParser.DISK_SYMBOL:
                            case MySQLParser.DUMPFILE_SYMBOL:
                            case MySQLParser.DUPLICATE_SYMBOL:
                            case MySQLParser.DYNAMIC_SYMBOL:
                            case MySQLParser.ENDS_SYMBOL:
                            case MySQLParser.ENUM_SYMBOL:
                            case MySQLParser.ENGINE_SYMBOL:
                            case MySQLParser.ENGINES_SYMBOL:
                            case MySQLParser.ERROR_SYMBOL:
                            case MySQLParser.ERRORS_SYMBOL:
                            case MySQLParser.ESCAPE_SYMBOL:
                            case MySQLParser.EVENTS_SYMBOL:
                            case MySQLParser.EVERY_SYMBOL:
                            case MySQLParser.EXPANSION_SYMBOL:
                            case MySQLParser.EXPORT_SYMBOL:
                            case MySQLParser.EXTENDED_SYMBOL:
                            case MySQLParser.EXTENT_SIZE_SYMBOL:
                            case MySQLParser.FAULTS_SYMBOL:
                            case MySQLParser.FAST_SYMBOL:
                            case MySQLParser.FOUND_SYMBOL:
                            case MySQLParser.ENABLE_SYMBOL:
                            case MySQLParser.FULL_SYMBOL:
                            case MySQLParser.FILE_BLOCK_SIZE_SYMBOL:
                            case MySQLParser.FILTER_SYMBOL:
                            case MySQLParser.FIRST_SYMBOL:
                            case MySQLParser.FIXED_SYMBOL:
                            case MySQLParser.GENERAL_SYMBOL:
                            case MySQLParser.GEOMETRY_SYMBOL:
                            case MySQLParser.GEOMETRYCOLLECTION_SYMBOL:
                            case MySQLParser.GET_FORMAT_SYMBOL:
                            case MySQLParser.GRANTS_SYMBOL:
                            case MySQLParser.HASH_SYMBOL:
                            case MySQLParser.HOSTS_SYMBOL:
                            case MySQLParser.HOUR_SYMBOL:
                            case MySQLParser.IDENTIFIED_SYMBOL:
                            case MySQLParser.IGNORE_SERVER_IDS_SYMBOL:
                            case MySQLParser.INVOKER_SYMBOL:
                            case MySQLParser.INDEXES_SYMBOL:
                            case MySQLParser.INITIAL_SIZE_SYMBOL:
                            case MySQLParser.INSTANCE_SYMBOL:
                            case MySQLParser.IO_SYMBOL:
                            case MySQLParser.IPC_SYMBOL:
                            case MySQLParser.ISOLATION_SYMBOL:
                            case MySQLParser.ISSUER_SYMBOL:
                            case MySQLParser.INSERT_METHOD_SYMBOL:
                            case MySQLParser.JSON_SYMBOL:
                            case MySQLParser.KEY_BLOCK_SIZE_SYMBOL:
                            case MySQLParser.LAST_SYMBOL:
                            case MySQLParser.LEAVES_SYMBOL:
                            case MySQLParser.LESS_SYMBOL:
                            case MySQLParser.LEVEL_SYMBOL:
                            case MySQLParser.LINESTRING_SYMBOL:
                            case MySQLParser.LIST_SYMBOL:
                            case MySQLParser.LOCKS_SYMBOL:
                            case MySQLParser.LOGFILE_SYMBOL:
                            case MySQLParser.LOGS_SYMBOL:
                            case MySQLParser.MAX_ROWS_SYMBOL:
                            case MySQLParser.MASTER_SYMBOL:
                            case MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL:
                            case MySQLParser.MASTER_HOST_SYMBOL:
                            case MySQLParser.MASTER_PORT_SYMBOL:
                            case MySQLParser.MASTER_LOG_FILE_SYMBOL:
                            case MySQLParser.MASTER_LOG_POS_SYMBOL:
                            case MySQLParser.MASTER_USER_SYMBOL:
                            case MySQLParser.MASTER_PASSWORD_SYMBOL:
                            case MySQLParser.MASTER_SERVER_ID_SYMBOL:
                            case MySQLParser.MASTER_CONNECT_RETRY_SYMBOL:
                            case MySQLParser.MASTER_RETRY_COUNT_SYMBOL:
                            case MySQLParser.MASTER_DELAY_SYMBOL:
                            case MySQLParser.MASTER_SSL_SYMBOL:
                            case MySQLParser.MASTER_SSL_CA_SYMBOL:
                            case MySQLParser.MASTER_SSL_CAPATH_SYMBOL:
                            case MySQLParser.MASTER_TLS_VERSION_SYMBOL:
                            case MySQLParser.MASTER_SSL_CERT_SYMBOL:
                            case MySQLParser.MASTER_SSL_CIPHER_SYMBOL:
                            case MySQLParser.MASTER_SSL_CRL_SYMBOL:
                            case MySQLParser.MASTER_SSL_CRLPATH_SYMBOL:
                            case MySQLParser.MASTER_SSL_KEY_SYMBOL:
                            case MySQLParser.MASTER_AUTO_POSITION_SYMBOL:
                            case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
                            case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
                            case MySQLParser.MAX_SIZE_SYMBOL:
                            case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
                            case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
                            case MySQLParser.MEDIUM_SYMBOL:
                            case MySQLParser.MEMORY_SYMBOL:
                            case MySQLParser.MERGE_SYMBOL:
                            case MySQLParser.MESSAGE_TEXT_SYMBOL:
                            case MySQLParser.MICROSECOND_SYMBOL:
                            case MySQLParser.MIGRATE_SYMBOL:
                            case MySQLParser.MINUTE_SYMBOL:
                            case MySQLParser.MIN_ROWS_SYMBOL:
                            case MySQLParser.MODIFY_SYMBOL:
                            case MySQLParser.MODE_SYMBOL:
                            case MySQLParser.MONTH_SYMBOL:
                            case MySQLParser.MULTILINESTRING_SYMBOL:
                            case MySQLParser.MULTIPOINT_SYMBOL:
                            case MySQLParser.MULTIPOLYGON_SYMBOL:
                            case MySQLParser.MUTEX_SYMBOL:
                            case MySQLParser.MYSQL_ERRNO_SYMBOL:
                            case MySQLParser.NAME_SYMBOL:
                            case MySQLParser.NAMES_SYMBOL:
                            case MySQLParser.NATIONAL_SYMBOL:
                            case MySQLParser.NCHAR_SYMBOL:
                            case MySQLParser.NDBCLUSTER_SYMBOL:
                            case MySQLParser.NEVER_SYMBOL:
                            case MySQLParser.NEXT_SYMBOL:
                            case MySQLParser.NEW_SYMBOL:
                            case MySQLParser.NO_WAIT_SYMBOL:
                            case MySQLParser.NODEGROUP_SYMBOL:
                            case MySQLParser.NUMBER_SYMBOL:
                            case MySQLParser.NVARCHAR_SYMBOL:
                            case MySQLParser.OFFSET_SYMBOL:
                            case MySQLParser.ONE_SYMBOL:
                            case MySQLParser.PACK_KEYS_SYMBOL:
                            case MySQLParser.PAGE_SYMBOL:
                            case MySQLParser.PARTIAL_SYMBOL:
                            case MySQLParser.PARTITIONING_SYMBOL:
                            case MySQLParser.PARTITIONS_SYMBOL:
                            case MySQLParser.PASSWORD_SYMBOL:
                            case MySQLParser.PHASE_SYMBOL:
                            case MySQLParser.PLUGIN_DIR_SYMBOL:
                            case MySQLParser.PLUGIN_SYMBOL:
                            case MySQLParser.PLUGINS_SYMBOL:
                            case MySQLParser.POINT_SYMBOL:
                            case MySQLParser.POLYGON_SYMBOL:
                            case MySQLParser.PRESERVE_SYMBOL:
                            case MySQLParser.PREV_SYMBOL:
                            case MySQLParser.PRIVILEGES_SYMBOL:
                            case MySQLParser.PROCESSLIST_SYMBOL:
                            case MySQLParser.PROFILE_SYMBOL:
                            case MySQLParser.PROFILES_SYMBOL:
                            case MySQLParser.QUARTER_SYMBOL:
                            case MySQLParser.QUERY_SYMBOL:
                            case MySQLParser.QUICK_SYMBOL:
                            case MySQLParser.READ_ONLY_SYMBOL:
                            case MySQLParser.REBUILD_SYMBOL:
                            case MySQLParser.RECOVER_SYMBOL:
                            case MySQLParser.REDO_BUFFER_SIZE_SYMBOL:
                            case MySQLParser.REDUNDANT_SYMBOL:
                            case MySQLParser.RELAY_SYMBOL:
                            case MySQLParser.RELAYLOG_SYMBOL:
                            case MySQLParser.RELAY_LOG_FILE_SYMBOL:
                            case MySQLParser.RELAY_LOG_POS_SYMBOL:
                            case MySQLParser.RELAY_THREAD_SYMBOL:
                            case MySQLParser.REORGANIZE_SYMBOL:
                            case MySQLParser.REPEATABLE_SYMBOL:
                            case MySQLParser.REPLICATE_DO_DB_SYMBOL:
                            case MySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
                            case MySQLParser.REPLICATE_DO_TABLE_SYMBOL:
                            case MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
                            case MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
                            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
                            case MySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
                            case MySQLParser.RESUME_SYMBOL:
                            case MySQLParser.RETURNED_SQLSTATE_SYMBOL:
                            case MySQLParser.RETURNS_SYMBOL:
                            case MySQLParser.REVERSE_SYMBOL:
                            case MySQLParser.ROLLUP_SYMBOL:
                            case MySQLParser.ROTATE_SYMBOL:
                            case MySQLParser.ROUTINE_SYMBOL:
                            case MySQLParser.ROW_COUNT_SYMBOL:
                            case MySQLParser.ROW_FORMAT_SYMBOL:
                            case MySQLParser.RTREE_SYMBOL:
                            case MySQLParser.SCHEDULE_SYMBOL:
                            case MySQLParser.SCHEMA_NAME_SYMBOL:
                            case MySQLParser.SECOND_SYMBOL:
                            case MySQLParser.SERIAL_SYMBOL:
                            case MySQLParser.SERIALIZABLE_SYMBOL:
                            case MySQLParser.SIMPLE_SYMBOL:
                            case MySQLParser.SHARE_SYMBOL:
                            case MySQLParser.SLOW_SYMBOL:
                            case MySQLParser.SNAPSHOT_SYMBOL:
                            case MySQLParser.SOUNDS_SYMBOL:
                            case MySQLParser.SOURCE_SYMBOL:
                            case MySQLParser.SQL_AFTER_GTIDS_SYMBOL:
                            case MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL:
                            case MySQLParser.SQL_BEFORE_GTIDS_SYMBOL:
                            case MySQLParser.SQL_BUFFER_RESULT_SYMBOL:
                            case MySQLParser.SQL_NO_CACHE_SYMBOL:
                            case MySQLParser.SQL_THREAD_SYMBOL:
                            case MySQLParser.STACKED_SYMBOL:
                            case MySQLParser.STARTS_SYMBOL:
                            case MySQLParser.STATS_AUTO_RECALC_SYMBOL:
                            case MySQLParser.STATS_PERSISTENT_SYMBOL:
                            case MySQLParser.STATS_SAMPLE_PAGES_SYMBOL:
                            case MySQLParser.STATUS_SYMBOL:
                            case MySQLParser.STORAGE_SYMBOL:
                            case MySQLParser.STRING_SYMBOL:
                            case MySQLParser.SUBCLASS_ORIGIN_SYMBOL:
                            case MySQLParser.SUBDATE_SYMBOL:
                            case MySQLParser.SUBJECT_SYMBOL:
                            case MySQLParser.SUBPARTITION_SYMBOL:
                            case MySQLParser.SUBPARTITIONS_SYMBOL:
                            case MySQLParser.SUSPEND_SYMBOL:
                            case MySQLParser.SWAPS_SYMBOL:
                            case MySQLParser.SWITCHES_SYMBOL:
                            case MySQLParser.TABLE_NAME_SYMBOL:
                            case MySQLParser.TABLES_SYMBOL:
                            case MySQLParser.TABLE_CHECKSUM_SYMBOL:
                            case MySQLParser.TABLESPACE_SYMBOL:
                            case MySQLParser.TEMPORARY_SYMBOL:
                            case MySQLParser.TEMPTABLE_SYMBOL:
                            case MySQLParser.TEXT_SYMBOL:
                            case MySQLParser.THAN_SYMBOL:
                            case MySQLParser.TRANSACTION_SYMBOL:
                            case MySQLParser.TRIGGERS_SYMBOL:
                            case MySQLParser.TIMESTAMP_SYMBOL:
                            case MySQLParser.TIMESTAMP_ADD_SYMBOL:
                            case MySQLParser.TIMESTAMP_DIFF_SYMBOL:
                            case MySQLParser.TIME_SYMBOL:
                            case MySQLParser.TYPES_SYMBOL:
                            case MySQLParser.TYPE_SYMBOL:
                            case MySQLParser.UNCOMMITTED_SYMBOL:
                            case MySQLParser.UNDEFINED_SYMBOL:
                            case MySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
                            case MySQLParser.UNDOFILE_SYMBOL:
                            case MySQLParser.UNKNOWN_SYMBOL:
                            case MySQLParser.UNTIL_SYMBOL:
                            case MySQLParser.USER_RESOURCES_SYMBOL:
                            case MySQLParser.USER_SYMBOL:
                            case MySQLParser.USE_FRM_SYMBOL:
                            case MySQLParser.VARIABLES_SYMBOL:
                            case MySQLParser.VIEW_SYMBOL:
                            case MySQLParser.VALUE_SYMBOL:
                            case MySQLParser.WARNINGS_SYMBOL:
                            case MySQLParser.WAIT_SYMBOL:
                            case MySQLParser.WEEK_SYMBOL:
                            case MySQLParser.WORK_SYMBOL:
                            case MySQLParser.WEIGHT_STRING_SYMBOL:
                            case MySQLParser.X509_SYMBOL:
                            case MySQLParser.XID_SYMBOL:
                            case MySQLParser.XML_SYMBOL:
                            case MySQLParser.YEAR_SYMBOL:
                            case MySQLParser.EXCHANGE_SYMBOL:
                            case MySQLParser.EXPIRE_SYMBOL:
                            case MySQLParser.ONLY_SYMBOL:
                            case MySQLParser.VALIDATION_SYMBOL:
                            case MySQLParser.WITHOUT_SYMBOL:
                            case MySQLParser.ROLE_SYMBOL:
                            case MySQLParser.ADMIN_SYMBOL:
                            case MySQLParser.INVISIBLE_SYMBOL:
                            case MySQLParser.VISIBLE_SYMBOL:
                            case MySQLParser.COMPONENT_SYMBOL:
                            case MySQLParser.SKIP_SYMBOL:
                            case MySQLParser.LOCKED_SYMBOL:
                            case MySQLParser.NOWAIT_SYMBOL:
                            case MySQLParser.HISTOGRAM_SYMBOL:
                            case MySQLParser.BUCKETS_SYMBOL:
                            case MySQLParser.EXCLUDE_SYMBOL:
                            case MySQLParser.FOLLOWING_SYMBOL:
                            case MySQLParser.NULLS_SYMBOL:
                            case MySQLParser.OTHERS_SYMBOL:
                            case MySQLParser.PRECEDING_SYMBOL:
                            case MySQLParser.RESPECT_SYMBOL:
                            case MySQLParser.TIES_SYMBOL:
                            case MySQLParser.UNBOUNDED_SYMBOL:
                            case MySQLParser.NESTED_SYMBOL:
                            case MySQLParser.ORDINALITY_SYMBOL:
                            case MySQLParser.PATH_SYMBOL:
                            case MySQLParser.HISTORY_SYMBOL:
                            case MySQLParser.REUSE_SYMBOL:
                            case MySQLParser.SRID_SYMBOL:
                            case MySQLParser.THREAD_PRIORITY_SYMBOL:
                            case MySQLParser.VCPU_SYMBOL:
                            case MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL:
                            case MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL:
                            case MySQLParser.DEFINITION_SYMBOL:
                            case MySQLParser.DESCRIPTION_SYMBOL:
                            case MySQLParser.ORGANIZATION_SYMBOL:
                            case MySQLParser.REFERENCE_SYMBOL:
                            case MySQLParser.OPTIONAL_SYMBOL:
                            case MySQLParser.SECONDARY_SYMBOL:
                            case MySQLParser.SECONDARY_ENGINE_SYMBOL:
                            case MySQLParser.SECONDARY_LOAD_SYMBOL:
                            case MySQLParser.SECONDARY_UNLOAD_SYMBOL:
                            case MySQLParser.ACTIVE_SYMBOL:
                            case MySQLParser.INACTIVE_SYMBOL:
                            case MySQLParser.RETAIN_SYMBOL:
                            case MySQLParser.OLD_SYMBOL:
                            case MySQLParser.NETWORK_NAMESPACE_SYMBOL:
                            case MySQLParser.ENFORCED_SYMBOL:
                            case MySQLParser.OJ_SYMBOL:
                            case MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL:
                            case MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
                            case MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL:
                            case MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL:
                                {
                                    this.state = 8324;
                                    this.identifierKeywordsUnambiguous();
                                }
                                break;
                            case MySQLParser.ASCII_SYMBOL:
                            case MySQLParser.BEGIN_SYMBOL:
                            case MySQLParser.BYTE_SYMBOL:
                            case MySQLParser.CACHE_SYMBOL:
                            case MySQLParser.CHARSET_SYMBOL:
                            case MySQLParser.CHECKSUM_SYMBOL:
                            case MySQLParser.COMMENT_SYMBOL:
                            case MySQLParser.COMMIT_SYMBOL:
                            case MySQLParser.CONTAINS_SYMBOL:
                            case MySQLParser.DEALLOCATE_SYMBOL:
                            case MySQLParser.DO_SYMBOL:
                            case MySQLParser.END_SYMBOL:
                            case MySQLParser.FLUSH_SYMBOL:
                            case MySQLParser.FOLLOWS_SYMBOL:
                            case MySQLParser.HANDLER_SYMBOL:
                            case MySQLParser.HELP_SYMBOL:
                            case MySQLParser.INSTALL_SYMBOL:
                            case MySQLParser.LANGUAGE_SYMBOL:
                            case MySQLParser.NO_SYMBOL:
                            case MySQLParser.PRECEDES_SYMBOL:
                            case MySQLParser.PREPARE_SYMBOL:
                            case MySQLParser.REPAIR_SYMBOL:
                            case MySQLParser.RESET_SYMBOL:
                            case MySQLParser.ROLLBACK_SYMBOL:
                            case MySQLParser.SAVEPOINT_SYMBOL:
                            case MySQLParser.SIGNED_SYMBOL:
                            case MySQLParser.SLAVE_SYMBOL:
                            case MySQLParser.START_SYMBOL:
                            case MySQLParser.STOP_SYMBOL:
                            case MySQLParser.TRUNCATE_SYMBOL:
                            case MySQLParser.UNICODE_SYMBOL:
                            case MySQLParser.UNINSTALL_SYMBOL:
                            case MySQLParser.XA_SYMBOL:
                            case MySQLParser.IMPORT_SYMBOL:
                            case MySQLParser.CLONE_SYMBOL:
                                {
                                    this.state = 8325;
                                    this.identifierKeywordsAmbiguous2Labels();
                                }
                                break;
                            case MySQLParser.GLOBAL_SYMBOL:
                            case MySQLParser.LOCAL_SYMBOL:
                            case MySQLParser.SESSION_SYMBOL:
                            case MySQLParser.PERSIST_SYMBOL:
                            case MySQLParser.PERSIST_ONLY_SYMBOL:
                                {
                                    this.state = 8326;
                                    this.identifierKeywordsAmbiguous4SystemVariables();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lValueKeyword() {
        let _localctx = new LValueKeywordContext(this._ctx, this.state);
        this.enterRule(_localctx, 1202, MySQLParser.RULE_lValueKeyword);
        try {
            this.state = 8335;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case MySQLParser.ACCOUNT_SYMBOL:
                case MySQLParser.ALWAYS_SYMBOL:
                case MySQLParser.BACKUP_SYMBOL:
                case MySQLParser.CLOSE_SYMBOL:
                case MySQLParser.FORMAT_SYMBOL:
                case MySQLParser.GROUP_REPLICATION_SYMBOL:
                case MySQLParser.HOST_SYMBOL:
                case MySQLParser.OPEN_SYMBOL:
                case MySQLParser.OPTIONS_SYMBOL:
                case MySQLParser.OWNER_SYMBOL:
                case MySQLParser.PARSER_SYMBOL:
                case MySQLParser.PORT_SYMBOL:
                case MySQLParser.REMOVE_SYMBOL:
                case MySQLParser.RESTORE_SYMBOL:
                case MySQLParser.SECURITY_SYMBOL:
                case MySQLParser.SERVER_SYMBOL:
                case MySQLParser.SOCKET_SYMBOL:
                case MySQLParser.SONAME_SYMBOL:
                case MySQLParser.UPGRADE_SYMBOL:
                case MySQLParser.WRAPPER_SYMBOL:
                case MySQLParser.ACTION_SYMBOL:
                case MySQLParser.ADDDATE_SYMBOL:
                case MySQLParser.AFTER_SYMBOL:
                case MySQLParser.AGAINST_SYMBOL:
                case MySQLParser.AGGREGATE_SYMBOL:
                case MySQLParser.ALGORITHM_SYMBOL:
                case MySQLParser.ANY_SYMBOL:
                case MySQLParser.AT_SYMBOL:
                case MySQLParser.AUTO_INCREMENT_SYMBOL:
                case MySQLParser.AUTOEXTEND_SIZE_SYMBOL:
                case MySQLParser.AVG_ROW_LENGTH_SYMBOL:
                case MySQLParser.AVG_SYMBOL:
                case MySQLParser.BINLOG_SYMBOL:
                case MySQLParser.BIT_SYMBOL:
                case MySQLParser.BLOCK_SYMBOL:
                case MySQLParser.BOOL_SYMBOL:
                case MySQLParser.BOOLEAN_SYMBOL:
                case MySQLParser.BTREE_SYMBOL:
                case MySQLParser.CASCADED_SYMBOL:
                case MySQLParser.CATALOG_NAME_SYMBOL:
                case MySQLParser.CHAIN_SYMBOL:
                case MySQLParser.CHANGED_SYMBOL:
                case MySQLParser.CHANNEL_SYMBOL:
                case MySQLParser.CIPHER_SYMBOL:
                case MySQLParser.CLIENT_SYMBOL:
                case MySQLParser.CLASS_ORIGIN_SYMBOL:
                case MySQLParser.COALESCE_SYMBOL:
                case MySQLParser.CODE_SYMBOL:
                case MySQLParser.COLLATION_SYMBOL:
                case MySQLParser.COLUMN_NAME_SYMBOL:
                case MySQLParser.COLUMN_FORMAT_SYMBOL:
                case MySQLParser.COLUMNS_SYMBOL:
                case MySQLParser.COMMITTED_SYMBOL:
                case MySQLParser.COMPACT_SYMBOL:
                case MySQLParser.COMPLETION_SYMBOL:
                case MySQLParser.COMPRESSED_SYMBOL:
                case MySQLParser.COMPRESSION_SYMBOL:
                case MySQLParser.ENCRYPTION_SYMBOL:
                case MySQLParser.CONCURRENT_SYMBOL:
                case MySQLParser.CONNECTION_SYMBOL:
                case MySQLParser.CONSISTENT_SYMBOL:
                case MySQLParser.CONSTRAINT_CATALOG_SYMBOL:
                case MySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
                case MySQLParser.CONSTRAINT_NAME_SYMBOL:
                case MySQLParser.CONTEXT_SYMBOL:
                case MySQLParser.CPU_SYMBOL:
                case MySQLParser.CURRENT_SYMBOL:
                case MySQLParser.CURSOR_NAME_SYMBOL:
                case MySQLParser.DATA_SYMBOL:
                case MySQLParser.DATAFILE_SYMBOL:
                case MySQLParser.DATETIME_SYMBOL:
                case MySQLParser.DATE_SYMBOL:
                case MySQLParser.DAY_SYMBOL:
                case MySQLParser.DEFAULT_AUTH_SYMBOL:
                case MySQLParser.DEFINER_SYMBOL:
                case MySQLParser.DELAY_KEY_WRITE_SYMBOL:
                case MySQLParser.DIAGNOSTICS_SYMBOL:
                case MySQLParser.DIRECTORY_SYMBOL:
                case MySQLParser.DISABLE_SYMBOL:
                case MySQLParser.DISCARD_SYMBOL:
                case MySQLParser.DISK_SYMBOL:
                case MySQLParser.DUMPFILE_SYMBOL:
                case MySQLParser.DUPLICATE_SYMBOL:
                case MySQLParser.DYNAMIC_SYMBOL:
                case MySQLParser.ENDS_SYMBOL:
                case MySQLParser.ENUM_SYMBOL:
                case MySQLParser.ENGINE_SYMBOL:
                case MySQLParser.ENGINES_SYMBOL:
                case MySQLParser.ERROR_SYMBOL:
                case MySQLParser.ERRORS_SYMBOL:
                case MySQLParser.ESCAPE_SYMBOL:
                case MySQLParser.EVENTS_SYMBOL:
                case MySQLParser.EVERY_SYMBOL:
                case MySQLParser.EXPANSION_SYMBOL:
                case MySQLParser.EXPORT_SYMBOL:
                case MySQLParser.EXTENDED_SYMBOL:
                case MySQLParser.EXTENT_SIZE_SYMBOL:
                case MySQLParser.FAULTS_SYMBOL:
                case MySQLParser.FAST_SYMBOL:
                case MySQLParser.FOUND_SYMBOL:
                case MySQLParser.ENABLE_SYMBOL:
                case MySQLParser.FULL_SYMBOL:
                case MySQLParser.FILE_BLOCK_SIZE_SYMBOL:
                case MySQLParser.FILTER_SYMBOL:
                case MySQLParser.FIRST_SYMBOL:
                case MySQLParser.FIXED_SYMBOL:
                case MySQLParser.GENERAL_SYMBOL:
                case MySQLParser.GEOMETRY_SYMBOL:
                case MySQLParser.GEOMETRYCOLLECTION_SYMBOL:
                case MySQLParser.GET_FORMAT_SYMBOL:
                case MySQLParser.GRANTS_SYMBOL:
                case MySQLParser.HASH_SYMBOL:
                case MySQLParser.HOSTS_SYMBOL:
                case MySQLParser.HOUR_SYMBOL:
                case MySQLParser.IDENTIFIED_SYMBOL:
                case MySQLParser.IGNORE_SERVER_IDS_SYMBOL:
                case MySQLParser.INVOKER_SYMBOL:
                case MySQLParser.INDEXES_SYMBOL:
                case MySQLParser.INITIAL_SIZE_SYMBOL:
                case MySQLParser.INSTANCE_SYMBOL:
                case MySQLParser.IO_SYMBOL:
                case MySQLParser.IPC_SYMBOL:
                case MySQLParser.ISOLATION_SYMBOL:
                case MySQLParser.ISSUER_SYMBOL:
                case MySQLParser.INSERT_METHOD_SYMBOL:
                case MySQLParser.JSON_SYMBOL:
                case MySQLParser.KEY_BLOCK_SIZE_SYMBOL:
                case MySQLParser.LAST_SYMBOL:
                case MySQLParser.LEAVES_SYMBOL:
                case MySQLParser.LESS_SYMBOL:
                case MySQLParser.LEVEL_SYMBOL:
                case MySQLParser.LINESTRING_SYMBOL:
                case MySQLParser.LIST_SYMBOL:
                case MySQLParser.LOCKS_SYMBOL:
                case MySQLParser.LOGFILE_SYMBOL:
                case MySQLParser.LOGS_SYMBOL:
                case MySQLParser.MAX_ROWS_SYMBOL:
                case MySQLParser.MASTER_SYMBOL:
                case MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL:
                case MySQLParser.MASTER_HOST_SYMBOL:
                case MySQLParser.MASTER_PORT_SYMBOL:
                case MySQLParser.MASTER_LOG_FILE_SYMBOL:
                case MySQLParser.MASTER_LOG_POS_SYMBOL:
                case MySQLParser.MASTER_USER_SYMBOL:
                case MySQLParser.MASTER_PASSWORD_SYMBOL:
                case MySQLParser.MASTER_SERVER_ID_SYMBOL:
                case MySQLParser.MASTER_CONNECT_RETRY_SYMBOL:
                case MySQLParser.MASTER_RETRY_COUNT_SYMBOL:
                case MySQLParser.MASTER_DELAY_SYMBOL:
                case MySQLParser.MASTER_SSL_SYMBOL:
                case MySQLParser.MASTER_SSL_CA_SYMBOL:
                case MySQLParser.MASTER_SSL_CAPATH_SYMBOL:
                case MySQLParser.MASTER_TLS_VERSION_SYMBOL:
                case MySQLParser.MASTER_SSL_CERT_SYMBOL:
                case MySQLParser.MASTER_SSL_CIPHER_SYMBOL:
                case MySQLParser.MASTER_SSL_CRL_SYMBOL:
                case MySQLParser.MASTER_SSL_CRLPATH_SYMBOL:
                case MySQLParser.MASTER_SSL_KEY_SYMBOL:
                case MySQLParser.MASTER_AUTO_POSITION_SYMBOL:
                case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
                case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
                case MySQLParser.MAX_SIZE_SYMBOL:
                case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
                case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
                case MySQLParser.MEDIUM_SYMBOL:
                case MySQLParser.MEMORY_SYMBOL:
                case MySQLParser.MERGE_SYMBOL:
                case MySQLParser.MESSAGE_TEXT_SYMBOL:
                case MySQLParser.MICROSECOND_SYMBOL:
                case MySQLParser.MIGRATE_SYMBOL:
                case MySQLParser.MINUTE_SYMBOL:
                case MySQLParser.MIN_ROWS_SYMBOL:
                case MySQLParser.MODIFY_SYMBOL:
                case MySQLParser.MODE_SYMBOL:
                case MySQLParser.MONTH_SYMBOL:
                case MySQLParser.MULTILINESTRING_SYMBOL:
                case MySQLParser.MULTIPOINT_SYMBOL:
                case MySQLParser.MULTIPOLYGON_SYMBOL:
                case MySQLParser.MUTEX_SYMBOL:
                case MySQLParser.MYSQL_ERRNO_SYMBOL:
                case MySQLParser.NAME_SYMBOL:
                case MySQLParser.NAMES_SYMBOL:
                case MySQLParser.NATIONAL_SYMBOL:
                case MySQLParser.NCHAR_SYMBOL:
                case MySQLParser.NDBCLUSTER_SYMBOL:
                case MySQLParser.NEVER_SYMBOL:
                case MySQLParser.NEXT_SYMBOL:
                case MySQLParser.NEW_SYMBOL:
                case MySQLParser.NO_WAIT_SYMBOL:
                case MySQLParser.NODEGROUP_SYMBOL:
                case MySQLParser.NUMBER_SYMBOL:
                case MySQLParser.NVARCHAR_SYMBOL:
                case MySQLParser.OFFSET_SYMBOL:
                case MySQLParser.ONE_SYMBOL:
                case MySQLParser.PACK_KEYS_SYMBOL:
                case MySQLParser.PAGE_SYMBOL:
                case MySQLParser.PARTIAL_SYMBOL:
                case MySQLParser.PARTITIONING_SYMBOL:
                case MySQLParser.PARTITIONS_SYMBOL:
                case MySQLParser.PASSWORD_SYMBOL:
                case MySQLParser.PHASE_SYMBOL:
                case MySQLParser.PLUGIN_DIR_SYMBOL:
                case MySQLParser.PLUGIN_SYMBOL:
                case MySQLParser.PLUGINS_SYMBOL:
                case MySQLParser.POINT_SYMBOL:
                case MySQLParser.POLYGON_SYMBOL:
                case MySQLParser.PRESERVE_SYMBOL:
                case MySQLParser.PREV_SYMBOL:
                case MySQLParser.PRIVILEGES_SYMBOL:
                case MySQLParser.PROCESSLIST_SYMBOL:
                case MySQLParser.PROFILE_SYMBOL:
                case MySQLParser.PROFILES_SYMBOL:
                case MySQLParser.QUARTER_SYMBOL:
                case MySQLParser.QUERY_SYMBOL:
                case MySQLParser.QUICK_SYMBOL:
                case MySQLParser.READ_ONLY_SYMBOL:
                case MySQLParser.REBUILD_SYMBOL:
                case MySQLParser.RECOVER_SYMBOL:
                case MySQLParser.REDO_BUFFER_SIZE_SYMBOL:
                case MySQLParser.REDUNDANT_SYMBOL:
                case MySQLParser.RELAY_SYMBOL:
                case MySQLParser.RELAYLOG_SYMBOL:
                case MySQLParser.RELAY_LOG_FILE_SYMBOL:
                case MySQLParser.RELAY_LOG_POS_SYMBOL:
                case MySQLParser.RELAY_THREAD_SYMBOL:
                case MySQLParser.REORGANIZE_SYMBOL:
                case MySQLParser.REPEATABLE_SYMBOL:
                case MySQLParser.REPLICATE_DO_DB_SYMBOL:
                case MySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
                case MySQLParser.REPLICATE_DO_TABLE_SYMBOL:
                case MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
                case MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
                case MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
                case MySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
                case MySQLParser.RESUME_SYMBOL:
                case MySQLParser.RETURNED_SQLSTATE_SYMBOL:
                case MySQLParser.RETURNS_SYMBOL:
                case MySQLParser.REVERSE_SYMBOL:
                case MySQLParser.ROLLUP_SYMBOL:
                case MySQLParser.ROTATE_SYMBOL:
                case MySQLParser.ROUTINE_SYMBOL:
                case MySQLParser.ROW_COUNT_SYMBOL:
                case MySQLParser.ROW_FORMAT_SYMBOL:
                case MySQLParser.RTREE_SYMBOL:
                case MySQLParser.SCHEDULE_SYMBOL:
                case MySQLParser.SCHEMA_NAME_SYMBOL:
                case MySQLParser.SECOND_SYMBOL:
                case MySQLParser.SERIAL_SYMBOL:
                case MySQLParser.SERIALIZABLE_SYMBOL:
                case MySQLParser.SIMPLE_SYMBOL:
                case MySQLParser.SHARE_SYMBOL:
                case MySQLParser.SLOW_SYMBOL:
                case MySQLParser.SNAPSHOT_SYMBOL:
                case MySQLParser.SOUNDS_SYMBOL:
                case MySQLParser.SOURCE_SYMBOL:
                case MySQLParser.SQL_AFTER_GTIDS_SYMBOL:
                case MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL:
                case MySQLParser.SQL_BEFORE_GTIDS_SYMBOL:
                case MySQLParser.SQL_BUFFER_RESULT_SYMBOL:
                case MySQLParser.SQL_NO_CACHE_SYMBOL:
                case MySQLParser.SQL_THREAD_SYMBOL:
                case MySQLParser.STACKED_SYMBOL:
                case MySQLParser.STARTS_SYMBOL:
                case MySQLParser.STATS_AUTO_RECALC_SYMBOL:
                case MySQLParser.STATS_PERSISTENT_SYMBOL:
                case MySQLParser.STATS_SAMPLE_PAGES_SYMBOL:
                case MySQLParser.STATUS_SYMBOL:
                case MySQLParser.STORAGE_SYMBOL:
                case MySQLParser.STRING_SYMBOL:
                case MySQLParser.SUBCLASS_ORIGIN_SYMBOL:
                case MySQLParser.SUBDATE_SYMBOL:
                case MySQLParser.SUBJECT_SYMBOL:
                case MySQLParser.SUBPARTITION_SYMBOL:
                case MySQLParser.SUBPARTITIONS_SYMBOL:
                case MySQLParser.SUSPEND_SYMBOL:
                case MySQLParser.SWAPS_SYMBOL:
                case MySQLParser.SWITCHES_SYMBOL:
                case MySQLParser.TABLE_NAME_SYMBOL:
                case MySQLParser.TABLES_SYMBOL:
                case MySQLParser.TABLE_CHECKSUM_SYMBOL:
                case MySQLParser.TABLESPACE_SYMBOL:
                case MySQLParser.TEMPORARY_SYMBOL:
                case MySQLParser.TEMPTABLE_SYMBOL:
                case MySQLParser.TEXT_SYMBOL:
                case MySQLParser.THAN_SYMBOL:
                case MySQLParser.TRANSACTION_SYMBOL:
                case MySQLParser.TRIGGERS_SYMBOL:
                case MySQLParser.TIMESTAMP_SYMBOL:
                case MySQLParser.TIMESTAMP_ADD_SYMBOL:
                case MySQLParser.TIMESTAMP_DIFF_SYMBOL:
                case MySQLParser.TIME_SYMBOL:
                case MySQLParser.TYPES_SYMBOL:
                case MySQLParser.TYPE_SYMBOL:
                case MySQLParser.UNCOMMITTED_SYMBOL:
                case MySQLParser.UNDEFINED_SYMBOL:
                case MySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
                case MySQLParser.UNDOFILE_SYMBOL:
                case MySQLParser.UNKNOWN_SYMBOL:
                case MySQLParser.UNTIL_SYMBOL:
                case MySQLParser.USER_RESOURCES_SYMBOL:
                case MySQLParser.USER_SYMBOL:
                case MySQLParser.USE_FRM_SYMBOL:
                case MySQLParser.VARIABLES_SYMBOL:
                case MySQLParser.VIEW_SYMBOL:
                case MySQLParser.VALUE_SYMBOL:
                case MySQLParser.WARNINGS_SYMBOL:
                case MySQLParser.WAIT_SYMBOL:
                case MySQLParser.WEEK_SYMBOL:
                case MySQLParser.WORK_SYMBOL:
                case MySQLParser.WEIGHT_STRING_SYMBOL:
                case MySQLParser.X509_SYMBOL:
                case MySQLParser.XID_SYMBOL:
                case MySQLParser.XML_SYMBOL:
                case MySQLParser.YEAR_SYMBOL:
                case MySQLParser.EXCHANGE_SYMBOL:
                case MySQLParser.EXPIRE_SYMBOL:
                case MySQLParser.ONLY_SYMBOL:
                case MySQLParser.VALIDATION_SYMBOL:
                case MySQLParser.WITHOUT_SYMBOL:
                case MySQLParser.ROLE_SYMBOL:
                case MySQLParser.ADMIN_SYMBOL:
                case MySQLParser.INVISIBLE_SYMBOL:
                case MySQLParser.VISIBLE_SYMBOL:
                case MySQLParser.COMPONENT_SYMBOL:
                case MySQLParser.SKIP_SYMBOL:
                case MySQLParser.LOCKED_SYMBOL:
                case MySQLParser.NOWAIT_SYMBOL:
                case MySQLParser.HISTOGRAM_SYMBOL:
                case MySQLParser.BUCKETS_SYMBOL:
                case MySQLParser.EXCLUDE_SYMBOL:
                case MySQLParser.FOLLOWING_SYMBOL:
                case MySQLParser.NULLS_SYMBOL:
                case MySQLParser.OTHERS_SYMBOL:
                case MySQLParser.PRECEDING_SYMBOL:
                case MySQLParser.RESPECT_SYMBOL:
                case MySQLParser.TIES_SYMBOL:
                case MySQLParser.UNBOUNDED_SYMBOL:
                case MySQLParser.NESTED_SYMBOL:
                case MySQLParser.ORDINALITY_SYMBOL:
                case MySQLParser.PATH_SYMBOL:
                case MySQLParser.HISTORY_SYMBOL:
                case MySQLParser.REUSE_SYMBOL:
                case MySQLParser.SRID_SYMBOL:
                case MySQLParser.THREAD_PRIORITY_SYMBOL:
                case MySQLParser.VCPU_SYMBOL:
                case MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL:
                case MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL:
                case MySQLParser.DEFINITION_SYMBOL:
                case MySQLParser.DESCRIPTION_SYMBOL:
                case MySQLParser.ORGANIZATION_SYMBOL:
                case MySQLParser.REFERENCE_SYMBOL:
                case MySQLParser.OPTIONAL_SYMBOL:
                case MySQLParser.SECONDARY_SYMBOL:
                case MySQLParser.SECONDARY_ENGINE_SYMBOL:
                case MySQLParser.SECONDARY_LOAD_SYMBOL:
                case MySQLParser.SECONDARY_UNLOAD_SYMBOL:
                case MySQLParser.ACTIVE_SYMBOL:
                case MySQLParser.INACTIVE_SYMBOL:
                case MySQLParser.RETAIN_SYMBOL:
                case MySQLParser.OLD_SYMBOL:
                case MySQLParser.NETWORK_NAMESPACE_SYMBOL:
                case MySQLParser.ENFORCED_SYMBOL:
                case MySQLParser.OJ_SYMBOL:
                case MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL:
                case MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
                case MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL:
                case MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8331;
                        this.identifierKeywordsUnambiguous();
                    }
                    break;
                case MySQLParser.EXECUTE_SYMBOL:
                case MySQLParser.SHUTDOWN_SYMBOL:
                case MySQLParser.RESTART_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8332;
                        this.identifierKeywordsAmbiguous1RolesAndLabels();
                    }
                    break;
                case MySQLParser.ASCII_SYMBOL:
                case MySQLParser.BEGIN_SYMBOL:
                case MySQLParser.BYTE_SYMBOL:
                case MySQLParser.CACHE_SYMBOL:
                case MySQLParser.CHARSET_SYMBOL:
                case MySQLParser.CHECKSUM_SYMBOL:
                case MySQLParser.COMMENT_SYMBOL:
                case MySQLParser.COMMIT_SYMBOL:
                case MySQLParser.CONTAINS_SYMBOL:
                case MySQLParser.DEALLOCATE_SYMBOL:
                case MySQLParser.DO_SYMBOL:
                case MySQLParser.END_SYMBOL:
                case MySQLParser.FLUSH_SYMBOL:
                case MySQLParser.FOLLOWS_SYMBOL:
                case MySQLParser.HANDLER_SYMBOL:
                case MySQLParser.HELP_SYMBOL:
                case MySQLParser.INSTALL_SYMBOL:
                case MySQLParser.LANGUAGE_SYMBOL:
                case MySQLParser.NO_SYMBOL:
                case MySQLParser.PRECEDES_SYMBOL:
                case MySQLParser.PREPARE_SYMBOL:
                case MySQLParser.REPAIR_SYMBOL:
                case MySQLParser.RESET_SYMBOL:
                case MySQLParser.ROLLBACK_SYMBOL:
                case MySQLParser.SAVEPOINT_SYMBOL:
                case MySQLParser.SIGNED_SYMBOL:
                case MySQLParser.SLAVE_SYMBOL:
                case MySQLParser.START_SYMBOL:
                case MySQLParser.STOP_SYMBOL:
                case MySQLParser.TRUNCATE_SYMBOL:
                case MySQLParser.UNICODE_SYMBOL:
                case MySQLParser.UNINSTALL_SYMBOL:
                case MySQLParser.XA_SYMBOL:
                case MySQLParser.IMPORT_SYMBOL:
                case MySQLParser.CLONE_SYMBOL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 8333;
                        this.identifierKeywordsAmbiguous2Labels();
                    }
                    break;
                case MySQLParser.EVENT_SYMBOL:
                case MySQLParser.FILE_SYMBOL:
                case MySQLParser.NONE_SYMBOL:
                case MySQLParser.PROCESS_SYMBOL:
                case MySQLParser.PROXY_SYMBOL:
                case MySQLParser.RELOAD_SYMBOL:
                case MySQLParser.REPLICATION_SYMBOL:
                case MySQLParser.SUPER_SYMBOL:
                case MySQLParser.RESOURCE_SYMBOL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 8334;
                        this.identifierKeywordsAmbiguous3Roles();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    identifierKeywordsAmbiguous4SystemVariables() {
        let _localctx = new IdentifierKeywordsAmbiguous4SystemVariablesContext(this._ctx, this.state);
        this.enterRule(_localctx, 1204, MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 8337;
                _la = this._input.LA(1);
                if (!(_la === MySQLParser.GLOBAL_SYMBOL || _la === MySQLParser.LOCAL_SYMBOL || _la === MySQLParser.SESSION_SYMBOL || _la === MySQLParser.PERSIST_SYMBOL || _la === MySQLParser.PERSIST_ONLY_SYMBOL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    roleOrIdentifierKeyword() {
        let _localctx = new RoleOrIdentifierKeywordContext(this._ctx, this.state);
        this.enterRule(_localctx, 1206, MySQLParser.RULE_roleOrIdentifierKeyword);
        let _la;
        try {
            this.state = 8344;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1118, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8339;
                        _la = this._input.LA(1);
                        if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MySQLParser.ACCOUNT_SYMBOL) | (1 << MySQLParser.ASCII_SYMBOL) | (1 << MySQLParser.ALWAYS_SYMBOL) | (1 << MySQLParser.BACKUP_SYMBOL) | (1 << MySQLParser.BEGIN_SYMBOL) | (1 << MySQLParser.BYTE_SYMBOL) | (1 << MySQLParser.CACHE_SYMBOL) | (1 << MySQLParser.CHARSET_SYMBOL) | (1 << MySQLParser.CHECKSUM_SYMBOL) | (1 << MySQLParser.CLOSE_SYMBOL) | (1 << MySQLParser.COMMENT_SYMBOL) | (1 << MySQLParser.COMMIT_SYMBOL) | (1 << MySQLParser.CONTAINS_SYMBOL) | (1 << MySQLParser.DEALLOCATE_SYMBOL) | (1 << MySQLParser.DO_SYMBOL) | (1 << MySQLParser.END_SYMBOL) | (1 << MySQLParser.FLUSH_SYMBOL) | (1 << MySQLParser.FOLLOWS_SYMBOL) | (1 << MySQLParser.FORMAT_SYMBOL) | (1 << MySQLParser.GROUP_REPLICATION_SYMBOL) | (1 << MySQLParser.HANDLER_SYMBOL) | (1 << MySQLParser.HELP_SYMBOL) | (1 << MySQLParser.HOST_SYMBOL) | (1 << MySQLParser.INSTALL_SYMBOL) | (1 << MySQLParser.LANGUAGE_SYMBOL) | (1 << MySQLParser.NO_SYMBOL) | (1 << MySQLParser.OPEN_SYMBOL) | (1 << MySQLParser.OPTIONS_SYMBOL) | (1 << MySQLParser.OWNER_SYMBOL) | (1 << MySQLParser.PARSER_SYMBOL))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.PARTITION_SYMBOL - 32)) | (1 << (MySQLParser.PORT_SYMBOL - 32)) | (1 << (MySQLParser.PRECEDES_SYMBOL - 32)) | (1 << (MySQLParser.PREPARE_SYMBOL - 32)) | (1 << (MySQLParser.REMOVE_SYMBOL - 32)) | (1 << (MySQLParser.REPAIR_SYMBOL - 32)) | (1 << (MySQLParser.RESET_SYMBOL - 32)) | (1 << (MySQLParser.RESTORE_SYMBOL - 32)) | (1 << (MySQLParser.ROLLBACK_SYMBOL - 32)) | (1 << (MySQLParser.SAVEPOINT_SYMBOL - 32)) | (1 << (MySQLParser.SECURITY_SYMBOL - 32)) | (1 << (MySQLParser.SERVER_SYMBOL - 32)) | (1 << (MySQLParser.SIGNED_SYMBOL - 32)) | (1 << (MySQLParser.SLAVE_SYMBOL - 32)) | (1 << (MySQLParser.SOCKET_SYMBOL - 32)) | (1 << (MySQLParser.SONAME_SYMBOL - 32)) | (1 << (MySQLParser.START_SYMBOL - 32)) | (1 << (MySQLParser.STOP_SYMBOL - 32)) | (1 << (MySQLParser.TRUNCATE_SYMBOL - 32)) | (1 << (MySQLParser.UNICODE_SYMBOL - 32)) | (1 << (MySQLParser.UNINSTALL_SYMBOL - 32)) | (1 << (MySQLParser.UPGRADE_SYMBOL - 32)) | (1 << (MySQLParser.WRAPPER_SYMBOL - 32)) | (1 << (MySQLParser.XA_SYMBOL - 32)))) !== 0) || ((((_la - 689)) & ~0x1F) === 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.ROLE_SYMBOL - 689)) | (1 << (MySQLParser.INVISIBLE_SYMBOL - 689)) | (1 << (MySQLParser.VISIBLE_SYMBOL - 689)) | (1 << (MySQLParser.CLONE_SYMBOL - 689)))) !== 0) || ((((_la - 750)) & ~0x1F) === 0 && ((1 << (_la - 750)) & ((1 << (MySQLParser.SECONDARY_SYMBOL - 750)) | (1 << (MySQLParser.SECONDARY_ENGINE_SYMBOL - 750)) | (1 << (MySQLParser.SECONDARY_LOAD_SYMBOL - 750)) | (1 << (MySQLParser.SECONDARY_UNLOAD_SYMBOL - 750)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8340;
                        if (!(this.serverVersion >= 50709)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 50709");
                        }
                        this.state = 8341;
                        this.match(MySQLParser.SHUTDOWN_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 8342;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 8343;
                        this.match(MySQLParser.IMPORT_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    roleOrLabelKeyword() {
        let _localctx = new RoleOrLabelKeywordContext(this._ctx, this.state);
        this.enterRule(_localctx, 1208, MySQLParser.RULE_roleOrLabelKeyword);
        let _la;
        try {
            this.state = 8355;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 1119, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 8346;
                        _la = this._input.LA(1);
                        if (!(((((_la - 57)) & ~0x1F) === 0 && ((1 << (_la - 57)) & ((1 << (MySQLParser.ACTION_SYMBOL - 57)) | (1 << (MySQLParser.ADDDATE_SYMBOL - 57)) | (1 << (MySQLParser.AFTER_SYMBOL - 57)) | (1 << (MySQLParser.AGAINST_SYMBOL - 57)) | (1 << (MySQLParser.AGGREGATE_SYMBOL - 57)) | (1 << (MySQLParser.ALGORITHM_SYMBOL - 57)) | (1 << (MySQLParser.ANY_SYMBOL - 57)) | (1 << (MySQLParser.AT_SYMBOL - 57)) | (1 << (MySQLParser.AUTHORS_SYMBOL - 57)) | (1 << (MySQLParser.AUTO_INCREMENT_SYMBOL - 57)) | (1 << (MySQLParser.AUTOEXTEND_SIZE_SYMBOL - 57)) | (1 << (MySQLParser.AVG_ROW_LENGTH_SYMBOL - 57)) | (1 << (MySQLParser.AVG_SYMBOL - 57)) | (1 << (MySQLParser.BINLOG_SYMBOL - 57)) | (1 << (MySQLParser.BIT_SYMBOL - 57)) | (1 << (MySQLParser.BLOCK_SYMBOL - 57)) | (1 << (MySQLParser.BOOL_SYMBOL - 57)) | (1 << (MySQLParser.BOOLEAN_SYMBOL - 57)) | (1 << (MySQLParser.BTREE_SYMBOL - 57)) | (1 << (MySQLParser.CASCADED_SYMBOL - 57)) | (1 << (MySQLParser.CATALOG_NAME_SYMBOL - 57)) | (1 << (MySQLParser.CHAIN_SYMBOL - 57)) | (1 << (MySQLParser.CHANGED_SYMBOL - 57)) | (1 << (MySQLParser.CHANNEL_SYMBOL - 57)) | (1 << (MySQLParser.CIPHER_SYMBOL - 57)) | (1 << (MySQLParser.CLIENT_SYMBOL - 57)) | (1 << (MySQLParser.CLASS_ORIGIN_SYMBOL - 57)) | (1 << (MySQLParser.COALESCE_SYMBOL - 57)) | (1 << (MySQLParser.CODE_SYMBOL - 57)) | (1 << (MySQLParser.COLLATION_SYMBOL - 57)) | (1 << (MySQLParser.COLUMN_NAME_SYMBOL - 57)))) !== 0) || ((((_la - 89)) & ~0x1F) === 0 && ((1 << (_la - 89)) & ((1 << (MySQLParser.COLUMN_FORMAT_SYMBOL - 89)) | (1 << (MySQLParser.COLUMNS_SYMBOL - 89)) | (1 << (MySQLParser.COMMITTED_SYMBOL - 89)) | (1 << (MySQLParser.COMPACT_SYMBOL - 89)) | (1 << (MySQLParser.COMPLETION_SYMBOL - 89)) | (1 << (MySQLParser.COMPRESSED_SYMBOL - 89)) | (1 << (MySQLParser.COMPRESSION_SYMBOL - 89)) | (1 << (MySQLParser.ENCRYPTION_SYMBOL - 89)) | (1 << (MySQLParser.CONCURRENT_SYMBOL - 89)) | (1 << (MySQLParser.CONNECTION_SYMBOL - 89)) | (1 << (MySQLParser.CONSISTENT_SYMBOL - 89)) | (1 << (MySQLParser.CONSTRAINT_CATALOG_SYMBOL - 89)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA_SYMBOL - 89)) | (1 << (MySQLParser.CONSTRAINT_NAME_SYMBOL - 89)) | (1 << (MySQLParser.CONTEXT_SYMBOL - 89)) | (1 << (MySQLParser.CONTRIBUTORS_SYMBOL - 89)) | (1 << (MySQLParser.CPU_SYMBOL - 89)) | (1 << (MySQLParser.CURRENT_SYMBOL - 89)) | (1 << (MySQLParser.CURSOR_NAME_SYMBOL - 89)) | (1 << (MySQLParser.DATA_SYMBOL - 89)) | (1 << (MySQLParser.DATAFILE_SYMBOL - 89)) | (1 << (MySQLParser.DATETIME_SYMBOL - 89)) | (1 << (MySQLParser.DATE_SYMBOL - 89)) | (1 << (MySQLParser.DAY_SYMBOL - 89)) | (1 << (MySQLParser.DEFAULT_AUTH_SYMBOL - 89)) | (1 << (MySQLParser.DEFINER_SYMBOL - 89)) | (1 << (MySQLParser.DELAY_KEY_WRITE_SYMBOL - 89)) | (1 << (MySQLParser.DES_KEY_FILE_SYMBOL - 89)) | (1 << (MySQLParser.DIAGNOSTICS_SYMBOL - 89)) | (1 << (MySQLParser.DIRECTORY_SYMBOL - 89)) | (1 << (MySQLParser.DISABLE_SYMBOL - 89)))) !== 0) || ((((_la - 121)) & ~0x1F) === 0 && ((1 << (_la - 121)) & ((1 << (MySQLParser.DISCARD_SYMBOL - 121)) | (1 << (MySQLParser.DISK_SYMBOL - 121)) | (1 << (MySQLParser.DUMPFILE_SYMBOL - 121)) | (1 << (MySQLParser.DUPLICATE_SYMBOL - 121)) | (1 << (MySQLParser.DYNAMIC_SYMBOL - 121)) | (1 << (MySQLParser.ENDS_SYMBOL - 121)) | (1 << (MySQLParser.ENUM_SYMBOL - 121)) | (1 << (MySQLParser.ENGINE_SYMBOL - 121)) | (1 << (MySQLParser.ENGINES_SYMBOL - 121)) | (1 << (MySQLParser.ERROR_SYMBOL - 121)) | (1 << (MySQLParser.ERRORS_SYMBOL - 121)) | (1 << (MySQLParser.ESCAPE_SYMBOL - 121)) | (1 << (MySQLParser.EVENTS_SYMBOL - 121)) | (1 << (MySQLParser.EVERY_SYMBOL - 121)) | (1 << (MySQLParser.EXPANSION_SYMBOL - 121)) | (1 << (MySQLParser.EXPORT_SYMBOL - 121)) | (1 << (MySQLParser.EXTENDED_SYMBOL - 121)) | (1 << (MySQLParser.EXTENT_SIZE_SYMBOL - 121)) | (1 << (MySQLParser.FAULTS_SYMBOL - 121)) | (1 << (MySQLParser.FAST_SYMBOL - 121)) | (1 << (MySQLParser.FOUND_SYMBOL - 121)) | (1 << (MySQLParser.ENABLE_SYMBOL - 121)) | (1 << (MySQLParser.FULL_SYMBOL - 121)) | (1 << (MySQLParser.FILE_BLOCK_SIZE_SYMBOL - 121)) | (1 << (MySQLParser.FILTER_SYMBOL - 121)) | (1 << (MySQLParser.FIRST_SYMBOL - 121)) | (1 << (MySQLParser.FIXED_SYMBOL - 121)) | (1 << (MySQLParser.GENERAL_SYMBOL - 121)) | (1 << (MySQLParser.GEOMETRY_SYMBOL - 121)) | (1 << (MySQLParser.GEOMETRYCOLLECTION_SYMBOL - 121)))) !== 0) || ((((_la - 153)) & ~0x1F) === 0 && ((1 << (_la - 153)) & ((1 << (MySQLParser.GET_FORMAT_SYMBOL - 153)) | (1 << (MySQLParser.GRANTS_SYMBOL - 153)) | (1 << (MySQLParser.GLOBAL_SYMBOL - 153)) | (1 << (MySQLParser.HASH_SYMBOL - 153)) | (1 << (MySQLParser.HOSTS_SYMBOL - 153)) | (1 << (MySQLParser.HOUR_SYMBOL - 153)) | (1 << (MySQLParser.IDENTIFIED_SYMBOL - 153)) | (1 << (MySQLParser.IGNORE_SERVER_IDS_SYMBOL - 153)) | (1 << (MySQLParser.INVOKER_SYMBOL - 153)) | (1 << (MySQLParser.INDEXES_SYMBOL - 153)) | (1 << (MySQLParser.INITIAL_SIZE_SYMBOL - 153)) | (1 << (MySQLParser.INSTANCE_SYMBOL - 153)) | (1 << (MySQLParser.IO_SYMBOL - 153)) | (1 << (MySQLParser.IPC_SYMBOL - 153)) | (1 << (MySQLParser.ISOLATION_SYMBOL - 153)) | (1 << (MySQLParser.ISSUER_SYMBOL - 153)) | (1 << (MySQLParser.INSERT_METHOD_SYMBOL - 153)) | (1 << (MySQLParser.JSON_SYMBOL - 153)) | (1 << (MySQLParser.KEY_BLOCK_SIZE_SYMBOL - 153)) | (1 << (MySQLParser.LAST_SYMBOL - 153)) | (1 << (MySQLParser.LEAVES_SYMBOL - 153)) | (1 << (MySQLParser.LESS_SYMBOL - 153)) | (1 << (MySQLParser.LEVEL_SYMBOL - 153)) | (1 << (MySQLParser.LINESTRING_SYMBOL - 153)) | (1 << (MySQLParser.LIST_SYMBOL - 153)) | (1 << (MySQLParser.LOCAL_SYMBOL - 153)) | (1 << (MySQLParser.LOCKS_SYMBOL - 153)) | (1 << (MySQLParser.LOGFILE_SYMBOL - 153)) | (1 << (MySQLParser.LOGS_SYMBOL - 153)) | (1 << (MySQLParser.MAX_ROWS_SYMBOL - 153)))) !== 0) || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySQLParser.MASTER_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_HOST_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_PORT_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_LOG_FILE_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_LOG_POS_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_USER_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_PASSWORD_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SERVER_ID_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_RETRY_COUNT_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_DELAY_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SSL_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SSL_CA_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SSL_CAPATH_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_TLS_VERSION_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SSL_CERT_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SSL_CIPHER_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SSL_CRL_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_SSL_KEY_SYMBOL - 185)) | (1 << (MySQLParser.MASTER_AUTO_POSITION_SYMBOL - 185)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 185)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 185)) | (1 << (MySQLParser.MAX_STATEMENT_TIME_SYMBOL - 185)) | (1 << (MySQLParser.MAX_SIZE_SYMBOL - 185)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 185)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS_SYMBOL - 185)) | (1 << (MySQLParser.MEDIUM_SYMBOL - 185)) | (1 << (MySQLParser.MEMORY_SYMBOL - 185)) | (1 << (MySQLParser.MERGE_SYMBOL - 185)) | (1 << (MySQLParser.MESSAGE_TEXT_SYMBOL - 185)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySQLParser.MICROSECOND_SYMBOL - 217)) | (1 << (MySQLParser.MIGRATE_SYMBOL - 217)) | (1 << (MySQLParser.MINUTE_SYMBOL - 217)) | (1 << (MySQLParser.MIN_ROWS_SYMBOL - 217)) | (1 << (MySQLParser.MODIFY_SYMBOL - 217)) | (1 << (MySQLParser.MODE_SYMBOL - 217)) | (1 << (MySQLParser.MONTH_SYMBOL - 217)) | (1 << (MySQLParser.MULTILINESTRING_SYMBOL - 217)) | (1 << (MySQLParser.MULTIPOINT_SYMBOL - 217)) | (1 << (MySQLParser.MULTIPOLYGON_SYMBOL - 217)) | (1 << (MySQLParser.MUTEX_SYMBOL - 217)) | (1 << (MySQLParser.MYSQL_ERRNO_SYMBOL - 217)) | (1 << (MySQLParser.NAME_SYMBOL - 217)) | (1 << (MySQLParser.NAMES_SYMBOL - 217)) | (1 << (MySQLParser.NATIONAL_SYMBOL - 217)) | (1 << (MySQLParser.NCHAR_SYMBOL - 217)) | (1 << (MySQLParser.NDBCLUSTER_SYMBOL - 217)) | (1 << (MySQLParser.NEVER_SYMBOL - 217)) | (1 << (MySQLParser.NEXT_SYMBOL - 217)) | (1 << (MySQLParser.NEW_SYMBOL - 217)) | (1 << (MySQLParser.NO_WAIT_SYMBOL - 217)) | (1 << (MySQLParser.NODEGROUP_SYMBOL - 217)) | (1 << (MySQLParser.NUMBER_SYMBOL - 217)) | (1 << (MySQLParser.NVARCHAR_SYMBOL - 217)) | (1 << (MySQLParser.OFFSET_SYMBOL - 217)) | (1 << (MySQLParser.OLD_PASSWORD_SYMBOL - 217)) | (1 << (MySQLParser.ONE_SYMBOL - 217)) | (1 << (MySQLParser.PACK_KEYS_SYMBOL - 217)) | (1 << (MySQLParser.PAGE_SYMBOL - 217)) | (1 << (MySQLParser.PARTIAL_SYMBOL - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySQLParser.PARTITIONING_SYMBOL - 249)) | (1 << (MySQLParser.PARTITIONS_SYMBOL - 249)) | (1 << (MySQLParser.PASSWORD_SYMBOL - 249)) | (1 << (MySQLParser.PHASE_SYMBOL - 249)) | (1 << (MySQLParser.PLUGIN_DIR_SYMBOL - 249)) | (1 << (MySQLParser.PLUGIN_SYMBOL - 249)) | (1 << (MySQLParser.PLUGINS_SYMBOL - 249)) | (1 << (MySQLParser.POINT_SYMBOL - 249)) | (1 << (MySQLParser.POLYGON_SYMBOL - 249)) | (1 << (MySQLParser.PRESERVE_SYMBOL - 249)) | (1 << (MySQLParser.PREV_SYMBOL - 249)) | (1 << (MySQLParser.PRIVILEGES_SYMBOL - 249)) | (1 << (MySQLParser.PROCESSLIST_SYMBOL - 249)) | (1 << (MySQLParser.PROFILE_SYMBOL - 249)) | (1 << (MySQLParser.PROFILES_SYMBOL - 249)) | (1 << (MySQLParser.QUARTER_SYMBOL - 249)) | (1 << (MySQLParser.QUERY_SYMBOL - 249)) | (1 << (MySQLParser.QUICK_SYMBOL - 249)) | (1 << (MySQLParser.READ_ONLY_SYMBOL - 249)) | (1 << (MySQLParser.REBUILD_SYMBOL - 249)) | (1 << (MySQLParser.RECOVER_SYMBOL - 249)) | (1 << (MySQLParser.REDO_BUFFER_SIZE_SYMBOL - 249)) | (1 << (MySQLParser.REDOFILE_SYMBOL - 249)) | (1 << (MySQLParser.REDUNDANT_SYMBOL - 249)) | (1 << (MySQLParser.RELAY_SYMBOL - 249)) | (1 << (MySQLParser.RELAYLOG_SYMBOL - 249)) | (1 << (MySQLParser.RELAY_LOG_FILE_SYMBOL - 249)) | (1 << (MySQLParser.RELAY_LOG_POS_SYMBOL - 249)) | (1 << (MySQLParser.RELAY_THREAD_SYMBOL - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySQLParser.REORGANIZE_SYMBOL - 281)) | (1 << (MySQLParser.REPEATABLE_SYMBOL - 281)) | (1 << (MySQLParser.REPLICATE_DO_DB_SYMBOL - 281)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB_SYMBOL - 281)) | (1 << (MySQLParser.REPLICATE_DO_TABLE_SYMBOL - 281)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL - 281)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL - 281)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 281)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB_SYMBOL - 281)) | (1 << (MySQLParser.RESUME_SYMBOL - 281)) | (1 << (MySQLParser.RETURNED_SQLSTATE_SYMBOL - 281)) | (1 << (MySQLParser.RETURNS_SYMBOL - 281)) | (1 << (MySQLParser.REVERSE_SYMBOL - 281)) | (1 << (MySQLParser.ROLLUP_SYMBOL - 281)) | (1 << (MySQLParser.ROTATE_SYMBOL - 281)) | (1 << (MySQLParser.ROUTINE_SYMBOL - 281)) | (1 << (MySQLParser.ROW_COUNT_SYMBOL - 281)) | (1 << (MySQLParser.ROW_FORMAT_SYMBOL - 281)) | (1 << (MySQLParser.RTREE_SYMBOL - 281)) | (1 << (MySQLParser.SCHEDULE_SYMBOL - 281)) | (1 << (MySQLParser.SCHEMA_NAME_SYMBOL - 281)) | (1 << (MySQLParser.SECOND_SYMBOL - 281)) | (1 << (MySQLParser.SERIAL_SYMBOL - 281)) | (1 << (MySQLParser.SERIALIZABLE_SYMBOL - 281)) | (1 << (MySQLParser.SESSION_SYMBOL - 281)) | (1 << (MySQLParser.SIMPLE_SYMBOL - 281)) | (1 << (MySQLParser.SHARE_SYMBOL - 281)) | (1 << (MySQLParser.SLOW_SYMBOL - 281)) | (1 << (MySQLParser.SNAPSHOT_SYMBOL - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySQLParser.SOUNDS_SYMBOL - 313)) | (1 << (MySQLParser.SOURCE_SYMBOL - 313)) | (1 << (MySQLParser.SQL_AFTER_GTIDS_SYMBOL - 313)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL - 313)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS_SYMBOL - 313)) | (1 << (MySQLParser.SQL_CACHE_SYMBOL - 313)) | (1 << (MySQLParser.SQL_BUFFER_RESULT_SYMBOL - 313)) | (1 << (MySQLParser.SQL_NO_CACHE_SYMBOL - 313)) | (1 << (MySQLParser.SQL_THREAD_SYMBOL - 313)) | (1 << (MySQLParser.STACKED_SYMBOL - 313)) | (1 << (MySQLParser.STARTS_SYMBOL - 313)) | (1 << (MySQLParser.STATS_AUTO_RECALC_SYMBOL - 313)) | (1 << (MySQLParser.STATS_PERSISTENT_SYMBOL - 313)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES_SYMBOL - 313)) | (1 << (MySQLParser.STATUS_SYMBOL - 313)) | (1 << (MySQLParser.STORAGE_SYMBOL - 313)) | (1 << (MySQLParser.STRING_SYMBOL - 313)) | (1 << (MySQLParser.SUBCLASS_ORIGIN_SYMBOL - 313)) | (1 << (MySQLParser.SUBDATE_SYMBOL - 313)) | (1 << (MySQLParser.SUBJECT_SYMBOL - 313)) | (1 << (MySQLParser.SUBPARTITION_SYMBOL - 313)) | (1 << (MySQLParser.SUBPARTITIONS_SYMBOL - 313)) | (1 << (MySQLParser.SUPER_SYMBOL - 313)) | (1 << (MySQLParser.SUSPEND_SYMBOL - 313)) | (1 << (MySQLParser.SWAPS_SYMBOL - 313)) | (1 << (MySQLParser.SWITCHES_SYMBOL - 313)) | (1 << (MySQLParser.TABLE_NAME_SYMBOL - 313)) | (1 << (MySQLParser.TABLES_SYMBOL - 313)) | (1 << (MySQLParser.TABLE_CHECKSUM_SYMBOL - 313)) | (1 << (MySQLParser.TABLESPACE_SYMBOL - 313)) | (1 << (MySQLParser.TEMPORARY_SYMBOL - 313)) | (1 << (MySQLParser.TEMPTABLE_SYMBOL - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySQLParser.TEXT_SYMBOL - 345)) | (1 << (MySQLParser.THAN_SYMBOL - 345)) | (1 << (MySQLParser.TRANSACTION_SYMBOL - 345)) | (1 << (MySQLParser.TRIGGERS_SYMBOL - 345)) | (1 << (MySQLParser.TIMESTAMP_SYMBOL - 345)) | (1 << (MySQLParser.TIMESTAMP_ADD_SYMBOL - 345)) | (1 << (MySQLParser.TIMESTAMP_DIFF_SYMBOL - 345)) | (1 << (MySQLParser.TIME_SYMBOL - 345)) | (1 << (MySQLParser.TYPES_SYMBOL - 345)) | (1 << (MySQLParser.TYPE_SYMBOL - 345)) | (1 << (MySQLParser.UDF_RETURNS_SYMBOL - 345)) | (1 << (MySQLParser.UNCOMMITTED_SYMBOL - 345)) | (1 << (MySQLParser.UNDEFINED_SYMBOL - 345)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE_SYMBOL - 345)) | (1 << (MySQLParser.UNDOFILE_SYMBOL - 345)) | (1 << (MySQLParser.UNKNOWN_SYMBOL - 345)) | (1 << (MySQLParser.UNTIL_SYMBOL - 345)) | (1 << (MySQLParser.USER_RESOURCES_SYMBOL - 345)) | (1 << (MySQLParser.USER_SYMBOL - 345)) | (1 << (MySQLParser.USE_FRM_SYMBOL - 345)) | (1 << (MySQLParser.VARIABLES_SYMBOL - 345)) | (1 << (MySQLParser.VIEW_SYMBOL - 345)) | (1 << (MySQLParser.VALUE_SYMBOL - 345)) | (1 << (MySQLParser.WARNINGS_SYMBOL - 345)) | (1 << (MySQLParser.WAIT_SYMBOL - 345)) | (1 << (MySQLParser.WEEK_SYMBOL - 345)) | (1 << (MySQLParser.WORK_SYMBOL - 345)) | (1 << (MySQLParser.WEIGHT_STRING_SYMBOL - 345)) | (1 << (MySQLParser.X509_SYMBOL - 345)) | (1 << (MySQLParser.XID_SYMBOL - 345)) | (1 << (MySQLParser.XML_SYMBOL - 345)))) !== 0) || _la === MySQLParser.YEAR_SYMBOL || _la === MySQLParser.ANALYSE_SYMBOL || ((((_la - 694)) & ~0x1F) === 0 && ((1 << (_la - 694)) & ((1 << (MySQLParser.COMPONENT_SYMBOL - 694)) | (1 << (MySQLParser.SKIP_SYMBOL - 694)) | (1 << (MySQLParser.LOCKED_SYMBOL - 694)) | (1 << (MySQLParser.NOWAIT_SYMBOL - 694)) | (1 << (MySQLParser.HISTOGRAM_SYMBOL - 694)) | (1 << (MySQLParser.BUCKETS_SYMBOL - 694)) | (1 << (MySQLParser.REMOTE_SYMBOL - 694)) | (1 << (MySQLParser.EXCLUDE_SYMBOL - 694)) | (1 << (MySQLParser.FOLLOWING_SYMBOL - 694)) | (1 << (MySQLParser.NULLS_SYMBOL - 694)) | (1 << (MySQLParser.OTHERS_SYMBOL - 694)) | (1 << (MySQLParser.PRECEDING_SYMBOL - 694)) | (1 << (MySQLParser.RESPECT_SYMBOL - 694)))) !== 0) || ((((_la - 727)) & ~0x1F) === 0 && ((1 << (_la - 727)) & ((1 << (MySQLParser.TIES_SYMBOL - 727)) | (1 << (MySQLParser.UNBOUNDED_SYMBOL - 727)) | (1 << (MySQLParser.NESTED_SYMBOL - 727)) | (1 << (MySQLParser.ORDINALITY_SYMBOL - 727)) | (1 << (MySQLParser.PATH_SYMBOL - 727)) | (1 << (MySQLParser.HISTORY_SYMBOL - 727)) | (1 << (MySQLParser.REUSE_SYMBOL - 727)) | (1 << (MySQLParser.SRID_SYMBOL - 727)) | (1 << (MySQLParser.THREAD_PRIORITY_SYMBOL - 727)) | (1 << (MySQLParser.VCPU_SYMBOL - 727)) | (1 << (MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL - 727)) | (1 << (MySQLParser.DESCRIPTION_SYMBOL - 727)) | (1 << (MySQLParser.ORGANIZATION_SYMBOL - 727)) | (1 << (MySQLParser.OPTIONAL_SYMBOL - 727)) | (1 << (MySQLParser.ACTIVE_SYMBOL - 727)) | (1 << (MySQLParser.INACTIVE_SYMBOL - 727)) | (1 << (MySQLParser.RETAIN_SYMBOL - 727)) | (1 << (MySQLParser.OLD_SYMBOL - 727)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 8347;
                        if (!(this.serverVersion < 50709)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 50709");
                        }
                        this.state = 8348;
                        this.match(MySQLParser.SHUTDOWN_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 8349;
                        if (!(this.serverVersion < 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion < 80000");
                        }
                        this.state = 8350;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.CUBE_SYMBOL || _la === MySQLParser.IMPORT_SYMBOL || _la === MySQLParser.ROWS_SYMBOL || _la === MySQLParser.ROW_SYMBOL || _la === MySQLParser.FUNCTION_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 8351;
                        if (!(this.serverVersion >= 80000)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80000");
                        }
                        this.state = 8352;
                        _la = this._input.LA(1);
                        if (!(_la === MySQLParser.SUPER_SYMBOL || _la === MySQLParser.EXCHANGE_SYMBOL || _la === MySQLParser.EXPIRE_SYMBOL || _la === MySQLParser.ONLY_SYMBOL || _la === MySQLParser.VALIDATION_SYMBOL || _la === MySQLParser.WITHOUT_SYMBOL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 8353;
                        if (!(this.serverVersion >= 80014)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.serverVersion >= 80014");
                        }
                        this.state = 8354;
                        this.match(MySQLParser.ADMIN_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    sempred(_localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 1:
                return this.simpleStatement_sempred(_localctx, predIndex);
            case 2:
                return this.alterStatement_sempred(_localctx, predIndex);
            case 3:
                return this.alterDatabase_sempred(_localctx, predIndex);
            case 9:
                return this.alterTable_sempred(_localctx, predIndex);
            case 13:
                return this.standaloneAlterCommands_sempred(_localctx, predIndex);
            case 14:
                return this.alterPartition_sempred(_localctx, predIndex);
            case 17:
                return this.alterListItem_sempred(_localctx, predIndex);
            case 24:
                return this.withValidation_sempred(_localctx, predIndex);
            case 28:
                return this.alterTablespace_sempred(_localctx, predIndex);
            case 39:
                return this.createStatement_sempred(_localctx, predIndex);
            case 41:
                return this.createDatabaseOption_sempred(_localctx, predIndex);
            case 54:
                return this.createIndex_sempred(_localctx, predIndex);
            case 65:
                return this.tsDataFileName_sempred(_localctx, predIndex);
            case 68:
                return this.tablespaceOption_sempred(_localctx, predIndex);
            case 85:
                return this.triggerFollowsPrecedesClause_sempred(_localctx, predIndex);
            case 90:
                return this.dropStatement_sempred(_localctx, predIndex);
            case 111:
                return this.deleteStatement_sempred(_localctx, predIndex);
            case 112:
                return this.partitionDelete_sempred(_localctx, predIndex);
            case 114:
                return this.doStatement_sempred(_localctx, predIndex);
            case 117:
                return this.insertStatement_sempred(_localctx, predIndex);
            case 136:
                return this.queryExpression_sempred(_localctx, predIndex);
            case 137:
                return this.queryExpressionBody_sempred(_localctx, predIndex);
            case 139:
                return this.querySpecification_sempred(_localctx, predIndex);
            case 163:
                return this.olapOption_sempred(_localctx, predIndex);
            case 168:
                return this.selectOption_sempred(_localctx, predIndex);
            case 169:
                return this.lockingClause_sempred(_localctx, predIndex);
            case 170:
                return this.lockStrengh_sempred(_localctx, predIndex);
            case 176:
                return this.tableReference_sempred(_localctx, predIndex);
            case 182:
                return this.tableFactor_sempred(_localctx, predIndex);
            case 185:
                return this.derivedTable_sempred(_localctx, predIndex);
            case 189:
                return this.jtColumn_sempred(_localctx, predIndex);
            case 195:
                return this.tableAlias_sempred(_localctx, predIndex);
            case 204:
                return this.updateStatement_sempred(_localctx, predIndex);
            case 208:
                return this.transactionCharacteristic_sempred(_localctx, predIndex);
            case 210:
                return this.lockStatement_sempred(_localctx, predIndex);
            case 214:
                return this.xaConvert_sempred(_localctx, predIndex);
            case 216:
                return this.replicationStatement_sempred(_localctx, predIndex);
            case 217:
                return this.resetOption_sempred(_localctx, predIndex);
            case 218:
                return this.masterResetOptions_sempred(_localctx, predIndex);
            case 227:
                return this.changeReplication_sempred(_localctx, predIndex);
            case 235:
                return this.slaveUntilOptions_sempred(_localctx, predIndex);
            case 236:
                return this.slaveConnectionOptions_sempred(_localctx, predIndex);
            case 243:
                return this.cloneStatement_sempred(_localctx, predIndex);
            case 246:
                return this.accountManagementStatement_sempred(_localctx, predIndex);
            case 247:
                return this.alterUser_sempred(_localctx, predIndex);
            case 248:
                return this.alterUserTail_sempred(_localctx, predIndex);
            case 250:
                return this.createUser_sempred(_localctx, predIndex);
            case 251:
                return this.createUserTail_sempred(_localctx, predIndex);
            case 252:
                return this.defaultRoleClause_sempred(_localctx, predIndex);
            case 255:
                return this.accountLockPasswordExpireOptions_sempred(_localctx, predIndex);
            case 256:
                return this.dropUser_sempred(_localctx, predIndex);
            case 257:
                return this.grant_sempred(_localctx, predIndex);
            case 258:
                return this.grantTargetList_sempred(_localctx, predIndex);
            case 259:
                return this.grantOptions_sempred(_localctx, predIndex);
            case 263:
                return this.versionedRequireClause_sempred(_localctx, predIndex);
            case 265:
                return this.revoke_sempred(_localctx, predIndex);
            case 266:
                return this.onTypeTo_sempred(_localctx, predIndex);
            case 269:
                return this.roleOrPrivilege_sempred(_localctx, predIndex);
            case 270:
                return this.grantIdentifier_sempred(_localctx, predIndex);
            case 277:
                return this.tableAdministrationStatement_sempred(_localctx, predIndex);
            case 283:
                return this.startOptionValueList_sempred(_localctx, predIndex);
            case 288:
                return this.optionValueNoOptionType_sempred(_localctx, predIndex);
            case 293:
                return this.setExprOrDefault_sempred(_localctx, predIndex);
            case 294:
                return this.showStatement_sempred(_localctx, predIndex);
            case 295:
                return this.showCommandType_sempred(_localctx, predIndex);
            case 296:
                return this.nonBlocking_sempred(_localctx, predIndex);
            case 300:
                return this.otherAdministrativeStatement_sempred(_localctx, predIndex);
            case 308:
                return this.flushOption_sempred(_localctx, predIndex);
            case 311:
                return this.flushTablesOptions_sempred(_localctx, predIndex);
            case 326:
                return this.utilityStatement_sempred(_localctx, predIndex);
            case 328:
                return this.explainCommand_sempred(_localctx, predIndex);
            case 329:
                return this.explainableStatement_sempred(_localctx, predIndex);
            case 333:
                return this.expr_sempred(_localctx, predIndex);
            case 334:
                return this.boolPri_sempred(_localctx, predIndex);
            case 336:
                return this.predicate_sempred(_localctx, predIndex);
            case 338:
                return this.bitExpr_sempred(_localctx, predIndex);
            case 339:
                return this.simpleExpr_sempred(_localctx, predIndex);
            case 340:
                return this.arrayCast_sempred(_localctx, predIndex);
            case 341:
                return this.jsonOperator_sempred(_localctx, predIndex);
            case 342:
                return this.sumExpr_sempred(_localctx, predIndex);
            case 353:
                return this.runtimeFunctionCall_sempred(_localctx, predIndex);
            case 354:
                return this.geometryFunction_sempred(_localctx, predIndex);
            case 356:
                return this.fractionalPrecision_sempred(_localctx, predIndex);
            case 368:
                return this.internalVariableName_sempred(_localctx, predIndex);
            case 372:
                return this.castType_sempred(_localctx, predIndex);
            case 386:
                return this.channel_sempred(_localctx, predIndex);
            case 415:
                return this.getDiagnostics_sempred(_localctx, predIndex);
            case 428:
                return this.checkOrReferences_sempred(_localctx, predIndex);
            case 431:
                return this.tableConstraintDef_sempred(_localctx, predIndex);
            case 433:
                return this.fieldDefinition_sempred(_localctx, predIndex);
            case 434:
                return this.columnAttribute_sempred(_localctx, predIndex);
            case 444:
                return this.keyListVariants_sempred(_localctx, predIndex);
            case 447:
                return this.commonIndexOption_sempred(_localctx, predIndex);
            case 453:
                return this.dataType_sempred(_localctx, predIndex);
            case 463:
                return this.charsetName_sempred(_localctx, predIndex);
            case 464:
                return this.collationName_sempred(_localctx, predIndex);
            case 467:
                return this.createTableOption_sempred(_localctx, predIndex);
            case 475:
                return this.partitionKeyAlgorithm_sempred(_localctx, predIndex);
            case 502:
                return this.createUserEntry_sempred(_localctx, predIndex);
            case 513:
                return this.usePartition_sempred(_localctx, predIndex);
            case 515:
                return this.columnName_sempred(_localctx, predIndex);
            case 558:
                return this.pureIdentifier_sempred(_localctx, predIndex);
            case 563:
                return this.simpleIdentifier_sempred(_localctx, predIndex);
            case 568:
                return this.real_ulonglong_number_sempred(_localctx, predIndex);
            case 572:
                return this.textStringLiteral_sempred(_localctx, predIndex);
            case 574:
                return this.textStringHash_sempred(_localctx, predIndex);
            case 594:
                return this.identifierKeyword_sempred(_localctx, predIndex);
            case 597:
                return this.labelKeyword_sempred(_localctx, predIndex);
            case 600:
                return this.roleKeyword_sempred(_localctx, predIndex);
            case 603:
                return this.roleOrIdentifierKeyword_sempred(_localctx, predIndex);
            case 604:
                return this.roleOrLabelKeyword_sempred(_localctx, predIndex);
        }
        return true;
    }
    simpleStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return this.serverVersion >= 80000;
            case 1:
                return this.serverVersion >= 80000;
            case 2:
                return this.serverVersion >= 80000;
            case 3:
                return this.serverVersion >= 50604;
        }
        return true;
    }
    alterStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 4:
                return this.serverVersion >= 80014;
            case 5:
                return this.serverVersion >= 50713;
        }
        return true;
    }
    alterDatabase_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 6:
                return this.serverVersion < 80000;
        }
        return true;
    }
    alterTable_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 7:
                return this.serverVersion < 50700;
        }
        return true;
    }
    standaloneAlterCommands_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 8:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    alterPartition_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 9:
                return this.serverVersion >= 50704;
            case 10:
                return this.serverVersion >= 50704;
        }
        return true;
    }
    alterListItem_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 11:
                return this.serverVersion >= 50700;
            case 12:
                return this.serverVersion < 50700;
            case 13:
                return this.serverVersion >= 80014;
            case 14:
                return this.serverVersion >= 80000;
            case 15:
                return this.serverVersion >= 80017;
            case 16:
                return this.serverVersion >= 80000;
            case 17:
                return this.serverVersion >= 50700;
            case 18:
                return this.serverVersion >= 80014;
            case 19:
                return this.serverVersion >= 50708 && this.serverVersion < 80000;
        }
        return true;
    }
    withValidation_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 20:
                return this.serverVersion >= 50706;
        }
        return true;
    }
    alterTablespace_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 21:
                return this.serverVersion < 80000;
            case 22:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    createStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 23:
                return this.serverVersion >= 80000;
            case 24:
                return this.serverVersion >= 80011;
            case 25:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    createDatabaseOption_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 26:
                return this.serverVersion >= 80016;
        }
        return true;
    }
    createIndex_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 27:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    tsDataFileName_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 28:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    tablespaceOption_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 29:
                return this.serverVersion >= 50707;
            case 30:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    triggerFollowsPrecedesClause_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 31:
                return this.serverVersion >= 50700;
        }
        return true;
    }
    dropStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 32:
                return this.serverVersion >= 80000;
            case 33:
                return this.serverVersion >= 80011;
            case 34:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    deleteStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 35:
                return this.serverVersion >= 80000;
            case 36:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    partitionDelete_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 37:
                return this.serverVersion >= 50602;
        }
        return true;
    }
    doStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 38:
                return this.serverVersion < 50709;
            case 39:
                return this.serverVersion >= 50709;
        }
        return true;
    }
    insertStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 40:
                return this.serverVersion >= 80018;
            case 41:
                return this.serverVersion >= 80018;
        }
        return true;
    }
    queryExpression_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 42:
                return this.serverVersion >= 80000;
            case 43:
                return this.serverVersion < 80000;
            case 44:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    queryExpressionBody_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 45:
                return this.precpred(this._ctx, 2);
        }
        return true;
    }
    querySpecification_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 46:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    olapOption_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 47:
                return this.serverVersion < 80000;
        }
        return true;
    }
    selectOption_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 48:
                return this.serverVersion < 80000;
            case 49:
                return this.serverVersion >= 50704 && this.serverVersion < 50708;
        }
        return true;
    }
    lockingClause_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 50:
                return this.serverVersion >= 80000;
            case 51:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    lockStrengh_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 52:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    tableReference_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 53:
                return this.serverVersion < 80017;
        }
        return true;
    }
    tableFactor_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 54:
                return this.serverVersion >= 80004;
        }
        return true;
    }
    derivedTable_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 55:
                return this.serverVersion >= 80000;
            case 56:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    jtColumn_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 57:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    tableAlias_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 58:
                return this.serverVersion < 80017;
        }
        return true;
    }
    updateStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 59:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    transactionCharacteristic_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 60:
                return this.serverVersion >= 50605;
        }
        return true;
    }
    lockStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 61:
                return this.serverVersion >= 80000;
            case 62:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    xaConvert_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 63:
                return this.serverVersion >= 50704;
        }
        return true;
    }
    replicationStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 64:
                return this.serverVersion > 80000;
            case 65:
                return this.serverVersion >= 50700;
            case 66:
                return this.serverVersion > 50706;
        }
        return true;
    }
    resetOption_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 67:
                return this.serverVersion < 80000;
        }
        return true;
    }
    masterResetOptions_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 68:
                return this.serverVersion >= 80000;
            case 69:
                return this.serverVersion < 80017;
            case 70:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    changeReplication_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 71:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    slaveUntilOptions_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 72:
                return this.serverVersion >= 50606;
            case 73:
                return this.serverVersion >= 50606;
        }
        return true;
    }
    slaveConnectionOptions_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 74:
                return this.serverVersion >= 50604;
        }
        return true;
    }
    cloneStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 75:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    accountManagementStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 76:
                return this.serverVersion >= 50606;
            case 77:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    alterUser_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 78:
                return this.serverVersion >= 50706;
        }
        return true;
    }
    alterUserTail_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 79:
                return this.serverVersion < 80014;
            case 80:
                return this.serverVersion >= 80014;
            case 81:
                return this.serverVersion >= 50706;
            case 82:
                return this.serverVersion >= 80014;
            case 83:
                return this.serverVersion >= 80014;
            case 84:
                return this.serverVersion >= 80014;
            case 85:
                return this.serverVersion >= 80000;
            case 86:
                return this.serverVersion >= 80018;
        }
        return true;
    }
    createUser_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 87:
                return this.serverVersion >= 50706;
        }
        return true;
    }
    createUserTail_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 88:
                return this.serverVersion >= 50706;
        }
        return true;
    }
    defaultRoleClause_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 89:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    accountLockPasswordExpireOptions_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 90:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    dropUser_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 91:
                return this.serverVersion >= 50706;
        }
        return true;
    }
    grant_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 92:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    grantTargetList_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 93:
                return this.serverVersion < 80011;
            case 94:
                return this.serverVersion >= 80011;
        }
        return true;
    }
    grantOptions_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 95:
                return this.serverVersion < 80011;
            case 96:
                return this.serverVersion >= 80011;
        }
        return true;
    }
    versionedRequireClause_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 97:
                return this.serverVersion < 80011;
        }
        return true;
    }
    revoke_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 98:
                return this.serverVersion >= 80000;
            case 99:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    onTypeTo_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 100:
                return this.serverVersion < 80000;
            case 101:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    roleOrPrivilege_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 102:
                return this.serverVersion > 80000;
            case 103:
                return this.serverVersion > 80000;
        }
        return true;
    }
    grantIdentifier_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 104:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    tableAdministrationStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 105:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    startOptionValueList_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 106:
                return this.serverVersion < 50706;
            case 107:
                return this.serverVersion < 80014;
            case 108:
                return this.serverVersion >= 80018;
        }
        return true;
    }
    optionValueNoOptionType_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 109:
                return this.serverVersion >= 80011;
        }
        return true;
    }
    setExprOrDefault_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 110:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    showStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 111:
                return this.serverVersion < 50700;
            case 112:
                return this.serverVersion >= 80000;
            case 113:
                return this.serverVersion < 50700;
            case 114:
                return this.serverVersion >= 50704;
        }
        return true;
    }
    showCommandType_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 115:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    nonBlocking_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 116:
                return this.serverVersion >= 50700 && this.serverVersion < 50706;
        }
        return true;
    }
    otherAdministrativeStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 117:
                return this.serverVersion >= 50709;
        }
        return true;
    }
    flushOption_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 118:
                return this.serverVersion < 80000;
            case 119:
                return this.serverVersion >= 50706;
        }
        return true;
    }
    flushTablesOptions_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 120:
                return this.serverVersion >= 50606;
        }
        return true;
    }
    utilityStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 121:
                return this.serverVersion >= 80011;
        }
        return true;
    }
    explainCommand_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 122:
                return this.serverVersion < 80000;
            case 123:
                return this.serverVersion < 80000;
            case 124:
                return this.serverVersion >= 50605;
            case 125:
                return this.serverVersion >= 80018;
        }
        return true;
    }
    explainableStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 126:
                return this.serverVersion >= 50603;
            case 127:
                return this.serverVersion >= 50700;
        }
        return true;
    }
    expr_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 128:
                return this.precpred(this._ctx, 3);
            case 129:
                return this.precpred(this._ctx, 2);
            case 130:
                return this.precpred(this._ctx, 1);
        }
        return true;
    }
    boolPri_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 131:
                return this.precpred(this._ctx, 3);
            case 132:
                return this.precpred(this._ctx, 2);
            case 133:
                return this.precpred(this._ctx, 1);
        }
        return true;
    }
    predicate_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 134:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    bitExpr_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 135:
                return this.precpred(this._ctx, 7);
            case 136:
                return this.precpred(this._ctx, 6);
            case 137:
                return this.precpred(this._ctx, 5);
            case 138:
                return this.precpred(this._ctx, 3);
            case 139:
                return this.precpred(this._ctx, 2);
            case 140:
                return this.precpred(this._ctx, 1);
            case 141:
                return this.precpred(this._ctx, 4);
        }
        return true;
    }
    simpleExpr_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 142:
                return this.serverVersion >= 80000;
            case 143:
                return this.serverVersion >= 80000;
            case 144:
                return this.precpred(this._ctx, 15);
            case 145:
                return this.precpred(this._ctx, 21);
        }
        return true;
    }
    arrayCast_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 146:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    jsonOperator_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 147:
                return this.serverVersion >= 50708;
            case 148:
                return this.serverVersion >= 50713;
        }
        return true;
    }
    sumExpr_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 149:
                return this.serverVersion >= 80000;
            case 150:
                return this.serverVersion >= 80000;
            case 151:
                return this.serverVersion >= 80000;
            case 152:
                return this.serverVersion >= 80000;
            case 153:
                return this.serverVersion >= 80000;
            case 154:
                return this.serverVersion >= 80000;
            case 155:
                return this.serverVersion >= 80000;
            case 156:
                return this.serverVersion >= 80000;
            case 157:
                return this.serverVersion >= 80000;
            case 158:
                return this.serverVersion >= 80000;
            case 159:
                return this.serverVersion >= 80000;
            case 160:
                return this.serverVersion >= 80000;
            case 161:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    runtimeFunctionCall_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 162:
                return this.serverVersion < 50607;
            case 163:
                return this.serverVersion < 80011;
            case 164:
                return this.serverVersion < 80000;
        }
        return true;
    }
    geometryFunction_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 165:
                return this.serverVersion < 50706;
        }
        return true;
    }
    fractionalPrecision_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 166:
                return this.serverVersion >= 50604;
        }
        return true;
    }
    internalVariableName_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 167:
                return this.serverVersion < 80017;
            case 168:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    castType_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 169:
                return this.serverVersion >= 50708;
            case 170:
                return this.serverVersion >= 80017;
            case 171:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    channel_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 172:
                return this.serverVersion >= 50706;
        }
        return true;
    }
    getDiagnostics_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 173:
                return this.serverVersion >= 50700;
        }
        return true;
    }
    checkOrReferences_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 174:
                return this.serverVersion < 80016;
        }
        return true;
    }
    tableConstraintDef_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 175:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    fieldDefinition_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 176:
                return this.serverVersion >= 50707;
            case 177:
                return this.serverVersion < 80000;
            case 178:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    columnAttribute_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 179:
                return this.serverVersion >= 80014;
            case 180:
                return this.serverVersion >= 80013;
            case 181:
                return this.serverVersion >= 80000;
            case 182:
                return this.serverVersion >= 80017;
            case 183:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    keyListVariants_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 184:
                return this.serverVersion >= 80013;
            case 185:
                return this.serverVersion < 80013;
        }
        return true;
    }
    commonIndexOption_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 186:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    dataType_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 187:
                return this.serverVersion >= 50708;
        }
        return true;
    }
    charsetName_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 188:
                return this.serverVersion < 80011;
        }
        return true;
    }
    collationName_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 189:
                return this.serverVersion < 80011;
            case 190:
                return this.serverVersion >= 80018;
        }
        return true;
    }
    createTableOption_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 191:
                return this.serverVersion >= 80014;
            case 192:
                return this.serverVersion >= 50708;
            case 193:
                return this.serverVersion >= 50711;
            case 194:
                return this.serverVersion >= 50707;
        }
        return true;
    }
    partitionKeyAlgorithm_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 195:
                return this.serverVersion >= 50700;
        }
        return true;
    }
    createUserEntry_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 196:
                return this.serverVersion < 80011;
            case 197:
                return this.serverVersion >= 50706;
            case 198:
                return this.serverVersion >= 80018;
        }
        return true;
    }
    usePartition_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 199:
                return this.serverVersion >= 50602;
        }
        return true;
    }
    columnName_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 200:
                return this.serverVersion >= 80000;
            case 201:
                return this.serverVersion < 80000;
        }
        return true;
    }
    pureIdentifier_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 202:
                return this.isSqlModeActive(common_1.SqlMode.AnsiQuotes);
        }
        return true;
    }
    simpleIdentifier_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 203:
                return this.serverVersion < 80000;
        }
        return true;
    }
    real_ulonglong_number_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 204:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    textStringLiteral_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 205:
                return !this.isSqlModeActive(common_1.SqlMode.AnsiQuotes);
        }
        return true;
    }
    textStringHash_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 206:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    identifierKeyword_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 207:
                return this.serverVersion < 80017;
            case 208:
                return this.serverVersion >= 50709;
            case 209:
                return this.serverVersion >= 80011;
        }
        return true;
    }
    labelKeyword_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 210:
                return this.serverVersion < 80017;
        }
        return true;
    }
    roleKeyword_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 211:
                return this.serverVersion < 80017;
        }
        return true;
    }
    roleOrIdentifierKeyword_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 212:
                return this.serverVersion >= 50709;
            case 213:
                return this.serverVersion >= 80000;
        }
        return true;
    }
    roleOrLabelKeyword_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 214:
                return this.serverVersion < 50709;
            case 215:
                return this.serverVersion < 80000;
            case 216:
                return this.serverVersion >= 80000;
            case 217:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    static get _ATN() {
        if (!MySQLParser.__ATN) {
            MySQLParser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(MySQLParser._serializedATN));
        }
        return MySQLParser.__ATN;
    }
}
exports.MySQLParser = MySQLParser;
MySQLParser.ACCOUNT_SYMBOL = 1;
MySQLParser.ASCII_SYMBOL = 2;
MySQLParser.ALWAYS_SYMBOL = 3;
MySQLParser.BACKUP_SYMBOL = 4;
MySQLParser.BEGIN_SYMBOL = 5;
MySQLParser.BYTE_SYMBOL = 6;
MySQLParser.CACHE_SYMBOL = 7;
MySQLParser.CHARSET_SYMBOL = 8;
MySQLParser.CHECKSUM_SYMBOL = 9;
MySQLParser.CLOSE_SYMBOL = 10;
MySQLParser.COMMENT_SYMBOL = 11;
MySQLParser.COMMIT_SYMBOL = 12;
MySQLParser.CONTAINS_SYMBOL = 13;
MySQLParser.DEALLOCATE_SYMBOL = 14;
MySQLParser.DO_SYMBOL = 15;
MySQLParser.END_SYMBOL = 16;
MySQLParser.EXECUTE_SYMBOL = 17;
MySQLParser.FLUSH_SYMBOL = 18;
MySQLParser.FOLLOWS_SYMBOL = 19;
MySQLParser.FORMAT_SYMBOL = 20;
MySQLParser.GROUP_REPLICATION_SYMBOL = 21;
MySQLParser.HANDLER_SYMBOL = 22;
MySQLParser.HELP_SYMBOL = 23;
MySQLParser.HOST_SYMBOL = 24;
MySQLParser.INSTALL_SYMBOL = 25;
MySQLParser.LANGUAGE_SYMBOL = 26;
MySQLParser.NO_SYMBOL = 27;
MySQLParser.OPEN_SYMBOL = 28;
MySQLParser.OPTIONS_SYMBOL = 29;
MySQLParser.OWNER_SYMBOL = 30;
MySQLParser.PARSER_SYMBOL = 31;
MySQLParser.PARTITION_SYMBOL = 32;
MySQLParser.PORT_SYMBOL = 33;
MySQLParser.PRECEDES_SYMBOL = 34;
MySQLParser.PREPARE_SYMBOL = 35;
MySQLParser.REMOVE_SYMBOL = 36;
MySQLParser.REPAIR_SYMBOL = 37;
MySQLParser.RESET_SYMBOL = 38;
MySQLParser.RESTORE_SYMBOL = 39;
MySQLParser.ROLLBACK_SYMBOL = 40;
MySQLParser.SAVEPOINT_SYMBOL = 41;
MySQLParser.SECURITY_SYMBOL = 42;
MySQLParser.SERVER_SYMBOL = 43;
MySQLParser.SIGNED_SYMBOL = 44;
MySQLParser.SLAVE_SYMBOL = 45;
MySQLParser.SOCKET_SYMBOL = 46;
MySQLParser.SONAME_SYMBOL = 47;
MySQLParser.START_SYMBOL = 48;
MySQLParser.STOP_SYMBOL = 49;
MySQLParser.TRUNCATE_SYMBOL = 50;
MySQLParser.UNICODE_SYMBOL = 51;
MySQLParser.UNINSTALL_SYMBOL = 52;
MySQLParser.UPGRADE_SYMBOL = 53;
MySQLParser.WRAPPER_SYMBOL = 54;
MySQLParser.XA_SYMBOL = 55;
MySQLParser.SHUTDOWN_SYMBOL = 56;
MySQLParser.ACTION_SYMBOL = 57;
MySQLParser.ADDDATE_SYMBOL = 58;
MySQLParser.AFTER_SYMBOL = 59;
MySQLParser.AGAINST_SYMBOL = 60;
MySQLParser.AGGREGATE_SYMBOL = 61;
MySQLParser.ALGORITHM_SYMBOL = 62;
MySQLParser.ANALYZE_SYMBOL = 63;
MySQLParser.ANY_SYMBOL = 64;
MySQLParser.AT_SYMBOL = 65;
MySQLParser.AUTHORS_SYMBOL = 66;
MySQLParser.AUTO_INCREMENT_SYMBOL = 67;
MySQLParser.AUTOEXTEND_SIZE_SYMBOL = 68;
MySQLParser.AVG_ROW_LENGTH_SYMBOL = 69;
MySQLParser.AVG_SYMBOL = 70;
MySQLParser.BINLOG_SYMBOL = 71;
MySQLParser.BIT_SYMBOL = 72;
MySQLParser.BLOCK_SYMBOL = 73;
MySQLParser.BOOL_SYMBOL = 74;
MySQLParser.BOOLEAN_SYMBOL = 75;
MySQLParser.BTREE_SYMBOL = 76;
MySQLParser.CASCADED_SYMBOL = 77;
MySQLParser.CATALOG_NAME_SYMBOL = 78;
MySQLParser.CHAIN_SYMBOL = 79;
MySQLParser.CHANGED_SYMBOL = 80;
MySQLParser.CHANNEL_SYMBOL = 81;
MySQLParser.CIPHER_SYMBOL = 82;
MySQLParser.CLIENT_SYMBOL = 83;
MySQLParser.CLASS_ORIGIN_SYMBOL = 84;
MySQLParser.COALESCE_SYMBOL = 85;
MySQLParser.CODE_SYMBOL = 86;
MySQLParser.COLLATION_SYMBOL = 87;
MySQLParser.COLUMN_NAME_SYMBOL = 88;
MySQLParser.COLUMN_FORMAT_SYMBOL = 89;
MySQLParser.COLUMNS_SYMBOL = 90;
MySQLParser.COMMITTED_SYMBOL = 91;
MySQLParser.COMPACT_SYMBOL = 92;
MySQLParser.COMPLETION_SYMBOL = 93;
MySQLParser.COMPRESSED_SYMBOL = 94;
MySQLParser.COMPRESSION_SYMBOL = 95;
MySQLParser.ENCRYPTION_SYMBOL = 96;
MySQLParser.CONCURRENT_SYMBOL = 97;
MySQLParser.CONNECTION_SYMBOL = 98;
MySQLParser.CONSISTENT_SYMBOL = 99;
MySQLParser.CONSTRAINT_CATALOG_SYMBOL = 100;
MySQLParser.CONSTRAINT_SCHEMA_SYMBOL = 101;
MySQLParser.CONSTRAINT_NAME_SYMBOL = 102;
MySQLParser.CONTEXT_SYMBOL = 103;
MySQLParser.CONTRIBUTORS_SYMBOL = 104;
MySQLParser.CPU_SYMBOL = 105;
MySQLParser.CUBE_SYMBOL = 106;
MySQLParser.CURRENT_SYMBOL = 107;
MySQLParser.CURSOR_NAME_SYMBOL = 108;
MySQLParser.DATA_SYMBOL = 109;
MySQLParser.DATAFILE_SYMBOL = 110;
MySQLParser.DATETIME_SYMBOL = 111;
MySQLParser.DATE_SYMBOL = 112;
MySQLParser.DAY_SYMBOL = 113;
MySQLParser.DEFAULT_AUTH_SYMBOL = 114;
MySQLParser.DEFINER_SYMBOL = 115;
MySQLParser.DELAY_KEY_WRITE_SYMBOL = 116;
MySQLParser.DES_KEY_FILE_SYMBOL = 117;
MySQLParser.DIAGNOSTICS_SYMBOL = 118;
MySQLParser.DIRECTORY_SYMBOL = 119;
MySQLParser.DISABLE_SYMBOL = 120;
MySQLParser.DISCARD_SYMBOL = 121;
MySQLParser.DISK_SYMBOL = 122;
MySQLParser.DUMPFILE_SYMBOL = 123;
MySQLParser.DUPLICATE_SYMBOL = 124;
MySQLParser.DYNAMIC_SYMBOL = 125;
MySQLParser.ENDS_SYMBOL = 126;
MySQLParser.ENUM_SYMBOL = 127;
MySQLParser.ENGINE_SYMBOL = 128;
MySQLParser.ENGINES_SYMBOL = 129;
MySQLParser.ERROR_SYMBOL = 130;
MySQLParser.ERRORS_SYMBOL = 131;
MySQLParser.ESCAPE_SYMBOL = 132;
MySQLParser.EVENT_SYMBOL = 133;
MySQLParser.EVENTS_SYMBOL = 134;
MySQLParser.EVERY_SYMBOL = 135;
MySQLParser.EXPANSION_SYMBOL = 136;
MySQLParser.EXPORT_SYMBOL = 137;
MySQLParser.EXTENDED_SYMBOL = 138;
MySQLParser.EXTENT_SIZE_SYMBOL = 139;
MySQLParser.FAULTS_SYMBOL = 140;
MySQLParser.FAST_SYMBOL = 141;
MySQLParser.FOUND_SYMBOL = 142;
MySQLParser.ENABLE_SYMBOL = 143;
MySQLParser.FULL_SYMBOL = 144;
MySQLParser.FILE_SYMBOL = 145;
MySQLParser.FILE_BLOCK_SIZE_SYMBOL = 146;
MySQLParser.FILTER_SYMBOL = 147;
MySQLParser.FIRST_SYMBOL = 148;
MySQLParser.FIXED_SYMBOL = 149;
MySQLParser.GENERAL_SYMBOL = 150;
MySQLParser.GEOMETRY_SYMBOL = 151;
MySQLParser.GEOMETRYCOLLECTION_SYMBOL = 152;
MySQLParser.GET_FORMAT_SYMBOL = 153;
MySQLParser.GRANTS_SYMBOL = 154;
MySQLParser.GLOBAL_SYMBOL = 155;
MySQLParser.HASH_SYMBOL = 156;
MySQLParser.HOSTS_SYMBOL = 157;
MySQLParser.HOUR_SYMBOL = 158;
MySQLParser.IDENTIFIED_SYMBOL = 159;
MySQLParser.IGNORE_SERVER_IDS_SYMBOL = 160;
MySQLParser.INVOKER_SYMBOL = 161;
MySQLParser.IMPORT_SYMBOL = 162;
MySQLParser.INDEXES_SYMBOL = 163;
MySQLParser.INITIAL_SIZE_SYMBOL = 164;
MySQLParser.INSTANCE_SYMBOL = 165;
MySQLParser.INNODB_SYMBOL = 166;
MySQLParser.IO_SYMBOL = 167;
MySQLParser.IPC_SYMBOL = 168;
MySQLParser.ISOLATION_SYMBOL = 169;
MySQLParser.ISSUER_SYMBOL = 170;
MySQLParser.INSERT_METHOD_SYMBOL = 171;
MySQLParser.JSON_SYMBOL = 172;
MySQLParser.KEY_BLOCK_SIZE_SYMBOL = 173;
MySQLParser.LAST_SYMBOL = 174;
MySQLParser.LEAVES_SYMBOL = 175;
MySQLParser.LESS_SYMBOL = 176;
MySQLParser.LEVEL_SYMBOL = 177;
MySQLParser.LINESTRING_SYMBOL = 178;
MySQLParser.LIST_SYMBOL = 179;
MySQLParser.LOCAL_SYMBOL = 180;
MySQLParser.LOCKS_SYMBOL = 181;
MySQLParser.LOGFILE_SYMBOL = 182;
MySQLParser.LOGS_SYMBOL = 183;
MySQLParser.MAX_ROWS_SYMBOL = 184;
MySQLParser.MASTER_SYMBOL = 185;
MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL = 186;
MySQLParser.MASTER_HOST_SYMBOL = 187;
MySQLParser.MASTER_PORT_SYMBOL = 188;
MySQLParser.MASTER_LOG_FILE_SYMBOL = 189;
MySQLParser.MASTER_LOG_POS_SYMBOL = 190;
MySQLParser.MASTER_USER_SYMBOL = 191;
MySQLParser.MASTER_PASSWORD_SYMBOL = 192;
MySQLParser.MASTER_SERVER_ID_SYMBOL = 193;
MySQLParser.MASTER_CONNECT_RETRY_SYMBOL = 194;
MySQLParser.MASTER_RETRY_COUNT_SYMBOL = 195;
MySQLParser.MASTER_DELAY_SYMBOL = 196;
MySQLParser.MASTER_SSL_SYMBOL = 197;
MySQLParser.MASTER_SSL_CA_SYMBOL = 198;
MySQLParser.MASTER_SSL_CAPATH_SYMBOL = 199;
MySQLParser.MASTER_TLS_VERSION_SYMBOL = 200;
MySQLParser.MASTER_SSL_CERT_SYMBOL = 201;
MySQLParser.MASTER_SSL_CIPHER_SYMBOL = 202;
MySQLParser.MASTER_SSL_CRL_SYMBOL = 203;
MySQLParser.MASTER_SSL_CRLPATH_SYMBOL = 204;
MySQLParser.MASTER_SSL_KEY_SYMBOL = 205;
MySQLParser.MASTER_AUTO_POSITION_SYMBOL = 206;
MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL = 207;
MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL = 208;
MySQLParser.MAX_STATEMENT_TIME_SYMBOL = 209;
MySQLParser.MAX_SIZE_SYMBOL = 210;
MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL = 211;
MySQLParser.MAX_USER_CONNECTIONS_SYMBOL = 212;
MySQLParser.MEDIUM_SYMBOL = 213;
MySQLParser.MEMORY_SYMBOL = 214;
MySQLParser.MERGE_SYMBOL = 215;
MySQLParser.MESSAGE_TEXT_SYMBOL = 216;
MySQLParser.MICROSECOND_SYMBOL = 217;
MySQLParser.MIGRATE_SYMBOL = 218;
MySQLParser.MINUTE_SYMBOL = 219;
MySQLParser.MIN_ROWS_SYMBOL = 220;
MySQLParser.MODIFY_SYMBOL = 221;
MySQLParser.MODE_SYMBOL = 222;
MySQLParser.MONTH_SYMBOL = 223;
MySQLParser.MULTILINESTRING_SYMBOL = 224;
MySQLParser.MULTIPOINT_SYMBOL = 225;
MySQLParser.MULTIPOLYGON_SYMBOL = 226;
MySQLParser.MUTEX_SYMBOL = 227;
MySQLParser.MYSQL_ERRNO_SYMBOL = 228;
MySQLParser.NAME_SYMBOL = 229;
MySQLParser.NAMES_SYMBOL = 230;
MySQLParser.NATIONAL_SYMBOL = 231;
MySQLParser.NCHAR_SYMBOL = 232;
MySQLParser.NDBCLUSTER_SYMBOL = 233;
MySQLParser.NEVER_SYMBOL = 234;
MySQLParser.NEXT_SYMBOL = 235;
MySQLParser.NEW_SYMBOL = 236;
MySQLParser.NO_WAIT_SYMBOL = 237;
MySQLParser.NODEGROUP_SYMBOL = 238;
MySQLParser.NONE_SYMBOL = 239;
MySQLParser.NUMBER_SYMBOL = 240;
MySQLParser.NVARCHAR_SYMBOL = 241;
MySQLParser.OFFSET_SYMBOL = 242;
MySQLParser.OLD_PASSWORD_SYMBOL = 243;
MySQLParser.ONE_SHOT_SYMBOL = 244;
MySQLParser.ONE_SYMBOL = 245;
MySQLParser.PACK_KEYS_SYMBOL = 246;
MySQLParser.PAGE_SYMBOL = 247;
MySQLParser.PARTIAL_SYMBOL = 248;
MySQLParser.PARTITIONING_SYMBOL = 249;
MySQLParser.PARTITIONS_SYMBOL = 250;
MySQLParser.PASSWORD_SYMBOL = 251;
MySQLParser.PHASE_SYMBOL = 252;
MySQLParser.PLUGIN_DIR_SYMBOL = 253;
MySQLParser.PLUGIN_SYMBOL = 254;
MySQLParser.PLUGINS_SYMBOL = 255;
MySQLParser.POINT_SYMBOL = 256;
MySQLParser.POLYGON_SYMBOL = 257;
MySQLParser.PRESERVE_SYMBOL = 258;
MySQLParser.PREV_SYMBOL = 259;
MySQLParser.PRIVILEGES_SYMBOL = 260;
MySQLParser.PROCESS_SYMBOL = 261;
MySQLParser.PROCESSLIST_SYMBOL = 262;
MySQLParser.PROFILE_SYMBOL = 263;
MySQLParser.PROFILES_SYMBOL = 264;
MySQLParser.PROXY_SYMBOL = 265;
MySQLParser.QUARTER_SYMBOL = 266;
MySQLParser.QUERY_SYMBOL = 267;
MySQLParser.QUICK_SYMBOL = 268;
MySQLParser.READ_ONLY_SYMBOL = 269;
MySQLParser.REBUILD_SYMBOL = 270;
MySQLParser.RECOVER_SYMBOL = 271;
MySQLParser.REDO_BUFFER_SIZE_SYMBOL = 272;
MySQLParser.REDOFILE_SYMBOL = 273;
MySQLParser.REDUNDANT_SYMBOL = 274;
MySQLParser.RELAY_SYMBOL = 275;
MySQLParser.RELAYLOG_SYMBOL = 276;
MySQLParser.RELAY_LOG_FILE_SYMBOL = 277;
MySQLParser.RELAY_LOG_POS_SYMBOL = 278;
MySQLParser.RELAY_THREAD_SYMBOL = 279;
MySQLParser.RELOAD_SYMBOL = 280;
MySQLParser.REORGANIZE_SYMBOL = 281;
MySQLParser.REPEATABLE_SYMBOL = 282;
MySQLParser.REPLICATION_SYMBOL = 283;
MySQLParser.REPLICATE_DO_DB_SYMBOL = 284;
MySQLParser.REPLICATE_IGNORE_DB_SYMBOL = 285;
MySQLParser.REPLICATE_DO_TABLE_SYMBOL = 286;
MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL = 287;
MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL = 288;
MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL = 289;
MySQLParser.REPLICATE_REWRITE_DB_SYMBOL = 290;
MySQLParser.RESUME_SYMBOL = 291;
MySQLParser.RETURNED_SQLSTATE_SYMBOL = 292;
MySQLParser.RETURNS_SYMBOL = 293;
MySQLParser.REVERSE_SYMBOL = 294;
MySQLParser.ROLLUP_SYMBOL = 295;
MySQLParser.ROTATE_SYMBOL = 296;
MySQLParser.ROUTINE_SYMBOL = 297;
MySQLParser.ROWS_SYMBOL = 298;
MySQLParser.ROW_COUNT_SYMBOL = 299;
MySQLParser.ROW_FORMAT_SYMBOL = 300;
MySQLParser.ROW_SYMBOL = 301;
MySQLParser.RTREE_SYMBOL = 302;
MySQLParser.SCHEDULE_SYMBOL = 303;
MySQLParser.SCHEMA_NAME_SYMBOL = 304;
MySQLParser.SECOND_SYMBOL = 305;
MySQLParser.SERIAL_SYMBOL = 306;
MySQLParser.SERIALIZABLE_SYMBOL = 307;
MySQLParser.SESSION_SYMBOL = 308;
MySQLParser.SIMPLE_SYMBOL = 309;
MySQLParser.SHARE_SYMBOL = 310;
MySQLParser.SLOW_SYMBOL = 311;
MySQLParser.SNAPSHOT_SYMBOL = 312;
MySQLParser.SOUNDS_SYMBOL = 313;
MySQLParser.SOURCE_SYMBOL = 314;
MySQLParser.SQL_AFTER_GTIDS_SYMBOL = 315;
MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL = 316;
MySQLParser.SQL_BEFORE_GTIDS_SYMBOL = 317;
MySQLParser.SQL_CACHE_SYMBOL = 318;
MySQLParser.SQL_BUFFER_RESULT_SYMBOL = 319;
MySQLParser.SQL_NO_CACHE_SYMBOL = 320;
MySQLParser.SQL_THREAD_SYMBOL = 321;
MySQLParser.STACKED_SYMBOL = 322;
MySQLParser.STARTS_SYMBOL = 323;
MySQLParser.STATS_AUTO_RECALC_SYMBOL = 324;
MySQLParser.STATS_PERSISTENT_SYMBOL = 325;
MySQLParser.STATS_SAMPLE_PAGES_SYMBOL = 326;
MySQLParser.STATUS_SYMBOL = 327;
MySQLParser.STORAGE_SYMBOL = 328;
MySQLParser.STRING_SYMBOL = 329;
MySQLParser.SUBCLASS_ORIGIN_SYMBOL = 330;
MySQLParser.SUBDATE_SYMBOL = 331;
MySQLParser.SUBJECT_SYMBOL = 332;
MySQLParser.SUBPARTITION_SYMBOL = 333;
MySQLParser.SUBPARTITIONS_SYMBOL = 334;
MySQLParser.SUPER_SYMBOL = 335;
MySQLParser.SUSPEND_SYMBOL = 336;
MySQLParser.SWAPS_SYMBOL = 337;
MySQLParser.SWITCHES_SYMBOL = 338;
MySQLParser.TABLE_NAME_SYMBOL = 339;
MySQLParser.TABLES_SYMBOL = 340;
MySQLParser.TABLE_CHECKSUM_SYMBOL = 341;
MySQLParser.TABLESPACE_SYMBOL = 342;
MySQLParser.TEMPORARY_SYMBOL = 343;
MySQLParser.TEMPTABLE_SYMBOL = 344;
MySQLParser.TEXT_SYMBOL = 345;
MySQLParser.THAN_SYMBOL = 346;
MySQLParser.TRANSACTION_SYMBOL = 347;
MySQLParser.TRIGGERS_SYMBOL = 348;
MySQLParser.TIMESTAMP_SYMBOL = 349;
MySQLParser.TIMESTAMP_ADD_SYMBOL = 350;
MySQLParser.TIMESTAMP_DIFF_SYMBOL = 351;
MySQLParser.TIME_SYMBOL = 352;
MySQLParser.TYPES_SYMBOL = 353;
MySQLParser.TYPE_SYMBOL = 354;
MySQLParser.UDF_RETURNS_SYMBOL = 355;
MySQLParser.FUNCTION_SYMBOL = 356;
MySQLParser.UNCOMMITTED_SYMBOL = 357;
MySQLParser.UNDEFINED_SYMBOL = 358;
MySQLParser.UNDO_BUFFER_SIZE_SYMBOL = 359;
MySQLParser.UNDOFILE_SYMBOL = 360;
MySQLParser.UNKNOWN_SYMBOL = 361;
MySQLParser.UNTIL_SYMBOL = 362;
MySQLParser.USER_RESOURCES_SYMBOL = 363;
MySQLParser.USER_SYMBOL = 364;
MySQLParser.USE_FRM_SYMBOL = 365;
MySQLParser.VARIABLES_SYMBOL = 366;
MySQLParser.VIEW_SYMBOL = 367;
MySQLParser.VALUE_SYMBOL = 368;
MySQLParser.WARNINGS_SYMBOL = 369;
MySQLParser.WAIT_SYMBOL = 370;
MySQLParser.WEEK_SYMBOL = 371;
MySQLParser.WORK_SYMBOL = 372;
MySQLParser.WEIGHT_STRING_SYMBOL = 373;
MySQLParser.X509_SYMBOL = 374;
MySQLParser.XID_SYMBOL = 375;
MySQLParser.XML_SYMBOL = 376;
MySQLParser.YEAR_SYMBOL = 377;
MySQLParser.NOT2_SYMBOL = 378;
MySQLParser.CONCAT_PIPES_SYMBOL = 379;
MySQLParser.INT_NUMBER = 380;
MySQLParser.LONG_NUMBER = 381;
MySQLParser.ULONGLONG_NUMBER = 382;
MySQLParser.EQUAL_OPERATOR = 383;
MySQLParser.ASSIGN_OPERATOR = 384;
MySQLParser.NULL_SAFE_EQUAL_OPERATOR = 385;
MySQLParser.GREATER_OR_EQUAL_OPERATOR = 386;
MySQLParser.GREATER_THAN_OPERATOR = 387;
MySQLParser.LESS_OR_EQUAL_OPERATOR = 388;
MySQLParser.LESS_THAN_OPERATOR = 389;
MySQLParser.NOT_EQUAL_OPERATOR = 390;
MySQLParser.PLUS_OPERATOR = 391;
MySQLParser.MINUS_OPERATOR = 392;
MySQLParser.MULT_OPERATOR = 393;
MySQLParser.DIV_OPERATOR = 394;
MySQLParser.MOD_OPERATOR = 395;
MySQLParser.LOGICAL_NOT_OPERATOR = 396;
MySQLParser.BITWISE_NOT_OPERATOR = 397;
MySQLParser.SHIFT_LEFT_OPERATOR = 398;
MySQLParser.SHIFT_RIGHT_OPERATOR = 399;
MySQLParser.LOGICAL_AND_OPERATOR = 400;
MySQLParser.BITWISE_AND_OPERATOR = 401;
MySQLParser.BITWISE_XOR_OPERATOR = 402;
MySQLParser.LOGICAL_OR_OPERATOR = 403;
MySQLParser.BITWISE_OR_OPERATOR = 404;
MySQLParser.DOT_SYMBOL = 405;
MySQLParser.COMMA_SYMBOL = 406;
MySQLParser.SEMICOLON_SYMBOL = 407;
MySQLParser.COLON_SYMBOL = 408;
MySQLParser.OPEN_PAR_SYMBOL = 409;
MySQLParser.CLOSE_PAR_SYMBOL = 410;
MySQLParser.OPEN_CURLY_SYMBOL = 411;
MySQLParser.CLOSE_CURLY_SYMBOL = 412;
MySQLParser.UNDERLINE_SYMBOL = 413;
MySQLParser.JSON_SEPARATOR_SYMBOL = 414;
MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL = 415;
MySQLParser.AT_SIGN_SYMBOL = 416;
MySQLParser.AT_TEXT_SUFFIX = 417;
MySQLParser.AT_AT_SIGN_SYMBOL = 418;
MySQLParser.NULL2_SYMBOL = 419;
MySQLParser.PARAM_MARKER = 420;
MySQLParser.HEX_NUMBER = 421;
MySQLParser.BIN_NUMBER = 422;
MySQLParser.DECIMAL_NUMBER = 423;
MySQLParser.FLOAT_NUMBER = 424;
MySQLParser.ACCESSIBLE_SYMBOL = 425;
MySQLParser.ADD_SYMBOL = 426;
MySQLParser.ALL_SYMBOL = 427;
MySQLParser.ALTER_SYMBOL = 428;
MySQLParser.ANALYSE_SYMBOL = 429;
MySQLParser.AND_SYMBOL = 430;
MySQLParser.AS_SYMBOL = 431;
MySQLParser.ASC_SYMBOL = 432;
MySQLParser.ASENSITIVE_SYMBOL = 433;
MySQLParser.BEFORE_SYMBOL = 434;
MySQLParser.BETWEEN_SYMBOL = 435;
MySQLParser.BIGINT_SYMBOL = 436;
MySQLParser.BINARY_SYMBOL = 437;
MySQLParser.BIN_NUM_SYMBOL = 438;
MySQLParser.BIT_AND_SYMBOL = 439;
MySQLParser.BIT_OR_SYMBOL = 440;
MySQLParser.BIT_XOR_SYMBOL = 441;
MySQLParser.BLOB_SYMBOL = 442;
MySQLParser.BOTH_SYMBOL = 443;
MySQLParser.BY_SYMBOL = 444;
MySQLParser.CALL_SYMBOL = 445;
MySQLParser.CASCADE_SYMBOL = 446;
MySQLParser.CASE_SYMBOL = 447;
MySQLParser.CAST_SYMBOL = 448;
MySQLParser.CHANGE_SYMBOL = 449;
MySQLParser.CHAR_SYMBOL = 450;
MySQLParser.CHECK_SYMBOL = 451;
MySQLParser.COLLATE_SYMBOL = 452;
MySQLParser.COLUMN_SYMBOL = 453;
MySQLParser.CONDITION_SYMBOL = 454;
MySQLParser.CONSTRAINT_SYMBOL = 455;
MySQLParser.CONTINUE_SYMBOL = 456;
MySQLParser.CONVERT_SYMBOL = 457;
MySQLParser.COUNT_SYMBOL = 458;
MySQLParser.CREATE_SYMBOL = 459;
MySQLParser.CROSS_SYMBOL = 460;
MySQLParser.CURDATE_SYMBOL = 461;
MySQLParser.CURRENT_DATE_SYMBOL = 462;
MySQLParser.CURRENT_TIME_SYMBOL = 463;
MySQLParser.CURRENT_USER_SYMBOL = 464;
MySQLParser.CURSOR_SYMBOL = 465;
MySQLParser.CURTIME_SYMBOL = 466;
MySQLParser.DATABASE_SYMBOL = 467;
MySQLParser.DATABASES_SYMBOL = 468;
MySQLParser.DATE_ADD_SYMBOL = 469;
MySQLParser.DATE_SUB_SYMBOL = 470;
MySQLParser.DAY_HOUR_SYMBOL = 471;
MySQLParser.DAY_MICROSECOND_SYMBOL = 472;
MySQLParser.DAY_MINUTE_SYMBOL = 473;
MySQLParser.DAY_SECOND_SYMBOL = 474;
MySQLParser.DECIMAL_NUM_SYMBOL = 475;
MySQLParser.DECIMAL_SYMBOL = 476;
MySQLParser.DECLARE_SYMBOL = 477;
MySQLParser.DEFAULT_SYMBOL = 478;
MySQLParser.DELAYED_SYMBOL = 479;
MySQLParser.DELETE_SYMBOL = 480;
MySQLParser.DESC_SYMBOL = 481;
MySQLParser.DESCRIBE_SYMBOL = 482;
MySQLParser.DETERMINISTIC_SYMBOL = 483;
MySQLParser.DISTINCT_SYMBOL = 484;
MySQLParser.DIV_SYMBOL = 485;
MySQLParser.DOUBLE_SYMBOL = 486;
MySQLParser.DROP_SYMBOL = 487;
MySQLParser.DUAL_SYMBOL = 488;
MySQLParser.EACH_SYMBOL = 489;
MySQLParser.ELSE_SYMBOL = 490;
MySQLParser.ELSEIF_SYMBOL = 491;
MySQLParser.ENCLOSED_SYMBOL = 492;
MySQLParser.END_OF_INPUT_SYMBOL = 493;
MySQLParser.ESCAPED_SYMBOL = 494;
MySQLParser.EXCHANGE_SYMBOL = 495;
MySQLParser.EXISTS_SYMBOL = 496;
MySQLParser.EXIT_SYMBOL = 497;
MySQLParser.EXPIRE_SYMBOL = 498;
MySQLParser.EXPLAIN_SYMBOL = 499;
MySQLParser.EXTRACT_SYMBOL = 500;
MySQLParser.FALSE_SYMBOL = 501;
MySQLParser.FETCH_SYMBOL = 502;
MySQLParser.FLOAT_SYMBOL = 503;
MySQLParser.FORCE_SYMBOL = 504;
MySQLParser.FOREIGN_SYMBOL = 505;
MySQLParser.FOR_SYMBOL = 506;
MySQLParser.FROM_SYMBOL = 507;
MySQLParser.FULLTEXT_SYMBOL = 508;
MySQLParser.GET_SYMBOL = 509;
MySQLParser.GENERATED_SYMBOL = 510;
MySQLParser.GRANT_SYMBOL = 511;
MySQLParser.GROUP_SYMBOL = 512;
MySQLParser.GROUP_CONCAT_SYMBOL = 513;
MySQLParser.HAVING_SYMBOL = 514;
MySQLParser.HIGH_PRIORITY_SYMBOL = 515;
MySQLParser.HOUR_MICROSECOND_SYMBOL = 516;
MySQLParser.HOUR_MINUTE_SYMBOL = 517;
MySQLParser.HOUR_SECOND_SYMBOL = 518;
MySQLParser.IF_SYMBOL = 519;
MySQLParser.IGNORE_SYMBOL = 520;
MySQLParser.INDEX_SYMBOL = 521;
MySQLParser.INFILE_SYMBOL = 522;
MySQLParser.INNER_SYMBOL = 523;
MySQLParser.INOUT_SYMBOL = 524;
MySQLParser.INSENSITIVE_SYMBOL = 525;
MySQLParser.INSERT_SYMBOL = 526;
MySQLParser.INTERVAL_SYMBOL = 527;
MySQLParser.INTO_SYMBOL = 528;
MySQLParser.INT_SYMBOL = 529;
MySQLParser.IN_SYMBOL = 530;
MySQLParser.IO_AFTER_GTIDS_SYMBOL = 531;
MySQLParser.IO_BEFORE_GTIDS_SYMBOL = 532;
MySQLParser.IS_SYMBOL = 533;
MySQLParser.ITERATE_SYMBOL = 534;
MySQLParser.JOIN_SYMBOL = 535;
MySQLParser.KEYS_SYMBOL = 536;
MySQLParser.KEY_SYMBOL = 537;
MySQLParser.KILL_SYMBOL = 538;
MySQLParser.LEADING_SYMBOL = 539;
MySQLParser.LEAVE_SYMBOL = 540;
MySQLParser.LEFT_SYMBOL = 541;
MySQLParser.LIKE_SYMBOL = 542;
MySQLParser.LIMIT_SYMBOL = 543;
MySQLParser.LINEAR_SYMBOL = 544;
MySQLParser.LINES_SYMBOL = 545;
MySQLParser.LOAD_SYMBOL = 546;
MySQLParser.LOCATOR_SYMBOL = 547;
MySQLParser.LOCK_SYMBOL = 548;
MySQLParser.LONGBLOB_SYMBOL = 549;
MySQLParser.LONGTEXT_SYMBOL = 550;
MySQLParser.LONG_NUM_SYMBOL = 551;
MySQLParser.LONG_SYMBOL = 552;
MySQLParser.LOOP_SYMBOL = 553;
MySQLParser.LOW_PRIORITY_SYMBOL = 554;
MySQLParser.MASTER_BIND_SYMBOL = 555;
MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL = 556;
MySQLParser.MATCH_SYMBOL = 557;
MySQLParser.MAX_SYMBOL = 558;
MySQLParser.MAXVALUE_SYMBOL = 559;
MySQLParser.MEDIUMBLOB_SYMBOL = 560;
MySQLParser.MEDIUMINT_SYMBOL = 561;
MySQLParser.MEDIUMTEXT_SYMBOL = 562;
MySQLParser.MID_SYMBOL = 563;
MySQLParser.MINUTE_MICROSECOND_SYMBOL = 564;
MySQLParser.MINUTE_SECOND_SYMBOL = 565;
MySQLParser.MIN_SYMBOL = 566;
MySQLParser.MODIFIES_SYMBOL = 567;
MySQLParser.MOD_SYMBOL = 568;
MySQLParser.NATURAL_SYMBOL = 569;
MySQLParser.NCHAR_STRING_SYMBOL = 570;
MySQLParser.NEG_SYMBOL = 571;
MySQLParser.NONBLOCKING_SYMBOL = 572;
MySQLParser.NOT_SYMBOL = 573;
MySQLParser.NOW_SYMBOL = 574;
MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL = 575;
MySQLParser.NULL_SYMBOL = 576;
MySQLParser.NUMERIC_SYMBOL = 577;
MySQLParser.OFFLINE_SYMBOL = 578;
MySQLParser.ON_SYMBOL = 579;
MySQLParser.ONLINE_SYMBOL = 580;
MySQLParser.ONLY_SYMBOL = 581;
MySQLParser.OPTIMIZE_SYMBOL = 582;
MySQLParser.OPTIMIZER_COSTS_SYMBOL = 583;
MySQLParser.OPTION_SYMBOL = 584;
MySQLParser.OPTIONALLY_SYMBOL = 585;
MySQLParser.ORDER_SYMBOL = 586;
MySQLParser.OR_SYMBOL = 587;
MySQLParser.OUTER_SYMBOL = 588;
MySQLParser.OUTFILE_SYMBOL = 589;
MySQLParser.OUT_SYMBOL = 590;
MySQLParser.POSITION_SYMBOL = 591;
MySQLParser.PRECISION_SYMBOL = 592;
MySQLParser.PRIMARY_SYMBOL = 593;
MySQLParser.PROCEDURE_SYMBOL = 594;
MySQLParser.PURGE_SYMBOL = 595;
MySQLParser.RANGE_SYMBOL = 596;
MySQLParser.READS_SYMBOL = 597;
MySQLParser.READ_SYMBOL = 598;
MySQLParser.READ_WRITE_SYMBOL = 599;
MySQLParser.REAL_SYMBOL = 600;
MySQLParser.REFERENCES_SYMBOL = 601;
MySQLParser.REGEXP_SYMBOL = 602;
MySQLParser.RELEASE_SYMBOL = 603;
MySQLParser.RENAME_SYMBOL = 604;
MySQLParser.REPEAT_SYMBOL = 605;
MySQLParser.REPLACE_SYMBOL = 606;
MySQLParser.REQUIRE_SYMBOL = 607;
MySQLParser.RESIGNAL_SYMBOL = 608;
MySQLParser.RESTRICT_SYMBOL = 609;
MySQLParser.RETURN_SYMBOL = 610;
MySQLParser.REVOKE_SYMBOL = 611;
MySQLParser.RIGHT_SYMBOL = 612;
MySQLParser.SECOND_MICROSECOND_SYMBOL = 613;
MySQLParser.SELECT_SYMBOL = 614;
MySQLParser.SENSITIVE_SYMBOL = 615;
MySQLParser.SEPARATOR_SYMBOL = 616;
MySQLParser.SERVER_OPTIONS_SYMBOL = 617;
MySQLParser.SESSION_USER_SYMBOL = 618;
MySQLParser.SET_SYMBOL = 619;
MySQLParser.SET_VAR_SYMBOL = 620;
MySQLParser.SHOW_SYMBOL = 621;
MySQLParser.SIGNAL_SYMBOL = 622;
MySQLParser.SMALLINT_SYMBOL = 623;
MySQLParser.SPATIAL_SYMBOL = 624;
MySQLParser.SPECIFIC_SYMBOL = 625;
MySQLParser.SQLEXCEPTION_SYMBOL = 626;
MySQLParser.SQLSTATE_SYMBOL = 627;
MySQLParser.SQLWARNING_SYMBOL = 628;
MySQLParser.SQL_BIG_RESULT_SYMBOL = 629;
MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL = 630;
MySQLParser.SQL_SMALL_RESULT_SYMBOL = 631;
MySQLParser.SQL_SYMBOL = 632;
MySQLParser.SSL_SYMBOL = 633;
MySQLParser.STARTING_SYMBOL = 634;
MySQLParser.STDDEV_SAMP_SYMBOL = 635;
MySQLParser.STDDEV_SYMBOL = 636;
MySQLParser.STDDEV_POP_SYMBOL = 637;
MySQLParser.STD_SYMBOL = 638;
MySQLParser.STORED_SYMBOL = 639;
MySQLParser.STRAIGHT_JOIN_SYMBOL = 640;
MySQLParser.SUBSTR_SYMBOL = 641;
MySQLParser.SUBSTRING_SYMBOL = 642;
MySQLParser.SUM_SYMBOL = 643;
MySQLParser.SYSDATE_SYMBOL = 644;
MySQLParser.SYSTEM_USER_SYMBOL = 645;
MySQLParser.TABLE_REF_PRIORITY_SYMBOL = 646;
MySQLParser.TABLE_SYMBOL = 647;
MySQLParser.TERMINATED_SYMBOL = 648;
MySQLParser.THEN_SYMBOL = 649;
MySQLParser.TINYBLOB_SYMBOL = 650;
MySQLParser.TINYINT_SYMBOL = 651;
MySQLParser.TINYTEXT_SYMBOL = 652;
MySQLParser.TO_SYMBOL = 653;
MySQLParser.TRAILING_SYMBOL = 654;
MySQLParser.TRIGGER_SYMBOL = 655;
MySQLParser.TRIM_SYMBOL = 656;
MySQLParser.TRUE_SYMBOL = 657;
MySQLParser.UNDO_SYMBOL = 658;
MySQLParser.UNION_SYMBOL = 659;
MySQLParser.UNIQUE_SYMBOL = 660;
MySQLParser.UNLOCK_SYMBOL = 661;
MySQLParser.UNSIGNED_SYMBOL = 662;
MySQLParser.UPDATE_SYMBOL = 663;
MySQLParser.USAGE_SYMBOL = 664;
MySQLParser.USE_SYMBOL = 665;
MySQLParser.USING_SYMBOL = 666;
MySQLParser.UTC_DATE_SYMBOL = 667;
MySQLParser.UTC_TIMESTAMP_SYMBOL = 668;
MySQLParser.UTC_TIME_SYMBOL = 669;
MySQLParser.VALIDATION_SYMBOL = 670;
MySQLParser.VALUES_SYMBOL = 671;
MySQLParser.VARBINARY_SYMBOL = 672;
MySQLParser.VARCHAR_SYMBOL = 673;
MySQLParser.VARIANCE_SYMBOL = 674;
MySQLParser.VARYING_SYMBOL = 675;
MySQLParser.VAR_POP_SYMBOL = 676;
MySQLParser.VAR_SAMP_SYMBOL = 677;
MySQLParser.VIRTUAL_SYMBOL = 678;
MySQLParser.WHEN_SYMBOL = 679;
MySQLParser.WHERE_SYMBOL = 680;
MySQLParser.WHILE_SYMBOL = 681;
MySQLParser.WITH_SYMBOL = 682;
MySQLParser.WITHOUT_SYMBOL = 683;
MySQLParser.WRITE_SYMBOL = 684;
MySQLParser.XOR_SYMBOL = 685;
MySQLParser.YEAR_MONTH_SYMBOL = 686;
MySQLParser.ZEROFILL_SYMBOL = 687;
MySQLParser.PERSIST_SYMBOL = 688;
MySQLParser.ROLE_SYMBOL = 689;
MySQLParser.ADMIN_SYMBOL = 690;
MySQLParser.INVISIBLE_SYMBOL = 691;
MySQLParser.VISIBLE_SYMBOL = 692;
MySQLParser.EXCEPT_SYMBOL = 693;
MySQLParser.COMPONENT_SYMBOL = 694;
MySQLParser.RECURSIVE_SYMBOL = 695;
MySQLParser.JSON_OBJECTAGG_SYMBOL = 696;
MySQLParser.JSON_ARRAYAGG_SYMBOL = 697;
MySQLParser.OF_SYMBOL = 698;
MySQLParser.SKIP_SYMBOL = 699;
MySQLParser.LOCKED_SYMBOL = 700;
MySQLParser.NOWAIT_SYMBOL = 701;
MySQLParser.GROUPING_SYMBOL = 702;
MySQLParser.PERSIST_ONLY_SYMBOL = 703;
MySQLParser.HISTOGRAM_SYMBOL = 704;
MySQLParser.BUCKETS_SYMBOL = 705;
MySQLParser.REMOTE_SYMBOL = 706;
MySQLParser.CLONE_SYMBOL = 707;
MySQLParser.CUME_DIST_SYMBOL = 708;
MySQLParser.DENSE_RANK_SYMBOL = 709;
MySQLParser.EXCLUDE_SYMBOL = 710;
MySQLParser.FIRST_VALUE_SYMBOL = 711;
MySQLParser.FOLLOWING_SYMBOL = 712;
MySQLParser.GROUPS_SYMBOL = 713;
MySQLParser.LAG_SYMBOL = 714;
MySQLParser.LAST_VALUE_SYMBOL = 715;
MySQLParser.LEAD_SYMBOL = 716;
MySQLParser.NTH_VALUE_SYMBOL = 717;
MySQLParser.NTILE_SYMBOL = 718;
MySQLParser.NULLS_SYMBOL = 719;
MySQLParser.OTHERS_SYMBOL = 720;
MySQLParser.OVER_SYMBOL = 721;
MySQLParser.PERCENT_RANK_SYMBOL = 722;
MySQLParser.PRECEDING_SYMBOL = 723;
MySQLParser.RANK_SYMBOL = 724;
MySQLParser.RESPECT_SYMBOL = 725;
MySQLParser.ROW_NUMBER_SYMBOL = 726;
MySQLParser.TIES_SYMBOL = 727;
MySQLParser.UNBOUNDED_SYMBOL = 728;
MySQLParser.WINDOW_SYMBOL = 729;
MySQLParser.EMPTY_SYMBOL = 730;
MySQLParser.JSON_TABLE_SYMBOL = 731;
MySQLParser.NESTED_SYMBOL = 732;
MySQLParser.ORDINALITY_SYMBOL = 733;
MySQLParser.PATH_SYMBOL = 734;
MySQLParser.HISTORY_SYMBOL = 735;
MySQLParser.REUSE_SYMBOL = 736;
MySQLParser.SRID_SYMBOL = 737;
MySQLParser.THREAD_PRIORITY_SYMBOL = 738;
MySQLParser.RESOURCE_SYMBOL = 739;
MySQLParser.SYSTEM_SYMBOL = 740;
MySQLParser.VCPU_SYMBOL = 741;
MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL = 742;
MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL = 743;
MySQLParser.RESTART_SYMBOL = 744;
MySQLParser.DEFINITION_SYMBOL = 745;
MySQLParser.DESCRIPTION_SYMBOL = 746;
MySQLParser.ORGANIZATION_SYMBOL = 747;
MySQLParser.REFERENCE_SYMBOL = 748;
MySQLParser.OPTIONAL_SYMBOL = 749;
MySQLParser.SECONDARY_SYMBOL = 750;
MySQLParser.SECONDARY_ENGINE_SYMBOL = 751;
MySQLParser.SECONDARY_LOAD_SYMBOL = 752;
MySQLParser.SECONDARY_UNLOAD_SYMBOL = 753;
MySQLParser.ACTIVE_SYMBOL = 754;
MySQLParser.INACTIVE_SYMBOL = 755;
MySQLParser.LATERAL_SYMBOL = 756;
MySQLParser.RETAIN_SYMBOL = 757;
MySQLParser.OLD_SYMBOL = 758;
MySQLParser.NETWORK_NAMESPACE_SYMBOL = 759;
MySQLParser.ENFORCED_SYMBOL = 760;
MySQLParser.ARRAY_SYMBOL = 761;
MySQLParser.OJ_SYMBOL = 762;
MySQLParser.MEMBER_SYMBOL = 763;
MySQLParser.RANDOM_SYMBOL = 764;
MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL = 765;
MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL = 766;
MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL = 767;
MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL = 768;
MySQLParser.WHITESPACE = 769;
MySQLParser.INVALID_INPUT = 770;
MySQLParser.UNDERSCORE_CHARSET = 771;
MySQLParser.IDENTIFIER = 772;
MySQLParser.NCHAR_TEXT = 773;
MySQLParser.BACK_TICK_QUOTED_ID = 774;
MySQLParser.DOUBLE_QUOTED_TEXT = 775;
MySQLParser.SINGLE_QUOTED_TEXT = 776;
MySQLParser.VERSION_COMMENT_START = 777;
MySQLParser.MYSQL_COMMENT_START = 778;
MySQLParser.VERSION_COMMENT_END = 779;
MySQLParser.BLOCK_COMMENT = 780;
MySQLParser.POUND_COMMENT = 781;
MySQLParser.DASHDASH_COMMENT = 782;
MySQLParser.NOT_EQUAL2_OPERATOR = 783;
MySQLParser.RULE_query = 0;
MySQLParser.RULE_simpleStatement = 1;
MySQLParser.RULE_alterStatement = 2;
MySQLParser.RULE_alterDatabase = 3;
MySQLParser.RULE_alterEvent = 4;
MySQLParser.RULE_alterLogfileGroup = 5;
MySQLParser.RULE_alterLogfileGroupOptions = 6;
MySQLParser.RULE_alterLogfileGroupOption = 7;
MySQLParser.RULE_alterServer = 8;
MySQLParser.RULE_alterTable = 9;
MySQLParser.RULE_alterTableActions = 10;
MySQLParser.RULE_alterCommandList = 11;
MySQLParser.RULE_alterCommandsModifierList = 12;
MySQLParser.RULE_standaloneAlterCommands = 13;
MySQLParser.RULE_alterPartition = 14;
MySQLParser.RULE_alterList = 15;
MySQLParser.RULE_alterCommandsModifier = 16;
MySQLParser.RULE_alterListItem = 17;
MySQLParser.RULE_place = 18;
MySQLParser.RULE_restrict = 19;
MySQLParser.RULE_alterOrderList = 20;
MySQLParser.RULE_alterAlgorithmOption = 21;
MySQLParser.RULE_alterLockOption = 22;
MySQLParser.RULE_indexLockAndAlgorithm = 23;
MySQLParser.RULE_withValidation = 24;
MySQLParser.RULE_removePartitioning = 25;
MySQLParser.RULE_allOrPartitionNameList = 26;
MySQLParser.RULE_reorgPartitionRule = 27;
MySQLParser.RULE_alterTablespace = 28;
MySQLParser.RULE_alterUndoTablespace = 29;
MySQLParser.RULE_undoTableSpaceOptions = 30;
MySQLParser.RULE_undoTableSpaceOption = 31;
MySQLParser.RULE_alterTablespaceOptions = 32;
MySQLParser.RULE_alterTablespaceOption = 33;
MySQLParser.RULE_changeTablespaceOption = 34;
MySQLParser.RULE_alterView = 35;
MySQLParser.RULE_viewTail = 36;
MySQLParser.RULE_viewSelect = 37;
MySQLParser.RULE_viewCheckOption = 38;
MySQLParser.RULE_createStatement = 39;
MySQLParser.RULE_createDatabase = 40;
MySQLParser.RULE_createDatabaseOption = 41;
MySQLParser.RULE_createTable = 42;
MySQLParser.RULE_tableElementList = 43;
MySQLParser.RULE_tableElement = 44;
MySQLParser.RULE_duplicateAsQueryExpression = 45;
MySQLParser.RULE_queryExpressionOrParens = 46;
MySQLParser.RULE_createRoutine = 47;
MySQLParser.RULE_createProcedure = 48;
MySQLParser.RULE_createFunction = 49;
MySQLParser.RULE_createUdf = 50;
MySQLParser.RULE_routineCreateOption = 51;
MySQLParser.RULE_routineAlterOptions = 52;
MySQLParser.RULE_routineOption = 53;
MySQLParser.RULE_createIndex = 54;
MySQLParser.RULE_indexNameAndType = 55;
MySQLParser.RULE_createIndexTarget = 56;
MySQLParser.RULE_createLogfileGroup = 57;
MySQLParser.RULE_logfileGroupOptions = 58;
MySQLParser.RULE_logfileGroupOption = 59;
MySQLParser.RULE_createServer = 60;
MySQLParser.RULE_serverOptions = 61;
MySQLParser.RULE_serverOption = 62;
MySQLParser.RULE_createTablespace = 63;
MySQLParser.RULE_createUndoTablespace = 64;
MySQLParser.RULE_tsDataFileName = 65;
MySQLParser.RULE_tsDataFile = 66;
MySQLParser.RULE_tablespaceOptions = 67;
MySQLParser.RULE_tablespaceOption = 68;
MySQLParser.RULE_tsOptionInitialSize = 69;
MySQLParser.RULE_tsOptionUndoRedoBufferSize = 70;
MySQLParser.RULE_tsOptionAutoextendSize = 71;
MySQLParser.RULE_tsOptionMaxSize = 72;
MySQLParser.RULE_tsOptionExtentSize = 73;
MySQLParser.RULE_tsOptionNodegroup = 74;
MySQLParser.RULE_tsOptionEngine = 75;
MySQLParser.RULE_tsOptionWait = 76;
MySQLParser.RULE_tsOptionComment = 77;
MySQLParser.RULE_tsOptionFileblockSize = 78;
MySQLParser.RULE_tsOptionEncryption = 79;
MySQLParser.RULE_createView = 80;
MySQLParser.RULE_viewReplaceOrAlgorithm = 81;
MySQLParser.RULE_viewAlgorithm = 82;
MySQLParser.RULE_viewSuid = 83;
MySQLParser.RULE_createTrigger = 84;
MySQLParser.RULE_triggerFollowsPrecedesClause = 85;
MySQLParser.RULE_createEvent = 86;
MySQLParser.RULE_createRole = 87;
MySQLParser.RULE_createSpatialReference = 88;
MySQLParser.RULE_srsAttribute = 89;
MySQLParser.RULE_dropStatement = 90;
MySQLParser.RULE_dropDatabase = 91;
MySQLParser.RULE_dropEvent = 92;
MySQLParser.RULE_dropFunction = 93;
MySQLParser.RULE_dropProcedure = 94;
MySQLParser.RULE_dropIndex = 95;
MySQLParser.RULE_dropLogfileGroup = 96;
MySQLParser.RULE_dropLogfileGroupOption = 97;
MySQLParser.RULE_dropServer = 98;
MySQLParser.RULE_dropTable = 99;
MySQLParser.RULE_dropTableSpace = 100;
MySQLParser.RULE_dropTrigger = 101;
MySQLParser.RULE_dropView = 102;
MySQLParser.RULE_dropRole = 103;
MySQLParser.RULE_dropSpatialReference = 104;
MySQLParser.RULE_dropUndoTablespace = 105;
MySQLParser.RULE_renameTableStatement = 106;
MySQLParser.RULE_renamePair = 107;
MySQLParser.RULE_truncateTableStatement = 108;
MySQLParser.RULE_importStatement = 109;
MySQLParser.RULE_callStatement = 110;
MySQLParser.RULE_deleteStatement = 111;
MySQLParser.RULE_partitionDelete = 112;
MySQLParser.RULE_deleteStatementOption = 113;
MySQLParser.RULE_doStatement = 114;
MySQLParser.RULE_handlerStatement = 115;
MySQLParser.RULE_handlerReadOrScan = 116;
MySQLParser.RULE_insertStatement = 117;
MySQLParser.RULE_insertLockOption = 118;
MySQLParser.RULE_insertFromConstructor = 119;
MySQLParser.RULE_fields = 120;
MySQLParser.RULE_insertValues = 121;
MySQLParser.RULE_insertQueryExpression = 122;
MySQLParser.RULE_valueList = 123;
MySQLParser.RULE_values = 124;
MySQLParser.RULE_valuesReference = 125;
MySQLParser.RULE_insertUpdateList = 126;
MySQLParser.RULE_loadStatement = 127;
MySQLParser.RULE_dataOrXml = 128;
MySQLParser.RULE_xmlRowsIdentifiedBy = 129;
MySQLParser.RULE_loadDataFileTail = 130;
MySQLParser.RULE_loadDataFileTargetList = 131;
MySQLParser.RULE_fieldOrVariableList = 132;
MySQLParser.RULE_replaceStatement = 133;
MySQLParser.RULE_selectStatement = 134;
MySQLParser.RULE_selectStatementWithInto = 135;
MySQLParser.RULE_queryExpression = 136;
MySQLParser.RULE_queryExpressionBody = 137;
MySQLParser.RULE_queryExpressionParens = 138;
MySQLParser.RULE_querySpecification = 139;
MySQLParser.RULE_subquery = 140;
MySQLParser.RULE_querySpecOption = 141;
MySQLParser.RULE_limitClause = 142;
MySQLParser.RULE_simpleLimitClause = 143;
MySQLParser.RULE_limitOptions = 144;
MySQLParser.RULE_limitOption = 145;
MySQLParser.RULE_intoClause = 146;
MySQLParser.RULE_procedureAnalyseClause = 147;
MySQLParser.RULE_havingClause = 148;
MySQLParser.RULE_windowClause = 149;
MySQLParser.RULE_windowDefinition = 150;
MySQLParser.RULE_windowSpec = 151;
MySQLParser.RULE_windowSpecDetails = 152;
MySQLParser.RULE_windowFrameClause = 153;
MySQLParser.RULE_windowFrameUnits = 154;
MySQLParser.RULE_windowFrameExtent = 155;
MySQLParser.RULE_windowFrameStart = 156;
MySQLParser.RULE_windowFrameBetween = 157;
MySQLParser.RULE_windowFrameBound = 158;
MySQLParser.RULE_windowFrameExclusion = 159;
MySQLParser.RULE_withClause = 160;
MySQLParser.RULE_commonTableExpression = 161;
MySQLParser.RULE_groupByClause = 162;
MySQLParser.RULE_olapOption = 163;
MySQLParser.RULE_orderClause = 164;
MySQLParser.RULE_direction = 165;
MySQLParser.RULE_fromClause = 166;
MySQLParser.RULE_tableReferenceList = 167;
MySQLParser.RULE_selectOption = 168;
MySQLParser.RULE_lockingClause = 169;
MySQLParser.RULE_lockStrengh = 170;
MySQLParser.RULE_lockedRowAction = 171;
MySQLParser.RULE_selectItemList = 172;
MySQLParser.RULE_selectItem = 173;
MySQLParser.RULE_selectAlias = 174;
MySQLParser.RULE_whereClause = 175;
MySQLParser.RULE_tableReference = 176;
MySQLParser.RULE_escapedTableReference = 177;
MySQLParser.RULE_joinedTable = 178;
MySQLParser.RULE_naturalJoinType = 179;
MySQLParser.RULE_innerJoinType = 180;
MySQLParser.RULE_outerJoinType = 181;
MySQLParser.RULE_tableFactor = 182;
MySQLParser.RULE_singleTable = 183;
MySQLParser.RULE_singleTableParens = 184;
MySQLParser.RULE_derivedTable = 185;
MySQLParser.RULE_tableReferenceListParens = 186;
MySQLParser.RULE_tableFunction = 187;
MySQLParser.RULE_columnsClause = 188;
MySQLParser.RULE_jtColumn = 189;
MySQLParser.RULE_onEmptyOrError = 190;
MySQLParser.RULE_onEmpty = 191;
MySQLParser.RULE_onError = 192;
MySQLParser.RULE_jtOnResponse = 193;
MySQLParser.RULE_unionOption = 194;
MySQLParser.RULE_tableAlias = 195;
MySQLParser.RULE_indexHintList = 196;
MySQLParser.RULE_indexHint = 197;
MySQLParser.RULE_indexHintType = 198;
MySQLParser.RULE_keyOrIndex = 199;
MySQLParser.RULE_constraintKeyType = 200;
MySQLParser.RULE_indexHintClause = 201;
MySQLParser.RULE_indexList = 202;
MySQLParser.RULE_indexListElement = 203;
MySQLParser.RULE_updateStatement = 204;
MySQLParser.RULE_transactionOrLockingStatement = 205;
MySQLParser.RULE_transactionStatement = 206;
MySQLParser.RULE_beginWork = 207;
MySQLParser.RULE_transactionCharacteristic = 208;
MySQLParser.RULE_savepointStatement = 209;
MySQLParser.RULE_lockStatement = 210;
MySQLParser.RULE_lockItem = 211;
MySQLParser.RULE_lockOption = 212;
MySQLParser.RULE_xaStatement = 213;
MySQLParser.RULE_xaConvert = 214;
MySQLParser.RULE_xid = 215;
MySQLParser.RULE_replicationStatement = 216;
MySQLParser.RULE_resetOption = 217;
MySQLParser.RULE_masterResetOptions = 218;
MySQLParser.RULE_replicationLoad = 219;
MySQLParser.RULE_changeMaster = 220;
MySQLParser.RULE_changeMasterOptions = 221;
MySQLParser.RULE_masterOption = 222;
MySQLParser.RULE_privilegeCheckDef = 223;
MySQLParser.RULE_masterTlsCiphersuitesDef = 224;
MySQLParser.RULE_masterFileDef = 225;
MySQLParser.RULE_serverIdList = 226;
MySQLParser.RULE_changeReplication = 227;
MySQLParser.RULE_filterDefinition = 228;
MySQLParser.RULE_filterDbList = 229;
MySQLParser.RULE_filterTableList = 230;
MySQLParser.RULE_filterStringList = 231;
MySQLParser.RULE_filterWildDbTableString = 232;
MySQLParser.RULE_filterDbPairList = 233;
MySQLParser.RULE_slave = 234;
MySQLParser.RULE_slaveUntilOptions = 235;
MySQLParser.RULE_slaveConnectionOptions = 236;
MySQLParser.RULE_slaveThreadOptions = 237;
MySQLParser.RULE_slaveThreadOption = 238;
MySQLParser.RULE_groupReplication = 239;
MySQLParser.RULE_preparedStatement = 240;
MySQLParser.RULE_executeStatement = 241;
MySQLParser.RULE_executeVarList = 242;
MySQLParser.RULE_cloneStatement = 243;
MySQLParser.RULE_dataDirSSL = 244;
MySQLParser.RULE_ssl = 245;
MySQLParser.RULE_accountManagementStatement = 246;
MySQLParser.RULE_alterUser = 247;
MySQLParser.RULE_alterUserTail = 248;
MySQLParser.RULE_userFunction = 249;
MySQLParser.RULE_createUser = 250;
MySQLParser.RULE_createUserTail = 251;
MySQLParser.RULE_defaultRoleClause = 252;
MySQLParser.RULE_requireClause = 253;
MySQLParser.RULE_connectOptions = 254;
MySQLParser.RULE_accountLockPasswordExpireOptions = 255;
MySQLParser.RULE_dropUser = 256;
MySQLParser.RULE_grant = 257;
MySQLParser.RULE_grantTargetList = 258;
MySQLParser.RULE_grantOptions = 259;
MySQLParser.RULE_exceptRoleList = 260;
MySQLParser.RULE_withRoles = 261;
MySQLParser.RULE_grantAs = 262;
MySQLParser.RULE_versionedRequireClause = 263;
MySQLParser.RULE_renameUser = 264;
MySQLParser.RULE_revoke = 265;
MySQLParser.RULE_onTypeTo = 266;
MySQLParser.RULE_aclType = 267;
MySQLParser.RULE_roleOrPrivilegesList = 268;
MySQLParser.RULE_roleOrPrivilege = 269;
MySQLParser.RULE_grantIdentifier = 270;
MySQLParser.RULE_requireList = 271;
MySQLParser.RULE_requireListElement = 272;
MySQLParser.RULE_grantOption = 273;
MySQLParser.RULE_setRole = 274;
MySQLParser.RULE_roleList = 275;
MySQLParser.RULE_role = 276;
MySQLParser.RULE_tableAdministrationStatement = 277;
MySQLParser.RULE_histogram = 278;
MySQLParser.RULE_checkOption = 279;
MySQLParser.RULE_repairType = 280;
MySQLParser.RULE_installUninstallStatment = 281;
MySQLParser.RULE_setStatement = 282;
MySQLParser.RULE_startOptionValueList = 283;
MySQLParser.RULE_transactionCharacteristics = 284;
MySQLParser.RULE_transactionAccessMode = 285;
MySQLParser.RULE_isolationLevel = 286;
MySQLParser.RULE_optionValueListContinued = 287;
MySQLParser.RULE_optionValueNoOptionType = 288;
MySQLParser.RULE_optionValue = 289;
MySQLParser.RULE_setSystemVariable = 290;
MySQLParser.RULE_startOptionValueListFollowingOptionType = 291;
MySQLParser.RULE_optionValueFollowingOptionType = 292;
MySQLParser.RULE_setExprOrDefault = 293;
MySQLParser.RULE_showStatement = 294;
MySQLParser.RULE_showCommandType = 295;
MySQLParser.RULE_nonBlocking = 296;
MySQLParser.RULE_fromOrIn = 297;
MySQLParser.RULE_inDb = 298;
MySQLParser.RULE_profileType = 299;
MySQLParser.RULE_otherAdministrativeStatement = 300;
MySQLParser.RULE_keyCacheListOrParts = 301;
MySQLParser.RULE_keyCacheList = 302;
MySQLParser.RULE_assignToKeycache = 303;
MySQLParser.RULE_assignToKeycachePartition = 304;
MySQLParser.RULE_cacheKeyList = 305;
MySQLParser.RULE_keyUsageElement = 306;
MySQLParser.RULE_keyUsageList = 307;
MySQLParser.RULE_flushOption = 308;
MySQLParser.RULE_logType = 309;
MySQLParser.RULE_flushTables = 310;
MySQLParser.RULE_flushTablesOptions = 311;
MySQLParser.RULE_preloadTail = 312;
MySQLParser.RULE_preloadList = 313;
MySQLParser.RULE_preloadKeys = 314;
MySQLParser.RULE_adminPartition = 315;
MySQLParser.RULE_resourceGroupManagement = 316;
MySQLParser.RULE_createResourceGroup = 317;
MySQLParser.RULE_resourceGroupVcpuList = 318;
MySQLParser.RULE_vcpuNumOrRange = 319;
MySQLParser.RULE_resourceGroupPriority = 320;
MySQLParser.RULE_resourceGroupEnableDisable = 321;
MySQLParser.RULE_alterResourceGroup = 322;
MySQLParser.RULE_setResourceGroup = 323;
MySQLParser.RULE_threadIdList = 324;
MySQLParser.RULE_dropResourceGroup = 325;
MySQLParser.RULE_utilityStatement = 326;
MySQLParser.RULE_describeCommand = 327;
MySQLParser.RULE_explainCommand = 328;
MySQLParser.RULE_explainableStatement = 329;
MySQLParser.RULE_helpCommand = 330;
MySQLParser.RULE_useCommand = 331;
MySQLParser.RULE_restartServer = 332;
MySQLParser.RULE_expr = 333;
MySQLParser.RULE_boolPri = 334;
MySQLParser.RULE_compOp = 335;
MySQLParser.RULE_predicate = 336;
MySQLParser.RULE_predicateOperations = 337;
MySQLParser.RULE_bitExpr = 338;
MySQLParser.RULE_simpleExpr = 339;
MySQLParser.RULE_arrayCast = 340;
MySQLParser.RULE_jsonOperator = 341;
MySQLParser.RULE_sumExpr = 342;
MySQLParser.RULE_groupingOperation = 343;
MySQLParser.RULE_windowFunctionCall = 344;
MySQLParser.RULE_windowingClause = 345;
MySQLParser.RULE_leadLagInfo = 346;
MySQLParser.RULE_nullTreatment = 347;
MySQLParser.RULE_jsonFunction = 348;
MySQLParser.RULE_inSumExpr = 349;
MySQLParser.RULE_identListArg = 350;
MySQLParser.RULE_identList = 351;
MySQLParser.RULE_fulltextOptions = 352;
MySQLParser.RULE_runtimeFunctionCall = 353;
MySQLParser.RULE_geometryFunction = 354;
MySQLParser.RULE_timeFunctionParameters = 355;
MySQLParser.RULE_fractionalPrecision = 356;
MySQLParser.RULE_weightStringLevels = 357;
MySQLParser.RULE_weightStringLevelListItem = 358;
MySQLParser.RULE_dateTimeTtype = 359;
MySQLParser.RULE_trimFunction = 360;
MySQLParser.RULE_substringFunction = 361;
MySQLParser.RULE_functionCall = 362;
MySQLParser.RULE_udfExprList = 363;
MySQLParser.RULE_udfExpr = 364;
MySQLParser.RULE_variable = 365;
MySQLParser.RULE_userVariable = 366;
MySQLParser.RULE_systemVariable = 367;
MySQLParser.RULE_internalVariableName = 368;
MySQLParser.RULE_whenExpression = 369;
MySQLParser.RULE_thenExpression = 370;
MySQLParser.RULE_elseExpression = 371;
MySQLParser.RULE_castType = 372;
MySQLParser.RULE_exprList = 373;
MySQLParser.RULE_charset = 374;
MySQLParser.RULE_notRule = 375;
MySQLParser.RULE_not2Rule = 376;
MySQLParser.RULE_interval = 377;
MySQLParser.RULE_intervalTimeStamp = 378;
MySQLParser.RULE_exprListWithParentheses = 379;
MySQLParser.RULE_exprWithParentheses = 380;
MySQLParser.RULE_simpleExprWithParentheses = 381;
MySQLParser.RULE_orderList = 382;
MySQLParser.RULE_orderExpression = 383;
MySQLParser.RULE_groupList = 384;
MySQLParser.RULE_groupingExpression = 385;
MySQLParser.RULE_channel = 386;
MySQLParser.RULE_compoundStatement = 387;
MySQLParser.RULE_returnStatement = 388;
MySQLParser.RULE_ifStatement = 389;
MySQLParser.RULE_ifBody = 390;
MySQLParser.RULE_thenStatement = 391;
MySQLParser.RULE_compoundStatementList = 392;
MySQLParser.RULE_caseStatement = 393;
MySQLParser.RULE_elseStatement = 394;
MySQLParser.RULE_labeledBlock = 395;
MySQLParser.RULE_unlabeledBlock = 396;
MySQLParser.RULE_label = 397;
MySQLParser.RULE_beginEndBlock = 398;
MySQLParser.RULE_labeledControl = 399;
MySQLParser.RULE_unlabeledControl = 400;
MySQLParser.RULE_loopBlock = 401;
MySQLParser.RULE_whileDoBlock = 402;
MySQLParser.RULE_repeatUntilBlock = 403;
MySQLParser.RULE_spDeclarations = 404;
MySQLParser.RULE_spDeclaration = 405;
MySQLParser.RULE_variableDeclaration = 406;
MySQLParser.RULE_conditionDeclaration = 407;
MySQLParser.RULE_spCondition = 408;
MySQLParser.RULE_sqlstate = 409;
MySQLParser.RULE_handlerDeclaration = 410;
MySQLParser.RULE_handlerCondition = 411;
MySQLParser.RULE_cursorDeclaration = 412;
MySQLParser.RULE_iterateStatement = 413;
MySQLParser.RULE_leaveStatement = 414;
MySQLParser.RULE_getDiagnostics = 415;
MySQLParser.RULE_signalAllowedExpr = 416;
MySQLParser.RULE_statementInformationItem = 417;
MySQLParser.RULE_conditionInformationItem = 418;
MySQLParser.RULE_signalInformationItemName = 419;
MySQLParser.RULE_signalStatement = 420;
MySQLParser.RULE_resignalStatement = 421;
MySQLParser.RULE_signalInformationItem = 422;
MySQLParser.RULE_cursorOpen = 423;
MySQLParser.RULE_cursorClose = 424;
MySQLParser.RULE_cursorFetch = 425;
MySQLParser.RULE_schedule = 426;
MySQLParser.RULE_columnDefinition = 427;
MySQLParser.RULE_checkOrReferences = 428;
MySQLParser.RULE_checkConstraint = 429;
MySQLParser.RULE_constraintEnforcement = 430;
MySQLParser.RULE_tableConstraintDef = 431;
MySQLParser.RULE_constraintName = 432;
MySQLParser.RULE_fieldDefinition = 433;
MySQLParser.RULE_columnAttribute = 434;
MySQLParser.RULE_columnFormat = 435;
MySQLParser.RULE_storageMedia = 436;
MySQLParser.RULE_gcolAttribute = 437;
MySQLParser.RULE_references = 438;
MySQLParser.RULE_deleteOption = 439;
MySQLParser.RULE_keyList = 440;
MySQLParser.RULE_keyPart = 441;
MySQLParser.RULE_keyListWithExpression = 442;
MySQLParser.RULE_keyPartOrExpression = 443;
MySQLParser.RULE_keyListVariants = 444;
MySQLParser.RULE_indexType = 445;
MySQLParser.RULE_indexOption = 446;
MySQLParser.RULE_commonIndexOption = 447;
MySQLParser.RULE_visibility = 448;
MySQLParser.RULE_indexTypeClause = 449;
MySQLParser.RULE_fulltextIndexOption = 450;
MySQLParser.RULE_spatialIndexOption = 451;
MySQLParser.RULE_dataTypeDefinition = 452;
MySQLParser.RULE_dataType = 453;
MySQLParser.RULE_nchar = 454;
MySQLParser.RULE_realType = 455;
MySQLParser.RULE_fieldLength = 456;
MySQLParser.RULE_fieldOptions = 457;
MySQLParser.RULE_charsetWithOptBinary = 458;
MySQLParser.RULE_ascii = 459;
MySQLParser.RULE_unicode = 460;
MySQLParser.RULE_wsNumCodepoints = 461;
MySQLParser.RULE_typeDatetimePrecision = 462;
MySQLParser.RULE_charsetName = 463;
MySQLParser.RULE_collationName = 464;
MySQLParser.RULE_createTableOptions = 465;
MySQLParser.RULE_createTableOptionsSpaceSeparated = 466;
MySQLParser.RULE_createTableOption = 467;
MySQLParser.RULE_ternaryOption = 468;
MySQLParser.RULE_defaultCollation = 469;
MySQLParser.RULE_defaultEncryption = 470;
MySQLParser.RULE_defaultCharset = 471;
MySQLParser.RULE_partitionClause = 472;
MySQLParser.RULE_partitionTypeDef = 473;
MySQLParser.RULE_subPartitions = 474;
MySQLParser.RULE_partitionKeyAlgorithm = 475;
MySQLParser.RULE_partitionDefinitions = 476;
MySQLParser.RULE_partitionDefinition = 477;
MySQLParser.RULE_partitionValuesIn = 478;
MySQLParser.RULE_partitionOption = 479;
MySQLParser.RULE_subpartitionDefinition = 480;
MySQLParser.RULE_partitionValueItemListParen = 481;
MySQLParser.RULE_partitionValueItem = 482;
MySQLParser.RULE_definerClause = 483;
MySQLParser.RULE_ifExists = 484;
MySQLParser.RULE_ifNotExists = 485;
MySQLParser.RULE_procedureParameter = 486;
MySQLParser.RULE_functionParameter = 487;
MySQLParser.RULE_collate = 488;
MySQLParser.RULE_typeWithOptCollate = 489;
MySQLParser.RULE_schemaIdentifierPair = 490;
MySQLParser.RULE_viewRefList = 491;
MySQLParser.RULE_updateList = 492;
MySQLParser.RULE_updateElement = 493;
MySQLParser.RULE_charsetClause = 494;
MySQLParser.RULE_fieldsClause = 495;
MySQLParser.RULE_fieldTerm = 496;
MySQLParser.RULE_linesClause = 497;
MySQLParser.RULE_lineTerm = 498;
MySQLParser.RULE_userList = 499;
MySQLParser.RULE_createUserList = 500;
MySQLParser.RULE_alterUserList = 501;
MySQLParser.RULE_createUserEntry = 502;
MySQLParser.RULE_alterUserEntry = 503;
MySQLParser.RULE_retainCurrentPassword = 504;
MySQLParser.RULE_discardOldPassword = 505;
MySQLParser.RULE_replacePassword = 506;
MySQLParser.RULE_userIdentifierOrText = 507;
MySQLParser.RULE_user = 508;
MySQLParser.RULE_likeClause = 509;
MySQLParser.RULE_likeOrWhere = 510;
MySQLParser.RULE_onlineOption = 511;
MySQLParser.RULE_noWriteToBinLog = 512;
MySQLParser.RULE_usePartition = 513;
MySQLParser.RULE_fieldIdentifier = 514;
MySQLParser.RULE_columnName = 515;
MySQLParser.RULE_columnInternalRef = 516;
MySQLParser.RULE_columnInternalRefList = 517;
MySQLParser.RULE_columnRef = 518;
MySQLParser.RULE_insertIdentifier = 519;
MySQLParser.RULE_indexName = 520;
MySQLParser.RULE_indexRef = 521;
MySQLParser.RULE_tableWild = 522;
MySQLParser.RULE_schemaName = 523;
MySQLParser.RULE_schemaRef = 524;
MySQLParser.RULE_procedureName = 525;
MySQLParser.RULE_procedureRef = 526;
MySQLParser.RULE_functionName = 527;
MySQLParser.RULE_functionRef = 528;
MySQLParser.RULE_triggerName = 529;
MySQLParser.RULE_triggerRef = 530;
MySQLParser.RULE_viewName = 531;
MySQLParser.RULE_viewRef = 532;
MySQLParser.RULE_tablespaceName = 533;
MySQLParser.RULE_tablespaceRef = 534;
MySQLParser.RULE_logfileGroupName = 535;
MySQLParser.RULE_logfileGroupRef = 536;
MySQLParser.RULE_eventName = 537;
MySQLParser.RULE_eventRef = 538;
MySQLParser.RULE_udfName = 539;
MySQLParser.RULE_serverName = 540;
MySQLParser.RULE_serverRef = 541;
MySQLParser.RULE_engineRef = 542;
MySQLParser.RULE_tableName = 543;
MySQLParser.RULE_filterTableRef = 544;
MySQLParser.RULE_tableRefWithWildcard = 545;
MySQLParser.RULE_tableRef = 546;
MySQLParser.RULE_tableRefList = 547;
MySQLParser.RULE_tableAliasRefList = 548;
MySQLParser.RULE_parameterName = 549;
MySQLParser.RULE_labelIdentifier = 550;
MySQLParser.RULE_labelRef = 551;
MySQLParser.RULE_roleIdentifier = 552;
MySQLParser.RULE_roleRef = 553;
MySQLParser.RULE_pluginRef = 554;
MySQLParser.RULE_componentRef = 555;
MySQLParser.RULE_resourceGroupRef = 556;
MySQLParser.RULE_windowName = 557;
MySQLParser.RULE_pureIdentifier = 558;
MySQLParser.RULE_identifier = 559;
MySQLParser.RULE_identifierList = 560;
MySQLParser.RULE_identifierListWithParentheses = 561;
MySQLParser.RULE_qualifiedIdentifier = 562;
MySQLParser.RULE_simpleIdentifier = 563;
MySQLParser.RULE_dotIdentifier = 564;
MySQLParser.RULE_ulong_number = 565;
MySQLParser.RULE_real_ulong_number = 566;
MySQLParser.RULE_ulonglong_number = 567;
MySQLParser.RULE_real_ulonglong_number = 568;
MySQLParser.RULE_literal = 569;
MySQLParser.RULE_signedLiteral = 570;
MySQLParser.RULE_stringList = 571;
MySQLParser.RULE_textStringLiteral = 572;
MySQLParser.RULE_textString = 573;
MySQLParser.RULE_textStringHash = 574;
MySQLParser.RULE_textLiteral = 575;
MySQLParser.RULE_textStringNoLinebreak = 576;
MySQLParser.RULE_textStringLiteralList = 577;
MySQLParser.RULE_numLiteral = 578;
MySQLParser.RULE_boolLiteral = 579;
MySQLParser.RULE_nullLiteral = 580;
MySQLParser.RULE_temporalLiteral = 581;
MySQLParser.RULE_floatOptions = 582;
MySQLParser.RULE_standardFloatOptions = 583;
MySQLParser.RULE_precision = 584;
MySQLParser.RULE_textOrIdentifier = 585;
MySQLParser.RULE_lValueIdentifier = 586;
MySQLParser.RULE_roleIdentifierOrText = 587;
MySQLParser.RULE_sizeNumber = 588;
MySQLParser.RULE_parentheses = 589;
MySQLParser.RULE_equal = 590;
MySQLParser.RULE_optionType = 591;
MySQLParser.RULE_varIdentType = 592;
MySQLParser.RULE_setVarIdentType = 593;
MySQLParser.RULE_identifierKeyword = 594;
MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels = 595;
MySQLParser.RULE_identifierKeywordsAmbiguous2Labels = 596;
MySQLParser.RULE_labelKeyword = 597;
MySQLParser.RULE_identifierKeywordsAmbiguous3Roles = 598;
MySQLParser.RULE_identifierKeywordsUnambiguous = 599;
MySQLParser.RULE_roleKeyword = 600;
MySQLParser.RULE_lValueKeyword = 601;
MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables = 602;
MySQLParser.RULE_roleOrIdentifierKeyword = 603;
MySQLParser.RULE_roleOrLabelKeyword = 604;
// tslint:disable:no-trailing-whitespace
MySQLParser.ruleNames = [
    "query", "simpleStatement", "alterStatement", "alterDatabase", "alterEvent",
    "alterLogfileGroup", "alterLogfileGroupOptions", "alterLogfileGroupOption",
    "alterServer", "alterTable", "alterTableActions", "alterCommandList",
    "alterCommandsModifierList", "standaloneAlterCommands", "alterPartition",
    "alterList", "alterCommandsModifier", "alterListItem", "place", "restrict",
    "alterOrderList", "alterAlgorithmOption", "alterLockOption", "indexLockAndAlgorithm",
    "withValidation", "removePartitioning", "allOrPartitionNameList", "reorgPartitionRule",
    "alterTablespace", "alterUndoTablespace", "undoTableSpaceOptions", "undoTableSpaceOption",
    "alterTablespaceOptions", "alterTablespaceOption", "changeTablespaceOption",
    "alterView", "viewTail", "viewSelect", "viewCheckOption", "createStatement",
    "createDatabase", "createDatabaseOption", "createTable", "tableElementList",
    "tableElement", "duplicateAsQueryExpression", "queryExpressionOrParens",
    "createRoutine", "createProcedure", "createFunction", "createUdf", "routineCreateOption",
    "routineAlterOptions", "routineOption", "createIndex", "indexNameAndType",
    "createIndexTarget", "createLogfileGroup", "logfileGroupOptions", "logfileGroupOption",
    "createServer", "serverOptions", "serverOption", "createTablespace", "createUndoTablespace",
    "tsDataFileName", "tsDataFile", "tablespaceOptions", "tablespaceOption",
    "tsOptionInitialSize", "tsOptionUndoRedoBufferSize", "tsOptionAutoextendSize",
    "tsOptionMaxSize", "tsOptionExtentSize", "tsOptionNodegroup", "tsOptionEngine",
    "tsOptionWait", "tsOptionComment", "tsOptionFileblockSize", "tsOptionEncryption",
    "createView", "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid", "createTrigger",
    "triggerFollowsPrecedesClause", "createEvent", "createRole", "createSpatialReference",
    "srsAttribute", "dropStatement", "dropDatabase", "dropEvent", "dropFunction",
    "dropProcedure", "dropIndex", "dropLogfileGroup", "dropLogfileGroupOption",
    "dropServer", "dropTable", "dropTableSpace", "dropTrigger", "dropView",
    "dropRole", "dropSpatialReference", "dropUndoTablespace", "renameTableStatement",
    "renamePair", "truncateTableStatement", "importStatement", "callStatement",
    "deleteStatement", "partitionDelete", "deleteStatementOption", "doStatement",
    "handlerStatement", "handlerReadOrScan", "insertStatement", "insertLockOption",
    "insertFromConstructor", "fields", "insertValues", "insertQueryExpression",
    "valueList", "values", "valuesReference", "insertUpdateList", "loadStatement",
    "dataOrXml", "xmlRowsIdentifiedBy", "loadDataFileTail", "loadDataFileTargetList",
    "fieldOrVariableList", "replaceStatement", "selectStatement", "selectStatementWithInto",
    "queryExpression", "queryExpressionBody", "queryExpressionParens", "querySpecification",
    "subquery", "querySpecOption", "limitClause", "simpleLimitClause", "limitOptions",
    "limitOption", "intoClause", "procedureAnalyseClause", "havingClause",
    "windowClause", "windowDefinition", "windowSpec", "windowSpecDetails",
    "windowFrameClause", "windowFrameUnits", "windowFrameExtent", "windowFrameStart",
    "windowFrameBetween", "windowFrameBound", "windowFrameExclusion", "withClause",
    "commonTableExpression", "groupByClause", "olapOption", "orderClause",
    "direction", "fromClause", "tableReferenceList", "selectOption", "lockingClause",
    "lockStrengh", "lockedRowAction", "selectItemList", "selectItem", "selectAlias",
    "whereClause", "tableReference", "escapedTableReference", "joinedTable",
    "naturalJoinType", "innerJoinType", "outerJoinType", "tableFactor", "singleTable",
    "singleTableParens", "derivedTable", "tableReferenceListParens", "tableFunction",
    "columnsClause", "jtColumn", "onEmptyOrError", "onEmpty", "onError", "jtOnResponse",
    "unionOption", "tableAlias", "indexHintList", "indexHint", "indexHintType",
    "keyOrIndex", "constraintKeyType", "indexHintClause", "indexList", "indexListElement",
    "updateStatement", "transactionOrLockingStatement", "transactionStatement",
    "beginWork", "transactionCharacteristic", "savepointStatement", "lockStatement",
    "lockItem", "lockOption", "xaStatement", "xaConvert", "xid", "replicationStatement",
    "resetOption", "masterResetOptions", "replicationLoad", "changeMaster",
    "changeMasterOptions", "masterOption", "privilegeCheckDef", "masterTlsCiphersuitesDef",
    "masterFileDef", "serverIdList", "changeReplication", "filterDefinition",
    "filterDbList", "filterTableList", "filterStringList", "filterWildDbTableString",
    "filterDbPairList", "slave", "slaveUntilOptions", "slaveConnectionOptions",
    "slaveThreadOptions", "slaveThreadOption", "groupReplication", "preparedStatement",
    "executeStatement", "executeVarList", "cloneStatement", "dataDirSSL",
    "ssl", "accountManagementStatement", "alterUser", "alterUserTail", "userFunction",
    "createUser", "createUserTail", "defaultRoleClause", "requireClause",
    "connectOptions", "accountLockPasswordExpireOptions", "dropUser", "grant",
    "grantTargetList", "grantOptions", "exceptRoleList", "withRoles", "grantAs",
    "versionedRequireClause", "renameUser", "revoke", "onTypeTo", "aclType",
    "roleOrPrivilegesList", "roleOrPrivilege", "grantIdentifier", "requireList",
    "requireListElement", "grantOption", "setRole", "roleList", "role", "tableAdministrationStatement",
    "histogram", "checkOption", "repairType", "installUninstallStatment",
    "setStatement", "startOptionValueList", "transactionCharacteristics",
    "transactionAccessMode", "isolationLevel", "optionValueListContinued",
    "optionValueNoOptionType", "optionValue", "setSystemVariable", "startOptionValueListFollowingOptionType",
    "optionValueFollowingOptionType", "setExprOrDefault", "showStatement",
    "showCommandType", "nonBlocking", "fromOrIn", "inDb", "profileType", "otherAdministrativeStatement",
    "keyCacheListOrParts", "keyCacheList", "assignToKeycache", "assignToKeycachePartition",
    "cacheKeyList", "keyUsageElement", "keyUsageList", "flushOption", "logType",
    "flushTables", "flushTablesOptions", "preloadTail", "preloadList", "preloadKeys",
    "adminPartition", "resourceGroupManagement", "createResourceGroup", "resourceGroupVcpuList",
    "vcpuNumOrRange", "resourceGroupPriority", "resourceGroupEnableDisable",
    "alterResourceGroup", "setResourceGroup", "threadIdList", "dropResourceGroup",
    "utilityStatement", "describeCommand", "explainCommand", "explainableStatement",
    "helpCommand", "useCommand", "restartServer", "expr", "boolPri", "compOp",
    "predicate", "predicateOperations", "bitExpr", "simpleExpr", "arrayCast",
    "jsonOperator", "sumExpr", "groupingOperation", "windowFunctionCall",
    "windowingClause", "leadLagInfo", "nullTreatment", "jsonFunction", "inSumExpr",
    "identListArg", "identList", "fulltextOptions", "runtimeFunctionCall",
    "geometryFunction", "timeFunctionParameters", "fractionalPrecision", "weightStringLevels",
    "weightStringLevelListItem", "dateTimeTtype", "trimFunction", "substringFunction",
    "functionCall", "udfExprList", "udfExpr", "variable", "userVariable",
    "systemVariable", "internalVariableName", "whenExpression", "thenExpression",
    "elseExpression", "castType", "exprList", "charset", "notRule", "not2Rule",
    "interval", "intervalTimeStamp", "exprListWithParentheses", "exprWithParentheses",
    "simpleExprWithParentheses", "orderList", "orderExpression", "groupList",
    "groupingExpression", "channel", "compoundStatement", "returnStatement",
    "ifStatement", "ifBody", "thenStatement", "compoundStatementList", "caseStatement",
    "elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock",
    "labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", "repeatUntilBlock",
    "spDeclarations", "spDeclaration", "variableDeclaration", "conditionDeclaration",
    "spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", "cursorDeclaration",
    "iterateStatement", "leaveStatement", "getDiagnostics", "signalAllowedExpr",
    "statementInformationItem", "conditionInformationItem", "signalInformationItemName",
    "signalStatement", "resignalStatement", "signalInformationItem", "cursorOpen",
    "cursorClose", "cursorFetch", "schedule", "columnDefinition", "checkOrReferences",
    "checkConstraint", "constraintEnforcement", "tableConstraintDef", "constraintName",
    "fieldDefinition", "columnAttribute", "columnFormat", "storageMedia",
    "gcolAttribute", "references", "deleteOption", "keyList", "keyPart", "keyListWithExpression",
    "keyPartOrExpression", "keyListVariants", "indexType", "indexOption",
    "commonIndexOption", "visibility", "indexTypeClause", "fulltextIndexOption",
    "spatialIndexOption", "dataTypeDefinition", "dataType", "nchar", "realType",
    "fieldLength", "fieldOptions", "charsetWithOptBinary", "ascii", "unicode",
    "wsNumCodepoints", "typeDatetimePrecision", "charsetName", "collationName",
    "createTableOptions", "createTableOptionsSpaceSeparated", "createTableOption",
    "ternaryOption", "defaultCollation", "defaultEncryption", "defaultCharset",
    "partitionClause", "partitionTypeDef", "subPartitions", "partitionKeyAlgorithm",
    "partitionDefinitions", "partitionDefinition", "partitionValuesIn", "partitionOption",
    "subpartitionDefinition", "partitionValueItemListParen", "partitionValueItem",
    "definerClause", "ifExists", "ifNotExists", "procedureParameter", "functionParameter",
    "collate", "typeWithOptCollate", "schemaIdentifierPair", "viewRefList",
    "updateList", "updateElement", "charsetClause", "fieldsClause", "fieldTerm",
    "linesClause", "lineTerm", "userList", "createUserList", "alterUserList",
    "createUserEntry", "alterUserEntry", "retainCurrentPassword", "discardOldPassword",
    "replacePassword", "userIdentifierOrText", "user", "likeClause", "likeOrWhere",
    "onlineOption", "noWriteToBinLog", "usePartition", "fieldIdentifier",
    "columnName", "columnInternalRef", "columnInternalRefList", "columnRef",
    "insertIdentifier", "indexName", "indexRef", "tableWild", "schemaName",
    "schemaRef", "procedureName", "procedureRef", "functionName", "functionRef",
    "triggerName", "triggerRef", "viewName", "viewRef", "tablespaceName",
    "tablespaceRef", "logfileGroupName", "logfileGroupRef", "eventName", "eventRef",
    "udfName", "serverName", "serverRef", "engineRef", "tableName", "filterTableRef",
    "tableRefWithWildcard", "tableRef", "tableRefList", "tableAliasRefList",
    "parameterName", "labelIdentifier", "labelRef", "roleIdentifier", "roleRef",
    "pluginRef", "componentRef", "resourceGroupRef", "windowName", "pureIdentifier",
    "identifier", "identifierList", "identifierListWithParentheses", "qualifiedIdentifier",
    "simpleIdentifier", "dotIdentifier", "ulong_number", "real_ulong_number",
    "ulonglong_number", "real_ulonglong_number", "literal", "signedLiteral",
    "stringList", "textStringLiteral", "textString", "textStringHash", "textLiteral",
    "textStringNoLinebreak", "textStringLiteralList", "numLiteral", "boolLiteral",
    "nullLiteral", "temporalLiteral", "floatOptions", "standardFloatOptions",
    "precision", "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText",
    "sizeNumber", "parentheses", "equal", "optionType", "varIdentType", "setVarIdentType",
    "identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", "identifierKeywordsAmbiguous2Labels",
    "labelKeyword", "identifierKeywordsAmbiguous3Roles", "identifierKeywordsUnambiguous",
    "roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables",
    "roleOrIdentifierKeyword", "roleOrLabelKeyword",
];
MySQLParser._LITERAL_NAMES = [
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, "'='", "':='",
    "'<=>'", "'>='", "'>'", "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", "'/'",
    "'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", "'&'", "'^'", "'||'", "'|'",
    "'.'", "','", "';'", "':'", "'('", "')'", "'{'", "'}'", "'_'", "'->'",
    "'->>'", "'@'", undefined, "'@@'", "'\\'", "'?'", undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, "'<>'",
];
MySQLParser._SYMBOLIC_NAMES = [
    undefined, "ACCOUNT_SYMBOL", "ASCII_SYMBOL", "ALWAYS_SYMBOL", "BACKUP_SYMBOL",
    "BEGIN_SYMBOL", "BYTE_SYMBOL", "CACHE_SYMBOL", "CHARSET_SYMBOL", "CHECKSUM_SYMBOL",
    "CLOSE_SYMBOL", "COMMENT_SYMBOL", "COMMIT_SYMBOL", "CONTAINS_SYMBOL",
    "DEALLOCATE_SYMBOL", "DO_SYMBOL", "END_SYMBOL", "EXECUTE_SYMBOL", "FLUSH_SYMBOL",
    "FOLLOWS_SYMBOL", "FORMAT_SYMBOL", "GROUP_REPLICATION_SYMBOL", "HANDLER_SYMBOL",
    "HELP_SYMBOL", "HOST_SYMBOL", "INSTALL_SYMBOL", "LANGUAGE_SYMBOL", "NO_SYMBOL",
    "OPEN_SYMBOL", "OPTIONS_SYMBOL", "OWNER_SYMBOL", "PARSER_SYMBOL", "PARTITION_SYMBOL",
    "PORT_SYMBOL", "PRECEDES_SYMBOL", "PREPARE_SYMBOL", "REMOVE_SYMBOL", "REPAIR_SYMBOL",
    "RESET_SYMBOL", "RESTORE_SYMBOL", "ROLLBACK_SYMBOL", "SAVEPOINT_SYMBOL",
    "SECURITY_SYMBOL", "SERVER_SYMBOL", "SIGNED_SYMBOL", "SLAVE_SYMBOL", "SOCKET_SYMBOL",
    "SONAME_SYMBOL", "START_SYMBOL", "STOP_SYMBOL", "TRUNCATE_SYMBOL", "UNICODE_SYMBOL",
    "UNINSTALL_SYMBOL", "UPGRADE_SYMBOL", "WRAPPER_SYMBOL", "XA_SYMBOL", "SHUTDOWN_SYMBOL",
    "ACTION_SYMBOL", "ADDDATE_SYMBOL", "AFTER_SYMBOL", "AGAINST_SYMBOL", "AGGREGATE_SYMBOL",
    "ALGORITHM_SYMBOL", "ANALYZE_SYMBOL", "ANY_SYMBOL", "AT_SYMBOL", "AUTHORS_SYMBOL",
    "AUTO_INCREMENT_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL", "AVG_ROW_LENGTH_SYMBOL",
    "AVG_SYMBOL", "BINLOG_SYMBOL", "BIT_SYMBOL", "BLOCK_SYMBOL", "BOOL_SYMBOL",
    "BOOLEAN_SYMBOL", "BTREE_SYMBOL", "CASCADED_SYMBOL", "CATALOG_NAME_SYMBOL",
    "CHAIN_SYMBOL", "CHANGED_SYMBOL", "CHANNEL_SYMBOL", "CIPHER_SYMBOL", "CLIENT_SYMBOL",
    "CLASS_ORIGIN_SYMBOL", "COALESCE_SYMBOL", "CODE_SYMBOL", "COLLATION_SYMBOL",
    "COLUMN_NAME_SYMBOL", "COLUMN_FORMAT_SYMBOL", "COLUMNS_SYMBOL", "COMMITTED_SYMBOL",
    "COMPACT_SYMBOL", "COMPLETION_SYMBOL", "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL",
    "ENCRYPTION_SYMBOL", "CONCURRENT_SYMBOL", "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL",
    "CONSTRAINT_CATALOG_SYMBOL", "CONSTRAINT_SCHEMA_SYMBOL", "CONSTRAINT_NAME_SYMBOL",
    "CONTEXT_SYMBOL", "CONTRIBUTORS_SYMBOL", "CPU_SYMBOL", "CUBE_SYMBOL",
    "CURRENT_SYMBOL", "CURSOR_NAME_SYMBOL", "DATA_SYMBOL", "DATAFILE_SYMBOL",
    "DATETIME_SYMBOL", "DATE_SYMBOL", "DAY_SYMBOL", "DEFAULT_AUTH_SYMBOL",
    "DEFINER_SYMBOL", "DELAY_KEY_WRITE_SYMBOL", "DES_KEY_FILE_SYMBOL", "DIAGNOSTICS_SYMBOL",
    "DIRECTORY_SYMBOL", "DISABLE_SYMBOL", "DISCARD_SYMBOL", "DISK_SYMBOL",
    "DUMPFILE_SYMBOL", "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", "ENDS_SYMBOL",
    "ENUM_SYMBOL", "ENGINE_SYMBOL", "ENGINES_SYMBOL", "ERROR_SYMBOL", "ERRORS_SYMBOL",
    "ESCAPE_SYMBOL", "EVENT_SYMBOL", "EVENTS_SYMBOL", "EVERY_SYMBOL", "EXPANSION_SYMBOL",
    "EXPORT_SYMBOL", "EXTENDED_SYMBOL", "EXTENT_SIZE_SYMBOL", "FAULTS_SYMBOL",
    "FAST_SYMBOL", "FOUND_SYMBOL", "ENABLE_SYMBOL", "FULL_SYMBOL", "FILE_SYMBOL",
    "FILE_BLOCK_SIZE_SYMBOL", "FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL",
    "GENERAL_SYMBOL", "GEOMETRY_SYMBOL", "GEOMETRYCOLLECTION_SYMBOL", "GET_FORMAT_SYMBOL",
    "GRANTS_SYMBOL", "GLOBAL_SYMBOL", "HASH_SYMBOL", "HOSTS_SYMBOL", "HOUR_SYMBOL",
    "IDENTIFIED_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", "INVOKER_SYMBOL", "IMPORT_SYMBOL",
    "INDEXES_SYMBOL", "INITIAL_SIZE_SYMBOL", "INSTANCE_SYMBOL", "INNODB_SYMBOL",
    "IO_SYMBOL", "IPC_SYMBOL", "ISOLATION_SYMBOL", "ISSUER_SYMBOL", "INSERT_METHOD_SYMBOL",
    "JSON_SYMBOL", "KEY_BLOCK_SIZE_SYMBOL", "LAST_SYMBOL", "LEAVES_SYMBOL",
    "LESS_SYMBOL", "LEVEL_SYMBOL", "LINESTRING_SYMBOL", "LIST_SYMBOL", "LOCAL_SYMBOL",
    "LOCKS_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", "MAX_ROWS_SYMBOL", "MASTER_SYMBOL",
    "MASTER_HEARTBEAT_PERIOD_SYMBOL", "MASTER_HOST_SYMBOL", "MASTER_PORT_SYMBOL",
    "MASTER_LOG_FILE_SYMBOL", "MASTER_LOG_POS_SYMBOL", "MASTER_USER_SYMBOL",
    "MASTER_PASSWORD_SYMBOL", "MASTER_SERVER_ID_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL",
    "MASTER_RETRY_COUNT_SYMBOL", "MASTER_DELAY_SYMBOL", "MASTER_SSL_SYMBOL",
    "MASTER_SSL_CA_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", "MASTER_TLS_VERSION_SYMBOL",
    "MASTER_SSL_CERT_SYMBOL", "MASTER_SSL_CIPHER_SYMBOL", "MASTER_SSL_CRL_SYMBOL",
    "MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", "MASTER_AUTO_POSITION_SYMBOL",
    "MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", "MAX_STATEMENT_TIME_SYMBOL",
    "MAX_SIZE_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", "MAX_USER_CONNECTIONS_SYMBOL",
    "MEDIUM_SYMBOL", "MEMORY_SYMBOL", "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL",
    "MICROSECOND_SYMBOL", "MIGRATE_SYMBOL", "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL",
    "MODIFY_SYMBOL", "MODE_SYMBOL", "MONTH_SYMBOL", "MULTILINESTRING_SYMBOL",
    "MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", "MUTEX_SYMBOL", "MYSQL_ERRNO_SYMBOL",
    "NAME_SYMBOL", "NAMES_SYMBOL", "NATIONAL_SYMBOL", "NCHAR_SYMBOL", "NDBCLUSTER_SYMBOL",
    "NEVER_SYMBOL", "NEXT_SYMBOL", "NEW_SYMBOL", "NO_WAIT_SYMBOL", "NODEGROUP_SYMBOL",
    "NONE_SYMBOL", "NUMBER_SYMBOL", "NVARCHAR_SYMBOL", "OFFSET_SYMBOL", "OLD_PASSWORD_SYMBOL",
    "ONE_SHOT_SYMBOL", "ONE_SYMBOL", "PACK_KEYS_SYMBOL", "PAGE_SYMBOL", "PARTIAL_SYMBOL",
    "PARTITIONING_SYMBOL", "PARTITIONS_SYMBOL", "PASSWORD_SYMBOL", "PHASE_SYMBOL",
    "PLUGIN_DIR_SYMBOL", "PLUGIN_SYMBOL", "PLUGINS_SYMBOL", "POINT_SYMBOL",
    "POLYGON_SYMBOL", "PRESERVE_SYMBOL", "PREV_SYMBOL", "PRIVILEGES_SYMBOL",
    "PROCESS_SYMBOL", "PROCESSLIST_SYMBOL", "PROFILE_SYMBOL", "PROFILES_SYMBOL",
    "PROXY_SYMBOL", "QUARTER_SYMBOL", "QUERY_SYMBOL", "QUICK_SYMBOL", "READ_ONLY_SYMBOL",
    "REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDO_BUFFER_SIZE_SYMBOL", "REDOFILE_SYMBOL",
    "REDUNDANT_SYMBOL", "RELAY_SYMBOL", "RELAYLOG_SYMBOL", "RELAY_LOG_FILE_SYMBOL",
    "RELAY_LOG_POS_SYMBOL", "RELAY_THREAD_SYMBOL", "RELOAD_SYMBOL", "REORGANIZE_SYMBOL",
    "REPEATABLE_SYMBOL", "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", "REPLICATE_IGNORE_DB_SYMBOL",
    "REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", "REPLICATE_WILD_DO_TABLE_SYMBOL",
    "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", "REPLICATE_REWRITE_DB_SYMBOL", "RESUME_SYMBOL",
    "RETURNED_SQLSTATE_SYMBOL", "RETURNS_SYMBOL", "REVERSE_SYMBOL", "ROLLUP_SYMBOL",
    "ROTATE_SYMBOL", "ROUTINE_SYMBOL", "ROWS_SYMBOL", "ROW_COUNT_SYMBOL",
    "ROW_FORMAT_SYMBOL", "ROW_SYMBOL", "RTREE_SYMBOL", "SCHEDULE_SYMBOL",
    "SCHEMA_NAME_SYMBOL", "SECOND_SYMBOL", "SERIAL_SYMBOL", "SERIALIZABLE_SYMBOL",
    "SESSION_SYMBOL", "SIMPLE_SYMBOL", "SHARE_SYMBOL", "SLOW_SYMBOL", "SNAPSHOT_SYMBOL",
    "SOUNDS_SYMBOL", "SOURCE_SYMBOL", "SQL_AFTER_GTIDS_SYMBOL", "SQL_AFTER_MTS_GAPS_SYMBOL",
    "SQL_BEFORE_GTIDS_SYMBOL", "SQL_CACHE_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL",
    "SQL_NO_CACHE_SYMBOL", "SQL_THREAD_SYMBOL", "STACKED_SYMBOL", "STARTS_SYMBOL",
    "STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL",
    "STATUS_SYMBOL", "STORAGE_SYMBOL", "STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL",
    "SUBDATE_SYMBOL", "SUBJECT_SYMBOL", "SUBPARTITION_SYMBOL", "SUBPARTITIONS_SYMBOL",
    "SUPER_SYMBOL", "SUSPEND_SYMBOL", "SWAPS_SYMBOL", "SWITCHES_SYMBOL", "TABLE_NAME_SYMBOL",
    "TABLES_SYMBOL", "TABLE_CHECKSUM_SYMBOL", "TABLESPACE_SYMBOL", "TEMPORARY_SYMBOL",
    "TEMPTABLE_SYMBOL", "TEXT_SYMBOL", "THAN_SYMBOL", "TRANSACTION_SYMBOL",
    "TRIGGERS_SYMBOL", "TIMESTAMP_SYMBOL", "TIMESTAMP_ADD_SYMBOL", "TIMESTAMP_DIFF_SYMBOL",
    "TIME_SYMBOL", "TYPES_SYMBOL", "TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "FUNCTION_SYMBOL",
    "UNCOMMITTED_SYMBOL", "UNDEFINED_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", "UNDOFILE_SYMBOL",
    "UNKNOWN_SYMBOL", "UNTIL_SYMBOL", "USER_RESOURCES_SYMBOL", "USER_SYMBOL",
    "USE_FRM_SYMBOL", "VARIABLES_SYMBOL", "VIEW_SYMBOL", "VALUE_SYMBOL", "WARNINGS_SYMBOL",
    "WAIT_SYMBOL", "WEEK_SYMBOL", "WORK_SYMBOL", "WEIGHT_STRING_SYMBOL", "X509_SYMBOL",
    "XID_SYMBOL", "XML_SYMBOL", "YEAR_SYMBOL", "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL",
    "INT_NUMBER", "LONG_NUMBER", "ULONGLONG_NUMBER", "EQUAL_OPERATOR", "ASSIGN_OPERATOR",
    "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR",
    "LESS_OR_EQUAL_OPERATOR", "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR",
    "PLUS_OPERATOR", "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", "MOD_OPERATOR",
    "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", "SHIFT_LEFT_OPERATOR",
    "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR",
    "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", "BITWISE_OR_OPERATOR",
    "DOT_SYMBOL", "COMMA_SYMBOL", "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL",
    "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL",
    "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL",
    "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", "NULL2_SYMBOL", "PARAM_MARKER",
    "HEX_NUMBER", "BIN_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "ACCESSIBLE_SYMBOL",
    "ADD_SYMBOL", "ALL_SYMBOL", "ALTER_SYMBOL", "ANALYSE_SYMBOL", "AND_SYMBOL",
    "AS_SYMBOL", "ASC_SYMBOL", "ASENSITIVE_SYMBOL", "BEFORE_SYMBOL", "BETWEEN_SYMBOL",
    "BIGINT_SYMBOL", "BINARY_SYMBOL", "BIN_NUM_SYMBOL", "BIT_AND_SYMBOL",
    "BIT_OR_SYMBOL", "BIT_XOR_SYMBOL", "BLOB_SYMBOL", "BOTH_SYMBOL", "BY_SYMBOL",
    "CALL_SYMBOL", "CASCADE_SYMBOL", "CASE_SYMBOL", "CAST_SYMBOL", "CHANGE_SYMBOL",
    "CHAR_SYMBOL", "CHECK_SYMBOL", "COLLATE_SYMBOL", "COLUMN_SYMBOL", "CONDITION_SYMBOL",
    "CONSTRAINT_SYMBOL", "CONTINUE_SYMBOL", "CONVERT_SYMBOL", "COUNT_SYMBOL",
    "CREATE_SYMBOL", "CROSS_SYMBOL", "CURDATE_SYMBOL", "CURRENT_DATE_SYMBOL",
    "CURRENT_TIME_SYMBOL", "CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURTIME_SYMBOL",
    "DATABASE_SYMBOL", "DATABASES_SYMBOL", "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL",
    "DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", "DAY_MINUTE_SYMBOL", "DAY_SECOND_SYMBOL",
    "DECIMAL_NUM_SYMBOL", "DECIMAL_SYMBOL", "DECLARE_SYMBOL", "DEFAULT_SYMBOL",
    "DELAYED_SYMBOL", "DELETE_SYMBOL", "DESC_SYMBOL", "DESCRIBE_SYMBOL", "DETERMINISTIC_SYMBOL",
    "DISTINCT_SYMBOL", "DIV_SYMBOL", "DOUBLE_SYMBOL", "DROP_SYMBOL", "DUAL_SYMBOL",
    "EACH_SYMBOL", "ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENCLOSED_SYMBOL", "END_OF_INPUT_SYMBOL",
    "ESCAPED_SYMBOL", "EXCHANGE_SYMBOL", "EXISTS_SYMBOL", "EXIT_SYMBOL", "EXPIRE_SYMBOL",
    "EXPLAIN_SYMBOL", "EXTRACT_SYMBOL", "FALSE_SYMBOL", "FETCH_SYMBOL", "FLOAT_SYMBOL",
    "FORCE_SYMBOL", "FOREIGN_SYMBOL", "FOR_SYMBOL", "FROM_SYMBOL", "FULLTEXT_SYMBOL",
    "GET_SYMBOL", "GENERATED_SYMBOL", "GRANT_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL",
    "HAVING_SYMBOL", "HIGH_PRIORITY_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL",
    "HOUR_SECOND_SYMBOL", "IF_SYMBOL", "IGNORE_SYMBOL", "INDEX_SYMBOL", "INFILE_SYMBOL",
    "INNER_SYMBOL", "INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL",
    "INTERVAL_SYMBOL", "INTO_SYMBOL", "INT_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL",
    "IO_BEFORE_GTIDS_SYMBOL", "IS_SYMBOL", "ITERATE_SYMBOL", "JOIN_SYMBOL",
    "KEYS_SYMBOL", "KEY_SYMBOL", "KILL_SYMBOL", "LEADING_SYMBOL", "LEAVE_SYMBOL",
    "LEFT_SYMBOL", "LIKE_SYMBOL", "LIMIT_SYMBOL", "LINEAR_SYMBOL", "LINES_SYMBOL",
    "LOAD_SYMBOL", "LOCATOR_SYMBOL", "LOCK_SYMBOL", "LONGBLOB_SYMBOL", "LONGTEXT_SYMBOL",
    "LONG_NUM_SYMBOL", "LONG_SYMBOL", "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL",
    "MASTER_BIND_SYMBOL", "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", "MATCH_SYMBOL",
    "MAX_SYMBOL", "MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", "MEDIUMINT_SYMBOL",
    "MEDIUMTEXT_SYMBOL", "MID_SYMBOL", "MINUTE_MICROSECOND_SYMBOL", "MINUTE_SECOND_SYMBOL",
    "MIN_SYMBOL", "MODIFIES_SYMBOL", "MOD_SYMBOL", "NATURAL_SYMBOL", "NCHAR_STRING_SYMBOL",
    "NEG_SYMBOL", "NONBLOCKING_SYMBOL", "NOT_SYMBOL", "NOW_SYMBOL", "NO_WRITE_TO_BINLOG_SYMBOL",
    "NULL_SYMBOL", "NUMERIC_SYMBOL", "OFFLINE_SYMBOL", "ON_SYMBOL", "ONLINE_SYMBOL",
    "ONLY_SYMBOL", "OPTIMIZE_SYMBOL", "OPTIMIZER_COSTS_SYMBOL", "OPTION_SYMBOL",
    "OPTIONALLY_SYMBOL", "ORDER_SYMBOL", "OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL",
    "OUT_SYMBOL", "POSITION_SYMBOL", "PRECISION_SYMBOL", "PRIMARY_SYMBOL",
    "PROCEDURE_SYMBOL", "PURGE_SYMBOL", "RANGE_SYMBOL", "READS_SYMBOL", "READ_SYMBOL",
    "READ_WRITE_SYMBOL", "REAL_SYMBOL", "REFERENCES_SYMBOL", "REGEXP_SYMBOL",
    "RELEASE_SYMBOL", "RENAME_SYMBOL", "REPEAT_SYMBOL", "REPLACE_SYMBOL",
    "REQUIRE_SYMBOL", "RESIGNAL_SYMBOL", "RESTRICT_SYMBOL", "RETURN_SYMBOL",
    "REVOKE_SYMBOL", "RIGHT_SYMBOL", "SECOND_MICROSECOND_SYMBOL", "SELECT_SYMBOL",
    "SENSITIVE_SYMBOL", "SEPARATOR_SYMBOL", "SERVER_OPTIONS_SYMBOL", "SESSION_USER_SYMBOL",
    "SET_SYMBOL", "SET_VAR_SYMBOL", "SHOW_SYMBOL", "SIGNAL_SYMBOL", "SMALLINT_SYMBOL",
    "SPATIAL_SYMBOL", "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", "SQLSTATE_SYMBOL",
    "SQLWARNING_SYMBOL", "SQL_BIG_RESULT_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL",
    "SQL_SMALL_RESULT_SYMBOL", "SQL_SYMBOL", "SSL_SYMBOL", "STARTING_SYMBOL",
    "STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", "STD_SYMBOL",
    "STORED_SYMBOL", "STRAIGHT_JOIN_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL",
    "SUM_SYMBOL", "SYSDATE_SYMBOL", "SYSTEM_USER_SYMBOL", "TABLE_REF_PRIORITY_SYMBOL",
    "TABLE_SYMBOL", "TERMINATED_SYMBOL", "THEN_SYMBOL", "TINYBLOB_SYMBOL",
    "TINYINT_SYMBOL", "TINYTEXT_SYMBOL", "TO_SYMBOL", "TRAILING_SYMBOL", "TRIGGER_SYMBOL",
    "TRIM_SYMBOL", "TRUE_SYMBOL", "UNDO_SYMBOL", "UNION_SYMBOL", "UNIQUE_SYMBOL",
    "UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UPDATE_SYMBOL", "USAGE_SYMBOL", "USE_SYMBOL",
    "USING_SYMBOL", "UTC_DATE_SYMBOL", "UTC_TIMESTAMP_SYMBOL", "UTC_TIME_SYMBOL",
    "VALIDATION_SYMBOL", "VALUES_SYMBOL", "VARBINARY_SYMBOL", "VARCHAR_SYMBOL",
    "VARIANCE_SYMBOL", "VARYING_SYMBOL", "VAR_POP_SYMBOL", "VAR_SAMP_SYMBOL",
    "VIRTUAL_SYMBOL", "WHEN_SYMBOL", "WHERE_SYMBOL", "WHILE_SYMBOL", "WITH_SYMBOL",
    "WITHOUT_SYMBOL", "WRITE_SYMBOL", "XOR_SYMBOL", "YEAR_MONTH_SYMBOL", "ZEROFILL_SYMBOL",
    "PERSIST_SYMBOL", "ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", "VISIBLE_SYMBOL",
    "EXCEPT_SYMBOL", "COMPONENT_SYMBOL", "RECURSIVE_SYMBOL", "JSON_OBJECTAGG_SYMBOL",
    "JSON_ARRAYAGG_SYMBOL", "OF_SYMBOL", "SKIP_SYMBOL", "LOCKED_SYMBOL", "NOWAIT_SYMBOL",
    "GROUPING_SYMBOL", "PERSIST_ONLY_SYMBOL", "HISTOGRAM_SYMBOL", "BUCKETS_SYMBOL",
    "REMOTE_SYMBOL", "CLONE_SYMBOL", "CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL",
    "EXCLUDE_SYMBOL", "FIRST_VALUE_SYMBOL", "FOLLOWING_SYMBOL", "GROUPS_SYMBOL",
    "LAG_SYMBOL", "LAST_VALUE_SYMBOL", "LEAD_SYMBOL", "NTH_VALUE_SYMBOL",
    "NTILE_SYMBOL", "NULLS_SYMBOL", "OTHERS_SYMBOL", "OVER_SYMBOL", "PERCENT_RANK_SYMBOL",
    "PRECEDING_SYMBOL", "RANK_SYMBOL", "RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL",
    "TIES_SYMBOL", "UNBOUNDED_SYMBOL", "WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL",
    "NESTED_SYMBOL", "ORDINALITY_SYMBOL", "PATH_SYMBOL", "HISTORY_SYMBOL",
    "REUSE_SYMBOL", "SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL",
    "SYSTEM_SYMBOL", "VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL",
    "RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", "ORGANIZATION_SYMBOL",
    "REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL",
    "SECONDARY_LOAD_SYMBOL", "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", "INACTIVE_SYMBOL",
    "LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL",
    "ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", "MEMBER_SYMBOL", "RANDOM_SYMBOL",
    "MASTER_COMPRESSION_ALGORITHM_SYMBOL", "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL",
    "PRIVILEGE_CHECKS_USER_SYMBOL", "MASTER_TLS_CIPHERSUITES_SYMBOL", "WHITESPACE",
    "INVALID_INPUT", "UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID",
    "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "VERSION_COMMENT_START", "MYSQL_COMMENT_START",
    "VERSION_COMMENT_END", "BLOCK_COMMENT", "POUND_COMMENT", "DASHDASH_COMMENT",
    "NOT_EQUAL2_OPERATOR",
];
MySQLParser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(MySQLParser._LITERAL_NAMES, MySQLParser._SYMBOLIC_NAMES, []);
MySQLParser._serializedATNSegments = 16;
MySQLParser._serializedATNSegment0 = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0311\u20A8\x04" +
    "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
    "\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
    "\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
    "\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
    "\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
    "\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
    "#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
    "+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
    "4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
    "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
    "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
    "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
    "X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
    "`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
    "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
    "r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
    "{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
    "\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
    "\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
    "\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
    "\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
    "\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
    "\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
    "\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
    "\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
    "\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
    "\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
    "\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
    "\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
    "\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
    "\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
    "\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
    "\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
    "\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
    "\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
    "\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
    "\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
    "\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
    "\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
    "\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
    "\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
    "\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
    "\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
    "\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
    "\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
    "\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
    "\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
    "\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
    "\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
    "\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
    "\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
    "\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
    "\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
    "\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
    "\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
    "\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
    "\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A\x04" +
    "\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E\x04" +
    "\u013F\t\u013F\x04\u0140\t\u0140\x04\u0141\t\u0141\x04\u0142\t\u0142\x04" +
    "\u0143\t\u0143\x04\u0144\t\u0144\x04\u0145\t\u0145\x04\u0146\t\u0146\x04" +
    "\u0147\t\u0147\x04\u0148\t\u0148\x04\u0149\t\u0149\x04\u014A\t\u014A\x04" +
    "\u014B\t\u014B\x04\u014C\t\u014C\x04\u014D\t\u014D\x04\u014E\t\u014E\x04" +
    "\u014F\t\u014F\x04\u0150\t\u0150\x04\u0151\t\u0151\x04\u0152\t\u0152\x04" +
    "\u0153\t\u0153\x04\u0154\t\u0154\x04\u0155\t\u0155\x04\u0156\t\u0156\x04" +
    "\u0157\t\u0157\x04\u0158\t\u0158\x04\u0159\t\u0159\x04\u015A\t\u015A\x04" +
    "\u015B\t\u015B\x04\u015C\t\u015C\x04\u015D\t\u015D\x04\u015E\t\u015E\x04" +
    "\u015F\t\u015F\x04\u0160\t\u0160\x04\u0161\t\u0161\x04\u0162\t\u0162\x04" +
    "\u0163\t\u0163\x04\u0164\t\u0164\x04\u0165\t\u0165\x04\u0166\t\u0166\x04" +
    "\u0167\t\u0167\x04\u0168\t\u0168\x04\u0169\t\u0169\x04\u016A\t\u016A\x04" +
    "\u016B\t\u016B\x04\u016C\t\u016C\x04\u016D\t\u016D\x04\u016E\t\u016E\x04" +
    "\u016F\t\u016F\x04\u0170\t\u0170\x04\u0171\t\u0171\x04\u0172\t\u0172\x04" +
    "\u0173\t\u0173\x04\u0174\t\u0174\x04\u0175\t\u0175\x04\u0176\t\u0176\x04" +
    "\u0177\t\u0177\x04\u0178\t\u0178\x04\u0179\t\u0179\x04\u017A\t\u017A\x04" +
    "\u017B\t\u017B\x04\u017C\t\u017C\x04\u017D\t\u017D\x04\u017E\t\u017E\x04" +
    "\u017F\t\u017F\x04\u0180\t\u0180\x04\u0181\t\u0181\x04\u0182\t\u0182\x04" +
    "\u0183\t\u0183\x04\u0184\t\u0184\x04\u0185\t\u0185\x04\u0186\t\u0186\x04" +
    "\u0187\t\u0187\x04\u0188\t\u0188\x04\u0189\t\u0189\x04\u018A\t\u018A\x04" +
    "\u018B\t\u018B\x04\u018C\t\u018C\x04\u018D\t\u018D\x04\u018E\t\u018E\x04" +
    "\u018F\t\u018F\x04\u0190\t\u0190\x04\u0191\t\u0191\x04\u0192\t\u0192\x04" +
    "\u0193\t\u0193\x04\u0194\t\u0194\x04\u0195\t\u0195\x04\u0196\t\u0196\x04" +
    "\u0197\t\u0197\x04\u0198\t\u0198\x04\u0199\t\u0199\x04\u019A\t\u019A\x04" +
    "\u019B\t\u019B\x04\u019C\t\u019C\x04\u019D\t\u019D\x04\u019E\t\u019E\x04" +
    "\u019F\t\u019F\x04\u01A0\t\u01A0\x04\u01A1\t\u01A1\x04\u01A2\t\u01A2\x04" +
    "\u01A3\t\u01A3\x04\u01A4\t\u01A4\x04\u01A5\t\u01A5\x04\u01A6\t\u01A6\x04" +
    "\u01A7\t\u01A7\x04\u01A8\t\u01A8\x04\u01A9\t\u01A9\x04\u01AA\t\u01AA\x04" +
    "\u01AB\t\u01AB\x04\u01AC\t\u01AC\x04\u01AD\t\u01AD\x04\u01AE\t\u01AE\x04" +
    "\u01AF\t\u01AF\x04\u01B0\t\u01B0\x04\u01B1\t\u01B1\x04\u01B2\t\u01B2\x04" +
    "\u01B3\t\u01B3\x04\u01B4\t\u01B4\x04\u01B5\t\u01B5\x04\u01B6\t\u01B6\x04" +
    "\u01B7\t\u01B7\x04\u01B8\t\u01B8\x04\u01B9\t\u01B9\x04\u01BA\t\u01BA\x04" +
    "\u01BB\t\u01BB\x04\u01BC\t\u01BC\x04\u01BD\t\u01BD\x04\u01BE\t\u01BE\x04" +
    "\u01BF\t\u01BF\x04\u01C0\t\u01C0\x04\u01C1\t\u01C1\x04\u01C2\t\u01C2\x04" +
    "\u01C3\t\u01C3\x04\u01C4\t\u01C4\x04\u01C5\t\u01C5\x04\u01C6\t\u01C6\x04" +
    "\u01C7\t\u01C7\x04\u01C8\t\u01C8\x04\u01C9\t\u01C9\x04\u01CA\t\u01CA\x04" +
    "\u01CB\t\u01CB\x04\u01CC\t\u01CC\x04\u01CD\t\u01CD\x04\u01CE\t\u01CE\x04" +
    "\u01CF\t\u01CF\x04\u01D0\t\u01D0\x04\u01D1\t\u01D1\x04\u01D2\t\u01D2\x04" +
    "\u01D3\t\u01D3\x04\u01D4\t\u01D4\x04\u01D5\t\u01D5\x04\u01D6\t\u01D6\x04" +
    "\u01D7\t\u01D7\x04\u01D8\t\u01D8\x04\u01D9\t\u01D9\x04\u01DA\t\u01DA\x04" +
    "\u01DB\t\u01DB\x04\u01DC\t\u01DC\x04\u01DD\t\u01DD\x04\u01DE\t\u01DE\x04" +
    "\u01DF\t\u01DF\x04\u01E0\t\u01E0\x04\u01E1\t\u01E1\x04\u01E2\t\u01E2\x04" +
    "\u01E3\t\u01E3\x04\u01E4\t\u01E4\x04\u01E5\t\u01E5\x04\u01E6\t\u01E6\x04" +
    "\u01E7\t\u01E7\x04\u01E8\t\u01E8\x04\u01E9\t\u01E9\x04\u01EA\t\u01EA\x04" +
    "\u01EB\t\u01EB\x04\u01EC\t\u01EC\x04\u01ED\t\u01ED\x04\u01EE\t\u01EE\x04" +
    "\u01EF\t\u01EF\x04\u01F0\t\u01F0\x04\u01F1\t\u01F1\x04\u01F2\t\u01F2\x04" +
    "\u01F3\t\u01F3\x04\u01F4\t\u01F4\x04\u01F5\t\u01F5\x04\u01F6\t\u01F6\x04" +
    "\u01F7\t\u01F7\x04\u01F8\t\u01F8\x04\u01F9\t\u01F9\x04\u01FA\t\u01FA\x04" +
    "\u01FB\t\u01FB\x04\u01FC\t\u01FC\x04\u01FD\t\u01FD\x04\u01FE\t\u01FE\x04" +
    "\u01FF\t\u01FF\x04\u0200\t\u0200\x04\u0201\t\u0201\x04\u0202\t\u0202\x04" +
    "\u0203\t\u0203\x04\u0204\t\u0204\x04\u0205\t\u0205\x04\u0206\t\u0206\x04" +
    "\u0207\t\u0207\x04\u0208\t\u0208\x04\u0209\t\u0209\x04\u020A\t\u020A\x04" +
    "\u020B\t\u020B\x04\u020C\t\u020C\x04\u020D\t\u020D\x04\u020E\t\u020E\x04" +
    "\u020F\t\u020F\x04\u0210\t\u0210\x04\u0211\t\u0211\x04\u0212\t\u0212\x04" +
    "\u0213\t\u0213\x04\u0214\t\u0214\x04\u0215\t\u0215\x04\u0216\t\u0216\x04" +
    "\u0217\t\u0217\x04\u0218\t\u0218\x04\u0219\t\u0219\x04\u021A\t\u021A\x04" +
    "\u021B\t\u021B\x04\u021C\t\u021C\x04\u021D\t\u021D\x04\u021E\t\u021E\x04" +
    "\u021F\t\u021F\x04\u0220\t\u0220\x04\u0221\t\u0221\x04\u0222\t\u0222\x04" +
    "\u0223\t\u0223\x04\u0224\t\u0224\x04\u0225\t\u0225\x04\u0226\t\u0226\x04" +
    "\u0227\t\u0227\x04\u0228\t\u0228\x04\u0229\t\u0229\x04\u022A\t\u022A\x04" +
    "\u022B\t\u022B\x04\u022C\t\u022C\x04\u022D\t\u022D\x04\u022E\t\u022E\x04" +
    "\u022F\t\u022F\x04\u0230\t\u0230\x04\u0231\t\u0231\x04\u0232\t\u0232\x04" +
    "\u0233\t\u0233\x04\u0234\t\u0234\x04\u0235\t\u0235\x04\u0236\t\u0236\x04" +
    "\u0237\t\u0237\x04\u0238\t\u0238\x04\u0239\t\u0239\x04\u023A\t\u023A\x04" +
    "\u023B\t\u023B\x04\u023C\t\u023C\x04\u023D\t\u023D\x04\u023E\t\u023E\x04" +
    "\u023F\t\u023F\x04\u0240\t\u0240\x04\u0241\t\u0241\x04\u0242\t\u0242\x04" +
    "\u0243\t\u0243\x04\u0244\t\u0244\x04\u0245\t\u0245\x04\u0246\t\u0246\x04" +
    "\u0247\t\u0247\x04\u0248\t\u0248\x04\u0249\t\u0249\x04\u024A\t\u024A\x04" +
    "\u024B\t\u024B\x04\u024C\t\u024C\x04\u024D\t\u024D\x04\u024E\t\u024E\x04" +
    "\u024F\t\u024F\x04\u0250\t\u0250\x04\u0251\t\u0251\x04\u0252\t\u0252\x04" +
    "\u0253\t\u0253\x04\u0254\t\u0254\x04\u0255\t\u0255\x04\u0256\t\u0256\x04" +
    "\u0257\t\u0257\x04\u0258\t\u0258\x04\u0259\t\u0259\x04\u025A\t\u025A\x04" +
    "\u025B\t\u025B\x04\u025C\t\u025C\x04\u025D\t\u025D\x04\u025E\t\u025E\x03" +
    "\x02\x03\x02\x03\x02\x05\x02\u04C0\n\x02\x03\x02\x03\x02\x05\x02\u04C4" +
    "\n\x02\x03\x02\x05\x02\u04C7\n\x02\x05\x02\u04C9\n\x02\x03\x03\x03\x03" +
    "\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
    "\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
    "\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
    "\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x05\x03\u04ED\n\x03\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04\u04F5\n\x04\x03\x04\x03\x04" +
    "\x03\x04\x05\x04\u04FA\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05" +
    "\x04\u050A\n\x04\x03\x05\x03\x05\x03\x05\x06\x05\u050F\n\x05\r\x05\x0E" +
    "\x05\u0510\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x05\x05\u0518\n\x05" +
    "\x03\x06\x05\x06\u051B\n\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x05" +
    "\x06\u0522\n\x06\x03\x06\x03\x06\x03\x06\x05\x06\u0527\n\x06\x03\x06\x05" +
    "\x06\u052A\n\x06\x03\x06\x03\x06\x03\x06\x05\x06\u052F\n\x06\x03\x06\x03" +
    "\x06\x03\x06\x03\x06\x05\x06\u0535\n\x06\x05\x06\u0537\n\x06\x03\x06\x03" +
    "\x06\x05\x06\u053B\n\x06\x03\x06\x03\x06\x05\x06\u053F\n\x06\x03\x07\x03" +
    "\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u0548\n\x07\x03\b" +
    "\x03\b\x05\b\u054C\n\b\x03\b\x07\b\u054F\n\b\f\b\x0E\b\u0552\v\b\x03\t" +
    "\x03\t\x03\t\x05\t\u0557\n\t\x03\n\x03\n\x03\n\x03\n\x03\v\x05\v\u055E" +
    "\n\v\x03\v\x03\v\x05\v\u0562\n\v\x03\v\x03\v\x03\v\x05\v\u0567\n\v\x03" +
    "\f\x03\f\x03\f\x05\f\u056C\n\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f\u0573" +
    "\n\f\x03\f\x05\f\u0576\n\f\x03\r\x03\r\x03\r\x03\r\x05\r\u057C\n\r\x03" +
    "\r\x05\r\u057F\n\r\x03\x0E\x03\x0E\x03\x0E\x07\x0E\u0584\n\x0E\f\x0E\x0E" +
    "\x0E\u0587\v\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
    "\x05\x0F\u0590\n\x0F\x03\x10\x03\x10\x03\x10\x05\x10\u0595\n\x10\x03\x10" +
    "\x03\x10\x03\x10\x05\x10\u059A\n\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
    "\x10\x03\x10\x05\x10\u05A2\n\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10" +
    "\u05A8\n\x10\x03\x10\x03\x10\x05\x10\u05AC\n\x10\x03\x10\x03\x10\x03\x10" +
    "\x05\x10\u05B1\n\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x07\x10\u05B8" +
    "\n\x10\f\x10\x0E\x10\u05BB\v\x10\x03\x10\x03\x10\x03\x10\x05\x10\u05C0" +
    "\n\x10\x03\x10\x03\x10\x07\x10\u05C4\n\x10\f\x10\x0E\x10\u05C7\v\x10\x03" +
    "\x10\x03\x10\x03\x10\x05\x10\u05CC\n\x10\x03\x10\x03\x10\x03\x10\x03\x10" +
    "\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\u05D6\n\x10\x03\x10\x03\x10\x03" +
    "\x10\x03\x10\x05\x10\u05DC\n\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10" +
    "\x03\x10\x03\x10\x05\x10\u05E5\n\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
    "\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\u05F3" +
    "\n\x10\x03\x11\x03\x11\x05\x11\u05F7\n\x11\x03\x11\x03\x11\x03\x11\x03" +
    "\x11\x05\x11\u05FD\n\x11\x07\x11\u05FF\n\x11\f\x11\x0E\x11\u0602\v\x11" +
    "\x03\x12\x03\x12\x03\x12\x05\x12\u0607\n\x12\x03\x13\x03\x13\x05\x13\u060B" +
    "\n\x13\x03\x13\x03\x13\x03\x13\x05\x13\u0610\n\x13\x03\x13\x05\x13\u0613" +
    "\n\x13\x03\x13\x03\x13\x03\x13\x03\x13\x05\x13\u0619\n\x13\x03\x13\x03" +
    "\x13\x03\x13\x03\x13\x05\x13\u061F\n\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
    "\x05\x13\u0625\n\x13\x03\x13\x03\x13\x05\x13\u0629\n\x13\x03\x13\x03\x13" +
    "\x03\x13\x05\x13\u062E\n\x13\x03\x13\x03\x13\x05\x13\u0632\n\x13\x03\x13" +
    "\x03\x13\x05\x13\u0636\n\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03" +
    "\x13\x05\x13\u063E\n\x13\x05\x13\u0640\n\x13\x03\x13\x03\x13\x03\x13\x03" +
    "\x13\x03\x13\x05\x13\u0647\n\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
    "\x03\x13\x05\x13\u064F\n\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03" +
    "\x13\x05\x13\u0657\n\x13\x03\x13\x03\x13\x05\x13\u065B\n\x13\x03\x13\x03" +
    "\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03" +
    "\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03" +
    "\x13\x03\x13\x05\x13\u0672\n\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
    "\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
    "\x05\x13\u0682\n\x13\x03\x13\x05\x13\u0685\n\x13\x03\x13\x03\x13\x03\x13" +
    "\x03\x13\x03\x13\x03\x13\x03\x13\x05\x13\u068E\n\x13\x03\x14\x03\x14\x03" +
    "\x14\x05\x14\u0693\n\x14\x03\x15\x03\x15\x03\x16\x03\x16\x05\x16\u0699" +
    "\n\x16\x03\x16\x03\x16\x03\x16\x05\x16\u069E\n\x16\x07\x16\u06A0\n\x16" +
    "\f\x16\x0E\x16\u06A3\v\x16\x03\x17\x03\x17\x05\x17\u06A7\n\x17\x03\x17" +
    "\x03\x17\x05\x17\u06AB\n\x17\x03\x18\x03\x18\x05\x18\u06AF\n\x18\x03\x18" +
    "\x03\x18\x05\x18\u06B3\n\x18\x03\x19\x03\x19\x05\x19\u06B7\n\x19\x03\x19" +
    "\x03\x19\x05\x19\u06BB\n\x19\x05\x19\u06BD\n\x19\x03\x1A\x03\x1A\x03\x1A" +
    "\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x05\x1C\u06C8\n\x1C\x03" +
    "\x1D\x03\x1D\x03\x1D\x05\x1D\u06CD\n\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D" +
    "\x05\x1D\u06D3\n\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x05" +
    "\x1E\u06DB\n\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E" +
    "\x05\x1E\u06E4\n\x1E\x03\x1E\x07\x1E\u06E7\n\x1E\f\x1E\x0E\x1E\u06EA\v" +
    "\x1E\x05\x1E\u06EC\n\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u06F1\n\x1E\x03" +
    "\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u06F8\n\x1E\x03\x1F\x03\x1F" +
    "\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u0700\n\x1F\x03 \x03 \x05 \u0704" +
    "\n \x03 \x07 \u0707\n \f \x0E \u070A\v \x03!\x03!\x03\"\x03\"\x05\"\u0710" +
    "\n\"\x03\"\x07\"\u0713\n\"\f\"\x0E\"\u0716\v\"\x03#\x03#\x05#\u071A\n" +
    "#\x03#\x03#\x03#\x03#\x03#\x03#\x05#\u0722\n#\x03$\x03$\x05$\u0726\n$" +
    "\x03$\x03$\x03$\x05$\u072B\n$\x03%\x05%\u072E\n%\x03%\x05%\u0731\n%\x03" +
    "%\x05%\u0734\n%\x03%\x03%\x03%\x03%\x03&\x05&\u073B\n&\x03&\x03&\x03&" +
    "\x03\'\x03\'\x05\'\u0742\n\'\x03(\x03(\x05(\u0746\n(\x03(\x03(\x03(\x03" +
    ")\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03" +
    ")\x03)\x03)\x03)\x03)\x05)\u075E\n)\x03*\x03*\x05*\u0762\n*\x03*\x03*" +
    "\x07*\u0766\n*\f*\x0E*\u0769\v*\x03+\x03+\x03+\x03+\x05+\u076F\n+\x03" +
    ",\x05,\u0772\n,\x03,\x03,\x05,\u0776\n,\x03,\x03,\x03,\x03,\x03,\x05," +
    "\u077D\n,\x03,\x05,\u0780\n,\x03,\x05,\u0783\n,\x03,\x05,\u0786\n,\x03" +
    ",\x03,\x03,\x03,\x03,\x03,\x03,\x05,\u078F\n,\x03-\x03-\x03-\x07-\u0794" +
    "\n-\f-\x0E-\u0797\v-\x03.\x03.\x05.\u079B\n.\x03/\x05/\u079E\n/\x03/\x05" +
    "/\u07A1\n/\x03/\x03/\x030\x030\x050\u07A7\n0\x031\x031\x031\x031\x051" +
    "\u07AD\n1\x031\x051\u07B0\n1\x031\x031\x032\x052\u07B5\n2\x032\x032\x03" +
    "2\x032\x032\x032\x072\u07BD\n2\f2\x0E2\u07C0\v2\x052\u07C2\n2\x032\x03" +
    "2\x072\u07C6\n2\f2\x0E2\u07C9\v2\x032\x032\x033\x053\u07CE\n3\x033\x03" +
    "3\x033\x033\x033\x033\x073\u07D6\n3\f3\x0E3\u07D9\v3\x053\u07DB\n3\x03" +
    "3\x033\x033\x033\x073\u07E1\n3\f3\x0E3\u07E4\v3\x033\x033\x034\x054\u07E9" +
    "\n4\x034\x034\x034\x034\x034\x034\x034\x035\x035\x055\u07F4\n5\x035\x05" +
    "5\u07F7\n5\x036\x066\u07FA\n6\r6\x0E6\u07FB\x037\x037\x037\x037\x037\x03" +
    "7\x037\x037\x037\x037\x037\x037\x037\x037\x037\x037\x037\x057\u080F\n" +
    "7\x038\x058\u0812\n8\x038\x058\u0815\n8\x038\x038\x038\x038\x058\u081B" +
    "\n8\x038\x058\u081E\n8\x058\u0820\n8\x038\x038\x078\u0824\n8\f8\x0E8\u0827" +
    "\v8\x038\x038\x038\x038\x038\x078\u082E\n8\f8\x0E8\u0831\v8\x038\x038" +
    "\x038\x038\x038\x078\u0838\n8\f8\x0E8\u083B\v8\x058\u083D\n8\x038\x05" +
    "8\u0840\n8\x039\x039\x039\x059\u0845\n9\x039\x039\x039\x039\x059\u084B" +
    "\n9\x03:\x03:\x03:\x03:\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x05;\u0858" +
    "\n;\x03<\x03<\x05<\u085C\n<\x03<\x07<\u085F\n<\f<\x0E<\u0862\v<\x03=\x03" +
    "=\x03=\x03=\x03=\x03=\x05=\u086A\n=\x03>\x03>\x03>\x03>\x03>\x03>\x03" +
    ">\x03>\x03?\x03?\x03?\x03?\x03?\x07?\u0879\n?\f?\x0E?\u087C\v?\x03?\x03" +
    "?\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03" +
    "@\x05@\u088E\n@\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x05A\u0897\nA\x03A" +
    "\x05A\u089A\nA\x03B\x03B\x03B\x03B\x03B\x03B\x05B\u08A2\nB\x03C\x03C\x03" +
    "C\x05C\u08A7\nC\x03C\x03C\x05C\u08AB\nC\x03D\x03D\x03D\x03E\x03E\x05E" +
    "\u08B2\nE\x03E\x07E\u08B5\nE\fE\x0EE\u08B8\vE\x03F\x03F\x03F\x03F\x03" +
    "F\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x05F\u08C6\nF\x03G\x03G\x05G\u08CA" +
    "\nG\x03G\x03G\x03H\x03H\x05H\u08D0\nH\x03H\x03H\x03I\x03I\x05I\u08D6\n" +
    "I\x03I\x03I\x03J\x03J\x05J\u08DC\nJ\x03J\x03J\x03K\x03K\x05K\u08E2\nK" +
    "\x03K\x03K\x03L\x03L\x05L\u08E8\nL\x03L\x03L\x03M\x05M\u08ED\nM\x03M\x03" +
    "M\x05M\u08F1\nM\x03M\x03M\x03N\x03N\x03O\x03O\x05O\u08F9\nO\x03O\x03O" +
    "\x03P\x03P\x05P\u08FF\nP\x03P\x03P\x03Q\x03Q\x05Q\u0905\nQ\x03Q\x03Q\x03" +
    "R\x05R\u090A\nR\x03R\x05R\u090D\nR\x03R\x05R\u0910\nR\x03R\x03R\x03R\x03" +
    "R\x03S\x03S\x03S\x05S\u0919\nS\x03S\x05S\u091C\nS\x03T\x03T\x03T\x03T" +
    "\x03U\x03U\x03U\x03U\x03V\x05V\u0927\nV\x03V\x03V\x03V\x03V\x03V\x03V" +
    "\x03V\x03V\x03V\x03V\x05V\u0933\nV\x03V\x03V\x03W\x03W\x03W\x03W\x03X" +
    "\x05X\u093C\nX\x03X\x03X\x05X\u0940\nX\x03X\x03X\x03X\x03X\x03X\x03X\x03" +
    "X\x05X\u0949\nX\x03X\x05X\u094C\nX\x03X\x03X\x03X\x03X\x05X\u0952\nX\x05" +
    "X\u0954\nX\x03X\x03X";
MySQLParser._serializedATNSegment1 = "\x05X\u0958\nX\x03X\x03X\x03X\x03Y\x03Y\x05Y\u095F\nY\x03Y\x03Y\x03Z\x03" +
    "Z\x03Z\x03Z\x03Z\x03Z\x03Z\x07Z\u096A\nZ\fZ\x0EZ\u096D\vZ\x03Z\x03Z\x03" +
    "Z\x03Z\x05Z\u0973\nZ\x03Z\x03Z\x07Z\u0977\nZ\fZ\x0EZ\u097A\vZ\x05Z\u097C" +
    "\nZ\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x03" +
    "[\x03[\x05[\u098D\n[\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03" +
    "\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x05\\\u09A1\n" +
    "\\\x03]\x03]\x05]\u09A5\n]\x03]\x03]\x03^\x03^\x05^\u09AB\n^\x03^\x03" +
    "^\x03_\x03_\x05_\u09B1\n_\x03_\x03_\x03`\x03`\x05`\u09B7\n`\x03`\x03`" +
    "\x03a\x05a\u09BC\na\x03a\x03a\x03a\x03a\x03a\x05a\u09C3\na\x03b\x03b\x03" +
    "b\x03b\x03b\x05b\u09CA\nb\x03b\x07b\u09CD\nb\fb\x0Eb\u09D0\vb\x05b\u09D2" +
    "\nb\x03c\x03c\x05c\u09D6\nc\x03d\x03d\x05d\u09DA\nd\x03d\x03d\x03e\x05" +
    "e\u09DF\ne\x03e\x03e\x05e\u09E3\ne\x03e\x03e\x05e\u09E7\ne\x03f\x03f\x03" +
    "f\x03f\x05f\u09ED\nf\x03f\x07f\u09F0\nf\ff\x0Ef\u09F3\vf\x05f\u09F5\n" +
    "f\x03g\x03g\x05g\u09F9\ng\x03g\x03g\x03h\x03h\x05h\u09FF\nh\x03h\x03h" +
    "\x05h\u0A03\nh\x03i\x03i\x05i\u0A07\ni\x03i\x03i\x03j\x03j\x03j\x03j\x05" +
    "j\u0A0F\nj\x03j\x03j\x03k\x03k\x03k\x03k\x05k\u0A17\nk\x03l\x03l\x03l" +
    "\x03l\x03l\x07l\u0A1E\nl\fl\x0El\u0A21\vl\x03m\x03m\x03m\x03m\x03n\x03" +
    "n\x05n\u0A29\nn\x03n\x03n\x03o\x03o\x03o\x03o\x03o\x03p\x03p\x03p\x03" +
    "p\x05p\u0A36\np\x03p\x05p\u0A39\np\x03q\x03q\x05q\u0A3D\nq\x03q\x03q\x07" +
    "q\u0A41\nq\fq\x0Eq\u0A44\vq\x03q\x03q\x03q\x03q\x03q\x05q\u0A4B\nq\x03" +
    "q\x03q\x03q\x05q\u0A50\nq\x03q\x05q\u0A53\nq\x03q\x05q\u0A56\nq\x03q\x05" +
    "q\u0A59\nq\x03q\x05q\u0A5C\nq\x05q\u0A5E\nq\x03q\x03q\x03q\x03q\x05q\u0A64" +
    "\nq\x05q\u0A66\nq\x03r\x03r\x03r\x03r\x03r\x03r\x03s\x03s\x03t\x03t\x03" +
    "t\x03t\x03t\x05t\u0A75\nt\x03u\x03u\x03u\x03u\x05u\u0A7B\nu\x03u\x03u" +
    "\x03u\x03u\x03u\x05u\u0A82\nu\x03u\x05u\u0A85\nu\x05u\u0A87\nu\x05u\u0A89" +
    "\nu\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x05v\u0A93\nv\x05v\u0A95\n" +
    "v\x03w\x03w\x05w\u0A99\nw\x03w\x05w\u0A9C\nw\x03w\x05w\u0A9F\nw\x03w\x03" +
    "w\x05w\u0AA3\nw\x03w\x03w\x03w\x05w\u0AA8\nw\x03w\x03w\x03w\x03w\x05w" +
    "\u0AAE\nw\x03w\x05w\u0AB1\nw\x03w\x05w\u0AB4\nw\x03x\x03x\x03y\x03y\x05" +
    "y\u0ABA\ny\x03y\x05y\u0ABD\ny\x03y\x03y\x03z\x03z\x03z\x07z\u0AC4\nz\f" +
    "z\x0Ez\u0AC7\vz\x03{\x03{\x03{\x03|\x03|\x03|\x05|\u0ACF\n|\x03|\x03|" +
    "\x05|\u0AD3\n|\x03}\x03}\x05}\u0AD7\n}\x03}\x03}\x03}\x03}\x05}\u0ADD" +
    "\n}\x03}\x07}\u0AE0\n}\f}\x0E}\u0AE3\v}\x03~\x03~\x05~\u0AE7\n~\x03~\x03" +
    "~\x03~\x05~\u0AEC\n~\x07~\u0AEE\n~\f~\x0E~\u0AF1\v~\x03\x7F\x03\x7F\x03" +
    "\x7F\x05\x7F\u0AF6\n\x7F\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80" +
    "\x03\x81\x03\x81\x03\x81\x05\x81\u0B01\n\x81\x03\x81\x05\x81\u0B04\n\x81" +
    "\x03\x81\x03\x81\x03\x81\x05\x81\u0B09\n\x81\x03\x81\x03\x81\x03\x81\x03" +
    "\x81\x05\x81\u0B0F\n\x81\x03\x81\x05\x81\u0B12\n\x81\x03\x81\x05\x81\u0B15" +
    "\n\x81\x03\x81\x05\x81\u0B18\n\x81\x03\x81\x05\x81\u0B1B\n\x81\x03\x81" +
    "\x03\x81\x03\x82\x03\x82\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x84" +
    "\x03\x84\x03\x84\x05\x84\u0B29\n\x84\x03\x84\x05\x84\u0B2C\n\x84\x03\x84" +
    "\x03\x84\x05\x84\u0B30\n\x84\x03\x85\x03\x85\x05\x85\u0B34\n\x85\x03\x85" +
    "\x03\x85\x03\x86\x03\x86\x05\x86\u0B3A\n\x86\x03\x86\x03\x86\x03\x86\x05" +
    "\x86\u0B3F\n\x86\x07\x86\u0B41\n\x86\f\x86\x0E\x86\u0B44\v\x86\x03\x87" +
    "\x03\x87\x05\x87\u0B48\n\x87\x03\x87\x05\x87\u0B4B\n\x87\x03\x87\x03\x87" +
    "\x05\x87\u0B4F\n\x87\x03\x87\x03\x87\x03\x87\x03\x87\x05\x87\u0B55\n\x87" +
    "\x03\x88\x03\x88\x03\x88\x05\x88\u0B5A\n\x88\x03\x89\x03\x89\x03\x89\x03" +
    "\x89\x03\x89\x03\x89\x03\x89\x05\x89\u0B63\n\x89\x03\x8A\x03\x8A\x05\x8A" +
    "\u0B67\n\x8A\x03\x8A\x03\x8A\x05\x8A\u0B6B\n\x8A\x03\x8A\x05\x8A\u0B6E" +
    "\n\x8A\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u0B73\n\x8A\x03\x8A\x05\x8A\u0B76" +
    "\n\x8A\x05\x8A\u0B78\n\x8A\x03\x8A\x03\x8A\x05\x8A\u0B7C\n\x8A\x03\x8A" +
    "\x05\x8A\u0B7F\n\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u0B85\n\x8A" +
    "\x05\x8A\u0B87\n\x8A\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x05\x8B\u0B8E" +
    "\n\x8B\x03\x8B\x03\x8B\x05\x8B\u0B92\n\x8B\x05\x8B\u0B94\n\x8B\x03\x8B" +
    "\x03\x8B\x03\x8B\x05\x8B\u0B99\n\x8B\x03\x8B\x03\x8B\x05\x8B\u0B9D\n\x8B" +
    "\x07\x8B\u0B9F\n\x8B\f\x8B\x0E\x8B\u0BA2\v\x8B\x03\x8C\x03\x8C\x03\x8C" +
    "\x05\x8C\u0BA7\n\x8C\x03\x8C\x03\x8C\x03\x8D\x03\x8D\x07\x8D\u0BAD\n\x8D" +
    "\f\x8D\x0E\x8D\u0BB0\v\x8D\x03\x8D\x03\x8D\x05\x8D\u0BB4\n\x8D\x03\x8D" +
    "\x05\x8D\u0BB7\n\x8D\x03\x8D\x05\x8D\u0BBA\n\x8D\x03\x8D\x05\x8D\u0BBD" +
    "\n\x8D\x03\x8D\x05\x8D\u0BC0\n\x8D\x03\x8D\x03\x8D\x05\x8D\u0BC4\n\x8D" +
    "\x03\x8E\x03\x8E\x03\x8F\x03\x8F\x03\x90\x03\x90\x03\x90\x03\x91\x03\x91" +
    "\x03\x91\x03\x92\x03\x92\x03\x92\x05\x92\u0BD3\n\x92\x03\x93\x03\x93\x05" +
    "\x93\u0BD7\n\x93\x03\x94\x03\x94\x03\x94\x03\x94\x05\x94\u0BDD\n\x94\x03" +
    "\x94\x05\x94\u0BE0\n\x94\x03\x94\x05\x94\u0BE3\n\x94\x03\x94\x03\x94\x03" +
    "\x94\x03\x94\x05\x94\u0BE9\n\x94\x03\x94\x03\x94\x03\x94\x05\x94\u0BEE" +
    "\n\x94\x07\x94\u0BF0\n\x94\f\x94\x0E\x94\u0BF3\v\x94\x05\x94\u0BF5\n\x94" +
    "\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x05\x95\u0BFD\n\x95\x05" +
    "\x95\u0BFF\n\x95\x03\x95\x03\x95\x03\x96\x03\x96\x03\x96\x03\x97\x03\x97" +
    "\x03\x97\x03\x97\x07\x97\u0C0A\n\x97\f\x97\x0E\x97\u0C0D\v\x97\x03\x98" +
    "\x03\x98\x03\x98\x03\x98\x03\x99\x03\x99\x03\x99\x03\x99\x03\x9A\x05\x9A" +
    "\u0C18\n\x9A\x03\x9A\x03\x9A\x03\x9A\x05\x9A\u0C1D\n\x9A\x03\x9A\x05\x9A" +
    "\u0C20\n\x9A\x03\x9A\x05\x9A\u0C23\n\x9A\x03\x9B\x03\x9B\x03\x9B\x05\x9B" +
    "\u0C28\n\x9B\x03\x9C\x03\x9C\x03\x9D\x03\x9D\x05\x9D\u0C2E\n\x9D\x03\x9E" +
    "\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E" +
    "\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x05\x9E\u0C3E\n\x9E\x03\x9F\x03\x9F\x03" +
    "\x9F\x03\x9F\x03\x9F\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03" +
    "\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x05\xA0\u0C52\n\xA0" +
    "\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x05\xA1\u0C5B" +
    "\n\xA1\x03\xA2\x03\xA2\x05\xA2\u0C5F\n\xA2\x03\xA2\x03\xA2\x03\xA2\x07" +
    "\xA2\u0C64\n\xA2\f\xA2\x0E\xA2\u0C67\v\xA2\x03\xA3\x03\xA3\x05\xA3\u0C6B" +
    "\n\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x05\xA4" +
    "\u0C74\n\xA4\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x05\xA5\u0C7B\n\xA5" +
    "\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA7\x03\xA7\x03\xA8\x03\xA8\x03\xA8" +
    "\x05\xA8\u0C86\n\xA8\x03\xA9\x03\xA9\x03\xA9\x07\xA9\u0C8B\n\xA9\f\xA9" +
    "\x0E\xA9\u0C8E\v\xA9\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x03" +
    "\xAA\x03\xAA\x05\xAA\u0C98\n\xAA\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB" +
    "\x05\xAB\u0C9F\n\xAB\x03\xAB\x03\xAB\x05\xAB\u0CA3\n\xAB\x03\xAB\x03\xAB" +
    "\x03\xAB\x03\xAB\x05\xAB\u0CA9\n\xAB\x03\xAC\x03\xAC\x03\xAC\x05\xAC\u0CAE" +
    "\n\xAC\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u0CB3\n\xAD\x03\xAE\x03\xAE\x05" +
    "\xAE\u0CB7\n\xAE\x03\xAE\x03\xAE\x07\xAE\u0CBB\n\xAE\f\xAE\x0E\xAE\u0CBE" +
    "\v\xAE\x03\xAF\x03\xAF\x03\xAF\x05\xAF\u0CC3\n\xAF\x05\xAF\u0CC5\n\xAF" +
    "\x03\xB0\x05\xB0\u0CC8\n\xB0\x03\xB0\x03\xB0\x05\xB0\u0CCC\n\xB0\x03\xB1" +
    "\x03\xB1\x03\xB1\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x05\xB2\u0CD6" +
    "\n\xB2\x03\xB2\x03\xB2\x03\xB2\x05\xB2\u0CDB\n\xB2\x03\xB2\x07\xB2\u0CDE" +
    "\n\xB2\f\xB2\x0E\xB2\u0CE1\v\xB2\x03\xB3\x03\xB3\x07\xB3\u0CE5\n\xB3\f" +
    "\xB3\x0E\xB3\u0CE8\v\xB3\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4" +
    "\x05\xB4\u0CF0\n\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x05" +
    "\xB4\u0CF8\n\xB4\x03\xB4\x03\xB4\x03\xB4\x05\xB4\u0CFD\n\xB4\x03\xB5\x03" +
    "\xB5\x05\xB5\u0D01\n\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x05\xB5\u0D07" +
    "\n\xB5\x03\xB5\x05\xB5\u0D0A\n\xB5\x03\xB6\x05\xB6\u0D0D\n\xB6\x03\xB6" +
    "\x03\xB6\x05\xB6\u0D11\n\xB6\x03\xB7\x03\xB7\x05\xB7\u0D15\n\xB7\x03\xB7" +
    "\x03\xB7\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x05\xB8\u0D1F" +
    "\n\xB8\x03\xB9\x03\xB9\x05\xB9\u0D23\n\xB9\x03\xB9\x05\xB9\u0D26\n\xB9" +
    "\x03\xB9\x05\xB9\u0D29\n\xB9\x03\xBA\x03\xBA\x03\xBA\x05\xBA\u0D2E\n\xBA" +
    "\x03\xBA\x03\xBA\x03\xBB\x03\xBB\x05\xBB\u0D34\n\xBB\x03\xBB\x03\xBB\x05" +
    "\xBB\u0D38\n\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u0D3E\n\xBB\x03" +
    "\xBB\x05\xBB\u0D41\n\xBB\x05\xBB\u0D43\n\xBB\x03\xBC\x03\xBC\x03\xBC\x05" +
    "\xBC\u0D48\n\xBC\x03\xBC\x03\xBC\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD" +
    "\x03\xBD\x03\xBD\x03\xBD\x05\xBD\u0D54\n\xBD\x03\xBE\x03\xBE\x03\xBE\x03" +
    "\xBE\x03\xBE\x07\xBE\u0D5B\n\xBE\f\xBE\x0E\xBE\u0D5E\v\xBE\x03\xBE\x03" +
    "\xBE\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x05" +
    "\xBF\u0D6A\n\xBF\x03\xBF\x05\xBF\u0D6D\n\xBF\x03\xBF\x03\xBF\x03\xBF\x05" +
    "\xBF\u0D72\n\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u0D79" +
    "\n\xBF\x03\xC0\x03\xC0\x05\xC0\u0D7D\n\xC0\x03\xC0\x03\xC0\x05\xC0\u0D81" +
    "\n\xC0\x05\xC0\u0D83\n\xC0\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC2\x03" +
    "\xC2\x03\xC2\x03\xC2\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x05\xC3\u0D91\n\xC3" +
    "\x03\xC4\x03\xC4\x03\xC5\x03\xC5\x03\xC5\x05\xC5\u0D98\n\xC5\x03\xC5\x03" +
    "\xC5\x03\xC6\x03\xC6\x03\xC6\x07\xC6\u0D9F\n\xC6\f\xC6\x0E\xC6\u0DA2\v" +
    "\xC6\x03\xC7\x03\xC7\x03\xC7\x05\xC7\u0DA7\n\xC7\x03\xC7\x03\xC7\x03\xC7" +
    "\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x05\xC7\u0DB0\n\xC7\x03\xC7\x03\xC7\x05" +
    "\xC7\u0DB4\n\xC7\x03\xC7\x03\xC7\x05\xC7\u0DB8\n\xC7\x03\xC8\x03\xC8\x03" +
    "\xC9\x03\xC9\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u0DC2\n\xCA\x05\xCA" +
    "\u0DC4\n\xCA\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u0DCC" +
    "\n\xCB\x03\xCC\x03\xCC\x03\xCC\x07\xCC\u0DD1\n\xCC\f\xCC\x0E\xCC\u0DD4" +
    "\v\xCC\x03\xCD\x03\xCD\x05\xCD\u0DD8\n\xCD\x03\xCE\x03\xCE\x05\xCE\u0DDC" +
    "\n\xCE\x03\xCE\x03\xCE\x05\xCE\u0DE0\n\xCE\x03\xCE\x05\xCE\u0DE3\n\xCE" +
    "\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x05\xCE\u0DE9\n\xCE\x03\xCE\x05\xCE\u0DEC" +
    "\n\xCE\x03\xCE\x05\xCE\u0DEF\n\xCE\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x05" +
    "\xCF\u0DF5\n\xCF\x03\xD0\x03\xD0\x03\xD0\x07\xD0\u0DFA\n\xD0\f\xD0\x0E" +
    "\xD0\u0DFD\v\xD0\x03\xD0\x03\xD0\x05\xD0\u0E01\n\xD0\x03\xD0\x03\xD0\x05" +
    "\xD0\u0E05\n\xD0\x03\xD0\x05\xD0\u0E08\n\xD0\x03\xD0\x05\xD0\u0E0B\n\xD0" +
    "\x03\xD0\x05\xD0\u0E0E\n\xD0\x05\xD0\u0E10\n\xD0\x03\xD1\x03\xD1\x05\xD1" +
    "\u0E14\n\xD1\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x05\xD2\u0E1C" +
    "\n\xD2\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x05\xD3\u0E22\n\xD3\x03\xD3\x03" +
    "\xD3\x05\xD3\u0E26\n\xD3\x03\xD3\x03\xD3\x03\xD3\x05\xD3\u0E2B\n\xD3\x03" +
    "\xD3\x05\xD3\u0E2E\n\xD3\x03\xD3\x05\xD3\u0E31\n\xD3\x03\xD3\x05\xD3\u0E34" +
    "\n\xD3\x05\xD3\u0E36\n\xD3\x03\xD3\x03\xD3\x03\xD3\x05\xD3\u0E3B\n\xD3" +
    "\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x07\xD4\u0E42\n\xD4\f\xD4\x0E" +
    "\xD4\u0E45\v\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD4" +
    "\x03\xD4\x03\xD4\x03\xD4\x05\xD4\u0E51\n\xD4\x05\xD4\u0E53\n\xD4\x03\xD5" +
    "\x03\xD5\x05\xD5\u0E57\n\xD5\x03\xD5\x03\xD5\x03\xD6\x03\xD6\x05\xD6\u0E5D" +
    "\n\xD6\x03\xD6\x05\xD6\u0E60\n\xD6\x03\xD6\x05\xD6\u0E63\n\xD6\x03\xD7" +
    "\x03\xD7\x03\xD7\x03\xD7\x05\xD7\u0E69\n\xD7\x03\xD7\x03\xD7\x03\xD7\x03" +
    "\xD7\x03\xD7\x05\xD7\u0E70\n\xD7\x05\xD7\u0E72\n\xD7\x03\xD7\x03\xD7\x03" +
    "\xD7\x03\xD7\x03\xD7\x03\xD7\x05\xD7\u0E7A\n\xD7\x03\xD7\x03\xD7\x03\xD7" +
    "\x03\xD7\x05\xD7\u0E80\n\xD7\x03\xD8\x03\xD8\x03\xD8\x05\xD8\u0E85\n\xD8" +
    "\x03\xD8\x05\xD8\u0E88\n\xD8\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x05" +
    "\xD9\u0E8F\n\xD9\x05\xD9\u0E91\n\xD9\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03" +
    "\xDA\x03\xDA\x03\xDA\x05\xDA\u0E9A\n\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA" +
    "\x03\xDA\x07\xDA\u0EA1\n\xDA\f\xDA\x0E\xDA\u0EA4\v\xDA\x03\xDA\x03\xDA" +
    "\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x05\xDA\u0EAC\n\xDA\x03\xDA\x03\xDA\x03" +
    "\xDA\x03\xDA\x03\xDA\x03\xDA\x05\xDA\u0EB4\n\xDA\x03\xDB\x03\xDB\x05\xDB" +
    "\u0EB8\n\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x05\xDB\u0EBF\n\xDB" +
    "\x03\xDB\x05\xDB\u0EC2\n\xDB\x05\xDB\u0EC4\n\xDB\x03\xDC\x03\xDC\x03\xDC" +
    "\x03\xDC\x03\xDC\x03\xDC\x05\xDC\u0ECC\n\xDC\x03\xDD\x03\xDD\x03\xDD\x03" +
    "\xDD\x05\xDD\u0ED2\n\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDE\x03\xDE\x03\xDE" +
    "\x03\xDE\x03\xDE\x05\xDE\u0EDC\n\xDE\x03\xDF\x03\xDF\x03\xDF\x07\xDF\u0EE1" +
    "\n\xDF\f\xDF\x0E\xDF\u0EE4\v\xDF\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0" +
    "\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0" +
    "\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0" +
    "\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0" +
    "\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0" +
    "\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0" +
    "\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0" +
    "\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0" +
    "\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0" +
    "\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x05\xE0" +
    "\u0F3B\n\xE0\x03\xE1\x03\xE1\x05\xE1\u0F3F\n\xE1\x03\xE2\x03\xE2\x05\xE2" +
    "\u0F43\n\xE2\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03" +
    "\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x05\xE3\u0F51\n\xE3\x03\xE4\x03\xE4" +
    "\x03\xE4\x03\xE4\x07\xE4\u0F57\n\xE4\f\xE4\x0E\xE4\u0F5A\v\xE4\x05\xE4" +
    "\u0F5C\n\xE4\x03\xE4\x03\xE4\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03" +
    "\xE5\x07\xE5\u0F66\n\xE5\f\xE5\x0E\xE5\u0F69\v\xE5\x03\xE5\x03\xE5\x05" +
    "\xE5\u0F6D\n\xE5\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x05\xE6\u0F73\n\xE6\x03" +
    "\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x05\xE6\u0F7A\n\xE6\x03\xE6\x03\xE6" +
    "\x03\xE6\x03\xE6\x03\xE6\x05\xE6\u0F81\n\xE6\x03\xE6\x03\xE6\x03\xE6\x03" +
    "\xE6\x03\xE6\x05\xE6\u0F88\n\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6" +
    "\x05\xE6\u0F8F\n\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x05\xE6\u0F96" +
    "\n\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x05\xE6\u0F9D\n\xE6\x03" +
    "\xE6\x05\xE6\u0FA0\n\xE6\x03\xE7\x03\xE7\x03\xE7\x07\xE7\u0FA5\n\xE7\f" +
    "\xE7\x0E\xE7\u0FA8\v\xE7\x03\xE8\x03\xE8\x03\xE8\x07\xE8\u0FAD\n\xE8\f" +
    "\xE8\x0E\xE8\u0FB0\v\xE8\x03\xE9\x03\xE9\x03\xE9\x07\xE9\u0FB5\n\xE9\f" +
    "\xE9\x0E\xE9\u0FB8\v\xE9\x03\xEA\x03\xEA\x03\xEB\x03\xEB\x03\xEB\x07\xEB" +
    "\u0FBF\n\xEB\f\xEB\x0E\xEB\u0FC2\v\xEB\x03\xEC\x03\xEC\x03\xEC\x05\xEC" +
    "\u0FC7\n\xEC\x03\xEC\x03\xEC\x05\xEC\u0FCB\n\xEC\x03\xEC\x03\xEC\x05\xEC" +
    "\u0FCF\n\xEC\x03\xEC\x03\xEC\x03\xEC\x05\xEC\u0FD4\n\xEC\x03\xEC\x05\xEC" +
    "\u0FD7\n\xEC\x05\xEC\u0FD9\n\xEC\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED" +
    "\x03\xED\x03\xED\x05\xED\u0FE2\n\xED\x03\xED\x03\xED\x07\xED\u0FE6\n\xED" +
    "\f\xED\x0E\xED\u0FE9\v\xED\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x05\xEE\u0FEF" +
    "\n\xEE\x03\xEE\x03\xEE\x03\xEE\x05\xEE\u0FF4\n\xEE\x03\xEE\x03\xEE\x03" +
    "\xEE\x05\xEE\u0FF9\n\xEE\x03\xEE\x03\xEE\x03\xEE\x05\xEE\u0FFE\n\xEE\x03" +
    "\xEE\x05\xEE\u1001\n\xEE\x03\xEF\x03\xEF\x03\xEF\x07\xEF\u1006\n\xEF\f" +
    "\xEF\x0E\xEF\u1009\v\xEF\x03\xF0\x03\xF0\x03\xF1\x03\xF1\x03\xF1\x03\xF2" +
    "\x03\xF2\x03\xF2\x03\xF2\x03\xF2\x05\xF2\u1015\n\xF2\x03\xF2\x03\xF2\x03" +
    "\xF2\x03\xF2\x05\xF2\u101B\n\xF2\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x05\xF3" +
    "\u1021\n\xF3\x03\xF4\x03\xF4\x03\xF4\x07\xF4\u1026\n\xF4\f\xF4\x0E\xF4" +
    "\u1029\v\xF4\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x05\xF5\u1030\n\xF5" +
    "\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x05\xF5\u1036\n\xF5\x03\xF5\x03\xF5\x03" +
    "\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x05\xF5\u1042" +
    "\n\xF5\x05\xF5\u1044\n\xF5\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x05\xF6\u104A" +
    "\n\xF6\x03\xF6\x03\xF6\x05\xF6\u104E\n\xF6\x05\xF6\u1050\n\xF6\x03\xF7" +
    "\x03\xF7\x05\xF7\u1054\n\xF7\x03\xF7\x03\xF7\x03\xF8\x03\xF8\x03\xF8\x03" +
    "\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x05\xF8\u1061\n\xF8\x03\xF9" +
    "\x03\xF9\x03\xF9\x03\xF9\x05\xF9\u1067\n\xF9\x03\xF9\x03\xF9\x03\xFA\x03" +
    "\xFA\x03\xFA\x03\xFA\x05\xFA\u106F\n\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA" +
    "\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA\u107A\n\xFA\x03\xFA\x03" +
    "\xFA\x05\xFA\u107E\n\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA" +
    "\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA\u108B\n\xFA\x03\xFA\x03" +
    "\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA\u1092\n\xFA\x03\xFA\x03\xFA\x03\xFA" +
    "\x03\xFA\x05\xFA\u1098\n\xFA\x05\xFA\u109A\n\xFA\x03\xFB\x03\xFB\x03\xFB" +
    "\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x05\xFC\u10A4\n\xFC\x03\xFC\x03" +
    "\xFC\x03\xFC\x03\xFC\x03\xFD\x03\xFD\x05\xFD\u10AC\n\xFD\x03\xFD\x05\xFD" +
    "\u10AF\n\xFD\x03\xFD\x07\xFD\u10B2\n\xFD\f\xFD\x0E\xFD\u10B5\v\xFD\x03" +
    "\xFD\x05\xFD\u10B8\n\xFD\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x05\xFE\u10BE" +
    "\n\xFE\x03\xFE\x05\xFE\u10C1\n\xFE\x03\xFF\x03\xFF\x03\xFF\x05\xFF\u10C6" +
    "\n\xFF\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03" +
    "\u0100\x03\u0100\x03\u0100\x06\u0100\u10D1\n\u0100\r\u0100\x0E\u0100\u10D2" +
    "\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101" +
    "\x03\u0101\x03\u0101\x03\u0101\x05\u0101\u10DF\n\u0101\x03\u0101\x03\u0101" +
    "\x03\u0101\x05\u0101\u10E4\n\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101" +
    "\x03\u0101\x03\u0101\x05\u0101\u10EC\n\u0101\x03\u0101\x03\u0101\x03\u0101" +
    "\x03\u0101\x05\u0101\u10F2\n\u0101\x05\u0101\u10F4\n\u0101\x05\u0101\u10F6" +
    "\n\u0101\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x05\u0102\u10FC\n\u0102" +
    "\x03\u0102\x03\u0102\x03\u0103\x03\u0103\x03\u0103\x03\u0103\x03\u0103" +
    "\x03\u0103\x03\u0103\x03\u0103\x05\u0103\u1108\n\u0103\x03\u0103\x03\u0103" +
    "\x03\u0103\x05\u0103\u110D\n\u0103\x05\u0103\u110F\n\u0103\x03\u0103\x03" +
    "\u0103\x05\u0103\u1113\n\u0103\x03\u0103\x03\u0103\x03\u0103\x03\u0103" +
    "\x05\u0103\u1119\n\u0103\x03\u0103\x05\u0103\u111C\n\u0103\x03\u0103\x05" +
    "\u0103\u111F\n\u0103\x03\u0103\x03\u0103\x03\u0103\x03\u0103\x03\u0103" +
    "\x03\u0103\x03\u0103\x03\u0103\x05\u0103\u1129\n\u0103\x05\u0103\u112B" +
    "\n\u0103\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x05\u0104\u1131\n\u0104" +
    "\x03\u0105\x03\u0105\x03\u0105\x06\u0105\u1136\n\u0105\r\u0105\x0E\u0105" +
    "\u1137\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x05\u0105\u113E\n\u0105" +
    "\x03\u0106\x03\u0106\x03\u0106\x03\u0107\x03\u0107\x03\u0107\x03\u0107" +
    "\x03\u0107\x05\u0107\u1148\n\u0107\x03\u0107\x03\u0107\x05\u0107\u114C" +
    "\n\u0107\x03\u0108\x03\u0108\x03\u0108\x05\u0108\u1151\n\u0108\x03\u0109" +
    "\x03\u0109\x03\u0109\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A" +
    "\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x07\u010A\u1160\n\u010A" +
    "\f\u010A\x0E\u010A\u1163\v\u010A\x03\u010B\x03\u010B\x03\u010B\x03\u010B" +
    "\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010B" +
    "\x03\u010B\x03\u010B\x05\u010B\u1172\n\u010B\x03\u010B\x03\u010B\x03\u010B" +
    "\x05\u010B\u1177\n\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010B" +
    "\x03\u010B\x05\u010B\u117F\n\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010B" +
    "\x03\u010B\x03\u010B\x05\u010B\u1187\n\u010B\x03\u010C\x03\u010C\x03\u010C" +
    "\x05\u010C\u118C\n\u010C\x03\u010C\x03\u010C\x03\u010C\x03\u010C\x05\u010C" +
    "\u1192\n\u010C\x03\u010C\x05\u010C\u1195\n\u010C\x05\u010C\u1197\n\u010C" +
    "\x03\u010D\x03\u010D\x03\u010E\x03\u010E\x03\u010E\x07\u010E\u119E\n\u010E" +
    "\f\u010E\x0E\u010E\u11A1\v\u010E\x03\u010F\x03\u010F\x03\u010F\x05\u010F" +
    "\u11A6\n\u010F\x03\u010F\x03\u010F\x03\u010F\x03\u010F\x05\u010F\u11AC" +
    "\n\u010F\x05\u010F\u11AE\n\u010F\x03\u010F\x03\u010F\x05\u010F\u11B2\n" +
    "\u010F\x03\u010F\x03\u010F\x03\u010F\x03\u010F\x03\u010F\x03\u010F\x03" +
    "\u010F\x03\u010F\x03\u010F\x05\u010F\u11BD\n\u010F\x03\u010F\x03\u010F" +
    "\x03\u010F\x03\u010F\x03\u010F\x03\u010F\x03\u010F\x03\u010F\x05\u010F" +
    "\u11C7\n\u010F\x03\u010F\x03\u010F\x03\u010F\x05\u010F\u11CC\n\u010F\x03" +
    "\u0110\x03\u0110\x03\u0110\x05\u0110\u11D1\n\u0110\x03\u0110\x03\u0110" +
    "\x03\u0110\x05\u0110\u11D6\n\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
    "\x03\u0110\x03\u0110\x05\u0110\u11DE\n\u0110\x03\u0111\x03\u0111\x05\u0111" +
    "\u11E2\n\u0111\x03\u0111\x07\u0111\u11E5\n\u0111\f\u0111\x0E\u0111\u11E8" +
    "\v\u0111\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x05" +
    "\u0112\u11F0\n\u0112\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x03\u0113" +
    "\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x05\u0113\u11FC\n\u0113" +
    "\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114" +
    "\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x05\u0114\u120A\n\u0114" +
    "\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114" +
    "\x05\u0114\u1213\n\u0114\x05\u0114\u1215\n\u0114\x03\u0115\x03\u0115\x03" +
    "\u0115\x07\u0115\u121A\n\u0115\f\u0115\x0E\u0115\u121D\v\u0115\x03\u0116" +
    "\x03\u0116\x03\u0116\x03\u0116\x05\u0116\u1223\n\u0116\x03\u0117\x03\u0117" +
    "\x05\u0117\u1227\n\u0117\x03\u0117\x03\u0117\x03\u0117\x03\u0117\x05\u0117" +
    "\u122D\n\u0117\x03\u0117\x03\u0117\x03\u0117\x03\u0117\x07\u0117\u1233" +
    "\n\u0117\f\u0117\x0E\u0117\u1236\v\u0117\x03\u0117\x03\u0117\x03\u0117" +
    "\x03\u0117\x05\u0117\u123C\n\u0117\x03\u0117\x03\u0117\x05\u0117\u1240" +
    "\n\u0117\x03\u0117\x03\u0117\x03\u0117\x03\u0117\x05\u0117\u1246\n\u0117" +
    "\x03\u0117\x03\u0117";
MySQLParser._serializedATNSegment2 = "\x03\u0117\x07\u0117\u124B\n\u0117\f\u0117\x0E\u0117\u124E\v\u0117\x05" +
    "\u0117\u1250\n\u0117\x03\u0118\x03\u0118\x03\u0118\x03\u0118\x03\u0118" +
    "\x03\u0118\x03\u0118\x05\u0118\u1259\n\u0118\x03\u0118\x03\u0118\x03\u0118" +
    "\x03\u0118\x05\u0118\u125F\n\u0118\x03\u0119\x03\u0119\x03\u0119\x05\u0119" +
    "\u1264\n\u0119\x03\u011A\x03\u011A\x03\u011B\x03\u011B\x03\u011B\x03\u011B" +
    "\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B" +
    "\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x07\u011B" +
    "\u1279\n\u011B\f\u011B\x0E\u011B\u127C\v\u011B\x05\u011B\u127E\n\u011B" +
    "\x03\u011C\x03\u011C\x03\u011C\x03\u011D\x03\u011D\x03\u011D\x03\u011D" +
    "\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D" +
    "\x05\u011D\u128E\n\u011D\x03\u011D\x03\u011D\x03\u011D\x05\u011D\u1293" +
    "\n\u011D\x03\u011D\x05\u011D\u1296\n\u011D\x03\u011D\x03\u011D\x05\u011D" +
    "\u129A\n\u011D\x03\u011D\x05\u011D\u129D\n\u011D\x03\u011D\x03\u011D\x03" +
    "\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x03" +
    "\u011D\x03\u011D\x03\u011D\x05\u011D\u12AB\n\u011D\x03\u011D\x03\u011D" +
    "\x03\u011D\x03\u011D\x05\u011D\u12B1\n\u011D\x03\u011D\x03\u011D\x03\u011D" +
    "\x05\u011D\u12B6\n\u011D\x03\u011D\x05\u011D\u12B9\n\u011D\x05\u011D\u12BB" +
    "\n\u011D\x03\u011E\x03\u011E\x05\u011E\u12BF\n\u011E\x03\u011E\x03\u011E" +
    "\x03\u011E\x05\u011E\u12C4\n\u011E\x05\u011E\u12C6\n\u011E\x03\u011F\x03" +
    "\u011F\x03\u011F\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03" +
    "\u0120\x03\u0120\x05\u0120\u12D2\n\u0120\x03\u0121\x03\u0121\x07\u0121" +
    "\u12D6\n\u0121\f\u0121\x0E\u0121\u12D9\v\u0121\x03\u0122\x03\u0122\x03" +
    "\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03" +
    "\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03" +
    "\u0122\x03\u0122\x03\u0122\x05\u0122\u12EE\n\u0122\x03\u0122\x03\u0122" +
    "\x05\u0122\u12F2\n\u0122\x05\u0122\u12F4\n\u0122\x03\u0123\x03\u0123\x03" +
    "\u0123\x03\u0123\x03\u0123\x03\u0123\x05\u0123\u12FC\n\u0123\x03\u0124" +
    "\x03\u0124\x05\u0124\u1300\n\u0124\x03\u0124\x03\u0124\x03\u0125\x03\u0125" +
    "\x03\u0125\x03\u0125\x03\u0125\x05\u0125\u1309\n\u0125\x03\u0126\x03\u0126" +
    "\x03\u0126\x03\u0126\x03\u0127\x03\u0127\x03\u0127\x03\u0127\x05\u0127" +
    "\u1313\n\u0127\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x05\u0128" +
    "\u131A\n\u0128\x03\u0128\x05\u0128\u131D\n\u0128\x03\u0128\x03\u0128\x05" +
    "\u0128\u1321\n\u0128\x03\u0128\x05\u0128\u1324\n\u0128\x03\u0128\x05\u0128" +
    "\u1327\n\u0128\x03\u0128\x03\u0128\x05\u0128\u132B\n\u0128\x03\u0128\x05" +
    "\u0128\u132E\n\u0128\x03\u0128\x03\u0128\x05\u0128\u1332\n\u0128\x03\u0128" +
    "\x05\u0128\u1335\n\u0128\x03\u0128\x03\u0128\x03\u0128\x05\u0128\u133A" +
    "\n\u0128\x03\u0128\x05\u0128\u133D\n\u0128\x03\u0128\x03\u0128\x03\u0128" +
    "\x05\u0128\u1342\n\u0128\x03\u0128\x05\u0128\u1345\n\u0128\x03\u0128\x03" +
    "\u0128\x03\u0128\x03\u0128\x05\u0128\u134B\n\u0128\x03\u0128\x03\u0128" +
    "\x05\u0128\u134F\n\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x05\u0128" +
    "\u1355\n\u0128\x03\u0128\x05\u0128\u1358\n\u0128\x03\u0128\x03\u0128\x03" +
    "\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x05\u0128\u1361\n\u0128" +
    "\x05\u0128\u1363\n\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x05\u0128" +
    "\u1369\n\u0128\x03\u0128\x03\u0128\x05\u0128\u136D\n\u0128\x03\u0128\x05" +
    "\u0128\u1370\n\u0128\x03\u0128\x05\u0128\u1373\n\u0128\x03\u0128\x03\u0128" +
    "\x05\u0128\u1377\n\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x05\u0128" +
    "\u137D\n\u0128\x03\u0128\x05\u0128\u1380\n\u0128\x03\u0128\x05\u0128\u1383" +
    "\n\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03" +
    "\u0128\x03\u0128\x05\u0128\u138D\n\u0128\x03\u0128\x03\u0128\x05\u0128" +
    "\u1391\n\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x07\u0128" +
    "\u1398\n\u0128\f\u0128\x0E\u0128\u139B\v\u0128\x05\u0128\u139D\n\u0128" +
    "\x03\u0128\x03\u0128\x03\u0128\x05\u0128\u13A2\n\u0128\x03\u0128\x05\u0128" +
    "\u13A5\n\u0128\x03\u0128\x05\u0128\u13A8\n\u0128\x03\u0128\x03\u0128\x05" +
    "\u0128\u13AC\n\u0128\x03\u0128\x05\u0128\u13AF\n\u0128\x03\u0128\x03\u0128" +
    "\x03\u0128\x05\u0128\u13B4\n\u0128\x03\u0128\x03\u0128\x05\u0128\u13B8" +
    "\n\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x05" +
    "\u0128\u13C0\n\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128" +
    "\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x05\u0128" +
    "\u13CD\n\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128" +
    "\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128" +
    "\x03\u0128\x03\u0128\x03\u0128\x05\u0128\u13DF\n\u0128\x03\u0128\x03\u0128" +
    "\x03\u0128\x05\u0128\u13E4\n\u0128\x03\u0128\x03\u0128\x03\u0128\x05\u0128" +
    "\u13E9\n\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128" +
    "\x05\u0128\u13F1\n\u0128\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x05\u0129" +
    "\u13F7\n\u0129\x05\u0129\u13F9\n\u0129\x03\u012A\x03\u012A\x05\u012A\u13FD" +
    "\n\u012A\x03\u012A\x05\u012A\u1400\n\u012A\x03\u012B\x03\u012B\x03\u012C" +
    "\x03\u012C\x03\u012C\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D" +
    "\x03\u012D\x03\u012D\x05\u012D\u140E\n\u012D\x03\u012E\x03\u012E\x03\u012E" +
    "\x03\u012E\x03\u012E\x03\u012E\x03\u012E\x03\u012E\x05\u012E\u1418\n\u012E" +
    "\x03\u012E\x03\u012E\x05\u012E\u141C\n\u012E\x03\u012E\x03\u012E\x03\u012E" +
    "\x03\u012E\x07\u012E\u1422\n\u012E\f\u012E\x0E\u012E\u1425\v\u012E\x05" +
    "\u012E\u1427\n\u012E\x03\u012E\x03\u012E\x05\u012E\u142B\n\u012E\x03\u012E" +
    "\x03\u012E\x03\u012E\x03\u012E\x03\u012E\x03\u012E\x03\u012E\x03\u012E" +
    "\x05\u012E\u1435\n\u012E\x03\u012F\x03\u012F\x05\u012F\u1439\n\u012F\x03" +
    "\u0130\x03\u0130\x03\u0130\x07\u0130\u143E\n\u0130\f\u0130\x0E\u0130\u1441" +
    "\v\u0130\x03\u0131\x03\u0131\x05\u0131\u1445\n\u0131\x03\u0132\x03\u0132" +
    "\x03\u0132\x03\u0132\x03\u0132\x03\u0132\x05\u0132\u144D\n\u0132\x03\u0133" +
    "\x03\u0133\x03\u0133\x05\u0133\u1452\n\u0133\x03\u0133\x03\u0133\x03\u0134" +
    "\x03\u0134\x05\u0134\u1458\n\u0134\x03\u0135\x03\u0135\x03\u0135\x07\u0135" +
    "\u145D\n\u0135\f\u0135\x0E\u0135\u1460\v\u0135\x03\u0136\x03\u0136\x05" +
    "\u0136\u1464\n\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x05\u0136" +
    "\u146A\n\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x05\u0136" +
    "\u1471\n\u0136\x03\u0137\x03\u0137\x03\u0138\x03\u0138\x03\u0138\x03\u0138" +
    "\x03\u0138\x03\u0138\x05\u0138\u147B\n\u0138\x05\u0138\u147D\n\u0138\x03" +
    "\u0139\x03\u0139\x03\u0139\x03\u0139\x03\u0139\x03\u0139\x05\u0139\u1485" +
    "\n\u0139\x03\u013A\x03\u013A\x03\u013A\x05\u013A\u148A\n\u013A\x03\u013A" +
    "\x03\u013A\x05\u013A\u148E\n\u013A\x03\u013A\x05\u013A\u1491\n\u013A\x03" +
    "\u013B\x03\u013B\x03\u013B\x07\u013B\u1496\n\u013B\f\u013B\x0E\u013B\u1499" +
    "\v\u013B\x03\u013C\x03\u013C\x05\u013C\u149D\n\u013C\x03\u013C\x03\u013C" +
    "\x05\u013C\u14A1\n\u013C\x03\u013D\x03\u013D\x03\u013D\x03\u013D\x03\u013D" +
    "\x03\u013E\x03\u013E\x03\u013E\x03\u013E\x05\u013E\u14AC\n\u013E\x03\u013F" +
    "\x03\u013F\x03\u013F\x03\u013F\x03\u013F\x03\u013F\x05\u013F\u14B4\n\u013F" +
    "\x03\u013F\x03\u013F\x05\u013F\u14B8\n\u013F\x03\u013F\x05\u013F\u14BB" +
    "\n\u013F\x03\u013F\x05\u013F\u14BE\n\u013F\x03\u0140\x03\u0140\x05\u0140" +
    "\u14C2\n\u0140\x03\u0140\x03\u0140\x05\u0140\u14C6\n\u0140\x03\u0140\x07" +
    "\u0140\u14C9\n\u0140\f\u0140\x0E\u0140\u14CC\v\u0140\x03\u0141\x03\u0141" +
    "\x03\u0141\x05\u0141\u14D1\n\u0141\x03\u0142\x03\u0142\x05\u0142\u14D5" +
    "\n\u0142\x03\u0142\x03\u0142\x03\u0143\x03\u0143\x03\u0144\x03\u0144\x03" +
    "\u0144\x03\u0144\x03\u0144\x05\u0144\u14E0\n\u0144\x03\u0144\x05\u0144" +
    "\u14E3\n\u0144\x03\u0144\x05\u0144\u14E6\n\u0144\x03\u0144\x05\u0144\u14E9" +
    "\n\u0144\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x05" +
    "\u0145\u14F1\n\u0145\x03\u0146\x03\u0146\x05\u0146\u14F5\n\u0146\x03\u0146" +
    "\x07\u0146\u14F8\n\u0146\f\u0146\x0E\u0146\u14FB\v\u0146\x03\u0147\x03" +
    "\u0147\x03\u0147\x03\u0147\x03\u0147\x05\u0147\u1502\n\u0147\x03\u0148" +
    "\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x05\u0148\u150A\n\u0148" +
    "\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x05\u0149\u1510\n\u0149\x03\u014A" +
    "\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014A" +
    "\x03\u014A\x03\u014A\x03\u014A\x05\u014A\u151D\n\u014A\x03\u014A\x03\u014A" +
    "\x03\u014B\x03\u014B\x03\u014B\x03\u014B\x03\u014B\x03\u014B\x05\u014B" +
    "\u1527\n\u014B\x03\u014B\x03\u014B\x03\u014B\x03\u014B\x05\u014B\u152D" +
    "\n\u014B\x03\u014C\x03\u014C\x03\u014C\x03\u014D\x03\u014D\x03\u014D\x03" +
    "\u014E\x03\u014E\x03\u014F\x03\u014F\x03\u014F\x03\u014F\x05\u014F\u153B" +
    "\n\u014F\x03\u014F\x05\u014F\u153E\n\u014F\x03\u014F\x03\u014F\x05\u014F" +
    "\u1542\n\u014F\x03\u014F\x03\u014F\x03\u014F\x03\u014F\x03\u014F\x03\u014F" +
    "\x03\u014F\x03\u014F\x03\u014F\x07\u014F\u154D\n\u014F\f\u014F\x0E\u014F" +
    "\u1550\v\u014F\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150" +
    "\x05\u0150\u1558\n\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150" +
    "\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x07\u0150\u1564\n\u0150" +
    "\f\u0150\x0E\u0150\u1567\v\u0150\x03\u0151\x03\u0151\x03\u0152\x03\u0152" +
    "\x05\u0152\u156D\n\u0152\x03\u0152\x03\u0152\x03\u0152\x03\u0152\x05\u0152" +
    "\u1573\n\u0152\x03\u0152\x03\u0152\x03\u0152\x03\u0152\x05\u0152\u1579" +
    "\n\u0152\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x05" +
    "\u0153\u1581\n\u0153\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x03\u0153" +
    "\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x05\u0153\u158C\n\u0153\x03\u0153" +
    "\x03\u0153\x05\u0153\u1590\n\u0153\x03\u0154\x03\u0154\x03\u0154\x03\u0154" +
    "\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154" +
    "\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154" +
    "\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154" +
    "\x03\u0154\x03\u0154\x07\u0154\u15AD\n\u0154\f\u0154\x0E\u0154\u15B0\v" +
    "\u0154\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x05\u0155\u15B6\n\u0155" +
    "\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155" +
    "\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155" +
    "\x03\u0155\x05\u0155\u15C7\n\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155" +
    "\x03\u0155\x05\u0155\u15CE\n\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155" +
    "\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155" +
    "\x03\u0155\x05\u0155\u15DC\n\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155" +
    "\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x05\u0155" +
    "\u15E8\n\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x05\u0155\u15EE" +
    "\n\u0155\x03\u0155\x03\u0155\x03\u0155\x06\u0155\u15F3\n\u0155\r\u0155" +
    "\x0E\u0155\u15F4\x03\u0155\x05\u0155\u15F8\n\u0155\x03\u0155\x03\u0155" +
    "\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155" +
    "\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155" +
    "\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155" +
    "\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155" +
    "\x03\u0155\x03\u0155\x05\u0155\u161A\n\u0155\x03\u0155\x03\u0155\x03\u0155" +
    "\x03\u0155\x03\u0155\x03\u0155\x07\u0155\u1622\n\u0155\f\u0155\x0E\u0155" +
    "\u1625\v\u0155\x03\u0156\x03\u0156\x03\u0156\x03\u0157\x03\u0157\x03\u0157" +
    "\x03\u0157\x03\u0157\x03\u0157\x05\u0157\u1630\n\u0157\x03\u0158\x03\u0158" +
    "\x03\u0158\x05\u0158\u1635\n\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158" +
    "\x05\u0158\u163B\n\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158" +
    "\x03\u0158\x05\u0158\u1643\n\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158" +
    "\x03\u0158\x05\u0158\u164A\n\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158" +
    "\x05\u0158\u1650\n\u0158\x03\u0158\x03\u0158\x03\u0158\x05\u0158\u1655" +
    "\n\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x05\u0158\u165B\n\u0158" +
    "\x03\u0158\x03\u0158\x03\u0158\x05\u0158\u1660\n\u0158\x03\u0158\x03\u0158" +
    "\x03\u0158\x05\u0158\u1665\n\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158" +
    "\x05\u0158\u166B\n\u0158\x03\u0158\x03\u0158\x03\u0158\x05\u0158\u1670" +
    "\n\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x05\u0158\u1676\n\u0158" +
    "\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x05\u0158" +
    "\u167E\n\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158" +
    "\x05\u0158\u1686\n\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158" +
    "\x03\u0158\x05\u0158\u168E\n\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158" +
    "\x03\u0158\x03\u0158\x05\u0158\u1696\n\u0158\x03\u0158\x03\u0158\x03\u0158" +
    "\x05\u0158\u169B\n\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x05\u0158" +
    "\u16A1\n\u0158\x03\u0158\x03\u0158\x03\u0158\x05\u0158\u16A6\n\u0158\x03" +
    "\u0158\x03\u0158\x05\u0158\u16AA\n\u0158\x03\u0158\x03\u0158\x05\u0158" +
    "\u16AE\n\u0158\x03\u0158\x03\u0158\x03\u0158\x05\u0158\u16B3\n\u0158\x05" +
    "\u0158\u16B5\n\u0158\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159" +
    "\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A" +
    "\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x05\u015A\u16C8\n\u015A" +
    "\x03\u015A\x03\u015A\x05\u015A\u16CC\n\u015A\x03\u015A\x03\u015A\x03\u015A" +
    "\x03\u015A\x03\u015A\x05\u015A\u16D3\n\u015A\x03\u015A\x03\u015A\x03\u015A" +
    "\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A" +
    "\x05\u015A\u16DF\n\u015A\x03\u015A\x05\u015A\u16E2\n\u015A\x03\u015A\x03" +
    "\u015A\x05\u015A\u16E6\n\u015A\x03\u015B\x03\u015B\x03\u015B\x05\u015B" +
    "\u16EB\n\u015B\x03\u015C\x03\u015C\x03\u015C\x05\u015C\u16F0\n\u015C\x03" +
    "\u015C\x03\u015C\x05\u015C\u16F4\n\u015C\x03\u015D\x03\u015D\x03\u015D" +
    "\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x05\u015E\u16FE\n\u015E" +
    "\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E" +
    "\x05\u015E\u1707\n\u015E\x05\u015E\u1709\n\u015E\x03\u015F\x05\u015F\u170C" +
    "\n\u015F\x03\u015F\x03\u015F\x03\u0160\x03\u0160\x03\u0160\x03\u0160\x03" +
    "\u0160\x05\u0160\u1715\n\u0160\x03\u0161\x03\u0161\x03\u0161\x07\u0161" +
    "\u171A\n\u0161\f\u0161\x0E\u0161\u171D\v\u0161\x03\u0162\x03\u0162\x03" +
    "\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03" +
    "\u0162\x05\u0162\u1729\n\u0162\x03\u0162\x03\u0162\x03\u0162\x05\u0162" +
    "\u172E\n\u0162\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x05\u0163" +
    "\u1735\n\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x05\u0163\u173B" +
    "\n\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03" +
    "\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03" +
    "\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03" +
    "\u0163\x03\u0163\x06\u0163\u1753\n\u0163\r\u0163\x0E\u0163\u1754\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x05\u0163\u1774\n\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x05\u0163" +
    "\u1788\n\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x05\u0163\u178E" +
    "\n\u0163\x03\u0163\x03\u0163\x05\u0163\u1792\n\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x05\u0163\u17AD\n\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x05\u0163\u17B9\n\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x05\u0163" +
    "\u17C6\n\u0163\x03\u0163\x03\u0163\x05\u0163\u17CA\n\u0163\x03\u0163\x03" +
    "\u0163\x05\u0163\u17CE\n\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x05\u0163\u17EA\n\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x05\u0163\u1822\n\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x05\u0163\u182C\n\u0163\x03\u0163" +
    "\x03\u0163\x05\u0163\u1830\n\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x05\u0163" +
    "\u183C\n\u0163\x03\u0163\x03\u0163\x03\u0163\x05\u0163\u1841\n\u0163\x03" +
    "\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03" +
    "\u0164\x03\u0164\x03\u0164\x03\u0164\x05\u0164\u184E\n\u0164\x03\u0164" +
    "\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
    "\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
    "\x03\u0164\x03\u0164\x03\u0164\x05\u0164\u1862\n\u0164\x03\u0165\x03\u0165" +
    "\x05\u0165\u1866\n\u0165\x03\u0165\x03\u0165\x03\u0166\x03\u0166\x03\u0166" +
    "\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167" +
    "\x03\u0167\x07\u0167\u1875\n\u0167\f\u0167\x0E\u0167\u1878\v\u0167\x05" +
    "\u0167\u187A\n\u0167\x03\u0168\x03\u0168\x03\u0168\x05\u0168\u187F\n\u0168" +
    "\x03\u0168\x05\u0168\u1882\n\u0168\x03\u0169\x03\u0169\x03\u016A\x03\u016A" +
    "\x03\u016A\x03\u016A\x03\u016A\x05\u016A\u188B\n\u016A\x03\u016A\x03\u016A" +
    "\x05\u016A\u188F\n\u016A\x03\u016A\x03\u016A\x03\u016A\x03\u016A\x05\u016A" +
    "\u1895\n\u016A\x03\u016A\x03\u016A\x03\u016A\x03\u016A\x05\u016A\u189B" +
    "\n\u016A\x03\u016A\x03\u016A\x05\u016A\u189F\n\u016A\x03\u016A\x03\u016A" +
    "\x03\u016B\x03\u016B\x03\u016B\x03\u016B\x03\u016B\x03\u016B\x03\u016B" +
    "\x05\u016B\u18AA\n\u016B\x03\u016B\x03\u016B\x03\u016B\x03\u016B\x05\u016B" +
    "\u18B0\n\u016B\x05\u016B\u18B2\n\u016B\x03\u016B\x03\u016B\x03\u016C\x03" +
    "\u016C\x03\u016C\x05\u016C\u18B9\n\u016C\x03\u016C\x03\u016C\x03\u016C" +
    "\x03\u016C\x03\u016C\x05\u016C\u18C0\n\u016C\x03\u016C\x03\u016C\x05\u016C" +
    "\u18C4\n\u016C\x03\u016D\x03\u016D\x03\u016D\x07\u016D\u18C9\n\u016D\f" +
    "\u016D\x0E\u016D\u18CC\v\u016D\x03\u016E\x03\u016E\x05\u016E\u18D0\n\u016E" +
    "\x03\u016F\x03\u016F\x03\u016F\x05\u016F\u18D5\n\u016F\x03\u016F\x05\u016F" +
    "\u18D8\n\u016F\x03\u0170\x03\u0170\x03\u0170\x05\u0170\u18DD\n\u0170\x03" +
    "\u0171\x03\u0171\x05\u0171\u18E1\n\u0171\x03\u0171\x03\u0171\x05\u0171" +
    "\u18E5\n\u0171\x03\u0172\x03\u0172\x03\u0172\x05\u0172\u18EA\n\u0172\x03" +
    "\u0172\x03\u0172\x03\u0172\x05\u0172\u18EF\n\u0172\x05\u0172\u18F1\n\u0172" +
    "\x03\u0172\x03\u0172\x05\u0172\u18F5\n\u0172\x03\u0173\x03\u0173\x03\u0173" +
    "\x03\u0174\x03\u0174\x03\u0174\x03\u0175\x03\u0175\x03\u0175\x03\u0176" +
    "\x03\u0176\x05\u0176\u1902\n\u0176\x03\u0176\x03\u0176\x05\u0176\u1906" +
    "\n\u0176\x03\u0176\x05\u0176\u1909\n\u0176\x03\u0176\x03\u0176\x05\u0176" +
    "\u190D\n\u0176\x03\u0176\x03\u0176\x05\u0176\u1911\n\u0176\x03\u0176\x03" +
    "\u0176\x05\u0176\u1915\n\u0176\x03\u0176\x03\u0176\x03\u0176\x05\u0176" +
    "\u191A\n\u0176\x03\u0176\x03\u0176\x05\u0176\u191E\n\u0176\x03\u0176\x03" +
    "\u0176\x05\u0176\u1922\n\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
    "\x03\u0176\x03\u0176\x03\u0176\x05\u0176\u192B\n\u0176\x05\u0176\u192D" +
    "\n\u0176\x03\u0177\x03\u0177\x03\u0177\x07\u0177\u1932\n\u0177\f\u0177" +
    "\x0E\u0177\u1935\v\u0177\x03\u0178\x03\u0178\x03\u0178\x05\u0178\u193A" +
    "\n\u0178\x03\u0179\x03\u0179\x03\u017A\x03\u017A\x03\u017B\x03\u017B\x05" +
    "\u017B\u1942\n\u017B\x03\u017C\x03\u017C\x03\u017D\x03\u017D\x03\u017D" +
    "\x03\u017D\x03\u017E\x03\u017E\x03\u017E\x03\u017E\x03\u017F\x03\u017F" +
    "\x03\u017F\x03\u017F\x03\u0180\x03\u0180\x03\u0180\x07\u0180\u1955\n\u0180" +
    "\f\u0180\x0E\u0180\u1958\v\u0180\x03\u0181\x03\u0181\x05\u0181\u195C\n" +
    "\u0181\x03\u0182\x03\u0182\x03\u0182\x07\u0182\u1961\n\u0182\f\u0182\x0E" +
    "\u0182\u1964\v\u0182\x03\u0183\x03\u0183\x03\u0184\x03\u0184\x03\u0184" +
    "\x03\u0184\x03\u0184\x03\u0185\x03\u0185\x03\u0185\x03\u0185\x03\u0185" +
    "\x03\u0185\x03\u0185\x03\u0185\x03\u0185\x03\u0185\x03\u0185\x03\u0185" +
    "\x03\u0185\x05\u0185\u197A\n\u0185\x03\u0186\x03\u0186\x03\u0186\x03\u0187" +
    "\x03\u0187\x03\u0187\x03\u0187\x03\u0187\x03\u0188\x03\u0188\x03\u0188" +
    "\x03\u0188\x03\u0188\x03\u0188\x05\u0188\u198A\n\u0188\x03\u0189\x03\u0189" +
    "\x03\u0189\x03\u018A\x03\u018A\x03\u018A\x06\u018A\u1992\n\u018A\r\u018A" +
    "\x0E\u018A\u1993\x03\u018B\x03\u018B\x05\u018B\u1998\n\u018B\x03\u018B" +
    "\x03\u018B\x03\u018B\x06\u018B\u199D\n\u018B\r\u018B\x0E\u018B\u199E\x03" +
    "\u018B\x05\u018B\u19A2\n\u018B\x03\u018B\x03\u018B\x03\u018B\x03\u018C" +
    "\x03\u018C\x03\u018C\x03\u018D\x03\u018D\x03\u018D\x05\u018D\u19AD\n\u018D" +
    "\x03\u018E\x03\u018E\x03\u018F\x03\u018F\x03\u018F\x03\u0190\x03\u0190" +
    "\x05\u0190\u19B6\n\u0190\x03\u0190\x05\u0190\u19B9\n\u0190\x03\u0190\x03" +
    "\u0190\x03\u0191\x03\u0191\x03\u0191\x05\u0191\u19C0\n\u0191\x03\u0192" +
    "\x03\u0192\x03\u0192\x05\u0192\u19C5\n\u0192\x03\u0193\x03\u0193\x03\u0193" +
    "\x03\u0193\x03\u0193\x03\u0194\x03\u0194\x03\u0194\x03\u0194\x03\u0194" +
    "\x03\u0194\x03\u0194\x03\u0195\x03\u0195\x03\u0195\x03\u0195\x03\u0195" +
    "\x03\u0195\x03\u0195\x03\u0196\x03\u0196\x03\u0196\x06\u0196\u19DD\n\u0196" +
    "\r\u0196\x0E\u0196\u19DE\x03\u0197\x03\u0197\x03\u0197\x03\u0197\x05\u0197" +
    "\u19E5\n\u0197\x03\u0198\x03\u0198\x03\u0198\x03\u0198\x05\u0198\u19EB" +
    "\n\u0198\x03\u0198\x03\u0198\x05\u0198\u19EF\n\u0198\x03\u0199\x03\u0199" +
    "\x03\u0199\x03\u0199\x03\u0199\x03\u0199\x03\u019A\x03\u019A\x05\u019A" +
    "\u19F9\n\u019A\x03\u019B\x03\u019B\x05\u019B\u19FD\n\u019B\x03\u019B\x03" +
    "\u019B\x03\u019C\x03\u019C\x03\u019C\x03\u019C\x03\u019C\x03\u019C\x03" +
    "\u019C\x07\u019C\u1A08\n\u019C\f\u019C\x0E\u019C\u1A0B\v\u019C\x03\u019C" +
    "\x03\u019C\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D" +
    "\x03\u019D\x05\u019D\u1A16\n\u019D\x03\u019E\x03\u019E\x03\u019E\x03\u019E" +
    "\x03\u019E\x03\u019E\x03\u019F\x03\u019F\x03\u019F\x03\u01A0\x03\u01A0" +
    "\x03\u01A0\x03\u01A1\x03\u01A1\x03\u01A1\x03\u01A1\x05\u01A1\u1A28\n\u01A1" +
    "\x03\u01A1\x03\u01A1\x03\u01A1\x03\u01A1\x07\u01A1\u1A2E\n\u01A1\f\u01A1" +
    "\x0E\u01A1\u1A31\v\u01A1\x03\u01A1\x03\u01A1\x03\u01A1\x03\u01A1\x03\u01A1" +
    "\x07\u01A1\u1A38\n\u01A1\f\u01A1\x0E\u01A1\u1A3B\v\u01A1\x05\u01A1\u1A3D" +
    "\n\u01A1\x03\u01A2\x03\u01A2\x03\u01A2\x05\u01A2\u1A42\n\u01A2\x03\u01A3" +
    "\x03\u01A3\x05\u01A3\u1A46\n\u01A3\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A4" +
    "\x03\u01A4\x05\u01A4\u1A4D\n\u01A4\x03\u01A4\x03\u01A4\x03\u01A4\x05\u01A4" +
    "\u1A52\n\u01A4\x03\u01A5\x03\u01A5\x03\u01A6\x03\u01A6\x03\u01A6\x05\u01A6" +
    "\u1A59\n\u01A6\x03\u01A6\x03\u01A6\x03\u01A6\x03\u01A6\x07\u01A6\u1A5F" +
    "\n\u01A6\f\u01A6\x0E\u01A6\u1A62\v\u01A6\x05\u01A6\u1A64\n\u01A6\x03\u01A7" +
    "\x03\u01A7\x03\u01A7\x05\u01A7\u1A69\n\u01A7\x03\u01A7\x05\u01A7\u1A6C" +
    "\n\u01A7\x03\u01A7\x03\u01A7\x03\u01A7\x03\u01A7\x07\u01A7\u1A72\n\u01A7" +
    "\f\u01A7\x0E\u01A7\u1A75\v\u01A7\x05\u01A7\u1A77\n\u01A7\x03\u01A8\x03" +
    "\u01A8\x03\u01A8\x03\u01A8\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01AA\x03" +
    "\u01AA\x03\u01AA\x03\u01AB\x03\u01AB\x05\u01AB\u1A85\n\u01AB\x03\u01AB" +
    "\x05\u01AB\u1A88\n\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AC" +
    "\x03\u01AC\x03\u01AC\x03\u01AC\x03\u01AC\x03\u01AC\x03\u01AC\x05\u01AC" +
    "\u1A95\n\u01AC\x03\u01AC\x03\u01AC\x05\u01AC\u1A99\n\u01AC\x05\u01AC\u1A9B" +
    "\n\u01AC\x03\u01AD\x03\u01AD\x03\u01AD\x05\u01AD\u1AA0\n\u01AD\x03\u01AE" +
    "\x03\u01AE\x03\u01AE\x05\u01AE\u1AA5\n\u01AE\x03\u01AF\x03\u01AF\x03\u01AF" +
    "\x03\u01B0\x05\u01B0\u1AAB\n\u01B0\x03\u01B0\x03\u01B0\x03\u01B1\x03\u01B1" +
    "\x05\u01B1\u1AB1\n\u01B1\x03\u01B1\x03\u01B1\x07\u01B1\u1AB5\n\u01B1\f" +
    "\u01B1\x0E\u01B1\u1AB8\v\u01B1\x03\u01B1\x03\u01B1\x05\u01B1\u1ABC\n\u01B1" +
    "\x03\u01B1\x05\u01B1\u1ABF\n\u01B1\x03\u01B1\x03\u01B1\x07\u01B1\u1AC3" +
    "\n\u01B1\f\u01B1\x0E\u01B1\u1AC6\v\u01B1\x03\u01B1\x03\u01B1\x05\u01B1" +
    "\u1ACA\n\u01B1\x03\u01B1\x05\u01B1\u1ACD\n\u01B1\x03\u01B1\x03\u01B1\x07" +
    "\u01B1\u1AD1\n\u01B1\f\u01B1\x0E\u01B1\u1AD4\v\u01B1\x03\u01B1\x05\u01B1" +
    "\u1AD7\n\u01B1\x03\u01B1\x03\u01B1\x03\u01B1\x03\u01B1\x05\u01B1\u1ADD" +
    "\n\u01B1\x05\u01B1\u1ADF\n\u01B1\x03\u01B1\x05\u01B1\u1AE2\n\u01B1\x03" +
    "\u01B1\x03\u01B1\x07\u01B1\u1AE6\n\u01B1\f\u01B1\x0E\u01B1\u1AE9\v\u01B1" +
    "\x03\u01B1\x03\u01B1\x03\u01B1\x05\u01B1\u1AEE\n\u01B1\x03\u01B1\x03\u01B1" +
    "\x03\u01B1\x03\u01B1\x03\u01B1\x03\u01B1\x05\u01B1\u1AF6\n\u01B1\x05\u01B1" +
    "\u1AF8\n\u01B1\x05\u01B1\u1AFA\n\u01B1\x03\u01B2\x03\u01B2\x05\u01B2\u1AFE" +
    "\n\u01B2\x03\u01B3\x03\u01B3\x07\u01B3\u1B02\n\u01B3\f\u01B3\x0E\u01B3" +
    "\u1B05\v\u01B3\x03\u01B3\x03\u01B3\x05\u01B3\u1B09\n\u01B3\x03\u01B3\x03" +
    "\u01B3\x05\u01B3\u1B0D\n\u01B3\x03\u01B3\x03\u01B3\x03\u01B3\x05\u01B3" +
    "\u1B12\n\u01B3\x03\u01B3\x03\u01B3\x07\u01B3\u1B16\n\u01B3\f\u01B3\x0E" +
    "\u01B3\u1B19\v\u01B3\x03\u01B3\x03\u01B3\x07\u01B3\u1B1D\n\u01B3\f\u01B3" +
    "\x0E\u01B3\u1B20\v\u01B3\x05\u01B3\u1B22\n\u01B3\x05\u01B3\u1B24\n\u01B3" +
    "\x03\u01B4\x05\u01B4\u1B27\n\u01B4\x03\u01B4\x03\u01B4\x03\u01B4\x03\u01B4" +
    "\x03\u01B4\x03\u01B4\x03\u01B4\x03\u01B4\x05\u01B4\u1B31\n\u01B4\x03\u01B4" +
    "\x03\u01B4\x05\u01B4\u1B35\n\u01B4\x03\u01B4\x03\u01B4\x03\u01B4\x03\u01B4" +
    "\x05\u01B4\u1B3B\n\u01B4\x03\u01B4\x03\u01B4\x03\u01B4\x03\u01B4\x03\u01B4" +
    "\x05\u01B4\u1B42\n\u01B4\x03\u01B4\x03\u01B4\x03\u01B4\x05\u01B4\u1B47" +
    "\n\u01B4\x03\u01B4\x03\u01B4\x03\u01B4\x03\u01B4\x03\u01B4\x03\u01B4\x03" +
    "\u01B4\x03\u01B4\x03\u01B4\x03\u01B4\x03\u01B4\x03\u01B4\x05\u01B4\u1B55" +
    "\n\u01B4";
MySQLParser._serializedATNSegment3 = "\x03\u01B4\x03\u01B4\x03\u01B4\x05\u01B4\u1B5A\n\u01B4\x03\u01B5\x03\u01B5" +
    "\x03\u01B6\x03\u01B6\x03\u01B7\x03\u01B7\x05\u01B7\u1B62\n\u01B7\x03\u01B7" +
    "\x03\u01B7\x03\u01B7\x05\u01B7\u1B67\n\u01B7\x03\u01B7\x03\u01B7\x05\u01B7" +
    "\u1B6B\n\u01B7\x03\u01B7\x05\u01B7\u1B6E\n\u01B7\x03\u01B8\x03\u01B8\x03" +
    "\u01B8\x05\u01B8\u1B73\n\u01B8\x03\u01B8\x03\u01B8\x05\u01B8\u1B77\n\u01B8" +
    "\x03\u01B8\x03\u01B8\x03\u01B8\x03\u01B8\x03\u01B8\x03\u01B8\x05\u01B8" +
    "\u1B7F\n\u01B8\x03\u01B8\x03\u01B8\x03\u01B8\x03\u01B8\x03\u01B8\x03\u01B8" +
    "\x05\u01B8\u1B87\n\u01B8\x05\u01B8\u1B89\n\u01B8\x03\u01B9\x03\u01B9\x03" +
    "\u01B9\x03\u01B9\x03\u01B9\x05\u01B9\u1B90\n\u01B9\x03\u01BA\x03\u01BA" +
    "\x03\u01BA\x03\u01BA\x07\u01BA\u1B96\n\u01BA\f\u01BA\x0E\u01BA\u1B99\v" +
    "\u01BA\x03\u01BA\x03\u01BA\x03\u01BB\x03\u01BB\x05\u01BB\u1B9F\n\u01BB" +
    "\x03\u01BB\x05\u01BB\u1BA2\n\u01BB\x03\u01BC\x03\u01BC\x03\u01BC\x03\u01BC" +
    "\x07\u01BC\u1BA8\n\u01BC\f\u01BC\x0E\u01BC\u1BAB\v\u01BC\x03\u01BC\x03" +
    "\u01BC\x03\u01BD\x03\u01BD\x03\u01BD\x05\u01BD\u1BB2\n\u01BD\x05\u01BD" +
    "\u1BB4\n\u01BD\x03\u01BE\x03\u01BE\x03\u01BE\x03\u01BE\x05\u01BE\u1BBA" +
    "\n\u01BE\x03\u01BF\x03\u01BF\x03\u01C0\x03\u01C0\x05\u01C0\u1BC0\n\u01C0" +
    "\x03\u01C1\x03\u01C1\x05\u01C1\u1BC4\n\u01C1\x03\u01C1\x03\u01C1\x03\u01C1" +
    "\x03\u01C1\x03\u01C1\x05\u01C1\u1BCB\n\u01C1\x03\u01C2\x03\u01C2\x03\u01C3" +
    "\x03\u01C3\x03\u01C3\x03\u01C4\x03\u01C4\x03\u01C4\x03\u01C4\x05\u01C4" +
    "\u1BD6\n\u01C4\x03\u01C5\x03\u01C5\x03\u01C6\x03\u01C6\x03\u01C6\x03\u01C7" +
    "\x03\u01C7\x05\u01C7\u1BDF\n\u01C7\x03\u01C7\x05\u01C7\u1BE2\n\u01C7\x03" +
    "\u01C7\x03\u01C7\x03\u01C7\x05\u01C7\u1BE7\n\u01C7\x05\u01C7\u1BE9\n\u01C7" +
    "\x03\u01C7\x05\u01C7\u1BEC\n\u01C7\x03\u01C7\x05\u01C7\u1BEF\n\u01C7\x03" +
    "\u01C7\x03\u01C7\x05\u01C7\u1BF3\n\u01C7\x03\u01C7\x05\u01C7\u1BF6\n\u01C7" +
    "\x03\u01C7\x03\u01C7\x05\u01C7\u1BFA\n\u01C7\x03\u01C7\x03\u01C7\x03\u01C7" +
    "\x05\u01C7\u1BFF\n\u01C7\x03\u01C7\x05\u01C7\u1C02\n\u01C7\x03\u01C7\x03" +
    "\u01C7\x05\u01C7\u1C06\n\u01C7\x03\u01C7\x05\u01C7\u1C09\n\u01C7\x03\u01C7" +
    "\x03\u01C7\x05\u01C7\u1C0D\n\u01C7\x03\u01C7\x03\u01C7\x03\u01C7\x05\u01C7" +
    "\u1C12\n\u01C7\x03\u01C7\x03\u01C7\x05\u01C7\u1C16\n\u01C7\x03\u01C7\x03" +
    "\u01C7\x03\u01C7\x03\u01C7\x03\u01C7\x03\u01C7\x03\u01C7\x03\u01C7\x03" +
    "\u01C7\x03\u01C7\x05\u01C7\u1C22\n\u01C7\x03\u01C7\x03\u01C7\x05\u01C7" +
    "\u1C26\n\u01C7\x03\u01C7\x03\u01C7\x03\u01C7\x03\u01C7\x05\u01C7\u1C2C" +
    "\n\u01C7\x03\u01C7\x05\u01C7\u1C2F\n\u01C7\x03\u01C7\x03\u01C7\x03\u01C7" +
    "\x05\u01C7\u1C34\n\u01C7\x03\u01C7\x03\u01C7\x05\u01C7\u1C38\n\u01C7\x03" +
    "\u01C7\x03\u01C7\x05\u01C7\u1C3C\n\u01C7\x03\u01C7\x03\u01C7\x03\u01C7" +
    "\x05\u01C7\u1C41\n\u01C7\x03\u01C7\x03\u01C7\x03\u01C7\x03\u01C7\x03\u01C7" +
    "\x03\u01C7\x03\u01C7\x05\u01C7\u1C4A\n\u01C7\x03\u01C7\x05\u01C7\u1C4D" +
    "\n\u01C7\x03\u01C7\x03\u01C7\x05\u01C7\u1C51\n\u01C7\x03\u01C7\x03\u01C7" +
    "\x05\u01C7\u1C55\n\u01C7\x03\u01C7\x05\u01C7\u1C58\n\u01C7\x03\u01C7\x03" +
    "\u01C7\x05\u01C7\u1C5C\n\u01C7\x03\u01C7\x03\u01C7\x05\u01C7\u1C60\n\u01C7" +
    "\x03\u01C7\x03\u01C7\x03\u01C7\x05\u01C7\u1C65\n\u01C7\x03\u01C7\x03\u01C7" +
    "\x03\u01C7\x05\u01C7\u1C6A\n\u01C7\x03\u01C7\x03\u01C7\x03\u01C7\x03\u01C7" +
    "\x05\u01C7\u1C70\n\u01C7\x03\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1C75" +
    "\n\u01C8\x03\u01C9\x03\u01C9\x03\u01C9\x05\u01C9\u1C7A\n\u01C9\x05\u01C9" +
    "\u1C7C\n\u01C9\x03\u01CA\x03\u01CA\x03\u01CA\x05\u01CA\u1C81\n\u01CA\x03" +
    "\u01CA\x03\u01CA\x03\u01CB\x06\u01CB\u1C86\n\u01CB\r\u01CB\x0E\u01CB\u1C87" +
    "\x03\u01CC\x03\u01CC\x03\u01CC\x03\u01CC\x03\u01CC\x03\u01CC\x05\u01CC" +
    "\u1C90\n\u01CC\x03\u01CC\x03\u01CC\x03\u01CC\x03\u01CC\x05\u01CC\u1C96" +
    "\n\u01CC\x05\u01CC\u1C98\n\u01CC\x03\u01CD\x03\u01CD\x05\u01CD\u1C9C\n" +
    "\u01CD\x03\u01CD\x03\u01CD\x05\u01CD\u1CA0\n\u01CD\x03\u01CE\x03\u01CE" +
    "\x05\u01CE\u1CA4\n\u01CE\x03\u01CE\x03\u01CE\x05\u01CE\u1CA8\n\u01CE\x03" +
    "\u01CF\x03\u01CF\x03\u01CF\x03\u01CF\x03\u01D0\x03\u01D0\x03\u01D0\x03" +
    "\u01D0\x03\u01D1\x03\u01D1\x03\u01D1\x03\u01D1\x05\u01D1\u1CB6\n\u01D1" +
    "\x03\u01D2\x03\u01D2\x03\u01D2\x03\u01D2\x03\u01D2\x05\u01D2\u1CBD\n\u01D2" +
    "\x03\u01D3\x03\u01D3\x05\u01D3\u1CC1\n\u01D3\x03\u01D3\x07\u01D3\u1CC4" +
    "\n\u01D3\f\u01D3\x0E\u01D3\u1CC7\v\u01D3\x03\u01D4\x06\u01D4\u1CCA\n\u01D4" +
    "\r\u01D4\x0E\u01D4\u1CCB\x03\u01D5\x03\u01D5\x05\u01D5\u1CD0\n\u01D5\x03" +
    "\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x05\u01D5\u1CD6\n\u01D5\x03\u01D5" +
    "\x03\u01D5\x05\u01D5\u1CDA\n\u01D5\x03\u01D5\x03\u01D5\x05\u01D5\u1CDE" +
    "\n\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x05\u01D5\u1CE3\n\u01D5\x03\u01D5" +
    "\x03\u01D5\x03\u01D5\x05\u01D5\u1CE8\n\u01D5\x03\u01D5\x03\u01D5\x03\u01D5" +
    "\x05\u01D5\u1CED\n\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x05\u01D5\u1CF2" +
    "\n\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x05\u01D5\u1CF8\n\u01D5" +
    "\x03\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x05\u01D5\u1CFE\n\u01D5\x03\u01D5" +
    "\x03\u01D5\x03\u01D5\x05\u01D5\u1D03\n\u01D5\x03\u01D5\x03\u01D5\x03\u01D5" +
    "\x05\u01D5\u1D08\n\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x05\u01D5\u1D0D" +
    "\n\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x05\u01D5\u1D12\n\u01D5\x03\u01D5" +
    "\x03\u01D5\x03\u01D5\x05\u01D5\u1D17\n\u01D5\x03\u01D5\x03\u01D5\x03\u01D5" +
    "\x05\u01D5\u1D1C\n\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x05\u01D5\u1D21" +
    "\n\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x03" +
    "\u01D5\x03\u01D5\x05\u01D5\u1D2B\n\u01D5\x03\u01D5\x03\u01D5\x03\u01D5" +
    "\x03\u01D5\x05\u01D5\u1D31\n\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x03\u01D5" +
    "\x05\u01D5\u1D37\n\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x03\u01D5\x05\u01D5" +
    "\u1D3D\n\u01D5\x03\u01D5\x05\u01D5\u1D40\n\u01D5\x03\u01D5\x03\u01D5\x03" +
    "\u01D5\x03\u01D5\x03\u01D5\x05\u01D5\u1D47\n\u01D5\x03\u01D5\x03\u01D5" +
    "\x03\u01D5\x05\u01D5\u1D4C\n\u01D5\x03\u01D5\x05\u01D5\u1D4F\n\u01D5\x03" +
    "\u01D6\x03\u01D6\x05\u01D6\u1D53\n\u01D6\x03\u01D7\x05\u01D7\u1D56\n\u01D7" +
    "\x03\u01D7\x03\u01D7\x05\u01D7\u1D5A\n\u01D7\x03\u01D7\x03\u01D7\x03\u01D8" +
    "\x05\u01D8\u1D5F\n\u01D8\x03\u01D8\x03\u01D8\x05\u01D8\u1D63\n\u01D8\x03" +
    "\u01D8\x03\u01D8\x03\u01D9\x05\u01D9\u1D68\n\u01D9\x03\u01D9\x03\u01D9" +
    "\x05\u01D9\u1D6C\n\u01D9\x03\u01D9\x03\u01D9\x03\u01DA\x03\u01DA\x03\u01DA" +
    "\x03\u01DA\x03\u01DA\x05\u01DA\u1D75\n\u01DA\x03\u01DA\x05\u01DA\u1D78" +
    "\n\u01DA\x03\u01DA\x05\u01DA\u1D7B\n\u01DA\x03\u01DB\x05\u01DB\u1D7E\n" +
    "\u01DB\x03\u01DB\x03\u01DB\x05\u01DB\u1D82\n\u01DB\x03\u01DB\x03\u01DB" +
    "\x05\u01DB\u1D86\n\u01DB\x03\u01DB\x03\u01DB\x05\u01DB\u1D8A\n\u01DB\x03" +
    "\u01DB\x03\u01DB\x03\u01DB\x03\u01DB\x03\u01DB\x03\u01DB\x03\u01DB\x03" +
    "\u01DB\x03\u01DB\x03\u01DB\x03\u01DB\x03\u01DB\x03\u01DB\x05\u01DB\u1D99" +
    "\n\u01DB\x03\u01DB\x05\u01DB\u1D9C\n\u01DB\x05\u01DB\u1D9E\n\u01DB\x03" +
    "\u01DC\x03\u01DC\x03\u01DC\x05\u01DC\u1DA3\n\u01DC\x03\u01DC\x03\u01DC" +
    "\x03\u01DC\x03\u01DC\x03\u01DC\x03\u01DC\x03\u01DC\x05\u01DC\u1DAC\n\u01DC" +
    "\x03\u01DC\x05\u01DC\u1DAF\n\u01DC\x03\u01DC\x03\u01DC\x05\u01DC\u1DB3" +
    "\n\u01DC\x03\u01DD\x03\u01DD\x03\u01DD\x03\u01DD\x03\u01DD\x03\u01DE\x03" +
    "\u01DE\x03\u01DE\x03\u01DE\x07\u01DE\u1DBE\n\u01DE\f\u01DE\x0E\u01DE\u1DC1" +
    "\v\u01DE\x03\u01DE\x03\u01DE\x03\u01DF\x03\u01DF\x03\u01DF\x03\u01DF\x03" +
    "\u01DF\x03\u01DF\x03\u01DF\x05\u01DF\u1DCC\n\u01DF\x03\u01DF\x03\u01DF" +
    "\x03\u01DF\x05\u01DF\u1DD1\n\u01DF\x03\u01DF\x07\u01DF\u1DD4\n\u01DF\f" +
    "\u01DF\x0E\u01DF\u1DD7\v\u01DF\x03\u01DF\x03\u01DF\x03\u01DF\x03\u01DF" +
    "\x07\u01DF\u1DDD\n\u01DF\f\u01DF\x0E\u01DF\u1DE0\v\u01DF\x03\u01DF\x03" +
    "\u01DF\x05\u01DF\u1DE4\n\u01DF\x03\u01E0\x03\u01E0\x03\u01E0\x03\u01E0" +
    "\x03\u01E0\x07\u01E0\u1DEB\n\u01E0\f\u01E0\x0E\u01E0\u1DEE\v\u01E0\x03" +
    "\u01E0\x03\u01E0\x05\u01E0\u1DF2\n\u01E0\x03\u01E1\x03\u01E1\x05\u01E1" +
    "\u1DF6\n\u01E1\x03\u01E1\x03\u01E1\x05\u01E1\u1DFA\n\u01E1\x03\u01E1\x03" +
    "\u01E1\x05\u01E1\u1DFE\n\u01E1\x03\u01E1\x03\u01E1\x03\u01E1\x05\u01E1" +
    "\u1E03\n\u01E1\x03\u01E1\x03\u01E1\x03\u01E1\x05\u01E1\u1E08\n\u01E1\x03" +
    "\u01E1\x03\u01E1\x03\u01E1\x03\u01E1\x05\u01E1\u1E0E\n\u01E1\x03\u01E1" +
    "\x03\u01E1\x03\u01E1\x05\u01E1\u1E13\n\u01E1\x03\u01E1\x05\u01E1\u1E16" +
    "\n\u01E1\x03\u01E2\x03\u01E2\x03\u01E2\x07\u01E2\u1E1B\n\u01E2\f\u01E2" +
    "\x0E\u01E2\u1E1E\v\u01E2\x03\u01E3\x03\u01E3\x03\u01E3\x03\u01E3\x07\u01E3" +
    "\u1E24\n\u01E3\f\u01E3\x0E\u01E3\u1E27\v\u01E3\x03\u01E3\x03\u01E3\x03" +
    "\u01E4\x03\u01E4\x05\u01E4\u1E2D\n\u01E4\x03\u01E5\x03\u01E5\x03\u01E5" +
    "\x03\u01E5\x03\u01E6\x03\u01E6\x03\u01E6\x03\u01E7\x03\u01E7\x03\u01E7" +
    "\x03\u01E7\x03\u01E8\x05\u01E8\u1E3B\n\u01E8\x03\u01E8\x03\u01E8\x03\u01E9" +
    "\x03\u01E9\x03\u01E9\x03\u01EA\x03\u01EA\x03\u01EA\x03\u01EB\x03\u01EB" +
    "\x05\u01EB\u1E47\n\u01EB\x03\u01EC\x03\u01EC\x03\u01EC\x03\u01EC\x03\u01EC" +
    "\x03\u01EC\x03\u01ED\x03\u01ED\x03\u01ED\x07\u01ED\u1E52\n\u01ED\f\u01ED" +
    "\x0E\u01ED\u1E55\v\u01ED\x03\u01EE\x03\u01EE\x03\u01EE\x07\u01EE\u1E5A" +
    "\n\u01EE\f\u01EE\x0E\u01EE\u1E5D\v\u01EE\x03\u01EF\x03\u01EF\x03\u01EF" +
    "\x03\u01EF\x05\u01EF\u1E63\n\u01EF\x03\u01F0\x03\u01F0\x03\u01F0\x03\u01F1" +
    "\x03\u01F1\x06\u01F1\u1E6A\n\u01F1\r\u01F1\x0E\u01F1\u1E6B\x03\u01F2\x03" +
    "\u01F2\x03\u01F2\x03\u01F2\x05\u01F2\u1E72\n\u01F2\x03\u01F2\x03\u01F2" +
    "\x03\u01F2\x03\u01F2\x03\u01F2\x03\u01F2\x05\u01F2\u1E7A\n\u01F2\x03\u01F3" +
    "\x03\u01F3\x06\u01F3\u1E7E\n\u01F3\r\u01F3\x0E\u01F3\u1E7F\x03\u01F4\x03" +
    "\u01F4\x03\u01F4\x03\u01F4\x03\u01F5\x03\u01F5\x03\u01F5\x07\u01F5\u1E89" +
    "\n\u01F5\f\u01F5\x0E\u01F5\u1E8C\v\u01F5\x03\u01F6\x03\u01F6\x03\u01F6" +
    "\x07\u01F6\u1E91\n\u01F6\f\u01F6\x0E\u01F6\u1E94\v\u01F6\x03\u01F7\x03" +
    "\u01F7\x03\u01F7\x07\u01F7\u1E99\n\u01F7\f\u01F7\x0E\u01F7\u1E9C\v\u01F7" +
    "\x03\u01F8\x03\u01F8\x03\u01F8\x03\u01F8\x03\u01F8\x05\u01F8\u1EA3\n\u01F8" +
    "\x03\u01F8\x03\u01F8\x03\u01F8\x03\u01F8\x03\u01F8\x03\u01F8\x03\u01F8" +
    "\x03\u01F8\x05\u01F8\u1EAD\n\u01F8\x03\u01F8\x03\u01F8\x03\u01F8\x05\u01F8" +
    "\u1EB2\n\u01F8\x03\u01F8\x03\u01F8\x03\u01F8\x05\u01F8\u1EB7\n\u01F8\x05" +
    "\u01F8\u1EB9\n\u01F8\x03\u01F9\x03\u01F9\x03\u01F9\x03\u01F9\x05\u01F9" +
    "\u1EBF\n\u01F9\x03\u01F9\x03\u01F9\x03\u01F9\x03\u01F9\x05\u01F9\u1EC5" +
    "\n\u01F9\x03\u01F9\x05\u01F9\u1EC8\n\u01F9\x03\u01F9\x03\u01F9\x03\u01F9" +
    "\x03\u01F9\x03\u01F9\x05\u01F9\u1ECF\n\u01F9\x05\u01F9\u1ED1\n\u01F9\x05" +
    "\u01F9\u1ED3\n\u01F9\x03\u01F9\x05\u01F9\u1ED6\n\u01F9\x05\u01F9\u1ED8" +
    "\n\u01F9\x03\u01FA\x03\u01FA\x03\u01FA\x03\u01FA\x03\u01FB\x03\u01FB\x03" +
    "\u01FB\x03\u01FB\x03\u01FC\x03\u01FC\x03\u01FC\x03\u01FD\x03\u01FD\x03" +
    "\u01FD\x03\u01FD\x05\u01FD\u1EE9\n\u01FD\x03\u01FE\x03\u01FE\x03\u01FE" +
    "\x05\u01FE\u1EEE\n\u01FE\x05\u01FE\u1EF0\n\u01FE\x03\u01FF\x03\u01FF\x03" +
    "\u01FF\x03\u0200\x03\u0200\x05\u0200\u1EF7\n\u0200\x03\u0201\x03\u0201" +
    "\x03\u0202\x03\u0202\x03\u0203\x03\u0203\x03\u0203\x03\u0203\x03\u0204" +
    "\x03\u0204\x03\u0204\x05\u0204\u1F04\n\u0204\x05\u0204\u1F06\n\u0204\x03" +
    "\u0205\x03\u0205\x03\u0205\x03\u0205\x05\u0205\u1F0C\n\u0205\x03\u0206" +
    "\x03\u0206\x03\u0207\x03\u0207\x03\u0207\x03\u0207\x07\u0207\u1F14\n\u0207" +
    "\f\u0207\x0E\u0207\u1F17\v\u0207\x03\u0207\x03\u0207\x03\u0208\x03\u0208" +
    "\x03\u0209\x03\u0209\x05\u0209\u1F1F\n\u0209\x03\u020A\x03\u020A\x03\u020B" +
    "\x03\u020B\x03\u020C\x03\u020C\x03\u020C\x03\u020C\x03\u020C\x05\u020C" +
    "\u1F2A\n\u020C\x03\u020C\x03\u020C\x03\u020D\x03\u020D\x03\u020E\x03\u020E" +
    "\x03\u020F\x03\u020F\x03\u0210\x03\u0210\x03\u0211\x03\u0211\x03\u0212" +
    "\x03\u0212\x03\u0213\x03\u0213\x03\u0214\x03\u0214\x03\u0215\x03\u0215" +
    "\x05\u0215\u1F40\n\u0215\x03\u0216\x03\u0216\x05\u0216\u1F44\n\u0216\x03" +
    "\u0217\x03\u0217\x03\u0218\x03\u0218\x03\u0219\x03\u0219\x03\u021A\x03" +
    "\u021A\x03\u021B\x03\u021B\x03\u021C\x03\u021C\x03\u021D\x03\u021D\x03" +
    "\u021E\x03\u021E\x03\u021F\x03\u021F\x03\u0220\x03\u0220\x03\u0221\x03" +
    "\u0221\x05\u0221\u1F5C\n\u0221\x03\u0222\x03\u0222\x03\u0222\x03\u0223" +
    "\x03\u0223\x03\u0223\x03\u0223\x03\u0223\x03\u0223\x05\u0223\u1F67\n\u0223" +
    "\x05\u0223\u1F69\n\u0223\x03\u0224\x03\u0224\x05\u0224\u1F6D\n\u0224\x03" +
    "\u0225\x03\u0225\x03\u0225\x07\u0225\u1F72\n\u0225\f\u0225\x0E\u0225\u1F75" +
    "\v\u0225\x03\u0226\x03\u0226\x03\u0226\x07\u0226\u1F7A\n\u0226\f\u0226" +
    "\x0E\u0226\u1F7D\v\u0226\x03\u0227\x03\u0227\x03\u0228\x03\u0228\x05\u0228" +
    "\u1F83\n\u0228\x03\u0229\x03\u0229\x03\u022A\x03\u022A\x05\u022A\u1F89" +
    "\n\u022A\x03\u022B\x03\u022B\x03\u022C\x03\u022C\x03\u022D\x03\u022D\x03" +
    "\u022E\x03\u022E\x03\u022F\x03\u022F\x03\u0230\x03\u0230\x03\u0230\x05" +
    "\u0230\u1F98\n\u0230\x03\u0231\x03\u0231\x05\u0231\u1F9C\n\u0231\x03\u0232" +
    "\x03\u0232\x03\u0232\x07\u0232\u1FA1\n\u0232\f\u0232\x0E\u0232\u1FA4\v" +
    "\u0232\x03\u0233\x03\u0233\x03\u0233\x03\u0233\x03\u0234\x03\u0234\x05" +
    "\u0234\u1FAC\n\u0234\x03\u0235\x03\u0235\x03\u0235\x05\u0235\u1FB1\n\u0235" +
    "\x05\u0235\u1FB3\n\u0235\x03\u0235\x03\u0235\x03\u0235\x03\u0235\x05\u0235" +
    "\u1FB9\n\u0235\x03\u0236\x03\u0236\x03\u0236\x03\u0237\x03\u0237\x03\u0238" +
    "\x03\u0238\x03\u0239\x03\u0239\x03\u023A\x03\u023A\x03\u023A\x03\u023A" +
    "\x03\u023A\x05\u023A\u1FC9\n\u023A\x03\u023B\x03\u023B\x03\u023B\x03\u023B" +
    "\x03\u023B\x03\u023B\x05\u023B\u1FD1\n\u023B\x03\u023B\x05\u023B\u1FD4" +
    "\n\u023B\x03\u023C\x03\u023C\x03\u023C\x03\u023C\x03\u023C\x05\u023C\u1FDB" +
    "\n\u023C\x03\u023D\x03\u023D\x03\u023D\x03\u023D\x07\u023D\u1FE1\n\u023D" +
    "\f\u023D\x0E\u023D\u1FE4\v\u023D\x03\u023D\x03\u023D\x03\u023E\x03\u023E" +
    "\x03\u023E\x05\u023E\u1FEB\n\u023E\x03\u023F\x03\u023F\x03\u023F\x05\u023F" +
    "\u1FF0\n\u023F\x03\u0240\x03\u0240\x03\u0240\x05\u0240\u1FF5\n\u0240\x03" +
    "\u0241\x05\u0241\u1FF8\n\u0241\x03\u0241\x03\u0241\x05\u0241\u1FFC\n\u0241" +
    "\x03\u0241\x07\u0241\u1FFF\n\u0241\f\u0241\x0E\u0241\u2002\v\u0241\x03" +
    "\u0242\x03\u0242\x03\u0243\x03\u0243\x03\u0243\x07\u0243\u2009\n\u0243" +
    "\f\u0243\x0E\u0243\u200C\v\u0243\x03\u0244\x03\u0244\x03\u0245\x03\u0245" +
    "\x03\u0246\x03\u0246\x03\u0247\x03\u0247\x03\u0247\x03\u0247\x03\u0247" +
    "\x03\u0247\x05\u0247\u201A\n\u0247\x03\u0248\x03\u0248\x05\u0248\u201E" +
    "\n\u0248\x03\u0249\x03\u0249\x03\u024A\x03\u024A\x03\u024A\x03\u024A\x03" +
    "\u024A\x03\u024A\x03\u024B\x03\u024B\x05\u024B\u202A\n\u024B\x03\u024C" +
    "\x03\u024C\x05\u024C\u202E\n\u024C\x03\u024D\x03\u024D\x05\u024D\u2032" +
    "\n\u024D\x03\u024E\x03\u024E\x05\u024E\u2036\n\u024E\x03\u024F\x03\u024F" +
    "\x03\u024F\x03\u0250\x03\u0250\x03\u0251\x03\u0251\x03\u0252\x03\u0252" +
    "\x03\u0252\x03\u0252\x03\u0252\x03\u0252\x05\u0252\u2045\n\u0252\x03\u0253" +
    "\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253" +
    "\x03\u0253\x03\u0253\x05\u0253\u2051\n\u0253\x03\u0254\x03\u0254\x03\u0254" +
    "\x03\u0254\x03\u0254\x03\u0254\x03\u0254\x03\u0254\x05\u0254\u205B\n\u0254" +
    "\x03\u0254\x03\u0254\x03\u0254\x03\u0254\x03\u0254\x05\u0254\u2062\n\u0254" +
    "\x05\u0254\u2064\n\u0254\x03\u0255\x03\u0255\x03\u0256\x03\u0256\x03\u0257" +
    "\x03\u0257\x03\u0257\x03\u0257\x03\u0257\x03\u0257\x03\u0257\x03\u0257" +
    "\x03\u0257\x03\u0257\x03\u0257\x05\u0257\u2075\n\u0257\x03\u0257\x03\u0257" +
    "\x03\u0257\x05\u0257\u207A\n\u0257\x05\u0257\u207C\n\u0257\x03\u0258\x03" +
    "\u0258\x03\u0259\x03\u0259\x03\u025A\x03\u025A\x03\u025A\x05\u025A\u2085" +
    "\n\u025A\x03\u025A\x03\u025A\x03\u025A\x05\u025A\u208A\n\u025A\x05\u025A" +
    "\u208C\n\u025A\x03\u025B\x03\u025B\x03\u025B\x03\u025B\x05\u025B\u2092" +
    "\n\u025B\x03\u025C\x03\u025C\x03\u025D\x03\u025D\x03\u025D\x03\u025D\x03" +
    "\u025D\x05\u025D\u209B\n\u025D\x03\u025E\x03\u025E\x03\u025E\x03\u025E" +
    "\x03\u025E\x03\u025E\x03\u025E\x03\u025E\x03\u025E\x05\u025E\u20A6\n\u025E" +
    "\x03\u025E\x02\x02\x07\u0114\u029C\u029E\u02A6\u02A8\u025F\x02\x02\x04" +
    "\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02" +
    "\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02." +
    "\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02" +
    "J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02" +
    "f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02\x80" +
    "\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92" +
    "\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4" +
    "\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6" +
    "\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8" +
    "\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA" +
    "\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC" +
    "\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE" +
    "\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02\u010A\x02\u010C" +
    "\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02\u0118\x02\u011A" +
    "\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02\u0126\x02\u0128" +
    "\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02\u0134\x02\u0136" +
    "\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02\u0142\x02\u0144" +
    "\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02\u0150\x02\u0152" +
    "\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C\x02\u015E\x02\u0160" +
    "\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A\x02\u016C\x02\u016E" +
    "\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178\x02\u017A\x02\u017C" +
    "\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186\x02\u0188\x02\u018A" +
    "\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194\x02\u0196\x02\u0198" +
    "\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2\x02\u01A4\x02\u01A6" +
    "\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0\x02\u01B2\x02\u01B4" +
    "\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE\x02\u01C0\x02\u01C2" +
    "\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA\x02\u01CC\x02\u01CE\x02\u01D0" +
    "\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8\x02\u01DA\x02\u01DC\x02\u01DE" +
    "\x02\u01E0\x02\u01E2\x02\u01E4\x02\u01E6\x02\u01E8\x02\u01EA\x02\u01EC" +
    "\x02\u01EE\x02\u01F0\x02\u01F2\x02\u01F4\x02\u01F6\x02\u01F8\x02\u01FA" +
    "\x02\u01FC\x02\u01FE\x02\u0200\x02\u0202\x02\u0204\x02\u0206\x02\u0208" +
    "\x02\u020A\x02\u020C\x02\u020E\x02\u0210\x02\u0212\x02\u0214\x02\u0216" +
    "\x02\u0218\x02\u021A\x02\u021C\x02\u021E\x02\u0220\x02\u0222\x02\u0224" +
    "\x02\u0226\x02\u0228\x02\u022A\x02\u022C\x02\u022E\x02\u0230\x02\u0232" +
    "\x02\u0234\x02\u0236\x02\u0238\x02\u023A\x02\u023C\x02\u023E\x02\u0240" +
    "\x02\u0242\x02\u0244\x02\u0246\x02\u0248\x02\u024A\x02\u024C\x02\u024E" +
    "\x02\u0250\x02\u0252\x02\u0254\x02\u0256\x02\u0258\x02\u025A\x02\u025C" +
    "\x02\u025E\x02\u0260\x02\u0262\x02\u0264\x02\u0266\x02\u0268\x02\u026A" +
    "\x02\u026C\x02\u026E\x02\u0270\x02\u0272\x02\u0274\x02\u0276\x02\u0278" +
    "\x02\u027A\x02\u027C\x02\u027E\x02\u0280\x02\u0282\x02\u0284\x02\u0286" +
    "\x02\u0288\x02\u028A\x02\u028C\x02\u028E\x02\u0290\x02\u0292\x02\u0294" +
    "\x02\u0296\x02\u0298\x02\u029A\x02\u029C\x02\u029E\x02\u02A0\x02\u02A2" +
    "\x02\u02A4\x02\u02A6\x02\u02A8\x02\u02AA\x02\u02AC\x02\u02AE\x02\u02B0" +
    "\x02\u02B2\x02\u02B4\x02\u02B6\x02\u02B8\x02\u02BA\x02\u02BC\x02\u02BE" +
    "\x02\u02C0\x02\u02C2\x02\u02C4\x02\u02C6\x02\u02C8\x02\u02CA\x02\u02CC" +
    "\x02\u02CE\x02\u02D0\x02\u02D2\x02\u02D4\x02\u02D6\x02\u02D8\x02\u02DA" +
    "\x02\u02DC\x02\u02DE\x02\u02E0\x02\u02E2\x02\u02E4\x02\u02E6\x02\u02E8" +
    "\x02\u02EA\x02\u02EC\x02\u02EE\x02\u02F0\x02\u02F2\x02\u02F4\x02\u02F6" +
    "\x02\u02F8\x02\u02FA\x02\u02FC\x02\u02FE\x02\u0300\x02\u0302\x02\u0304" +
    "\x02\u0306\x02\u0308\x02\u030A\x02\u030C\x02\u030E\x02\u0310\x02\u0312" +
    "\x02\u0314\x02\u0316\x02\u0318\x02\u031A\x02\u031C\x02\u031E\x02\u0320" +
    "\x02\u0322\x02\u0324\x02\u0326\x02\u0328\x02\u032A\x02\u032C\x02\u032E" +
    "\x02\u0330\x02\u0332\x02\u0334\x02\u0336\x02\u0338\x02\u033A\x02\u033C" +
    "\x02\u033E\x02\u0340\x02\u0342\x02\u0344\x02\u0346\x02\u0348\x02\u034A" +
    "\x02\u034C\x02\u034E\x02\u0350\x02\u0352\x02\u0354\x02\u0356\x02\u0358" +
    "\x02\u035A\x02\u035C\x02\u035E\x02\u0360\x02\u0362\x02\u0364\x02\u0366" +
    "\x02\u0368\x02\u036A\x02\u036C\x02\u036E\x02\u0370\x02\u0372\x02\u0374" +
    "\x02\u0376\x02\u0378\x02\u037A\x02\u037C\x02\u037E\x02\u0380\x02\u0382" +
    "\x02\u0384\x02\u0386\x02\u0388\x02\u038A\x02\u038C\x02\u038E\x02\u0390" +
    "\x02\u0392\x02\u0394\x02\u0396\x02\u0398\x02\u039A\x02\u039C\x02\u039E" +
    "\x02\u03A0\x02\u03A2\x02\u03A4\x02\u03A6\x02\u03A8\x02\u03AA\x02\u03AC" +
    "\x02\u03AE\x02\u03B0\x02\u03B2\x02\u03B4\x02\u03B6\x02\u03B8\x02\u03BA" +
    "\x02\u03BC\x02\u03BE\x02\u03C0\x02\u03C2\x02\u03C4\x02\u03C6\x02\u03C8" +
    "\x02\u03CA\x02\u03CC\x02\u03CE\x02\u03D0\x02\u03D2\x02\u03D4\x02\u03D6" +
    "\x02\u03D8\x02\u03DA\x02\u03DC\x02\u03DE\x02\u03E0\x02\u03E2\x02\u03E4" +
    "\x02\u03E6\x02\u03E8\x02\u03EA\x02\u03EC\x02\u03EE\x02\u03F0\x02\u03F2" +
    "\x02\u03F4\x02\u03F6\x02\u03F8\x02\u03FA\x02\u03FC\x02\u03FE\x02\u0400" +
    "\x02\u0402\x02\u0404\x02\u0406\x02\u0408\x02\u040A\x02\u040C\x02\u040E" +
    "\x02\u0410\x02\u0412\x02\u0414\x02\u0416\x02\u0418\x02\u041A\x02\u041C" +
    "\x02\u041E\x02\u0420\x02\u0422\x02\u0424\x02\u0426\x02\u0428\x02\u042A" +
    "\x02\u042C\x02\u042E\x02\u0430\x02\u0432\x02\u0434\x02\u0436\x02\u0438" +
    "\x02\u043A\x02\u043C\x02\u043E\x02\u0440\x02\u0442\x02\u0444\x02\u0446" +
    "\x02\u0448\x02\u044A\x02\u044C\x02\u044E\x02\u0450\x02\u0452\x02\u0454" +
    "\x02\u0456\x02\u0458\x02\u045A\x02\u045C\x02\u045E\x02\u0460\x02\u0462" +
    "\x02\u0464\x02\u0466\x02\u0468\x02\u046A\x02\u046C\x02\u046E\x02\u0470" +
    "\x02\u0472\x02\u0474\x02\u0476\x02\u0478\x02\u047A\x02\u047C\x02\u047E" +
    "\x02\u0480\x02\u0482\x02\u0484\x02\u0486\x02\u0488\x02\u048A\x02\u048C" +
    "\x02\u048E\x02\u0490\x02\u0492\x02\u0494\x02\u0496\x02\u0498\x02\u049A" +
    "\x02\u049C\x02\u049E\x02\u04A0\x02\u04A2\x02\u04A4\x02\u04A6\x02\u04A8" +
    "\x02\u04AA\x02\u04AC\x02\u04AE\x02\u04B0\x02\u04B2\x02\u04B4\x02\u04B6" +
    "\x02\u04B8\x02\u04BA\x02\x02\x92\x03\x02\u02F2\u02F3\x04\x02\u01B1\u01B1" +
    "\u028F\u028F\x04\x02\u01C0\u01C0\u0263\u0263\x03\x02\u02AC\u02AD\x04\x02" +
    "\u01AC\u01AC\u01E9\u01E9\x04\x02\u010F\u010F\u0259\u0259\x03\x02\u02F4" +
    "\u02F5\x04\x02OO\xB6\xB6\x04\x02\u020A\u020A\u0260\u0260\x06\x02\u014B" +
    "\u014B\u01DE\u01DE\u0213\u0213\u025A\u025A\x04\x02uu\xA3\xA3\x04\x02\u0113" +
    "\u0113\u016A\u016A\x04\x02\u0112\u0112\u0169\u0169\x04\x02\xEF\xEF\u0174" +
    "\u0174\x05\x02\xD9\xD9\u015A\u015A\u0168\u0168\x04\x02==\u01B4\u01B4\x05" +
    "\x02\u01E2\u01E2\u0210\u0210\u0299\u0299\x04\x02\x15\x15$$\x04\x02\u0156" +
    "\u0156\u0289\u0289\x05\x02\u010E\u010E\u020A\u020A\u022C\u022C\x04\x02" +
    "\x96\x96\xED\xED\x06\x02\x96\x96\xB0\xB0\xED\xED\u0105\u0105\x04\x02\u0181" +
    "\u0181\u0184\u0187\x05\x02\u01E1\u01E1\u0205\u0205\u022C\u022C\x04\x02" +
    "\u0172\u0172\u02A1\u02A1\x04\x02cc\u022C\u022C\x04\x02oo\u017A\u017A\x04" +
    "\x02\u012C\u012C\u0223\u0223\x04\x02\u01E1\u01E1\u022C\u022C\b\x02\u0141" +
    "\u0141\u01AD\u01AD\u01E6\u01E6\u0205\u0205\u0277\u0279\u0282\u0282\x04" +
    "\x02\xF4\xF4\u0198\u0198\x04\x02\u017E\u0180\u01A6\u01A6\x05\x02\u012C" +
    "\u012C\u0256\u0256\u02CB\u02CB\x04\x02\u01B2\u01B2\u01E3\u01E3\x04\x02" +
    "\u021F\u021F\u0266\u0266\x04\x02\u01CE\u01CE\u020D\u020D\x04\x02\u01AD" +
    "\u01AD\u01E6\u01E6\x04\x02\u01FA\u01FA\u020A\u020A\x04\x02\u020B\u020B" +
    "\u021B\u021B\x04\x02\u0247\u0247\u02AE\u02AE\x04\x02\x07\x0722\x04\x02" +
    "\u0125\u0125\u0219\u0219\x04\x02\xBB\xBB\u01B7\u01B7\x04\x02\u013D\u013D" +
    "\u013F\u013F\x04\x02\u0119\u0119\u0143\u0143\x03\x0223\x04\x02\x10\x10" +
    "\u01E9\u01E9\x05\x02\xF1\xF1\u0178\u0178\u027B\u027B\x04\x02\u0226\u0226" +
    "\u0297\u0297\x04\x02\u01E0\u01E0\u02EF\u02EF\x05\x02\u0166\u0166\u0254" +
    "\u0254\u0289\u0289\x06\x02\u0210\u0210\u025B\u025B\u0268\u0268\u0299\u0299" +
    "\x0F\x02\x13\x13::\x87\x87\x93\x93\u0107\u0107\u010B\u010B\u011A\u011A" +
    "\u0151\u0151\u01E2\u01E2\u01E9\u01E9\u020B\u020B\u0291\u0291\u029A\u029A" +
    "\x06\x02\u012B\u012B\u0158\u0158\u016E\u016E\u0171\u0171\x04\x02//UU\x04" +
    "\x02\u01CD\u01CD\u01E9\u01E9\x04\x02\xF1\xF1\u01E0\u01E0\x04\x02\x8C\x8C" +
    "\u010E\u010E\x07\x02RR\x8C\x8C\x8F\x8F\xD7\xD7\u010E\u010E\x05\x02\x8C" +
    "\x8C\u010E\u010E\u016F\u016F\x04\x02]]\u0167\u0167\x06\x02\u01AD\u01AD" +
    "\u01B7\u01B7\u01E0\u01E0\u0245\u0245\x04\x02\u012F\u012F\u02E6\u02E6\x05" +
    "\x02\xB9\xB9\xE5\xE5\u0149\u0149\x04\x02\u01FD\u01FD\u0214\u0214\x04\x02" +
    "II\u0116\u0116\x05\x02\xA5\xA5\u020B\u020B\u021A\u021A\x04\x02\x85\x85" +
    "\u0173\u0173\x04\x02\u0149\u0149\u0170\u0170\b\x02kk\xAA\xAA\xD8\xD8\u013C" +
    "\u013C\u0153\u0153\u01AD\u01AD\x04\x02dd\u010D\u010D\x07\x02ww\x9F\x9F" +
    "\u0106\u0106\u0149\u0149\u016D\u016D\x07\x02\x82\x82\x84\x84\x98\x98\u0139" +
    "\u0139\u01B7\u01B7\x04\x02\u016E\u016E\u02E6\u02E6\x04\x02zz\x91\x91\x04" +
    "\x02\u01E3\u01E4\u01F5\u01F5\x05\x02\u016B\u016B\u01F7\u01F7\u0293\u0293" +
    "\x04\x02\u0192\u0192\u01B0\u01B0\x04\x02\u0195\u0195\u024D\u024D\x04\x02" +
    "BB\u01AD\u01AD\x04\x02\u0181\u0181\u0183\u0188\x05\x02\u018B\u018D\u01E7" +
    "\u01E7\u023A\u023A\x03\x02\u0189\u018A\x03\x02\u0190\u0191\x04\x02\u0189" +
    "\u018A\u018F\u018F\x03\x02\u01B9\u01BB\x06\x02\u02C6\u02C7\u02D4\u02D4" +
    "\u02D6\u02D6\u02D8\u02D8\x04\x02\u02CC\u02CC\u02CE\u02CE\x04\x02\u02C9" +
    "\u02C9\u02CD\u02CD\x04\x02\x96\x96\xB0\xB0\x04\x02\u020A\u020A\u02D7\u02D7" +
    "\x04\x02<<\u014D\u014D\x03\x02\u01D7\u01D8\x03\x02\u0160\u0161\x05\x02" +
    "qr\u015F\u015F\u0162\u0162\x04\x02\u017C\u017C\u023F\u023F\x04\x02\u017C" +
    "\u017C\u018E\u018E\x07\x02\u01D9\u01DC\u0206\u0208\u0236\u0237\u0267\u0267" +
    "\u02B0\u02B0\v\x02ss\xA0\xA0\xDB\xDB\xDD\xDD\xE1\xE1\u010C\u010C\u0133" +
    "\u0133\u0175\u0175\u017B\u017B\x05\x02\u01CA\u01CA\u01F3\u01F3\u0294\u0294" +
    "\x04\x02\xF2\xF2\u012D\u012D\f\x02PPVVZZfhnn\xDA\xDA\xE6\xE6\u0132\u0132" +
    "\u014C\u014C\u0155\u0155\x04\x02\u0281\u0281\u02A8\u02A8\x05\x02\x7F\x7F" +
    "\x97\x97\u01E0\u01E0\x05\x02||\xD8\xD8\u01E0\u01E0\x05\x02\x92\x92\xFA" +
    "\xFA\u0137\u0137\x05\x02NN\x9E\x9E\u0130\u0130\x03\x02\u02B5\u02B6\x04" +
    "\x02\u0164\u0164\u029C\u029C\x07\x02\u01B6\u01B6\u0213\u0213\u0233\u0233" +
    "\u0271\u0271\u028D\u028D\x06\x02\x97\x97\u01DE\u01DE\u01F9\u01F9\u0243" +
    "\u0243";
MySQLParser._serializedATNSegment4 = "\x03\x02LM\x04\x02\u0227\u0227\u0232\u0232\x06\x02\x99\x9A\xB4\xB4\xE2" +
    "\xE4\u0102\u0103\x05\x02..\u0298\u0298\u02B1\u02B1\x03\x02\u0146\u0148" +
    "\x04\x02\v\v\u0157\u0157\b\x02^^``\x7F\x7F\x97\x97\u0114\u0114\u01E0\u01E0" +
    "\x05\x02\x1D\x1D\x96\x96\xB0\xB0\x04\x02||\xD8\xD8\x04\x02\xB5\xB5\u0256" +
    "\u0256\x04\x02\xBA\xBA\xDE\xDE\x04\x02oo\u020B\u020B\x05\x02\u020E\u020E" +
    "\u0214\u0214\u0250\u0250\x04\x02\u027C\u027C\u028A\u028A\x04\x02\u0244" +
    "\u0244\u0246\u0246\x04\x02\xB6\xB6\u0241\u0241\x04\x02\u0306\u0306\u0308" +
    "\u0308\x05\x02\u017E\u0180\u01A7\u01A7\u01A9\u01AA\x04\x02\u017E\u0180" +
    "\u01A7\u01A7\x04\x02\u017E\u0180\u01A9\u01AA\x03\x02\u01A7\u01A8\x04\x02" +
    "\u01F7\u01F7\u0293\u0293\x04\x02\u01A5\u01A5\u0242\u0242\x03\x02\u0181" +
    "\u0182\x07\x02\x9D\x9D\xB6\xB6\u0136\u0136\u02B2\u02B2\u02C1\u02C1\x05" +
    "\x02\x13\x13::\u02EA\u02EA\x10\x02\x04\x04\x07\v\r\x12\x14\x15\x18\x19" +
    "\x1B\x1D$%\'(*+./2699\xA4\xA4\u02C5\u02C5\v\x02\x87\x87\x93\x93\xF1\xF1" +
    "\u0107\u0107\u010B\u010B\u011A\u011A\u011D\u011D\u0151\u0151\u02E5\u02E5" +
    "=\x02\x03\x03\x05\x06\f\f\x16\x17\x1A\x1A\x1E!##&&)),-0178;@BCEikkmvx" +
    "\x86\x88\x92\x94\x9C\x9E\xA3\xA5\xA7\xA9\xB5\xB7\xD2\xD4\xF0\xF2\xF4\xF7" +
    "\u0106\u0108\u010A\u010C\u0112\u0114\u0119\u011B\u011C\u011E\u012B\u012D" +
    "\u012E\u0130\u0135\u0137\u013F\u0141\u0150\u0152\u0164\u0167\u017B\u01F1" +
    "\u01F1\u01F4\u01F4\u0247\u0247\u02A0\u02A0\u02AD\u02AD\u02B3\u02B6\u02B8" +
    "\u02B8\u02BD\u02BF\u02C2\u02C3\u02C8\u02C8\u02CA\u02CA\u02D1\u02D2\u02D5" +
    "\u02D5\u02D7\u02D7\u02D9\u02DA\u02DE\u02E4\u02E7\u02E9\u02EB\u02F5\u02F7" +
    "\u02FA\u02FC\u02FC\u02FF\u0302\b\x02\x03\x12\x149\u02B3\u02B3\u02B5\u02B6" +
    "\u02C5\u02C5\u02F0\u02F3\"\x02;@Bkm\x86\x88\x92\x94\xA3\xA5\xA7\xA9\xF0" +
    "\xF2\xF5\xF7\u0106\u0108\u010A\u010C\u0119\u011B\u011C\u011E\u012B\u012D" +
    "\u012E\u0130\u0165\u0167\u017B\u01AF\u01AF\u02B8\u02B8\u02BD\u02BF\u02C2" +
    "\u02C4\u02C8\u02C8\u02CA\u02CA\u02D1\u02D2\u02D5\u02D5\u02D7\u02D7\u02D9" +
    "\u02DA\u02DE\u02E4\u02E7\u02E8\u02EC\u02ED\u02EF\u02EF\u02F4\u02F5\u02F7" +
    "\u02F8\x07\x02ll\xA4\xA4\u012C\u012C\u012F\u012F\u0166\u0166\b\x02\u0151" +
    "\u0151\u01F1\u01F1\u01F4\u01F4\u0247\u0247\u02A0\u02A0\u02AD\u02AD\x02" +
    "\u24FF\x02\u04C8\x03\x02\x02\x02\x04\u04EC\x03\x02\x02\x02\x06\u04EE\x03" +
    "\x02\x02\x02\b\u050B\x03\x02\x02\x02\n\u051A\x03\x02\x02\x02\f\u0540\x03" +
    "\x02\x02\x02\x0E\u0549\x03\x02\x02\x02\x10\u0556\x03\x02\x02\x02\x12\u0558" +
    "\x03\x02\x02\x02\x14\u055D\x03\x02\x02\x02\x16\u0575\x03\x02\x02\x02\x18" +
    "\u057E\x03\x02\x02\x02\x1A\u0580\x03\x02\x02\x02\x1C\u058F\x03\x02\x02" +
    "\x02\x1E\u05F2\x03\x02\x02\x02 \u05F6\x03\x02\x02\x02\"\u0606\x03\x02" +
    "\x02\x02$\u068D\x03\x02\x02\x02&\u0692\x03\x02\x02\x02(\u0694\x03\x02" +
    "\x02\x02*\u0696\x03\x02\x02\x02,\u06A4\x03\x02\x02\x02.\u06AC\x03\x02" +
    "\x02\x020\u06BC\x03\x02\x02\x022\u06BE\x03\x02\x02\x024\u06C2\x03\x02" +
    "\x02\x026\u06C7\x03\x02\x02\x028\u06C9\x03\x02\x02\x02:\u06D4\x03\x02" +
    "\x02\x02<\u06F9\x03\x02\x02\x02>\u0701\x03\x02\x02\x02@\u070B\x03\x02" +
    "\x02\x02B\u070D\x03\x02\x02\x02D\u0721\x03\x02\x02\x02F\u072A\x03\x02" +
    "\x02\x02H\u072D\x03\x02\x02\x02J\u073A\x03\x02\x02\x02L\u073F\x03\x02" +
    "\x02\x02N\u0743\x03\x02\x02\x02P\u074A\x03\x02\x02\x02R\u075F\x03\x02" +
    "\x02\x02T\u076E\x03\x02\x02\x02V\u0771\x03\x02\x02\x02X\u0790\x03\x02" +
    "\x02\x02Z\u079A\x03\x02\x02\x02\\\u079D\x03\x02\x02\x02^\u07A6\x03\x02" +
    "\x02\x02`\u07A8\x03\x02\x02\x02b\u07B4\x03\x02\x02\x02d\u07CD\x03\x02" +
    "\x02\x02f\u07E8\x03\x02\x02\x02h\u07F6\x03\x02\x02\x02j\u07F9\x03\x02" +
    "\x02\x02l\u080E\x03\x02\x02\x02n\u0811\x03\x02\x02\x02p\u084A\x03\x02" +
    "\x02\x02r\u084C\x03\x02\x02\x02t\u0850\x03\x02\x02\x02v\u0859\x03\x02" +
    "\x02\x02x\u0869\x03\x02\x02\x02z\u086B\x03\x02\x02\x02|\u0873\x03\x02" +
    "\x02\x02~\u088D\x03\x02\x02\x02\x80\u088F\x03\x02\x02\x02\x82\u089B\x03" +
    "\x02\x02\x02\x84\u08AA\x03\x02\x02\x02\x86\u08AC\x03\x02\x02\x02\x88\u08AF" +
    "\x03\x02\x02\x02\x8A\u08C5\x03\x02\x02\x02\x8C\u08C7\x03\x02\x02\x02\x8E" +
    "\u08CD\x03\x02\x02\x02\x90\u08D3\x03\x02\x02\x02\x92\u08D9\x03\x02\x02" +
    "\x02\x94\u08DF\x03\x02\x02\x02\x96\u08E5\x03\x02\x02\x02\x98\u08EC\x03" +
    "\x02\x02\x02\x9A\u08F4\x03\x02\x02\x02\x9C\u08F6\x03\x02\x02\x02\x9E\u08FC" +
    "\x03\x02\x02\x02\xA0\u0902\x03\x02\x02\x02\xA2\u0909\x03\x02\x02\x02\xA4" +
    "\u091B\x03\x02\x02\x02\xA6\u091D\x03\x02\x02\x02\xA8\u0921\x03\x02\x02" +
    "\x02\xAA\u0926\x03\x02\x02\x02\xAC\u0936\x03\x02\x02\x02\xAE\u093B\x03" +
    "\x02\x02\x02\xB0\u095C\x03\x02\x02\x02\xB2\u097B\x03\x02\x02\x02\xB4\u098C" +
    "\x03\x02\x02\x02\xB6\u098E\x03\x02\x02\x02\xB8\u09A2\x03\x02\x02\x02\xBA" +
    "\u09A8\x03\x02\x02\x02\xBC\u09AE\x03\x02\x02\x02\xBE\u09B4\x03\x02\x02" +
    "\x02\xC0\u09BB\x03\x02\x02\x02\xC2\u09C4\x03\x02\x02\x02\xC4\u09D5\x03" +
    "\x02\x02\x02\xC6\u09D7\x03\x02\x02\x02\xC8\u09DE\x03\x02\x02\x02\xCA\u09E8" +
    "\x03\x02\x02\x02\xCC\u09F6\x03\x02\x02\x02\xCE\u09FC\x03\x02\x02\x02\xD0" +
    "\u0A04\x03\x02\x02\x02\xD2\u0A0A\x03\x02\x02\x02\xD4\u0A12\x03\x02\x02" +
    "\x02\xD6\u0A18\x03\x02\x02\x02\xD8\u0A22\x03\x02\x02\x02\xDA\u0A26\x03" +
    "\x02\x02\x02\xDC\u0A2C\x03\x02\x02\x02\xDE\u0A31\x03\x02\x02\x02\xE0\u0A3C" +
    "\x03\x02\x02\x02\xE2\u0A67\x03\x02\x02\x02\xE4\u0A6D\x03\x02\x02\x02\xE6" +
    "\u0A6F\x03\x02\x02\x02\xE8\u0A76\x03\x02\x02\x02\xEA\u0A94\x03\x02\x02" +
    "\x02\xEC\u0A96\x03\x02\x02\x02\xEE\u0AB5\x03\x02\x02\x02\xF0\u0ABC\x03" +
    "\x02\x02\x02\xF2\u0AC0\x03\x02\x02\x02\xF4\u0AC8\x03\x02\x02\x02\xF6\u0AD2" +
    "\x03\x02\x02\x02\xF8\u0AD4\x03\x02\x02\x02\xFA\u0AE6\x03\x02\x02\x02\xFC" +
    "\u0AF2\x03\x02\x02\x02\xFE\u0AF7\x03\x02\x02\x02\u0100\u0AFD\x03\x02\x02" +
    "\x02\u0102\u0B1E\x03\x02\x02\x02\u0104\u0B20\x03\x02\x02\x02\u0106\u0B28" +
    "\x03\x02\x02\x02\u0108\u0B31\x03\x02\x02\x02\u010A\u0B39\x03\x02\x02\x02" +
    "\u010C\u0B45\x03\x02\x02\x02\u010E\u0B59\x03\x02\x02\x02\u0110\u0B62\x03" +
    "\x02\x02\x02\u0112\u0B86\x03\x02\x02\x02\u0114\u0B93\x03\x02\x02\x02\u0116" +
    "\u0BA3\x03\x02\x02\x02\u0118\u0BAA\x03\x02\x02\x02\u011A\u0BC5\x03\x02" +
    "\x02\x02\u011C\u0BC7\x03\x02\x02\x02\u011E\u0BC9\x03\x02\x02\x02\u0120" +
    "\u0BCC\x03\x02\x02\x02\u0122\u0BCF\x03\x02\x02\x02\u0124\u0BD6\x03\x02" +
    "\x02\x02\u0126\u0BD8\x03\x02\x02\x02\u0128\u0BF6\x03\x02\x02\x02\u012A" +
    "\u0C02\x03\x02\x02\x02\u012C\u0C05\x03\x02\x02\x02\u012E\u0C0E\x03\x02" +
    "\x02\x02\u0130\u0C12\x03\x02\x02\x02\u0132\u0C17\x03\x02\x02\x02\u0134" +
    "\u0C24\x03\x02\x02\x02\u0136\u0C29\x03\x02\x02\x02\u0138\u0C2D\x03\x02" +
    "\x02\x02\u013A\u0C3D\x03\x02\x02\x02\u013C\u0C3F\x03\x02\x02\x02\u013E" +
    "\u0C51\x03\x02\x02\x02\u0140\u0C53\x03\x02\x02\x02\u0142\u0C5C\x03\x02" +
    "\x02\x02\u0144\u0C68\x03\x02\x02\x02\u0146\u0C6F\x03\x02\x02\x02\u0148" +
    "\u0C7A\x03\x02\x02\x02\u014A\u0C7C\x03\x02\x02\x02\u014C\u0C80\x03\x02" +
    "\x02\x02\u014E\u0C82\x03\x02\x02\x02\u0150\u0C87\x03\x02\x02\x02\u0152" +
    "\u0C97\x03\x02\x02\x02\u0154\u0CA8\x03\x02\x02\x02\u0156\u0CAD\x03\x02" +
    "\x02\x02\u0158\u0CB2\x03\x02\x02\x02\u015A\u0CB6\x03\x02\x02\x02\u015C" +
    "\u0CC4\x03\x02\x02\x02\u015E\u0CC7\x03\x02\x02\x02\u0160\u0CCD\x03\x02" +
    "\x02\x02\u0162\u0CDA\x03\x02\x02\x02\u0164\u0CE2\x03\x02\x02\x02\u0166" +
    "\u0CFC\x03\x02\x02\x02\u0168\u0D09\x03\x02\x02\x02\u016A\u0D10\x03\x02" +
    "\x02\x02\u016C\u0D12\x03\x02\x02\x02\u016E\u0D1E\x03\x02\x02\x02\u0170" +
    "\u0D20\x03\x02\x02\x02\u0172\u0D2A\x03\x02\x02\x02\u0174\u0D42\x03\x02" +
    "\x02\x02\u0176\u0D44\x03\x02\x02\x02\u0178\u0D4B\x03\x02\x02\x02\u017A" +
    "\u0D55\x03\x02\x02\x02\u017C\u0D78\x03\x02\x02\x02\u017E\u0D82\x03\x02" +
    "\x02\x02\u0180\u0D84\x03\x02\x02\x02\u0182\u0D88\x03\x02\x02\x02\u0184" +
    "\u0D90\x03\x02\x02\x02\u0186\u0D92\x03\x02\x02\x02\u0188\u0D97\x03\x02" +
    "\x02\x02\u018A\u0D9B\x03\x02\x02\x02\u018C\u0DB7\x03\x02\x02\x02\u018E" +
    "\u0DB9\x03\x02\x02\x02\u0190\u0DBB\x03\x02\x02\x02\u0192\u0DC3\x03\x02" +
    "\x02\x02\u0194\u0DC5\x03\x02\x02\x02\u0196\u0DCD\x03\x02\x02\x02\u0198" +
    "\u0DD7\x03\x02\x02\x02\u019A\u0DDB\x03\x02\x02\x02\u019C\u0DF4\x03\x02" +
    "\x02\x02\u019E\u0E0F\x03\x02\x02\x02\u01A0\u0E11\x03\x02\x02\x02\u01A2" +
    "\u0E1B\x03\x02\x02\x02\u01A4\u0E3A\x03\x02\x02\x02\u01A6\u0E52\x03\x02" +
    "\x02\x02\u01A8\u0E54\x03\x02\x02\x02\u01AA\u0E62\x03\x02\x02\x02\u01AC" +
    "\u0E64\x03\x02\x02\x02\u01AE\u0E87\x03\x02\x02\x02\u01B0\u0E89\x03\x02" +
    "\x02\x02\u01B2\u0EB3\x03\x02\x02\x02\u01B4\u0EC3\x03\x02\x02\x02\u01B6" +
    "\u0EC5\x03\x02\x02\x02\u01B8\u0ECD\x03\x02\x02\x02\u01BA\u0ED6\x03\x02" +
    "\x02\x02\u01BC\u0EDD\x03\x02\x02\x02\u01BE\u0F3A\x03\x02\x02\x02\u01C0" +
    "\u0F3E\x03\x02\x02\x02\u01C2\u0F42\x03\x02\x02\x02\u01C4\u0F50\x03\x02" +
    "\x02\x02\u01C6\u0F52\x03\x02\x02\x02\u01C8\u0F5F\x03\x02\x02\x02\u01CA" +
    "\u0F9F\x03\x02\x02\x02\u01CC\u0FA1\x03\x02\x02\x02\u01CE\u0FA9\x03\x02" +
    "\x02\x02\u01D0\u0FB1\x03\x02\x02\x02\u01D2\u0FB9\x03\x02\x02\x02\u01D4" +
    "\u0FBB\x03\x02\x02\x02\u01D6\u0FD8\x03\x02\x02\x02\u01D8\u0FE1\x03\x02" +
    "\x02\x02\u01DA\u1000\x03\x02\x02\x02\u01DC\u1002\x03\x02\x02\x02\u01DE" +
    "\u100A\x03\x02\x02\x02\u01E0\u100C\x03\x02\x02\x02\u01E2\u101A\x03\x02" +
    "\x02\x02\u01E4\u101C\x03\x02\x02\x02\u01E6\u1022\x03\x02\x02\x02\u01E8" +
    "\u102A\x03\x02\x02\x02\u01EA\u104F\x03\x02\x02\x02\u01EC\u1051\x03\x02" +
    "\x02\x02\u01EE\u1060\x03\x02\x02\x02\u01F0\u1062\x03\x02\x02\x02\u01F2" +
    "\u1099\x03\x02\x02\x02\u01F4\u109B\x03\x02\x02\x02\u01F6\u109E\x03\x02" +
    "\x02\x02\u01F8\u10B7\x03\x02\x02\x02\u01FA\u10C0\x03\x02\x02\x02\u01FC" +
    "\u10C2\x03\x02\x02\x02\u01FE\u10C7\x03\x02\x02\x02\u0200\u10F5\x03\x02" +
    "\x02\x02\u0202\u10F7\x03\x02\x02\x02\u0204\u10FF\x03\x02\x02\x02\u0206" +
    "\u1130\x03\x02\x02\x02\u0208\u113D\x03\x02\x02\x02\u020A\u113F\x03\x02" +
    "\x02\x02\u020C\u1142\x03\x02\x02\x02\u020E\u114D\x03\x02\x02\x02\u0210" +
    "\u1152\x03\x02\x02\x02\u0212\u1155\x03\x02\x02\x02\u0214\u1164\x03\x02" +
    "\x02\x02\u0216\u1196\x03\x02\x02\x02\u0218\u1198\x03\x02\x02\x02\u021A" +
    "\u119A\x03\x02\x02\x02\u021C\u11CB\x03\x02\x02\x02\u021E\u11DD\x03\x02" +
    "\x02\x02\u0220\u11DF\x03\x02\x02\x02\u0222\u11EF\x03\x02\x02\x02\u0224" +
    "\u11FB\x03\x02\x02\x02\u0226\u1214\x03\x02\x02\x02\u0228\u1216\x03\x02" +
    "\x02\x02\u022A\u121E\x03\x02\x02\x02\u022C\u124F\x03\x02\x02\x02\u022E" +
    "\u125E\x03\x02\x02\x02\u0230\u1263\x03\x02\x02\x02\u0232\u1265\x03\x02" +
    "\x02\x02\u0234\u127D\x03\x02\x02\x02\u0236\u127F\x03\x02\x02\x02\u0238" +
    "\u12BA\x03\x02\x02\x02\u023A\u12C5\x03\x02\x02\x02\u023C\u12C7\x03\x02" +
    "\x02\x02\u023E\u12CA\x03\x02\x02\x02\u0240\u12D7\x03\x02\x02\x02\u0242" +
    "\u12F3\x03\x02\x02\x02\u0244\u12FB\x03\x02\x02\x02\u0246\u12FD\x03\x02" +
    "\x02\x02\u0248\u1308\x03\x02\x02\x02\u024A\u130A\x03\x02\x02\x02\u024C" +
    "\u1312\x03\x02\x02\x02\u024E\u1314\x03\x02\x02\x02\u0250\u13F8\x03\x02" +
    "\x02\x02\u0252\u13FF\x03\x02\x02\x02\u0254\u1401\x03\x02\x02\x02\u0256" +
    "\u1403\x03\x02\x02\x02\u0258\u140D\x03\x02\x02\x02\u025A\u1434\x03\x02" +
    "\x02\x02\u025C\u1438\x03\x02\x02\x02\u025E\u143A\x03\x02\x02\x02\u0260" +
    "\u1442\x03\x02\x02\x02\u0262\u1446\x03\x02\x02\x02\u0264\u144E\x03\x02" +
    "\x02\x02\u0266\u1457\x03\x02\x02\x02\u0268\u1459\x03\x02\x02\x02\u026A" +
    "\u1470\x03\x02\x02\x02\u026C\u1472\x03\x02\x02\x02\u026E\u1474\x03\x02" +
    "\x02\x02\u0270\u1484\x03\x02\x02\x02\u0272\u1490\x03\x02\x02\x02\u0274" +
    "\u1492\x03\x02\x02\x02\u0276\u149A\x03\x02\x02\x02\u0278\u14A2\x03\x02" +
    "\x02\x02\u027A\u14AB\x03\x02\x02\x02\u027C\u14AD\x03\x02\x02\x02\u027E" +
    "\u14BF\x03\x02\x02\x02\u0280\u14CD\x03\x02\x02\x02\u0282\u14D2\x03\x02" +
    "\x02\x02\u0284\u14D8\x03\x02\x02\x02\u0286\u14DA\x03\x02\x02\x02\u0288" +
    "\u14EA\x03\x02\x02\x02\u028A\u14F2\x03\x02\x02\x02\u028C\u14FC\x03\x02" +
    "\x02\x02\u028E\u1509\x03\x02\x02\x02\u0290\u150B\x03\x02\x02\x02\u0292" +
    "\u1511\x03\x02\x02\x02\u0294\u152C\x03\x02\x02\x02\u0296\u152E\x03\x02" +
    "\x02\x02\u0298\u1531\x03\x02\x02\x02\u029A\u1534\x03\x02\x02\x02\u029C" +
    "\u1541\x03\x02\x02\x02\u029E\u1551\x03\x02\x02\x02\u02A0\u1568\x03\x02" +
    "\x02\x02\u02A2\u156A\x03\x02\x02\x02\u02A4\u158F\x03\x02\x02\x02\u02A6" +
    "\u1591\x03\x02\x02\x02\u02A8\u1619\x03\x02\x02\x02\u02AA\u1626\x03\x02" +
    "\x02\x02\u02AC\u162F\x03\x02\x02\x02\u02AE\u16B4\x03\x02\x02\x02\u02B0" +
    "\u16B6\x03\x02\x02\x02\u02B2\u16E5\x03\x02\x02\x02\u02B4\u16E7\x03\x02" +
    "\x02\x02\u02B6\u16EC\x03\x02\x02\x02\u02B8\u16F5\x03\x02\x02\x02\u02BA" +
    "\u1708\x03\x02\x02\x02\u02BC\u170B\x03\x02\x02\x02\u02BE\u1714\x03\x02" +
    "\x02\x02\u02C0\u1716\x03\x02\x02\x02\u02C2\u172D\x03\x02\x02\x02\u02C4" +
    "\u1840\x03\x02\x02\x02\u02C6\u1861\x03\x02\x02\x02\u02C8\u1863\x03\x02" +
    "\x02\x02\u02CA\u1869\x03\x02\x02\x02\u02CC\u186C\x03\x02\x02\x02\u02CE" +
    "\u187B\x03\x02\x02\x02\u02D0\u1883\x03\x02\x02\x02\u02D2\u1885\x03\x02" +
    "\x02\x02\u02D4\u18A2\x03\x02\x02\x02\u02D6\u18C3\x03\x02\x02\x02\u02D8" +
    "\u18C5\x03\x02\x02\x02\u02DA\u18CD\x03\x02\x02\x02\u02DC\u18D7\x03\x02" +
    "\x02\x02\u02DE\u18DC\x03\x02\x02\x02\u02E0\u18DE\x03\x02\x02\x02\u02E2" +
    "\u18F4\x03\x02\x02\x02\u02E4\u18F6\x03\x02\x02\x02\u02E6\u18F9\x03\x02" +
    "\x02\x02\u02E8\u18FC\x03\x02\x02\x02\u02EA\u192C\x03\x02\x02\x02\u02EC" +
    "\u192E\x03\x02\x02\x02\u02EE\u1939\x03\x02\x02\x02\u02F0\u193B\x03\x02" +
    "\x02\x02\u02F2\u193D\x03\x02\x02\x02\u02F4\u1941\x03\x02\x02\x02\u02F6" +
    "\u1943\x03\x02\x02\x02\u02F8\u1945\x03\x02\x02\x02\u02FA\u1949\x03\x02" +
    "\x02\x02\u02FC\u194D\x03\x02\x02\x02\u02FE\u1951\x03\x02\x02\x02\u0300" +
    "\u1959\x03\x02\x02\x02\u0302\u195D\x03\x02\x02\x02\u0304\u1965\x03\x02" +
    "\x02\x02\u0306\u1967\x03\x02\x02\x02\u0308\u1979\x03\x02\x02\x02\u030A" +
    "\u197B\x03\x02\x02\x02\u030C\u197E\x03\x02\x02\x02\u030E\u1983\x03\x02" +
    "\x02\x02\u0310\u198B\x03\x02\x02\x02\u0312\u1991\x03\x02\x02\x02\u0314" +
    "\u1995\x03\x02\x02\x02\u0316\u19A6\x03\x02\x02\x02\u0318\u19A9\x03\x02" +
    "\x02\x02\u031A\u19AE\x03\x02\x02\x02\u031C\u19B0\x03\x02\x02\x02\u031E" +
    "\u19B3\x03\x02\x02\x02\u0320\u19BC\x03\x02\x02\x02\u0322\u19C4\x03\x02" +
    "\x02\x02\u0324\u19C6\x03\x02\x02\x02\u0326\u19CB\x03\x02\x02\x02\u0328" +
    "\u19D2\x03\x02\x02\x02\u032A\u19DC\x03\x02\x02\x02\u032C\u19E4\x03\x02" +
    "\x02\x02\u032E\u19E6\x03\x02\x02\x02\u0330\u19F0\x03\x02\x02\x02\u0332" +
    "\u19F8\x03\x02\x02\x02\u0334\u19FA\x03\x02\x02\x02\u0336\u1A00\x03\x02" +
    "\x02\x02\u0338\u1A15\x03\x02\x02\x02\u033A\u1A17\x03\x02\x02\x02\u033C" +
    "\u1A1D\x03\x02\x02\x02\u033E\u1A20\x03\x02\x02\x02\u0340\u1A23\x03\x02" +
    "\x02\x02\u0342\u1A41\x03\x02\x02\x02\u0344\u1A45\x03\x02\x02\x02\u0346" +
    "\u1A4C\x03\x02\x02\x02\u0348\u1A53\x03\x02\x02\x02\u034A\u1A55\x03\x02" +
    "\x02\x02\u034C\u1A65\x03\x02\x02\x02\u034E\u1A78\x03\x02\x02\x02\u0350" +
    "\u1A7C\x03\x02\x02\x02\u0352\u1A7F\x03\x02\x02\x02\u0354\u1A82\x03\x02" +
    "\x02\x02\u0356\u1A9A\x03\x02\x02\x02\u0358\u1A9C\x03\x02\x02\x02\u035A" +
    "\u1AA4\x03\x02\x02\x02\u035C\u1AA6\x03\x02\x02\x02\u035E\u1AAA\x03\x02" +
    "\x02\x02\u0360\u1AF9\x03\x02\x02\x02\u0362\u1AFB\x03\x02\x02\x02\u0364" +
    "\u1AFF\x03\x02\x02\x02\u0366\u1B59\x03\x02\x02\x02\u0368\u1B5B\x03\x02" +
    "\x02\x02\u036A\u1B5D\x03\x02\x02\x02\u036C\u1B6D\x03\x02\x02\x02\u036E" +
    "\u1B6F\x03\x02\x02\x02\u0370\u1B8F\x03\x02\x02\x02\u0372\u1B91\x03\x02" +
    "\x02\x02\u0374\u1B9C\x03\x02\x02\x02\u0376\u1BA3\x03\x02\x02\x02\u0378" +
    "\u1BB3\x03\x02\x02\x02\u037A\u1BB9\x03\x02\x02\x02\u037C\u1BBB\x03\x02" +
    "\x02\x02\u037E\u1BBF\x03\x02\x02\x02\u0380\u1BCA\x03\x02\x02\x02\u0382" +
    "\u1BCC\x03\x02\x02\x02\u0384\u1BCE\x03\x02\x02\x02\u0386\u1BD5\x03\x02" +
    "\x02\x02\u0388\u1BD7\x03\x02\x02\x02\u038A\u1BD9\x03\x02\x02\x02\u038C" +
    "\u1C6F\x03\x02\x02\x02\u038E\u1C74\x03\x02\x02\x02\u0390\u1C7B\x03\x02" +
    "\x02\x02\u0392\u1C7D\x03\x02\x02\x02\u0394\u1C85\x03\x02\x02\x02\u0396" +
    "\u1C97\x03\x02\x02\x02\u0398\u1C9F\x03\x02\x02\x02\u039A\u1CA7\x03\x02" +
    "\x02\x02\u039C\u1CA9\x03\x02\x02\x02\u039E\u1CAD\x03\x02\x02\x02\u03A0" +
    "\u1CB5\x03\x02\x02\x02\u03A2\u1CBC\x03\x02\x02\x02\u03A4\u1CBE\x03\x02" +
    "\x02\x02\u03A6\u1CC9\x03\x02\x02\x02\u03A8\u1D4E\x03\x02\x02\x02\u03AA" +
    "\u1D52\x03\x02\x02\x02\u03AC\u1D55\x03\x02\x02\x02\u03AE\u1D5E\x03\x02" +
    "\x02\x02\u03B0\u1D67\x03\x02\x02\x02\u03B2\u1D6F\x03\x02\x02\x02\u03B4" +
    "\u1D9D\x03\x02\x02\x02\u03B6\u1D9F\x03\x02\x02\x02\u03B8\u1DB4\x03\x02" +
    "\x02\x02\u03BA\u1DB9\x03\x02\x02\x02\u03BC\u1DC4\x03\x02\x02\x02\u03BE" +
    "\u1DF1\x03\x02\x02\x02\u03C0\u1E15\x03\x02\x02\x02\u03C2\u1E17\x03\x02" +
    "\x02\x02\u03C4\u1E1F\x03\x02\x02\x02\u03C6\u1E2C\x03\x02\x02\x02\u03C8" +
    "\u1E2E\x03\x02\x02\x02\u03CA\u1E32\x03\x02\x02\x02\u03CC\u1E35\x03\x02" +
    "\x02\x02\u03CE\u1E3A\x03\x02\x02\x02\u03D0\u1E3E\x03\x02\x02\x02\u03D2" +
    "\u1E41\x03\x02\x02\x02\u03D4\u1E44\x03\x02\x02\x02\u03D6\u1E48\x03\x02" +
    "\x02\x02\u03D8\u1E4E\x03\x02\x02\x02\u03DA\u1E56\x03\x02\x02\x02\u03DC" +
    "\u1E5E\x03\x02\x02\x02\u03DE\u1E64\x03\x02\x02\x02\u03E0\u1E67\x03\x02" +
    "\x02\x02\u03E2\u1E79\x03\x02\x02\x02\u03E4\u1E7B\x03\x02\x02\x02\u03E6" +
    "\u1E81\x03\x02\x02\x02\u03E8\u1E85\x03\x02\x02\x02\u03EA\u1E8D\x03\x02" +
    "\x02\x02\u03EC\u1E95\x03\x02\x02\x02\u03EE\u1E9D\x03\x02\x02\x02\u03F0" +
    "\u1EBA\x03\x02\x02\x02\u03F2\u1ED9\x03\x02\x02\x02\u03F4\u1EDD\x03\x02" +
    "\x02\x02\u03F6\u1EE1\x03\x02\x02\x02\u03F8\u1EE4\x03\x02\x02\x02\u03FA" +
    "\u1EEF\x03\x02\x02\x02\u03FC\u1EF1\x03\x02\x02\x02\u03FE\u1EF6\x03\x02" +
    "\x02\x02\u0400\u1EF8\x03\x02\x02\x02\u0402\u1EFA\x03\x02\x02\x02\u0404" +
    "\u1EFC\x03\x02\x02\x02\u0406\u1F05\x03\x02\x02\x02\u0408\u1F0B\x03\x02" +
    "\x02\x02\u040A\u1F0D\x03\x02\x02\x02\u040C\u1F0F\x03\x02\x02\x02\u040E" +
    "\u1F1A\x03\x02\x02\x02\u0410\u1F1E\x03\x02\x02\x02\u0412\u1F20\x03\x02" +
    "\x02\x02\u0414\u1F22\x03\x02\x02\x02\u0416\u1F24\x03\x02\x02\x02\u0418" +
    "\u1F2D\x03\x02\x02\x02\u041A\u1F2F\x03\x02\x02\x02\u041C\u1F31\x03\x02" +
    "\x02\x02\u041E\u1F33\x03\x02\x02\x02\u0420\u1F35\x03\x02\x02\x02\u0422" +
    "\u1F37\x03\x02\x02\x02\u0424\u1F39\x03\x02\x02\x02\u0426\u1F3B\x03\x02" +
    "\x02\x02\u0428\u1F3F\x03\x02\x02\x02\u042A\u1F43\x03\x02\x02\x02\u042C" +
    "\u1F45\x03\x02\x02\x02\u042E\u1F47\x03\x02\x02\x02\u0430\u1F49\x03\x02" +
    "\x02\x02\u0432\u1F4B\x03\x02\x02\x02\u0434\u1F4D\x03\x02\x02\x02\u0436" +
    "\u1F4F\x03\x02\x02\x02\u0438\u1F51\x03\x02\x02\x02\u043A\u1F53\x03\x02" +
    "\x02\x02\u043C\u1F55\x03\x02\x02\x02\u043E\u1F57\x03\x02\x02\x02\u0440" +
    "\u1F5B\x03\x02\x02\x02\u0442\u1F5D\x03\x02\x02\x02\u0444\u1F60\x03\x02" +
    "\x02\x02\u0446\u1F6C\x03\x02\x02\x02\u0448\u1F6E\x03\x02\x02\x02\u044A" +
    "\u1F76\x03\x02\x02\x02\u044C\u1F7E\x03\x02\x02\x02\u044E\u1F82\x03\x02" +
    "\x02\x02\u0450\u1F84\x03\x02\x02\x02\u0452\u1F88\x03\x02\x02\x02\u0454" +
    "\u1F8A\x03\x02\x02\x02\u0456\u1F8C\x03\x02\x02\x02\u0458\u1F8E\x03\x02" +
    "\x02\x02\u045A\u1F90\x03\x02\x02\x02\u045C\u1F92\x03\x02\x02\x02\u045E" +
    "\u1F97\x03\x02\x02\x02\u0460\u1F9B\x03\x02\x02\x02\u0462\u1F9D\x03\x02" +
    "\x02\x02\u0464\u1FA5\x03\x02\x02\x02\u0466\u1FA9\x03\x02\x02\x02\u0468" +
    "\u1FB8\x03\x02\x02\x02\u046A\u1FBA\x03\x02\x02\x02\u046C\u1FBD\x03\x02" +
    "\x02\x02\u046E\u1FBF\x03\x02\x02\x02\u0470\u1FC1\x03\x02\x02\x02\u0472" +
    "\u1FC8\x03\x02\x02\x02\u0474\u1FD3\x03\x02\x02\x02\u0476\u1FDA\x03\x02" +
    "\x02\x02\u0478\u1FDC\x03\x02\x02\x02\u047A\u1FEA\x03\x02\x02\x02\u047C" +
    "\u1FEF\x03\x02\x02\x02\u047E\u1FF4\x03\x02\x02\x02\u0480\u1FFB\x03\x02" +
    "\x02\x02\u0482\u2003\x03\x02\x02\x02\u0484\u2005\x03\x02\x02\x02\u0486" +
    "\u200D\x03\x02\x02\x02\u0488\u200F\x03\x02\x02\x02\u048A\u2011\x03\x02" +
    "\x02\x02\u048C\u2019\x03\x02\x02\x02\u048E\u201D\x03\x02\x02\x02\u0490" +
    "\u201F\x03\x02\x02\x02\u0492\u2021\x03\x02\x02\x02\u0494\u2029\x03\x02" +
    "\x02\x02\u0496\u202D\x03\x02\x02\x02\u0498\u2031\x03\x02\x02\x02\u049A" +
    "\u2035\x03\x02\x02\x02\u049C\u2037\x03\x02\x02\x02\u049E\u203A\x03\x02" +
    "\x02\x02\u04A0\u203C\x03\x02\x02\x02\u04A2\u2044\x03\x02\x02\x02\u04A4" +
    "\u2050\x03\x02\x02\x02\u04A6\u2063\x03\x02\x02\x02\u04A8\u2065\x03\x02" +
    "\x02\x02\u04AA\u2067\x03\x02\x02\x02\u04AC\u207B\x03\x02\x02\x02\u04AE" +
    "\u207D\x03\x02\x02\x02\u04B0\u207F\x03\x02\x02\x02\u04B2\u208B\x03\x02" +
    "\x02\x02\u04B4\u2091\x03\x02\x02\x02\u04B6\u2093\x03\x02\x02\x02\u04B8" +
    "\u209A\x03\x02\x02\x02\u04BA\u20A5\x03\x02\x02\x02\u04BC\u04C9\x07\x02" +
    "\x02\x03\u04BD\u04C0\x05\x04\x03\x02\u04BE\u04C0\x05\u01A0\xD1\x02\u04BF" +
    "\u04BD\x03\x02\x02\x02\u04BF\u04BE\x03\x02\x02\x02\u04C0\u04C6\x03\x02" +
    "\x02\x02\u04C1\u04C3\x07\u0199\x02\x02\u04C2\u04C4\x07\x02\x02\x03\u04C3" +
    "\u04C2\x03\x02\x02\x02\u04C3\u04C4\x03\x02\x02\x02\u04C4\u04C7\x03\x02" +
    "\x02\x02\u04C5\u04C7\x07\x02\x02\x03\u04C6\u04C1\x03\x02\x02\x02\u04C6" +
    "\u04C5\x03\x02\x02\x02\u04C7\u04C9\x03\x02\x02\x02\u04C8\u04BC\x03\x02" +
    "\x02\x02\u04C8\u04BF\x03\x02\x02\x02\u04C9\x03\x03\x02\x02\x02\u04CA\u04ED" +
    "\x05\x06\x04\x02\u04CB\u04ED\x05P)\x02\u04CC\u04ED\x05\xB6\\\x02\u04CD" +
    "\u04ED\x05\xD6l\x02\u04CE\u04ED\x05\xDAn\x02\u04CF\u04D0\x06\x03\x02\x02" +
    "\u04D0\u04ED\x05\xDCo\x02\u04D1\u04ED\x05\xDEp\x02\u04D2\u04ED\x05\xE0" +
    "q\x02\u04D3\u04ED\x05\xE6t\x02\u04D4\u04ED\x05\xE8u\x02\u04D5\u04ED\x05" +
    "\xECw\x02\u04D6\u04ED\x05\u0100\x81\x02\u04D7\u04ED\x05\u010C\x87\x02" +
    "\u04D8\u04ED\x05\u010E\x88\x02\u04D9\u04ED\x05\u019A\xCE\x02\u04DA\u04ED" +
    "\x05\u019C\xCF\x02\u04DB\u04ED\x05\u01B2\xDA\x02\u04DC\u04ED\x05\u01E2" +
    "\xF2\x02\u04DD\u04DE\x06\x03\x03\x02\u04DE\u04ED\x05\u01E8\xF5\x02\u04DF" +
    "\u04ED\x05\u01EE\xF8\x02\u04E0\u04ED\x05\u022C\u0117\x02\u04E1\u04ED\x05" +
    "\u0234\u011B\x02\u04E2\u04ED\x05\u0236\u011C\x02\u04E3\u04ED\x05\u024E" +
    "\u0128\x02\u04E4\u04E5\x06\x03\x04\x02\u04E5\u04ED\x05\u027A\u013E\x02" +
    "\u04E6\u04ED\x05\u025A\u012E\x02\u04E7\u04ED\x05\u028E\u0148\x02\u04E8" +
    "\u04E9\x06\x03\x05\x02\u04E9\u04ED\x05\u0340\u01A1\x02\u04EA\u04ED\x05" +
    "\u034A\u01A6\x02\u04EB\u04ED\x05\u034C\u01A7\x02\u04EC\u04CA\x03\x02\x02" +
    "\x02\u04EC\u04CB\x03\x02\x02\x02\u04EC\u04CC\x03\x02\x02\x02\u04EC\u04CD" +
    "\x03\x02\x02\x02\u04EC\u04CE\x03\x02\x02\x02\u04EC\u04CF\x03\x02\x02\x02" +
    "\u04EC\u04D1\x03\x02\x02\x02\u04EC\u04D2\x03\x02\x02\x02\u04EC\u04D3\x03" +
    "\x02\x02\x02\u04EC\u04D4\x03\x02\x02\x02\u04EC\u04D5\x03\x02\x02\x02\u04EC" +
    "\u04D6\x03\x02\x02\x02\u04EC\u04D7\x03\x02\x02\x02\u04EC\u04D8\x03\x02" +
    "\x02\x02\u04EC\u04D9\x03\x02\x02\x02\u04EC\u04DA\x03\x02\x02\x02\u04EC" +
    "\u04DB\x03\x02\x02\x02\u04EC\u04DC\x03\x02\x02\x02\u04EC\u04DD\x03\x02" +
    "\x02\x02\u04EC\u04DF\x03\x02\x02\x02\u04EC\u04E0\x03\x02\x02\x02\u04EC" +
    "\u04E1\x03\x02\x02\x02\u04EC\u04E2\x03\x02\x02\x02\u04EC\u04E3\x03\x02" +
    "\x02\x02\u04EC\u04E4\x03\x02\x02\x02\u04EC\u04E6\x03\x02\x02\x02\u04EC" +
    "\u04E7\x03\x02\x02\x02\u04EC\u04E8\x03\x02\x02\x02\u04EC\u04EA\x03\x02" +
    "\x02\x02\u04EC\u04EB\x03\x02\x02\x02\u04ED\x05\x03\x02\x02\x02\u04EE\u0509" +
    "\x07\u01AE\x02\x02\u04EF\u050A\x05\x14\v\x02\u04F0\u050A\x05\b\x05\x02" +
    "\u04F1\u04F2\x07\u0254\x02\x02\u04F2\u04F4\x05\u041E\u0210\x02\u04F3\u04F5" +
    "\x05j6\x02\u04F4\u04F3\x03\x02\x02\x02\u04F4\u04F5\x03\x02\x02\x02\u04F5" +
    "\u050A\x03\x02\x02\x02\u04F6\u04F7\x07\u0166\x02\x02\u04F7\u04F9\x05\u0422" +
    "\u0212\x02\u04F8\u04FA\x05j6\x02\u04F9\u04F8\x03\x02\x02\x02\u04F9\u04FA" +
    "\x03\x02\x02\x02\u04FA\u050A\x03\x02\x02\x02\u04FB\u050A\x05H%\x02\u04FC" +
    "\u050A\x05\n\x06\x02\u04FD\u050A\x05:\x1E\x02\u04FE\u04FF\x06\x04\x06" +
    "\x02\u04FF\u050A\x05<\x1F\x02\u0500\u050A\x05\f\x07\x02\u0501\u050A\x05" +
    "\x12\n\x02\u0502\u0503\x06\x04\x07\x02\u0503\u0504\x07\xA7\x02\x02\u0504" +
    "\u0505\x07\u012A\x02\x02\u0505\u0506\x05\u0494\u024B\x02\u0506\u0507\x07" +
    "\xBB\x02\x02\u0507\u0508\x07\u021B\x02\x02\u0508\u050A\x03\x02\x02\x02" +
    "\u0509\u04EF\x03\x02\x02\x02\u0509\u04F0\x03\x02\x02\x02\u0509\u04F1\x03" +
    "\x02\x02\x02\u0509\u04F6\x03\x02\x02\x02\u0509\u04FB\x03\x02\x02\x02\u0509" +
    "\u04FC\x03\x02\x02\x02\u0509\u04FD\x03\x02\x02\x02\u0509\u04FE\x03\x02" +
    "\x02\x02\u0509\u0500\x03\x02\x02\x02\u0509\u0501\x03\x02\x02\x02\u0509" +
    "\u0502\x03\x02\x02\x02\u050A\x07\x03\x02\x02\x02\u050B\u050C\x07\u01D5" +
    "\x02\x02\u050C\u0517\x05\u041A\u020E\x02\u050D\u050F\x05T+\x02\u050E\u050D" +
    "\x03\x02\x02\x02\u050F\u0510\x03\x02\x02\x02\u0510\u050E\x03\x02\x02\x02" +
    "\u0510\u0511\x03\x02\x02\x02\u0511\u0518\x03\x02\x02\x02\u0512\u0513\x06" +
    "\x05\b\x02\u0513\u0514\x077\x02\x02\u0514\u0515\x07o\x02\x02\u0515\u0516" +
    "\x07y\x02\x02\u0516\u0518\x07\xE7\x02\x02\u0517\u050E\x03\x02\x02\x02" +
    "\u0517\u0512\x03\x02\x02\x02\u0518\t\x03\x02\x02\x02\u0519\u051B\x05\u03C8" +
    "\u01E5\x02\u051A\u0519\x03\x02\x02\x02\u051A\u051B\x03\x02\x02\x02\u051B" +
    "\u051C\x03\x02\x02\x02\u051C\u051D\x07\x87\x02\x02\u051D\u0521\x05\u0436" +
    "\u021C\x02\u051E\u051F\x07\u0245\x02\x02\u051F\u0520\x07\u0131\x02\x02" +
    "\u0520\u0522\x05\u0356\u01AC\x02\u0521\u051E\x03\x02\x02\x02\u0521\u0522" +
    "\x03\x02\x02\x02\u0522\u0529\x03\x02\x02\x02\u0523\u0524\x07\u0245";
MySQLParser._serializedATNSegment5 = "\x02\x02\u0524\u0526\x07_\x02\x02\u0525\u0527\x07\u023F\x02\x02\u0526" +
    "\u0525\x03\x02\x02\x02\u0526\u0527\x03\x02\x02\x02\u0527\u0528\x03\x02" +
    "\x02\x02\u0528\u052A\x07\u0104\x02\x02\u0529\u0523\x03\x02\x02\x02\u0529" +
    "\u052A\x03\x02\x02\x02\u052A\u052E\x03\x02\x02\x02\u052B\u052C\x07\u025E" +
    "\x02\x02\u052C\u052D\x07\u028F\x02\x02\u052D\u052F\x05\u0460\u0231\x02" +
    "\u052E\u052B\x03\x02\x02\x02\u052E\u052F\x03\x02\x02\x02\u052F\u0536\x03" +
    "\x02\x02\x02\u0530\u0537\x07\x91\x02\x02\u0531\u0534\x07z\x02\x02\u0532" +
    "\u0533\x07\u0245\x02\x02\u0533\u0535\x07/\x02\x02\u0534\u0532\x03\x02" +
    "\x02\x02\u0534\u0535\x03\x02\x02\x02\u0535\u0537\x03\x02\x02\x02\u0536" +
    "\u0530\x03\x02\x02\x02\u0536\u0531\x03\x02\x02\x02\u0536\u0537\x03\x02" +
    "\x02\x02\u0537\u053A\x03\x02\x02\x02\u0538\u0539\x07\r\x02\x02\u0539\u053B" +
    "\x05\u0480\u0241\x02\u053A\u0538\x03\x02\x02\x02\u053A\u053B\x03\x02\x02" +
    "\x02\u053B\u053E\x03\x02\x02\x02\u053C\u053D\x07\x11\x02\x02\u053D\u053F" +
    "\x05\u0308\u0185\x02\u053E\u053C\x03\x02\x02\x02\u053E\u053F\x03\x02\x02" +
    "\x02\u053F\v\x03\x02\x02\x02\u0540\u0541\x07\xB8\x02\x02\u0541\u0542\x07" +
    "\u0202\x02\x02\u0542\u0543\x05\u0432\u021A\x02\u0543\u0544\x07\u01AC\x02" +
    "\x02\u0544\u0545\x07\u016A\x02\x02\u0545\u0547\x05\u0480\u0241\x02\u0546" +
    "\u0548\x05\x0E\b\x02\u0547\u0546\x03\x02\x02\x02\u0547\u0548\x03\x02\x02" +
    "\x02\u0548\r\x03\x02\x02\x02\u0549\u0550\x05\x10\t\x02\u054A\u054C\x07" +
    "\u0198\x02\x02\u054B\u054A\x03\x02\x02\x02\u054B\u054C\x03\x02\x02\x02" +
    "\u054C\u054D\x03\x02\x02\x02\u054D\u054F\x05\x10\t\x02\u054E\u054B\x03" +
    "\x02\x02\x02\u054F\u0552\x03\x02\x02\x02\u0550\u054E\x03\x02\x02\x02\u0550" +
    "\u0551\x03\x02\x02\x02\u0551\x0F\x03\x02\x02\x02\u0552\u0550\x03\x02\x02" +
    "\x02\u0553\u0557\x05\x8CG\x02\u0554\u0557\x05\x98M\x02\u0555\u0557\x05" +
    "\x9AN\x02\u0556\u0553\x03\x02\x02\x02\u0556\u0554\x03\x02\x02\x02\u0556" +
    "\u0555\x03\x02\x02\x02\u0557\x11\x03\x02\x02\x02\u0558\u0559\x07-\x02" +
    "\x02\u0559\u055A\x05\u043C\u021F\x02\u055A\u055B\x05|?\x02\u055B\x13\x03" +
    "\x02\x02\x02\u055C\u055E\x05\u0400\u0201\x02\u055D\u055C\x03\x02\x02\x02" +
    "\u055D\u055E\x03\x02\x02\x02\u055E\u0561\x03\x02\x02\x02\u055F\u0560\x06" +
    "\v\t\x02\u0560\u0562\x07\u020A\x02\x02\u0561\u055F\x03\x02\x02\x02\u0561" +
    "\u0562\x03\x02\x02\x02\u0562\u0563\x03\x02\x02\x02\u0563\u0564\x07\u0289" +
    "\x02\x02\u0564\u0566\x05\u0446\u0224\x02\u0565\u0567\x05\x16\f\x02\u0566" +
    "\u0565\x03\x02\x02\x02\u0566\u0567\x03\x02\x02\x02\u0567\x15\x03\x02\x02" +
    "\x02\u0568\u056B\x05\x18\r\x02\u0569\u056C\x05\u03B2\u01DA\x02\u056A\u056C" +
    "\x054\x1B\x02\u056B\u0569\x03\x02\x02\x02\u056B\u056A\x03\x02\x02\x02" +
    "\u056B\u056C\x03\x02\x02\x02\u056C\u0576\x03\x02\x02\x02\u056D\u0576\x05" +
    "\u03B2\u01DA\x02\u056E\u0576\x054\x1B\x02\u056F\u0570\x05\x1A\x0E\x02" +
    "\u0570\u0571\x07\u0198\x02\x02\u0571\u0573\x03\x02\x02\x02\u0572\u056F" +
    "\x03\x02\x02\x02\u0572\u0573\x03\x02\x02\x02\u0573\u0574\x03\x02\x02\x02" +
    "\u0574\u0576\x05\x1C\x0F\x02\u0575\u0568\x03\x02\x02\x02\u0575\u056D\x03" +
    "\x02\x02\x02\u0575\u056E\x03\x02\x02\x02\u0575\u0572\x03\x02\x02\x02\u0576" +
    "\x17\x03\x02\x02\x02\u0577\u057F\x05\x1A\x0E\x02\u0578\u0579\x05\x1A\x0E" +
    "\x02\u0579\u057A\x07\u0198\x02\x02\u057A\u057C\x03\x02\x02\x02\u057B\u0578" +
    "\x03\x02\x02\x02\u057B\u057C\x03\x02\x02\x02\u057C\u057D\x03\x02\x02\x02" +
    "\u057D\u057F\x05 \x11\x02\u057E\u0577\x03\x02\x02\x02\u057E\u057B\x03" +
    "\x02\x02\x02\u057F\x19\x03\x02\x02\x02\u0580\u0585\x05\"\x12\x02\u0581" +
    "\u0582\x07\u0198\x02\x02\u0582\u0584\x05\"\x12\x02\u0583\u0581\x03\x02" +
    "\x02\x02\u0584\u0587\x03\x02\x02\x02\u0585\u0583\x03\x02\x02\x02\u0585" +
    "\u0586\x03\x02\x02\x02\u0586\x1B\x03\x02\x02\x02\u0587\u0585\x03\x02\x02" +
    "\x02\u0588\u0589\x07{\x02\x02\u0589\u0590\x07\u0158\x02\x02\u058A\u058B" +
    "\x07\xA4\x02\x02\u058B\u0590\x07\u0158\x02\x02\u058C\u0590\x05\x1E\x10" +
    "\x02\u058D\u058E\x06\x0F\n\x02\u058E\u0590\t\x02\x02\x02\u058F\u0588\x03" +
    "\x02\x02\x02\u058F\u058A\x03\x02\x02\x02\u058F\u058C\x03\x02\x02\x02\u058F" +
    "\u058D\x03\x02\x02\x02\u0590\x1D\x03\x02\x02\x02\u0591\u0592\x07\u01AC" +
    "\x02\x02\u0592\u0594\x07\"\x02\x02\u0593\u0595\x05\u0402\u0202\x02\u0594" +
    "\u0593\x03\x02\x02\x02\u0594\u0595\x03\x02\x02\x02\u0595\u0599\x03\x02" +
    "\x02\x02\u0596\u059A\x05\u03BA\u01DE\x02\u0597\u0598\x07\xFC\x02\x02\u0598" +
    "\u059A\x05\u046E\u0238\x02\u0599\u0596\x03\x02\x02\x02\u0599\u0597\x03" +
    "\x02\x02\x02\u059A\u05F3\x03\x02\x02\x02\u059B\u059C\x07\u01E9\x02\x02" +
    "\u059C\u059D\x07\"\x02\x02\u059D\u05F3\x05\u0462\u0232\x02\u059E\u059F" +
    "\x07\u0110\x02\x02\u059F\u05A1\x07\"\x02\x02\u05A0\u05A2\x05\u0402\u0202" +
    "\x02\u05A1\u05A0\x03\x02\x02\x02\u05A1\u05A2\x03\x02\x02\x02\u05A2\u05A3" +
    "\x03\x02\x02\x02\u05A3\u05F3\x056\x1C\x02\u05A4\u05A5\x07\u0248\x02\x02" +
    "\u05A5\u05A7\x07\"\x02\x02\u05A6\u05A8\x05\u0402\u0202\x02\u05A7\u05A6" +
    "\x03\x02\x02\x02\u05A7\u05A8\x03\x02\x02\x02\u05A8\u05A9\x03\x02\x02\x02" +
    "\u05A9\u05AB\x056\x1C\x02\u05AA\u05AC\x05\u0402\u0202\x02\u05AB\u05AA" +
    "\x03\x02\x02\x02\u05AB\u05AC\x03\x02\x02\x02\u05AC\u05F3\x03\x02\x02\x02" +
    "\u05AD\u05AE\x07A\x02\x02\u05AE\u05B0\x07\"\x02\x02\u05AF\u05B1\x05\u0402" +
    "\u0202\x02\u05B0\u05AF\x03\x02\x02\x02\u05B0\u05B1\x03\x02\x02\x02\u05B1" +
    "\u05B2\x03\x02\x02\x02\u05B2\u05F3\x056\x1C\x02\u05B3\u05B4\x07\u01C5" +
    "\x02\x02\u05B4\u05B5\x07\"\x02\x02\u05B5\u05B9\x056\x1C\x02\u05B6\u05B8" +
    "\x05\u0230\u0119\x02\u05B7\u05B6\x03\x02\x02\x02\u05B8\u05BB\x03\x02\x02" +
    "\x02\u05B9\u05B7\x03\x02\x02\x02\u05B9\u05BA\x03\x02\x02\x02\u05BA\u05F3" +
    "\x03\x02\x02\x02\u05BB\u05B9\x03\x02\x02\x02\u05BC\u05BD\x07\'\x02\x02" +
    "\u05BD\u05BF\x07\"\x02\x02\u05BE\u05C0\x05\u0402\u0202\x02\u05BF\u05BE" +
    "\x03\x02\x02\x02\u05BF\u05C0\x03\x02\x02\x02\u05C0\u05C1\x03\x02\x02\x02" +
    "\u05C1\u05C5\x056\x1C\x02\u05C2\u05C4\x05\u0232\u011A\x02\u05C3\u05C2" +
    "\x03\x02\x02\x02\u05C4\u05C7\x03\x02\x02\x02\u05C5\u05C3\x03\x02\x02\x02" +
    "\u05C5\u05C6\x03\x02\x02\x02\u05C6\u05F3\x03\x02\x02\x02\u05C7\u05C5\x03" +
    "\x02\x02\x02\u05C8\u05C9\x07W\x02\x02\u05C9\u05CB\x07\"\x02\x02\u05CA" +
    "\u05CC\x05\u0402\u0202\x02\u05CB\u05CA\x03\x02\x02\x02\u05CB\u05CC\x03" +
    "\x02\x02\x02\u05CC\u05CD\x03\x02\x02\x02\u05CD\u05F3\x05\u046E\u0238\x02" +
    "\u05CE\u05CF\x074\x02\x02\u05CF\u05D0\x07\"\x02\x02\u05D0\u05F3\x056\x1C" +
    "\x02\u05D1\u05F3\x058\x1D\x02\u05D2\u05D3\x07\u011B\x02\x02\u05D3\u05D5" +
    "\x07\"\x02\x02\u05D4\u05D6\x05\u0402\u0202\x02\u05D5\u05D4\x03\x02\x02" +
    "\x02\u05D5\u05D6\x03\x02\x02\x02\u05D6\u05DB\x03\x02\x02\x02\u05D7\u05D8" +
    "\x05\u0462\u0232\x02\u05D8\u05D9\x07\u0212\x02\x02\u05D9\u05DA\x05\u03BA" +
    "\u01DE\x02\u05DA\u05DC\x03\x02\x02\x02\u05DB\u05D7\x03\x02\x02\x02\u05DB" +
    "\u05DC\x03\x02\x02\x02\u05DC\u05F3\x03\x02\x02\x02\u05DD\u05DE\x07\u01F1" +
    "\x02\x02\u05DE\u05DF\x07\"\x02\x02\u05DF\u05E0\x05\u0460\u0231\x02\u05E0" +
    "\u05E1\x07\u02AC\x02\x02\u05E1\u05E2\x07\u0289\x02\x02\u05E2\u05E4\x05" +
    "\u0446\u0224\x02\u05E3\u05E5\x052\x1A\x02\u05E4\u05E3\x03\x02\x02\x02" +
    "\u05E4\u05E5\x03\x02\x02\x02\u05E5\u05F3\x03\x02\x02\x02\u05E6\u05E7\x06" +
    "\x10\v\x02\u05E7\u05E8\x07{\x02\x02\u05E8\u05E9\x07\"\x02\x02\u05E9\u05EA" +
    "\x056\x1C\x02\u05EA\u05EB\x07\u0158\x02\x02\u05EB\u05F3\x03\x02\x02\x02" +
    "\u05EC\u05ED\x06\x10\f\x02\u05ED\u05EE\x07\xA4\x02\x02\u05EE\u05EF\x07" +
    "\"\x02\x02\u05EF\u05F0\x056\x1C\x02\u05F0\u05F1\x07\u0158\x02\x02\u05F1" +
    "\u05F3\x03\x02\x02\x02\u05F2\u0591\x03\x02\x02\x02\u05F2\u059B\x03\x02" +
    "\x02\x02\u05F2\u059E\x03\x02\x02\x02\u05F2\u05A4\x03\x02\x02\x02\u05F2" +
    "\u05AD\x03\x02\x02\x02\u05F2\u05B3\x03\x02\x02\x02\u05F2\u05BC\x03\x02" +
    "\x02\x02\u05F2\u05C8\x03\x02\x02\x02\u05F2\u05CE\x03\x02\x02\x02\u05F2" +
    "\u05D1\x03\x02\x02\x02\u05F2\u05D2\x03\x02\x02\x02\u05F2\u05DD\x03\x02" +
    "\x02\x02\u05F2\u05E6\x03\x02\x02\x02\u05F2\u05EC\x03\x02\x02\x02\u05F3" +
    "\x1F\x03\x02\x02\x02\u05F4\u05F7\x05$\x13\x02\u05F5\u05F7\x05\u03A6\u01D4" +
    "\x02\u05F6\u05F4\x03\x02\x02\x02\u05F6\u05F5\x03\x02\x02\x02\u05F7\u0600" +
    "\x03\x02\x02\x02\u05F8\u05FC\x07\u0198\x02\x02\u05F9\u05FD\x05$\x13\x02" +
    "\u05FA\u05FD\x05\"\x12\x02\u05FB\u05FD\x05\u03A6\u01D4\x02\u05FC\u05F9" +
    "\x03\x02\x02\x02\u05FC\u05FA\x03\x02\x02\x02\u05FC\u05FB\x03\x02\x02\x02" +
    "\u05FD\u05FF\x03\x02\x02\x02\u05FE\u05F8\x03\x02\x02\x02\u05FF\u0602\x03" +
    "\x02\x02\x02\u0600\u05FE\x03\x02\x02\x02\u0600\u0601\x03\x02\x02\x02\u0601" +
    "!\x03\x02\x02\x02\u0602\u0600\x03\x02\x02\x02\u0603\u0607\x05,\x17\x02" +
    "\u0604\u0607\x05.\x18\x02\u0605\u0607\x052\x1A\x02\u0606\u0603\x03\x02" +
    "\x02\x02\u0606\u0604\x03\x02\x02\x02\u0606\u0605\x03\x02\x02\x02\u0607" +
    "#\x03\x02\x02\x02\u0608\u060A\x07\u01AC\x02\x02\u0609\u060B\x07\u01C7" +
    "\x02\x02\u060A\u0609\x03\x02\x02\x02\u060A\u060B\x03\x02\x02\x02\u060B" +
    "\u0618\x03\x02\x02\x02\u060C\u060D\x05\u0460\u0231\x02\u060D\u060F\x05" +
    "\u0364\u01B3\x02\u060E\u0610\x05\u035A\u01AE\x02\u060F\u060E\x03\x02\x02" +
    "\x02\u060F\u0610\x03\x02\x02\x02\u0610\u0612\x03\x02\x02\x02\u0611\u0613" +
    "\x05&\x14\x02\u0612\u0611\x03\x02\x02\x02\u0612\u0613\x03\x02\x02\x02" +
    "\u0613\u0619\x03\x02\x02\x02\u0614\u0615\x07\u019B\x02\x02\u0615\u0616" +
    "\x05X-\x02\u0616\u0617\x07\u019C\x02\x02\u0617\u0619\x03\x02\x02\x02\u0618" +
    "\u060C\x03\x02\x02\x02\u0618\u0614\x03\x02\x02\x02\u0619\u068E\x03\x02" +
    "\x02\x02\u061A\u061B\x07\u01AC\x02\x02\u061B\u068E\x05\u0360\u01B1\x02" +
    "\u061C\u061E\x07\u01C3\x02\x02\u061D\u061F\x07\u01C7\x02\x02\u061E\u061D" +
    "\x03\x02\x02\x02\u061E\u061F\x03\x02\x02\x02\u061F\u0620\x03\x02\x02\x02" +
    "\u0620\u0621\x05\u040A\u0206\x02\u0621\u0622\x05\u0460\u0231\x02\u0622" +
    "\u0624\x05\u0364\u01B3\x02\u0623\u0625\x05&\x14\x02\u0624\u0623\x03\x02" +
    "\x02\x02\u0624\u0625\x03\x02\x02\x02\u0625\u068E\x03\x02\x02\x02\u0626" +
    "\u0628\x07\xDF\x02\x02\u0627\u0629\x07\u01C7\x02\x02\u0628\u0627\x03\x02" +
    "\x02\x02\u0628\u0629\x03\x02\x02\x02\u0629\u062A\x03\x02\x02\x02\u062A" +
    "\u062B\x05\u040A\u0206\x02\u062B\u062D\x05\u0364\u01B3\x02\u062C\u062E" +
    "\x05&\x14\x02\u062D\u062C\x03\x02\x02\x02\u062D\u062E\x03\x02\x02\x02" +
    "\u062E\u068E\x03\x02\x02\x02\u062F\u0646\x07\u01E9\x02\x02\u0630\u0632" +
    "\x07\u01C7\x02\x02\u0631\u0630\x03\x02\x02\x02\u0631\u0632\x03\x02\x02" +
    "\x02\u0632\u0633\x03\x02\x02\x02\u0633\u0635\x05\u040A\u0206\x02\u0634" +
    "\u0636\x05(\x15\x02\u0635\u0634\x03\x02\x02\x02\u0635\u0636\x03\x02\x02" +
    "\x02\u0636\u0647\x03\x02\x02\x02\u0637\u0638\x07\u01FB\x02\x02\u0638\u063F" +
    "\x07\u021B\x02\x02\u0639\u063A\x06\x13\r\x02\u063A\u0640\x05\u040A\u0206" +
    "\x02\u063B\u063D\x06\x13\x0E\x02\u063C\u063E\x05\u040A\u0206\x02\u063D" +
    "\u063C\x03\x02\x02\x02\u063D\u063E\x03\x02\x02\x02\u063E\u0640\x03\x02" +
    "\x02\x02\u063F\u0639\x03\x02\x02\x02\u063F\u063B\x03\x02\x02\x02\u0640" +
    "\u0647\x03\x02\x02\x02\u0641\u0642\x07\u0253\x02\x02\u0642\u0647\x07\u021B" +
    "\x02\x02\u0643\u0644\x05\u0190\xC9\x02\u0644\u0645\x05\u0414\u020B\x02" +
    "\u0645\u0647\x03\x02\x02\x02\u0646\u0631\x03\x02\x02\x02\u0646\u0637\x03" +
    "\x02\x02\x02\u0646\u0641\x03\x02\x02\x02\u0646\u0643\x03\x02\x02\x02\u0647" +
    "\u068E\x03\x02\x02\x02\u0648\u0649\x07z\x02\x02\u0649\u068E\x07\u021A" +
    "\x02\x02\u064A\u064B\x07\x91\x02\x02\u064B\u068E\x07\u021A\x02\x02\u064C" +
    "\u064E\x07\u01AE\x02\x02\u064D\u064F\x07\u01C7\x02\x02\u064E\u064D\x03" +
    "\x02\x02\x02\u064E\u064F\x03\x02\x02\x02\u064F\u0650\x03\x02\x02\x02\u0650" +
    "\u065A\x05\u040A\u0206\x02\u0651\u0652\x07\u026D\x02\x02\u0652\u0656\x07" +
    "\u01E0\x02\x02\u0653\u0654\x06\x13\x0F\x02\u0654\u0657\x05\u02FA\u017E" +
    "\x02\u0655\u0657\x05\u0476\u023C\x02\u0656\u0653\x03\x02\x02\x02\u0656" +
    "\u0655\x03\x02\x02\x02\u0657\u065B\x03\x02\x02\x02\u0658\u0659\x07\u01E9" +
    "\x02\x02\u0659\u065B\x07\u01E0\x02\x02\u065A\u0651\x03\x02\x02\x02\u065A" +
    "\u0658\x03\x02\x02\x02\u065B\u068E\x03\x02\x02\x02\u065C\u065D\x06\x13" +
    "\x10\x02\u065D\u065E\x07\u01AE\x02\x02\u065E\u065F\x07\u020B\x02\x02\u065F" +
    "\u0660\x05\u0414\u020B\x02\u0660\u0661\x05\u0382\u01C2\x02\u0661\u068E" +
    "\x03\x02\x02\x02\u0662\u0663\x06\x13\x11\x02\u0663\u0664\x07\u01AE\x02" +
    "\x02\u0664\u0665\x07\u01C5\x02\x02\u0665\u0666\x05\u0460\u0231\x02\u0666" +
    "\u0667\x05\u035E\u01B0\x02\u0667\u068E\x03\x02\x02\x02\u0668\u0669\x06" +
    "\x13\x12\x02\u0669\u066A\x07\u025E\x02\x02\u066A\u066B\x07\u01C7\x02\x02" +
    "\u066B\u066C\x05\u040A\u0206\x02\u066C\u066D\x07\u028F\x02\x02\u066D\u066E" +
    "\x05\u0460\u0231\x02\u066E\u068E\x03\x02\x02\x02\u066F\u0671\x07\u025E" +
    "\x02\x02\u0670\u0672\t\x03\x02\x02\u0671\u0670\x03\x02\x02\x02\u0671\u0672" +
    "\x03\x02\x02\x02\u0672\u0673\x03\x02\x02\x02\u0673\u068E\x05\u0440\u0221" +
    "\x02\u0674\u0675\x06\x13\x13\x02\u0675\u0676\x07\u025E\x02\x02\u0676\u0677" +
    "\x05\u0190\xC9\x02\u0677\u0678\x05\u0414\u020B\x02\u0678\u0679\x07\u028F" +
    "\x02\x02\u0679\u067A\x05\u0412\u020A\x02\u067A\u068E\x03\x02\x02\x02\u067B" +
    "\u067C\x07\u01CB\x02\x02\u067C\u067D\x07\u028F\x02\x02\u067D\u0681\x05" +
    "\u02EE\u0178\x02\u067E\u067F\x06\x13\x14\x02\u067F\u0682\x07\u01E0\x02" +
    "\x02\u0680\u0682\x05\u03A0\u01D1\x02\u0681\u067E\x03\x02\x02\x02\u0681" +
    "\u0680\x03\x02\x02\x02\u0682\u0684\x03\x02\x02\x02\u0683\u0685\x05\u03D2" +
    "\u01EA\x02\u0684\u0683\x03\x02\x02\x02\u0684\u0685\x03\x02\x02\x02\u0685" +
    "\u068E\x03\x02\x02\x02\u0686\u068E\x07\u01FA\x02\x02\u0687\u0688\x07\u024C" +
    "\x02\x02\u0688\u0689\x07\u01BE\x02\x02\u0689\u068E\x05*\x16\x02\u068A" +
    "\u068B\x06\x13\x15\x02\u068B\u068C\x077\x02\x02\u068C\u068E\x07\xFB\x02" +
    "\x02\u068D\u0608\x03\x02\x02\x02\u068D\u061A\x03\x02\x02\x02\u068D\u061C" +
    "\x03\x02\x02\x02\u068D\u0626\x03\x02\x02\x02\u068D\u062F\x03\x02\x02\x02" +
    "\u068D\u0648\x03\x02\x02\x02\u068D\u064A\x03\x02\x02\x02\u068D\u064C\x03" +
    "\x02\x02\x02\u068D\u065C\x03\x02\x02\x02\u068D\u0662\x03\x02\x02\x02\u068D" +
    "\u0668\x03\x02\x02\x02\u068D\u066F\x03\x02\x02\x02\u068D\u0674\x03\x02" +
    "\x02\x02\u068D\u067B\x03\x02\x02\x02\u068D\u0686\x03\x02\x02\x02\u068D" +
    "\u0687\x03\x02\x02\x02\u068D\u068A\x03\x02\x02\x02\u068E%\x03\x02\x02" +
    "\x02\u068F\u0690\x07=\x02\x02\u0690\u0693\x05\u0460\u0231\x02\u0691\u0693" +
    "\x07\x96\x02\x02\u0692\u068F\x03\x02\x02\x02\u0692\u0691\x03\x02\x02\x02" +
    "\u0693\'\x03\x02\x02\x02\u0694\u0695\t\x04\x02\x02\u0695)\x03\x02\x02" +
    "\x02\u0696\u0698\x05\u0460\u0231\x02\u0697\u0699\x05\u014C\xA7\x02\u0698" +
    "\u0697\x03\x02\x02\x02\u0698\u0699\x03\x02\x02\x02\u0699\u06A1\x03\x02" +
    "\x02\x02\u069A\u069B\x07\u0198\x02\x02\u069B\u069D\x05\u0460\u0231\x02" +
    "\u069C\u069E\x05\u014C\xA7\x02\u069D\u069C\x03\x02\x02\x02\u069D\u069E" +
    "\x03\x02\x02\x02\u069E\u06A0\x03\x02\x02\x02\u069F\u069A\x03\x02\x02\x02" +
    "\u06A0\u06A3\x03\x02\x02\x02\u06A1\u069F\x03\x02\x02\x02\u06A1\u06A2\x03" +
    "\x02\x02\x02\u06A2+\x03\x02\x02\x02\u06A3\u06A1\x03\x02\x02\x02\u06A4" +
    "\u06A6\x07@\x02\x02\u06A5\u06A7\x07\u0181\x02\x02\u06A6\u06A5\x03\x02" +
    "\x02\x02\u06A6\u06A7\x03\x02\x02\x02\u06A7\u06AA\x03\x02\x02\x02\u06A8" +
    "\u06AB\x07\u01E0\x02\x02\u06A9\u06AB\x05\u0460\u0231\x02\u06AA\u06A8\x03" +
    "\x02\x02\x02\u06AA\u06A9\x03\x02\x02\x02\u06AB-\x03\x02\x02\x02\u06AC" +
    "\u06AE\x07\u0226\x02\x02\u06AD\u06AF\x07\u0181\x02\x02\u06AE\u06AD\x03" +
    "\x02\x02\x02\u06AE\u06AF\x03\x02\x02\x02\u06AF\u06B2\x03\x02\x02\x02\u06B0" +
    "\u06B3\x07\u01E0\x02\x02\u06B1\u06B3\x05\u0460\u0231\x02\u06B2\u06B0\x03" +
    "\x02\x02\x02\u06B2\u06B1\x03\x02\x02\x02\u06B3/\x03\x02\x02\x02\u06B4" +
    "\u06B6\x05,\x17\x02\u06B5\u06B7\x05.\x18\x02\u06B6\u06B5\x03\x02\x02\x02" +
    "\u06B6\u06B7\x03\x02\x02\x02\u06B7\u06BD\x03\x02\x02\x02\u06B8\u06BA\x05" +
    ".\x18\x02\u06B9\u06BB\x05,\x17\x02\u06BA\u06B9\x03\x02\x02\x02\u06BA\u06BB" +
    "\x03\x02\x02\x02\u06BB\u06BD\x03\x02\x02\x02\u06BC\u06B4\x03\x02\x02\x02" +
    "\u06BC\u06B8\x03\x02\x02\x02\u06BD1\x03\x02\x02\x02\u06BE\u06BF\x06\x1A" +
    "\x16\x02\u06BF\u06C0\t\x05\x02\x02\u06C0\u06C1\x07\u02A0\x02\x02\u06C1" +
    "3\x03\x02\x02\x02\u06C2\u06C3\x07&\x02\x02\u06C3\u06C4\x07\xFB\x02\x02" +
    "\u06C45\x03\x02\x02\x02\u06C5\u06C8\x07\u01AD\x02\x02\u06C6\u06C8\x05" +
    "\u0462\u0232\x02\u06C7\u06C5\x03\x02\x02\x02\u06C7\u06C6\x03\x02\x02\x02" +
    "\u06C87\x03\x02\x02\x02\u06C9\u06CA\x07\u011B\x02\x02\u06CA\u06CC\x07" +
    "\"\x02\x02\u06CB\u06CD\x05\u0402\u0202\x02\u06CC\u06CB\x03\x02\x02\x02" +
    "\u06CC\u06CD\x03\x02\x02\x02\u06CD\u06D2\x03\x02\x02\x02\u06CE\u06CF\x05" +
    "\u0462\u0232\x02\u06CF\u06D0\x07\u0212\x02\x02\u06D0\u06D1\x05\u03BA\u01DE" +
    "\x02\u06D1\u06D3\x03\x02\x02\x02\u06D2\u06CE\x03\x02\x02\x02\u06D2\u06D3" +
    "\x03\x02\x02\x02\u06D39\x03\x02\x02\x02\u06D4\u06D5\x07\u0158\x02\x02" +
    "\u06D5\u06F7\x05\u042E\u0218\x02\u06D6\u06D7\t\x06\x02\x02\u06D7\u06D8" +
    "\x07p\x02\x02\u06D8\u06DA\x05\u0480\u0241\x02\u06D9\u06DB\x05B\"\x02\u06DA" +
    "\u06D9\x03\x02\x02\x02\u06DA\u06DB\x03\x02\x02\x02\u06DB\u06F8\x03\x02" +
    "\x02\x02\u06DC\u06F0\x06\x1E\x17\x02\u06DD\u06F1\x03\x02\x02\x02\u06DE" +
    "\u06DF\x07\u01C3\x02\x02\u06DF\u06E0\x07p\x02\x02\u06E0\u06EB\x05\u0480" +
    "\u0241\x02\u06E1\u06E8\x05F$\x02\u06E2\u06E4\x07\u0198\x02\x02\u06E3\u06E2" +
    "\x03\x02\x02\x02\u06E3\u06E4\x03\x02\x02\x02\u06E4\u06E5\x03\x02\x02\x02" +
    "\u06E5\u06E7\x05F$\x02\u06E6\u06E3\x03\x02\x02\x02\u06E7\u06EA\x03\x02" +
    "\x02\x02\u06E8\u06E6\x03\x02\x02\x02\u06E8\u06E9\x03\x02\x02\x02\u06E9" +
    "\u06EC\x03\x02\x02\x02\u06EA\u06E8\x03\x02\x02\x02\u06EB\u06E1\x03\x02" +
    "\x02\x02\u06EB\u06EC\x03\x02\x02\x02\u06EC\u06F1\x03\x02\x02\x02\u06ED" +
    "\u06F1\t\x07\x02\x02\u06EE\u06EF\x07\u023F\x02\x02\u06EF\u06F1\x07\u01AB" +
    "\x02\x02\u06F0\u06DD\x03\x02\x02\x02\u06F0\u06DE\x03\x02\x02\x02\u06F0" +
    "\u06ED\x03\x02\x02\x02\u06F0\u06EE\x03\x02\x02\x02\u06F1\u06F8\x03\x02" +
    "\x02\x02\u06F2\u06F3\x07\u025E\x02\x02\u06F3\u06F4\x07\u028F\x02\x02\u06F4" +
    "\u06F8\x05\u0460\u0231\x02\u06F5\u06F6\x06\x1E\x18\x02\u06F6\u06F8\x05" +
    "B\"\x02\u06F7\u06D6\x03\x02\x02\x02\u06F7\u06DC\x03\x02\x02\x02\u06F7" +
    "\u06F2\x03\x02\x02\x02\u06F7\u06F5\x03\x02\x02\x02\u06F8;\x03\x02\x02" +
    "\x02\u06F9\u06FA\x07\u0294\x02\x02\u06FA\u06FB\x07\u0158\x02\x02\u06FB" +
    "\u06FC\x05\u042E\u0218\x02\u06FC\u06FD\x07\u026D\x02\x02\u06FD\u06FF\t" +
    "\b\x02\x02\u06FE\u0700\x05> \x02\u06FF\u06FE\x03\x02\x02\x02\u06FF\u0700" +
    "\x03\x02\x02\x02\u0700=\x03\x02\x02\x02\u0701\u0708\x05@!\x02\u0702\u0704" +
    "\x07\u0198\x02\x02\u0703\u0702\x03\x02\x02\x02\u0703\u0704\x03\x02\x02" +
    "\x02\u0704\u0705\x03\x02\x02\x02\u0705\u0707\x05@!\x02\u0706\u0703\x03" +
    "\x02\x02\x02\u0707\u070A\x03\x02\x02\x02\u0708\u0706\x03\x02\x02\x02\u0708" +
    "\u0709\x03\x02\x02\x02\u0709?\x03\x02\x02\x02\u070A\u0708\x03\x02\x02" +
    "\x02\u070B\u070C\x05\x98M\x02\u070CA\x03\x02\x02\x02\u070D\u0714\x05D" +
    "#\x02\u070E\u0710\x07\u0198\x02\x02\u070F\u070E\x03\x02\x02\x02\u070F" +
    "\u0710\x03\x02\x02\x02\u0710\u0711\x03\x02\x02\x02\u0711\u0713\x05D#\x02" +
    "\u0712\u070F\x03\x02\x02\x02\u0713\u0716\x03\x02\x02\x02\u0714\u0712\x03" +
    "\x02\x02\x02\u0714\u0715\x03\x02\x02\x02\u0715C\x03\x02\x02\x02\u0716" +
    "\u0714\x03\x02\x02\x02\u0717\u0719\x07\xA6\x02\x02\u0718\u071A\x07\u0181" +
    "\x02\x02\u0719\u0718\x03\x02\x02\x02\u0719\u071A\x03\x02\x02\x02\u071A" +
    "\u071B\x03\x02\x02\x02\u071B\u0722\x05\u049A\u024E\x02\u071C\u0722\x05" +
    "\x90I\x02\u071D\u0722\x05\x92J\x02\u071E\u0722\x05\x98M\x02\u071F\u0722" +
    "\x05\x9AN\x02\u0720\u0722\x05\xA0Q\x02\u0721\u0717\x03\x02\x02\x02\u0721" +
    "\u071C\x03\x02\x02\x02\u0721\u071D\x03\x02\x02\x02\u0721\u071E\x03\x02" +
    "\x02\x02\u0721\u071F\x03\x02\x02\x02\u0721\u0720\x03\x02\x02\x02\u0722" +
    "E\x03\x02\x02\x02\u0723\u0725\x07\xA6\x02\x02\u0724\u0726\x07\u0181\x02" +
    "\x02\u0725\u0724\x03\x02\x02\x02\u0725\u0726\x03\x02\x02\x02\u0726\u0727" +
    "\x03\x02\x02\x02\u0727\u072B\x05\u049A\u024E\x02\u0728\u072B\x05\x90I" +
    "\x02\u0729\u072B\x05\x92J\x02\u072A\u0723\x03\x02\x02\x02\u072A\u0728" +
    "\x03\x02\x02\x02\u072A\u0729\x03\x02\x02\x02\u072BG\x03\x02\x02\x02\u072C" +
    "\u072E\x05\xA6T\x02\u072D\u072C\x03\x02\x02\x02\u072D\u072E\x03\x02\x02" +
    "\x02\u072E\u0730\x03\x02\x02\x02\u072F\u0731\x05\u03C8\u01E5\x02\u0730" +
    "\u072F\x03\x02\x02\x02\u0730\u0731\x03\x02\x02\x02\u0731\u0733\x03\x02" +
    "\x02\x02\u0732\u0734\x05\xA8U\x02\u0733\u0732\x03\x02\x02\x02\u0733\u0734" +
    "\x03\x02\x02\x02\u0734\u0735\x03\x02\x02\x02\u0735\u0736\x07\u0171\x02" +
    "\x02\u0736\u0737\x05\u042A\u0216\x02\u0737\u0738\x05J&\x02\u0738I\x03" +
    "\x02\x02\x02\u0739\u073B\x05\u040C\u0207\x02\u073A\u0739\x03\x02\x02\x02" +
    "\u073A\u073B\x03\x02\x02\x02\u073B\u073C\x03\x02\x02\x02\u073C\u073D\x07" +
    "\u01B1\x02\x02\u073D\u073E\x05L\'\x02\u073EK\x03\x02\x02\x02\u073F\u0741" +
    "\x05^0\x02\u0740\u0742\x05N(\x02\u0741\u0740\x03\x02\x02\x02\u0741\u0742" +
    "\x03\x02\x02\x02\u0742M\x03\x02\x02\x02\u0743\u0745\x07\u02AC\x02\x02" +
    "\u0744\u0746\t\t\x02\x02\u0745\u0744\x03\x02\x02\x02\u0745\u0746\x03\x02" +
    "\x02\x02\u0746\u0747\x03\x02\x02\x02\u0747\u0748\x07\u01C5\x02\x02\u0748" +
    "\u0749\x07\u024A\x02\x02\u0749O\x03\x02\x02\x02\u074A\u075D\x07\u01CD" +
    "\x02\x02\u074B\u075E\x05R*\x02\u074C\u075E\x05V,\x02\u074D\u075E\x05d" +
    "3\x02\u074E\u075E\x05b2\x02\u074F\u075E\x05f4\x02\u0750\u075E\x05t;\x02" +
    "\u0751\u075E\x05\xA2R\x02\u0752\u075E\x05\xAAV\x02\u0753\u075E\x05n8\x02" +
    "\u0754\u075E\x05z>\x02\u0755\u075E\x05\x80A\x02\u0756\u075E\x05\xAEX\x02" +
    "\u0757\u0758\x06)\x19\x02\u0758\u075E\x05\xB0Y\x02\u0759\u075A\x06)\x1A" +
    "\x02\u075A\u075E\x05\xB2Z\x02\u075B\u075C\x06)\x1B\x02\u075C\u075E\x05" +
    "\x82B\x02\u075D\u074B\x03\x02\x02\x02\u075D\u074C\x03\x02\x02\x02\u075D" +
    "\u074D\x03\x02\x02\x02\u075D\u074E\x03\x02\x02\x02\u075D\u074F\x03\x02" +
    "\x02\x02\u075D\u0750\x03\x02\x02\x02\u075D\u0751\x03\x02\x02\x02\u075D" +
    "\u0752\x03\x02\x02\x02\u075D\u0753\x03\x02\x02\x02\u075D\u0754\x03\x02" +
    "\x02\x02\u075D\u0755\x03\x02\x02\x02\u075D\u0756\x03\x02\x02\x02\u075D" +
    "\u0757\x03\x02\x02\x02\u075D\u0759\x03\x02\x02\x02\u075D\u075B\x03\x02" +
    "\x02\x02\u075EQ\x03\x02\x02\x02\u075F\u0761\x07\u01D5\x02\x02\u0760\u0762" +
    "\x05\u03CC\u01E7\x02\u0761\u0760\x03\x02\x02\x02\u0761\u0762\x03\x02\x02" +
    "\x02\u0762\u0763\x03\x02\x02\x02\u0763\u0767\x05\u0418\u020D\x02\u0764" +
    "\u0766\x05T+\x02\u0765\u0764\x03\x02\x02\x02\u0766\u0769\x03\x02\x02\x02" +
    "\u0767\u0765\x03\x02\x02\x02\u0767\u0768\x03\x02\x02\x02\u0768S\x03\x02" +
    "\x02\x02\u0769\u0767\x03\x02\x02\x02\u076A\u076F\x05\u03B0\u01D9\x02\u076B" +
    "\u076F\x05\u03AC\u01D7\x02\u076C\u076D\x06+\x1C\x02\u076D\u076F\x05\u03AE" +
    "\u01D8\x02\u076E\u076A\x03\x02\x02\x02\u076E\u076B\x03\x02\x02\x02\u076E" +
    "\u076C\x03\x02\x02\x02\u076FU\x03\x02\x02\x02\u0770\u0772\x07\u0159\x02" +
    "\x02\u0771\u0770\x03\x02\x02\x02\u0771\u0772\x03\x02\x02\x02\u0772\u0773" +
    "\x03\x02\x02\x02\u0773\u0775\x07\u0289\x02\x02\u0774\u0776\x05\u03CC\u01E7" +
    "\x02\u0775\u0774\x03\x02\x02\x02\u0775\u0776\x03\x02\x02\x02\u0776\u0777" +
    "\x03\x02\x02\x02\u0777\u078E\x05\u0440\u0221\x02\u0778\u0779\x07\u019B" +
    "\x02\x02\u0779\u077A\x05X-\x02\u077A\u077B\x07\u019C\x02\x02\u077B\u077D" +
    "\x03\x02\x02\x02\u077C\u0778\x03\x02\x02\x02\u077C\u077D\x03\x02\x02\x02" +
    "\u077D\u077F\x03\x02\x02\x02\u077E\u0780\x05\u03A4\u01D3\x02\u077F\u077E" +
    "\x03\x02\x02\x02\u077F\u0780\x03\x02\x02\x02\u0780\u0782\x03\x02\x02\x02" +
    "\u0781\u0783\x05\u03B2\u01DA\x02\u0782\u0781\x03\x02\x02\x02\u0782\u0783" +
    "\x03\x02\x02\x02\u0783\u0785\x03\x02\x02\x02\u0784\u0786\x05\\/\x02\u0785" +
    "\u0784\x03\x02\x02\x02\u0785\u0786\x03\x02\x02\x02\u0786\u078F\x03\x02" +
    "\x02\x02\u0787\u0788\x07\u0220\x02\x02\u0788\u078F\x05\u0446\u0224\x02" +
    "\u0789\u078A\x07\u019B\x02\x02\u078A\u078B\x07\u0220\x02\x02\u078B\u078C" +
    "\x05\u0446\u0224\x02\u078C\u078D\x07\u019C\x02\x02\u078D\u078F\x03\x02" +
    "\x02\x02\u078E\u077C\x03\x02\x02\x02\u078E\u0787\x03\x02\x02\x02\u078E" +
    "\u0789\x03\x02\x02\x02\u078FW\x03\x02\x02\x02\u0790\u0795\x05Z.\x02\u0791" +
    "\u0792\x07\u0198\x02\x02\u0792\u0794\x05Z.\x02\u0793\u0791\x03\x02\x02" +
    "\x02\u0794\u0797\x03\x02\x02\x02\u0795\u0793\x03\x02\x02\x02\u0795\u0796" +
    "\x03\x02\x02\x02\u0796Y\x03\x02\x02\x02\u0797\u0795\x03\x02\x02\x02\u0798" +
    "\u079B\x05\u0358\u01AD\x02\u0799\u079B\x05\u0360\u01B1\x02\u079A\u0798" +
    "\x03\x02\x02\x02\u079A\u0799\x03\x02\x02\x02\u079B[\x03\x02\x02\x02\u079C" +
    "\u079E\t\n\x02\x02\u079D\u079C\x03\x02\x02\x02\u079D\u079E\x03\x02\x02" +
    "\x02\u079E\u07A0\x03\x02\x02\x02\u079F\u07A1\x07\u01B1\x02\x02\u07A0\u079F" +
    "\x03\x02\x02\x02\u07A0\u07A1\x03\x02\x02\x02\u07A1\u07A2\x03\x02\x02\x02" +
    "\u07A2\u07A3\x05^0\x02\u07A3]\x03\x02\x02\x02\u07A4\u07A7\x05\u0112\x8A" +
    "\x02\u07A5\u07A7\x05\u0116\x8C\x02\u07A6\u07A4\x03\x02\x02\x02\u07A6\u07A5" +
    "\x03\x02\x02\x02\u07A7_\x03\x02\x02\x02\u07A8\u07AC\x07\u01CD\x02\x02" +
    "\u07A9\u07AD\x05b2\x02\u07AA\u07AD\x05d3\x02\u07AB\u07AD\x05f4\x02\u07AC" +
    "\u07A9\x03\x02\x02\x02\u07AC\u07AA\x03\x02\x02\x02\u07AC\u07AB\x03\x02" +
    "\x02\x02\u07AD\u07AF\x03\x02\x02\x02\u07AE\u07B0\x07\u0199\x02\x02\u07AF" +
    "\u07AE\x03\x02\x02\x02\u07AF\u07B0\x03\x02\x02\x02\u07B0\u07B1\x03\x02" +
    "\x02\x02\u07B1\u07B2\x07\x02\x02\x03\u07B2a\x03\x02\x02\x02\u07B3\u07B5" +
    "\x05\u03C8\u01E5\x02\u07B4\u07B3\x03\x02\x02\x02\u07B4\u07B5\x03\x02\x02" +
    "\x02";
MySQLParser._serializedATNSegment6 = "\u07B5\u07B6\x03\x02\x02\x02\u07B6\u07B7\x07\u0254\x02\x02\u07B7\u07B8" +
    "\x05\u041C\u020F\x02\u07B8\u07C1\x07\u019B\x02\x02\u07B9\u07BE\x05\u03CE" +
    "\u01E8\x02\u07BA\u07BB\x07\u0198\x02\x02\u07BB\u07BD\x05\u03CE\u01E8\x02" +
    "\u07BC\u07BA\x03\x02\x02\x02\u07BD\u07C0\x03\x02\x02\x02\u07BE\u07BC\x03" +
    "\x02\x02\x02\u07BE\u07BF\x03\x02\x02\x02\u07BF\u07C2\x03\x02\x02\x02\u07C0" +
    "\u07BE\x03\x02\x02\x02\u07C1\u07B9\x03\x02\x02\x02\u07C1\u07C2\x03\x02" +
    "\x02\x02\u07C2\u07C3\x03\x02\x02\x02\u07C3\u07C7\x07\u019C\x02\x02\u07C4" +
    "\u07C6\x05h5\x02\u07C5\u07C4\x03\x02\x02\x02\u07C6\u07C9\x03\x02\x02\x02" +
    "\u07C7\u07C5\x03\x02\x02\x02\u07C7\u07C8\x03\x02\x02\x02\u07C8\u07CA\x03" +
    "\x02\x02\x02\u07C9\u07C7\x03\x02\x02\x02\u07CA\u07CB\x05\u0308\u0185\x02" +
    "\u07CBc\x03\x02\x02\x02\u07CC\u07CE\x05\u03C8\u01E5\x02\u07CD\u07CC\x03" +
    "\x02\x02\x02\u07CD\u07CE\x03\x02\x02\x02\u07CE\u07CF\x03\x02\x02\x02\u07CF" +
    "\u07D0\x07\u0166\x02\x02\u07D0\u07D1\x05\u0420\u0211\x02\u07D1\u07DA\x07" +
    "\u019B\x02\x02\u07D2\u07D7\x05\u03D0\u01E9\x02\u07D3\u07D4\x07\u0198\x02" +
    "\x02\u07D4\u07D6\x05\u03D0\u01E9\x02\u07D5\u07D3\x03\x02\x02\x02\u07D6" +
    "\u07D9\x03\x02\x02\x02\u07D7\u07D5\x03\x02\x02\x02\u07D7\u07D8\x03\x02" +
    "\x02\x02\u07D8\u07DB\x03\x02\x02\x02\u07D9\u07D7\x03\x02\x02\x02\u07DA" +
    "\u07D2\x03\x02\x02\x02\u07DA\u07DB\x03\x02\x02\x02\u07DB\u07DC\x03\x02" +
    "\x02\x02\u07DC\u07DD\x07\u019C\x02\x02\u07DD\u07DE\x07\u0127\x02\x02\u07DE" +
    "\u07E2\x05\u03D4\u01EB\x02\u07DF\u07E1\x05h5\x02\u07E0\u07DF\x03\x02\x02" +
    "\x02\u07E1\u07E4\x03\x02\x02\x02\u07E2\u07E0\x03\x02\x02\x02\u07E2\u07E3" +
    "\x03\x02\x02\x02\u07E3\u07E5\x03\x02\x02\x02\u07E4\u07E2\x03\x02\x02\x02" +
    "\u07E5\u07E6\x05\u0308\u0185\x02\u07E6e\x03\x02\x02\x02\u07E7\u07E9\x07" +
    "?\x02\x02\u07E8\u07E7\x03\x02\x02\x02\u07E8\u07E9\x03\x02\x02\x02\u07E9" +
    "\u07EA\x03\x02\x02\x02\u07EA\u07EB\x07\u0166\x02\x02\u07EB\u07EC\x05\u0438" +
    "\u021D\x02\u07EC\u07ED\x07\u0127\x02\x02\u07ED\u07EE\t\v\x02\x02\u07EE" +
    "\u07EF\x071\x02\x02\u07EF\u07F0\x05\u0480\u0241\x02\u07F0g\x03\x02\x02" +
    "\x02\u07F1\u07F7\x05l7\x02\u07F2\u07F4\x07\u023F\x02\x02\u07F3\u07F2\x03" +
    "\x02\x02\x02\u07F3\u07F4\x03\x02\x02\x02\u07F4\u07F5\x03\x02\x02\x02\u07F5" +
    "\u07F7\x07\u01E5\x02\x02\u07F6\u07F1\x03\x02\x02\x02\u07F6\u07F3\x03\x02" +
    "\x02\x02\u07F7i\x03\x02\x02\x02\u07F8\u07FA\x05h5\x02\u07F9\u07F8\x03" +
    "\x02\x02\x02\u07FA\u07FB\x03\x02\x02\x02\u07FB\u07F9\x03\x02\x02\x02\u07FB" +
    "\u07FC\x03\x02\x02\x02\u07FCk\x03\x02\x02\x02\u07FD\u07FE\x07\r\x02\x02" +
    "\u07FE\u080F\x05\u0480\u0241\x02\u07FF\u0800\x07\x1C\x02\x02\u0800\u080F" +
    "\x07\u027A\x02\x02\u0801\u0802\x07\x1D\x02\x02\u0802\u080F\x07\u027A\x02" +
    "\x02\u0803\u0804\x07\x0F\x02\x02\u0804\u080F\x07\u027A\x02\x02\u0805\u0806" +
    "\x07\u0257\x02\x02\u0806\u0807\x07\u027A\x02\x02\u0807\u080F\x07o\x02" +
    "\x02\u0808\u0809\x07\u0239\x02\x02\u0809\u080A\x07\u027A\x02\x02\u080A" +
    "\u080F\x07o\x02\x02\u080B\u080C\x07\u027A\x02\x02\u080C\u080D\x07,\x02" +
    "\x02\u080D\u080F\t\f\x02\x02\u080E\u07FD\x03\x02\x02\x02\u080E\u07FF\x03" +
    "\x02\x02\x02\u080E\u0801\x03\x02\x02\x02\u080E\u0803\x03\x02\x02\x02\u080E" +
    "\u0805\x03\x02\x02\x02\u080E\u0808\x03\x02\x02\x02\u080E\u080B\x03\x02" +
    "\x02\x02\u080Fm\x03\x02\x02\x02\u0810\u0812\x05\u0400\u0201\x02\u0811" +
    "\u0810\x03\x02\x02\x02\u0811\u0812\x03\x02\x02\x02\u0812\u083C\x03\x02" +
    "\x02\x02\u0813\u0815\x07\u0296\x02\x02\u0814\u0813\x03\x02\x02\x02\u0814" +
    "\u0815\x03\x02\x02\x02\u0815\u0816\x03\x02\x02\x02\u0816\u081F\x07\u020B" +
    "\x02\x02\u0817\u0818\x068\x1D\x02\u0818\u081A\x05\u0412\u020A\x02\u0819" +
    "\u081B\x05\u0384\u01C3\x02\u081A\u0819\x03\x02\x02\x02\u081A\u081B\x03" +
    "\x02\x02\x02\u081B\u0820\x03\x02\x02\x02\u081C\u081E\x05p9\x02\u081D\u081C" +
    "\x03\x02\x02\x02\u081D\u081E\x03\x02\x02\x02\u081E\u0820\x03\x02\x02\x02" +
    "\u081F\u0817\x03\x02\x02\x02\u081F\u081D\x03\x02\x02\x02\u0820\u0821\x03" +
    "\x02\x02\x02\u0821\u0825\x05r:\x02\u0822\u0824\x05\u037E\u01C0\x02\u0823" +
    "\u0822\x03\x02\x02\x02\u0824\u0827\x03\x02\x02\x02\u0825\u0823\x03\x02" +
    "\x02\x02\u0825\u0826\x03\x02\x02\x02\u0826\u083D\x03\x02\x02\x02\u0827" +
    "\u0825\x03\x02\x02\x02\u0828\u0829\x07\u01FE\x02\x02\u0829\u082A\x07\u020B" +
    "\x02\x02\u082A\u082B\x05\u0412\u020A\x02\u082B\u082F\x05r:\x02\u082C\u082E" +
    "\x05\u0386\u01C4\x02\u082D\u082C\x03\x02\x02\x02\u082E\u0831\x03\x02\x02" +
    "\x02\u082F\u082D\x03\x02\x02\x02\u082F\u0830\x03\x02\x02\x02\u0830\u083D" +
    "\x03\x02\x02\x02\u0831\u082F\x03\x02\x02\x02\u0832\u0833\x07\u0272\x02" +
    "\x02\u0833\u0834\x07\u020B\x02\x02\u0834\u0835\x05\u0412\u020A\x02\u0835" +
    "\u0839\x05r:\x02\u0836\u0838\x05\u0388\u01C5\x02\u0837\u0836\x03\x02\x02" +
    "\x02\u0838\u083B\x03\x02\x02\x02\u0839\u0837\x03\x02\x02\x02\u0839\u083A" +
    "\x03\x02\x02\x02\u083A\u083D\x03\x02\x02\x02\u083B\u0839\x03\x02\x02\x02" +
    "\u083C\u0814\x03\x02\x02\x02\u083C\u0828\x03\x02\x02\x02\u083C\u0832\x03" +
    "\x02\x02\x02\u083D\u083F\x03\x02\x02\x02\u083E\u0840\x050\x19\x02\u083F" +
    "\u083E\x03\x02\x02\x02\u083F\u0840\x03\x02\x02\x02\u0840o\x03\x02\x02" +
    "\x02\u0841\u0844\x05\u0412\u020A\x02\u0842\u0843\x07\u029C\x02\x02\u0843" +
    "\u0845\x05\u037C\u01BF\x02\u0844\u0842\x03\x02\x02\x02\u0844\u0845\x03" +
    "\x02\x02\x02\u0845\u084B\x03\x02\x02\x02\u0846\u0847\x05\u0412\u020A\x02" +
    "\u0847\u0848\x07\u0164\x02\x02\u0848\u0849\x05\u037C\u01BF\x02\u0849\u084B" +
    "\x03\x02\x02\x02\u084A\u0841\x03\x02\x02\x02\u084A\u0846\x03\x02\x02\x02" +
    "\u084Bq\x03\x02\x02\x02\u084C\u084D\x07\u0245\x02\x02\u084D\u084E\x05" +
    "\u0446\u0224\x02\u084E\u084F\x05\u037A\u01BE\x02\u084Fs\x03\x02\x02\x02" +
    "\u0850\u0851\x07\xB8\x02\x02\u0851\u0852\x07\u0202\x02\x02\u0852\u0853" +
    "\x05\u0430\u0219\x02\u0853\u0854\x07\u01AC\x02\x02\u0854\u0855\t\r\x02" +
    "\x02\u0855\u0857\x05\u0480\u0241\x02\u0856\u0858\x05v<\x02\u0857\u0856" +
    "\x03\x02\x02\x02\u0857\u0858\x03\x02\x02\x02\u0858u\x03\x02\x02\x02\u0859" +
    "\u0860\x05x=\x02\u085A\u085C\x07\u0198\x02\x02\u085B\u085A\x03\x02\x02" +
    "\x02\u085B\u085C\x03\x02\x02\x02\u085C\u085D\x03\x02\x02\x02\u085D\u085F" +
    "\x05x=\x02\u085E\u085B\x03\x02\x02\x02\u085F\u0862\x03\x02\x02\x02\u0860" +
    "\u085E\x03\x02\x02\x02\u0860\u0861\x03\x02\x02\x02\u0861w\x03\x02\x02" +
    "\x02\u0862\u0860\x03\x02\x02\x02\u0863\u086A\x05\x8CG\x02\u0864\u086A" +
    "\x05\x8EH\x02\u0865\u086A\x05\x96L\x02\u0866\u086A\x05\x98M\x02\u0867" +
    "\u086A\x05\x9AN\x02\u0868\u086A\x05\x9CO\x02\u0869\u0863\x03\x02\x02\x02" +
    "\u0869\u0864\x03\x02\x02\x02\u0869\u0865\x03\x02\x02\x02\u0869\u0866\x03" +
    "\x02\x02\x02\u0869\u0867\x03\x02\x02\x02\u0869\u0868\x03\x02\x02\x02\u086A" +
    "y\x03\x02\x02\x02\u086B\u086C\x07-\x02\x02\u086C\u086D\x05\u043A\u021E" +
    "\x02\u086D\u086E\x07\u01FB\x02\x02\u086E\u086F\x07o\x02\x02\u086F\u0870" +
    "\x078\x02\x02\u0870\u0871\x05\u0494\u024B\x02\u0871\u0872\x05|?\x02\u0872" +
    "{\x03\x02\x02\x02\u0873\u0874\x07\x1F\x02\x02\u0874\u0875\x07\u019B\x02" +
    "\x02\u0875\u087A\x05~@\x02\u0876\u0877\x07\u0198\x02\x02\u0877\u0879\x05" +
    "~@\x02\u0878\u0876\x03\x02\x02\x02\u0879\u087C\x03\x02\x02\x02\u087A\u0878" +
    "\x03\x02\x02\x02\u087A\u087B\x03\x02\x02\x02\u087B\u087D\x03\x02\x02\x02" +
    "\u087C\u087A\x03\x02\x02\x02\u087D\u087E\x07\u019C\x02\x02\u087E}\x03" +
    "\x02\x02\x02\u087F\u0880\x07\x1A\x02\x02\u0880\u088E\x05\u0480\u0241\x02" +
    "\u0881\u0882\x07\u01D5\x02\x02\u0882\u088E\x05\u0480\u0241\x02\u0883\u0884" +
    "\x07\u016E\x02\x02\u0884\u088E\x05\u0480\u0241\x02\u0885\u0886\x07\xFD" +
    "\x02\x02\u0886\u088E\x05\u0480\u0241\x02\u0887\u0888\x070\x02\x02\u0888" +
    "\u088E\x05\u0480\u0241\x02\u0889\u088A\x07 \x02\x02\u088A\u088E\x05\u0480" +
    "\u0241\x02\u088B\u088C\x07#\x02\x02\u088C\u088E\x05\u046C\u0237\x02\u088D" +
    "\u087F\x03\x02\x02\x02\u088D\u0881\x03\x02\x02\x02\u088D\u0883\x03\x02" +
    "\x02\x02\u088D\u0885\x03\x02\x02\x02\u088D\u0887\x03\x02\x02\x02\u088D" +
    "\u0889\x03\x02\x02\x02\u088D\u088B\x03\x02\x02\x02\u088E\x7F\x03\x02\x02" +
    "\x02\u088F\u0890\x07\u0158\x02\x02\u0890\u0891\x05\u042C\u0217\x02\u0891" +
    "\u0896\x05\x84C\x02\u0892\u0893\x07\u029B\x02\x02\u0893\u0894\x07\xB8" +
    "\x02\x02\u0894\u0895\x07\u0202\x02\x02\u0895\u0897\x05\u0432\u021A\x02" +
    "\u0896\u0892\x03\x02\x02\x02\u0896\u0897\x03\x02\x02\x02\u0897\u0899\x03" +
    "\x02\x02\x02\u0898\u089A\x05\x88E\x02\u0899\u0898\x03\x02\x02\x02\u0899" +
    "\u089A\x03\x02\x02\x02\u089A\x81\x03\x02\x02\x02\u089B\u089C\x07\u0294" +
    "\x02\x02\u089C\u089D\x07\u0158\x02\x02\u089D\u089E\x05\u042C\u0217\x02" +
    "\u089E\u089F\x07\u01AC\x02\x02\u089F\u08A1\x05\x86D\x02\u08A0\u08A2\x05" +
    "> \x02\u08A1\u08A0\x03\x02\x02\x02\u08A1\u08A2\x03\x02\x02\x02\u08A2\x83" +
    "\x03\x02\x02\x02\u08A3\u08A6\x06C\x1E\x02\u08A4\u08A5\x07\u01AC\x02\x02" +
    "\u08A5\u08A7\x05\x86D\x02\u08A6\u08A4\x03\x02\x02\x02\u08A6\u08A7\x03" +
    "\x02\x02\x02\u08A7\u08AB\x03\x02\x02\x02\u08A8\u08A9\x07\u01AC\x02\x02" +
    "\u08A9\u08AB\x05\x86D\x02\u08AA\u08A3\x03\x02\x02\x02\u08AA\u08A8\x03" +
    "\x02\x02\x02\u08AB\x85\x03\x02\x02\x02\u08AC\u08AD\x07p\x02\x02\u08AD" +
    "\u08AE\x05\u0480\u0241\x02\u08AE\x87\x03\x02\x02\x02\u08AF\u08B6\x05\x8A" +
    "F\x02\u08B0\u08B2\x07\u0198\x02\x02\u08B1\u08B0\x03\x02\x02\x02\u08B1" +
    "\u08B2\x03\x02\x02\x02\u08B2\u08B3\x03\x02\x02\x02\u08B3\u08B5\x05\x8A" +
    "F\x02\u08B4\u08B1\x03\x02\x02\x02\u08B5\u08B8\x03\x02\x02\x02\u08B6\u08B4" +
    "\x03\x02\x02\x02\u08B6\u08B7\x03\x02\x02\x02\u08B7\x89\x03\x02\x02\x02" +
    "\u08B8\u08B6\x03\x02\x02\x02\u08B9\u08C6\x05\x8CG\x02\u08BA\u08C6\x05" +
    "\x90I\x02\u08BB\u08C6\x05\x92J\x02\u08BC\u08C6\x05\x94K\x02\u08BD\u08C6" +
    "\x05\x96L\x02\u08BE\u08C6\x05\x98M\x02\u08BF\u08C6\x05\x9AN\x02\u08C0" +
    "\u08C6\x05\x9CO\x02\u08C1\u08C2\x06F\x1F\x02\u08C2\u08C6\x05\x9EP\x02" +
    "\u08C3\u08C4\x06F \x02\u08C4\u08C6\x05\xA0Q\x02\u08C5\u08B9\x03\x02\x02" +
    "\x02\u08C5\u08BA\x03\x02\x02\x02\u08C5\u08BB\x03\x02\x02\x02\u08C5\u08BC" +
    "\x03\x02\x02\x02\u08C5\u08BD\x03\x02\x02\x02\u08C5\u08BE\x03\x02\x02\x02" +
    "\u08C5\u08BF\x03\x02\x02\x02\u08C5\u08C0\x03\x02\x02\x02\u08C5\u08C1\x03" +
    "\x02\x02\x02\u08C5\u08C3\x03\x02\x02\x02\u08C6\x8B\x03\x02\x02\x02\u08C7" +
    "\u08C9\x07\xA6\x02\x02\u08C8\u08CA\x07\u0181\x02\x02\u08C9\u08C8\x03\x02" +
    "\x02\x02\u08C9\u08CA\x03\x02\x02\x02\u08CA\u08CB\x03\x02\x02\x02\u08CB" +
    "\u08CC\x05\u049A\u024E\x02\u08CC\x8D\x03\x02\x02\x02\u08CD\u08CF\t\x0E" +
    "\x02\x02\u08CE\u08D0\x07\u0181\x02\x02\u08CF\u08CE\x03\x02\x02\x02\u08CF" +
    "\u08D0\x03\x02\x02\x02\u08D0\u08D1\x03\x02\x02\x02\u08D1\u08D2\x05\u049A" +
    "\u024E\x02\u08D2\x8F\x03\x02\x02\x02\u08D3\u08D5\x07F\x02\x02\u08D4\u08D6" +
    "\x07\u0181\x02\x02\u08D5\u08D4\x03\x02\x02\x02\u08D5\u08D6\x03\x02\x02" +
    "\x02\u08D6\u08D7\x03\x02\x02\x02\u08D7\u08D8\x05\u049A\u024E\x02\u08D8" +
    "\x91\x03\x02\x02\x02\u08D9\u08DB\x07\xD4\x02\x02\u08DA\u08DC\x07\u0181" +
    "\x02\x02\u08DB\u08DA\x03\x02\x02\x02\u08DB\u08DC\x03\x02\x02\x02\u08DC" +
    "\u08DD\x03\x02\x02\x02\u08DD\u08DE\x05\u049A\u024E\x02\u08DE\x93\x03\x02" +
    "\x02\x02\u08DF\u08E1\x07\x8D\x02\x02\u08E0\u08E2\x07\u0181\x02\x02\u08E1" +
    "\u08E0\x03\x02\x02\x02\u08E1\u08E2\x03\x02\x02\x02\u08E2\u08E3\x03\x02" +
    "\x02\x02\u08E3\u08E4\x05\u049A\u024E\x02\u08E4\x95\x03\x02\x02\x02\u08E5" +
    "\u08E7\x07\xF0\x02\x02\u08E6\u08E8\x07\u0181\x02\x02\u08E7\u08E6\x03\x02" +
    "\x02\x02\u08E7\u08E8\x03\x02\x02\x02\u08E8\u08E9\x03\x02\x02\x02\u08E9" +
    "\u08EA\x05\u046E\u0238\x02\u08EA\x97\x03\x02\x02\x02\u08EB\u08ED\x07\u014A" +
    "\x02\x02\u08EC\u08EB\x03\x02\x02\x02\u08EC\u08ED\x03\x02\x02\x02\u08ED" +
    "\u08EE\x03\x02\x02\x02\u08EE\u08F0\x07\x82\x02\x02\u08EF\u08F1\x07\u0181" +
    "\x02\x02\u08F0\u08EF\x03\x02\x02\x02\u08F0\u08F1\x03\x02\x02\x02\u08F1" +
    "\u08F2\x03\x02\x02\x02\u08F2\u08F3\x05\u043E\u0220\x02\u08F3\x99\x03\x02" +
    "\x02\x02\u08F4\u08F5\t\x0F\x02\x02\u08F5\x9B\x03\x02\x02\x02\u08F6\u08F8" +
    "\x07\r\x02\x02\u08F7\u08F9\x07\u0181\x02\x02\u08F8\u08F7\x03\x02\x02\x02" +
    "\u08F8\u08F9\x03\x02\x02\x02\u08F9\u08FA\x03\x02\x02\x02\u08FA\u08FB\x05" +
    "\u0480\u0241\x02\u08FB\x9D\x03\x02\x02\x02\u08FC\u08FE\x07\x94\x02\x02" +
    "\u08FD\u08FF\x07\u0181\x02\x02\u08FE\u08FD\x03\x02\x02\x02\u08FE\u08FF" +
    "\x03\x02\x02\x02\u08FF\u0900\x03\x02\x02\x02\u0900\u0901\x05\u049A\u024E" +
    "\x02\u0901\x9F\x03\x02\x02\x02\u0902\u0904\x07b\x02\x02\u0903\u0905\x07" +
    "\u0181\x02\x02\u0904\u0903\x03\x02\x02\x02\u0904\u0905\x03\x02\x02\x02" +
    "\u0905\u0906\x03\x02\x02\x02\u0906\u0907\x05\u047A\u023E\x02\u0907\xA1" +
    "\x03\x02\x02\x02\u0908\u090A\x05\xA4S\x02\u0909\u0908\x03\x02\x02\x02" +
    "\u0909\u090A\x03\x02\x02\x02\u090A\u090C\x03\x02\x02\x02\u090B\u090D\x05" +
    "\u03C8\u01E5\x02\u090C\u090B\x03\x02\x02\x02\u090C\u090D\x03\x02\x02\x02" +
    "\u090D\u090F\x03\x02\x02\x02\u090E\u0910\x05\xA8U\x02\u090F\u090E\x03" +
    "\x02\x02\x02\u090F\u0910\x03\x02\x02\x02\u0910\u0911\x03\x02\x02\x02\u0911" +
    "\u0912\x07\u0171\x02\x02\u0912\u0913\x05\u0428\u0215\x02\u0913\u0914\x05" +
    "J&\x02\u0914\xA3\x03\x02\x02\x02\u0915\u0916\x07\u024D\x02\x02\u0916\u0918" +
    "\x07\u0260\x02\x02\u0917\u0919\x05\xA6T\x02\u0918\u0917\x03\x02\x02\x02" +
    "\u0918\u0919\x03\x02\x02\x02\u0919\u091C\x03\x02\x02\x02\u091A\u091C\x05" +
    "\xA6T\x02\u091B\u0915\x03\x02\x02\x02\u091B\u091A\x03\x02\x02\x02\u091C" +
    "\xA5\x03\x02\x02\x02\u091D\u091E\x07@\x02\x02\u091E\u091F\x07\u0181\x02" +
    "\x02\u091F\u0920\t\x10\x02\x02\u0920\xA7\x03\x02\x02\x02\u0921\u0922\x07" +
    "\u027A\x02\x02\u0922\u0923\x07,\x02\x02\u0923\u0924\t\f\x02\x02\u0924" +
    "\xA9\x03\x02\x02\x02\u0925\u0927\x05\u03C8\u01E5\x02\u0926\u0925\x03\x02" +
    "\x02\x02\u0926\u0927\x03\x02\x02\x02\u0927\u0928\x03\x02\x02\x02\u0928" +
    "\u0929\x07\u0291\x02\x02\u0929\u092A\x05\u0424\u0213\x02\u092A\u092B\t" +
    "\x11\x02\x02\u092B\u092C\t\x12\x02\x02\u092C\u092D\x07\u0245\x02\x02\u092D" +
    "\u092E\x05\u0446\u0224\x02\u092E\u092F\x07\u01FC\x02\x02\u092F\u0930\x07" +
    "\u01EB\x02\x02\u0930\u0932\x07\u012F\x02\x02\u0931\u0933\x05\xACW\x02" +
    "\u0932\u0931\x03\x02\x02\x02\u0932\u0933\x03\x02\x02\x02\u0933\u0934\x03" +
    "\x02\x02\x02\u0934\u0935\x05\u0308\u0185\x02\u0935\xAB\x03\x02\x02\x02" +
    "\u0936\u0937\x06W!\x02\u0937\u0938\t\x13\x02\x02\u0938\u0939\x05\u0494" +
    "\u024B\x02\u0939\xAD\x03\x02\x02\x02\u093A\u093C\x05\u03C8\u01E5\x02\u093B" +
    "\u093A\x03\x02\x02\x02\u093B\u093C\x03\x02\x02\x02\u093C\u093D\x03\x02" +
    "\x02\x02\u093D\u093F\x07\x87\x02\x02\u093E\u0940\x05\u03CC\u01E7\x02\u093F" +
    "\u093E\x03\x02\x02\x02\u093F\u0940\x03\x02\x02\x02\u0940\u0941\x03\x02" +
    "\x02\x02\u0941\u0942\x05\u0434\u021B\x02\u0942\u0943\x07\u0245\x02\x02" +
    "\u0943\u0944\x07\u0131\x02\x02\u0944\u094B\x05\u0356\u01AC\x02\u0945\u0946" +
    "\x07\u0245\x02\x02\u0946\u0948\x07_\x02\x02\u0947\u0949\x07\u023F\x02" +
    "\x02\u0948\u0947\x03\x02\x02\x02\u0948\u0949\x03\x02\x02\x02\u0949\u094A" +
    "\x03\x02\x02\x02\u094A\u094C\x07\u0104\x02\x02\u094B\u0945\x03\x02\x02" +
    "\x02\u094B\u094C\x03\x02\x02\x02\u094C\u0953\x03\x02\x02\x02\u094D\u0954" +
    "\x07\x91\x02\x02\u094E\u0951\x07z\x02\x02\u094F\u0950\x07\u0245\x02\x02" +
    "\u0950\u0952\x07/\x02\x02\u0951\u094F\x03\x02\x02\x02\u0951\u0952\x03" +
    "\x02\x02\x02\u0952\u0954\x03\x02\x02\x02\u0953\u094D\x03\x02\x02\x02\u0953" +
    "\u094E\x03\x02\x02\x02\u0953\u0954\x03\x02\x02\x02\u0954\u0957\x03\x02" +
    "\x02\x02\u0955\u0956\x07\r\x02\x02\u0956\u0958\x05\u0480\u0241\x02\u0957" +
    "\u0955\x03\x02\x02\x02\u0957\u0958\x03\x02\x02\x02\u0958\u0959\x03\x02" +
    "\x02\x02\u0959\u095A\x07\x11\x02\x02\u095A\u095B\x05\u0308\u0185\x02\u095B" +
    "\xAF\x03\x02\x02\x02\u095C\u095E\x07\u02B3\x02\x02\u095D\u095F\x05\u03CC" +
    "\u01E7\x02\u095E\u095D\x03\x02\x02\x02\u095E\u095F\x03\x02\x02\x02\u095F" +
    "\u0960\x03\x02\x02\x02\u0960\u0961\x05\u0228\u0115\x02\u0961\xB1\x03\x02" +
    "\x02\x02\u0962\u0963\x07\u024D\x02\x02\u0963\u0964\x07\u0260\x02\x02\u0964" +
    "\u0965\x07\u0272\x02\x02\u0965\u0966\x07\u02EE\x02\x02\u0966\u0967\x07" +
    "\u02E6\x02\x02\u0967\u096B\x05\u0472\u023A\x02\u0968\u096A\x05\xB4[\x02" +
    "\u0969\u0968\x03\x02\x02\x02\u096A\u096D\x03\x02\x02\x02\u096B\u0969\x03" +
    "\x02\x02\x02\u096B\u096C\x03\x02\x02\x02\u096C\u097C\x03\x02\x02\x02\u096D" +
    "\u096B\x03\x02\x02\x02\u096E\u096F\x07\u0272\x02\x02\u096F\u0970\x07\u02EE" +
    "\x02\x02\u0970\u0972\x07\u02E6\x02\x02\u0971\u0973\x05\u03CC\u01E7\x02" +
    "\u0972\u0971\x03\x02\x02\x02\u0972\u0973\x03\x02\x02\x02\u0973\u0974\x03" +
    "\x02\x02\x02\u0974\u0978\x05\u0472\u023A\x02\u0975\u0977\x05\xB4[\x02" +
    "\u0976\u0975\x03\x02\x02\x02\u0977\u097A\x03\x02\x02\x02\u0978\u0976\x03" +
    "\x02\x02\x02\u0978\u0979\x03\x02\x02\x02\u0979\u097C\x03\x02\x02\x02\u097A" +
    "\u0978\x03\x02\x02\x02\u097B\u0962\x03\x02\x02\x02\u097B\u096E\x03\x02" +
    "\x02\x02\u097C\xB3\x03\x02\x02\x02\u097D\u097E\x07\xE7\x02\x02\u097E\u097F" +
    "\x07\u015B\x02\x02\u097F\u098D\x05\u0482\u0242\x02\u0980\u0981\x07\u02EB" +
    "\x02\x02\u0981\u0982\x07\u015B\x02\x02\u0982\u098D\x05\u0482\u0242\x02" +
    "\u0983\u0984\x07\u02ED\x02\x02\u0984\u0985\x05\u0482\u0242\x02\u0985\u0986" +
    "\x07\xA1\x02\x02\u0986\u0987\x07\u01BE\x02\x02\u0987\u0988\x05\u0472\u023A" +
    "\x02\u0988\u098D\x03\x02\x02\x02\u0989\u098A\x07\u02EC\x02\x02\u098A\u098B" +
    "\x07\u015B\x02\x02\u098B\u098D\x05\u0482\u0242\x02\u098C\u097D\x03\x02" +
    "\x02\x02\u098C\u0980\x03\x02\x02\x02\u098C\u0983\x03\x02\x02\x02\u098C" +
    "\u0989\x03\x02\x02\x02\u098D\xB5\x03\x02\x02\x02\u098E\u09A0\x07\u01E9" +
    "\x02\x02\u098F\u09A1\x05\xB8]\x02\u0990\u09A1\x05\xBA^\x02\u0991\u09A1" +
    "\x05\xBC_\x02\u0992\u09A1\x05\xBE`\x02\u0993\u09A1\x05\xC0a\x02\u0994" +
    "\u09A1\x05\xC2b\x02\u0995\u09A1\x05\xC6d\x02\u0996\u09A1\x05\xC8e\x02" +
    "\u0997\u09A1\x05\xCAf\x02\u0998\u09A1\x05\xCCg\x02\u0999\u09A1\x05\xCE" +
    "h\x02\u099A\u099B\x06\\\"\x02\u099B\u09A1\x05\xD0i\x02\u099C\u099D\x06" +
    "\\#\x02\u099D\u09A1\x05\xD2j\x02\u099E\u099F\x06\\$\x02\u099F\u09A1\x05" +
    "\xD4k\x02\u09A0\u098F\x03\x02\x02\x02\u09A0\u0990\x03\x02\x02\x02\u09A0" +
    "\u0991\x03\x02\x02\x02\u09A0\u0992\x03\x02\x02\x02\u09A0\u0993\x03\x02" +
    "\x02\x02\u09A0\u0994\x03\x02\x02\x02\u09A0\u0995\x03\x02\x02\x02\u09A0" +
    "\u0996\x03\x02\x02\x02\u09A0\u0997\x03\x02\x02\x02\u09A0\u0998\x03\x02" +
    "\x02\x02\u09A0\u0999\x03\x02\x02\x02\u09A0\u099A\x03\x02\x02\x02\u09A0" +
    "\u099C\x03\x02\x02\x02\u09A0\u099E\x03\x02\x02\x02\u09A1\xB7\x03\x02\x02" +
    "\x02\u09A2\u09A4\x07\u01D5\x02\x02\u09A3\u09A5\x05\u03CA\u01E6\x02\u09A4" +
    "\u09A3\x03\x02\x02\x02\u09A4\u09A5\x03\x02\x02\x02\u09A5\u09A6\x03\x02" +
    "\x02\x02\u09A6\u09A7\x05\u041A\u020E\x02\u09A7\xB9\x03\x02\x02\x02\u09A8" +
    "\u09AA\x07\x87\x02\x02\u09A9\u09AB\x05\u03CA\u01E6\x02\u09AA\u09A9\x03" +
    "\x02\x02\x02\u09AA\u09AB\x03\x02\x02\x02\u09AB\u09AC\x03\x02\x02\x02\u09AC" +
    "\u09AD\x05\u0436\u021C\x02\u09AD\xBB\x03\x02\x02\x02\u09AE\u09B0\x07\u0166" +
    "\x02\x02\u09AF\u09B1\x05\u03CA\u01E6\x02\u09B0\u09AF\x03\x02\x02\x02\u09B0" +
    "\u09B1\x03\x02\x02\x02\u09B1\u09B2\x03\x02\x02\x02\u09B2\u09B3\x05\u0422" +
    "\u0212\x02\u09B3\xBD\x03\x02\x02\x02\u09B4\u09B6\x07\u0254\x02\x02\u09B5" +
    "\u09B7\x05\u03CA\u01E6\x02\u09B6\u09B5\x03\x02\x02\x02\u09B6\u09B7\x03" +
    "\x02\x02\x02\u09B7\u09B8\x03\x02\x02\x02\u09B8\u09B9\x05\u041E\u0210\x02" +
    "\u09B9\xBF\x03\x02\x02\x02\u09BA\u09BC\x05\u0400\u0201\x02\u09BB\u09BA" +
    "\x03\x02\x02\x02\u09BB\u09BC\x03\x02\x02\x02\u09BC\u09BD\x03\x02\x02\x02" +
    "\u09BD\u09BE\x07\u020B\x02\x02\u09BE\u09BF\x05\u0414\u020B\x02\u09BF\u09C0" +
    "\x07\u0245\x02\x02\u09C0\u09C2\x05\u0446\u0224\x02\u09C1\u09C3\x050\x19" +
    "\x02\u09C2\u09C1\x03\x02\x02\x02\u09C2\u09C3\x03\x02\x02\x02\u09C3\xC1" +
    "\x03\x02\x02\x02\u09C4\u09C5\x07\xB8\x02\x02\u09C5\u09C6\x07\u0202\x02" +
    "\x02\u09C6\u09D1\x05\u0432\u021A\x02\u09C7\u09CE\x05\xC4c\x02\u09C8\u09CA" +
    "\x07\u0198\x02\x02\u09C9\u09C8\x03\x02\x02\x02\u09C9\u09CA\x03\x02\x02" +
    "\x02\u09CA\u09CB\x03\x02\x02\x02\u09CB\u09CD\x05\xC4c\x02\u09CC\u09C9" +
    "\x03\x02\x02\x02\u09CD\u09D0\x03\x02\x02\x02\u09CE\u09CC\x03\x02\x02\x02" +
    "\u09CE\u09CF\x03\x02\x02\x02\u09CF\u09D2\x03\x02\x02\x02\u09D0\u09CE\x03" +
    "\x02\x02\x02\u09D1\u09C7\x03\x02\x02\x02\u09D1\u09D2\x03\x02\x02\x02\u09D2" +
    "\xC3\x03\x02\x02\x02\u09D3\u09D6\x05\x9AN\x02\u09D4\u09D6\x05\x98M\x02" +
    "\u09D5\u09D3\x03\x02\x02\x02\u09D5\u09D4\x03\x02\x02\x02\u09D6\xC5\x03" +
    "\x02\x02\x02\u09D7\u09D9\x07-\x02\x02\u09D8\u09DA\x05\u03CA\u01E6\x02" +
    "\u09D9\u09D8\x03\x02\x02\x02\u09D9\u09DA\x03\x02\x02\x02\u09DA\u09DB\x03" +
    "\x02\x02\x02\u09DB\u09DC\x05\u043C\u021F\x02\u09DC\xC7\x03\x02\x02\x02" +
    "\u09DD\u09DF\x07\u0159\x02\x02\u09DE\u09DD\x03\x02\x02\x02\u09DE\u09DF" +
    "\x03\x02\x02\x02\u09DF\u09E0\x03\x02\x02\x02\u09E0\u09E2\t\x14\x02\x02" +
    "\u09E1\u09E3\x05\u03CA\u01E6\x02\u09E2\u09E1\x03\x02\x02\x02\u09E2\u09E3" +
    "\x03\x02\x02\x02\u09E3\u09E4\x03\x02\x02\x02\u09E4\u09E6\x05\u0448\u0225" +
    "\x02\u09E5\u09E7\t\x04\x02\x02\u09E6\u09E5\x03\x02\x02\x02\u09E6\u09E7" +
    "\x03\x02\x02\x02\u09E7\xC9\x03\x02\x02\x02\u09E8\u09E9\x07\u0158\x02\x02" +
    "\u09E9\u09F4\x05\u042E\u0218\x02\u09EA\u09F1\x05\xC4c\x02\u09EB\u09ED" +
    "\x07\u0198\x02\x02\u09EC\u09EB\x03\x02\x02\x02\u09EC\u09ED\x03\x02\x02" +
    "\x02\u09ED\u09EE\x03\x02\x02\x02\u09EE\u09F0\x05\xC4c\x02\u09EF\u09EC" +
    "\x03\x02\x02\x02\u09F0\u09F3\x03\x02\x02\x02\u09F1\u09EF\x03\x02\x02\x02" +
    "\u09F1\u09F2\x03\x02\x02\x02\u09F2\u09F5\x03\x02\x02\x02\u09F3\u09F1\x03" +
    "\x02\x02\x02\u09F4\u09EA\x03\x02\x02\x02\u09F4\u09F5\x03\x02\x02\x02\u09F5" +
    "\xCB\x03\x02\x02\x02\u09F6\u09F8\x07\u0291\x02\x02\u09F7\u09F9\x05\u03CA" +
    "\u01E6\x02\u09F8\u09F7\x03\x02\x02\x02\u09F8\u09F9\x03\x02\x02\x02\u09F9" +
    "\u09FA\x03\x02\x02\x02\u09FA\u09FB\x05\u0426\u0214\x02\u09FB\xCD\x03\x02" +
    "\x02\x02\u09FC\u09FE\x07\u0171\x02\x02\u09FD\u09FF\x05\u03CA\u01E6\x02" +
    "\u09FE\u09FD\x03\x02\x02\x02\u09FE\u09FF\x03\x02\x02\x02\u09FF\u0A00\x03" +
    "\x02\x02\x02\u0A00\u0A02\x05\u03D8\u01ED\x02\u0A01\u0A03\t\x04\x02\x02" +
    "\u0A02\u0A01\x03\x02\x02\x02\u0A02\u0A03\x03\x02\x02\x02\u0A03\xCF\x03" +
    "\x02\x02\x02\u0A04\u0A06\x07\u02B3\x02\x02\u0A05\u0A07\x05\u03CA\u01E6" +
    "\x02\u0A06\u0A05\x03\x02\x02\x02\u0A06\u0A07\x03\x02\x02\x02\u0A07\u0A08" +
    "\x03\x02\x02\x02\u0A08\u0A09\x05\u0228\u0115\x02\u0A09\xD1\x03\x02\x02" +
    "\x02\u0A0A\u0A0B\x07\u0272\x02\x02\u0A0B\u0A0C\x07\u02EE\x02\x02\u0A0C" +
    "\u0A0E\x07\u02E6\x02\x02\u0A0D\u0A0F\x05\u03CA\u01E6\x02\u0A0E\u0A0D\x03" +
    "\x02\x02\x02\u0A0E\u0A0F\x03\x02\x02\x02\u0A0F\u0A10\x03\x02\x02\x02\u0A10" +
    "\u0A11\x05\u0472\u023A\x02\u0A11\xD3\x03\x02\x02\x02\u0A12\u0A13\x07\u0294" +
    "\x02\x02\u0A13\u0A14\x07\u0158\x02\x02\u0A14\u0A16\x05\u042E\u0218\x02" +
    "\u0A15\u0A17\x05> \x02\u0A16\u0A15\x03\x02\x02\x02\u0A16\u0A17\x03\x02" +
    "\x02\x02\u0A17\xD5\x03\x02\x02\x02\u0A18\u0A19\x07\u025E\x02\x02\u0A19" +
    "\u0A1A\t\x14\x02\x02\u0A1A\u0A1F\x05\xD8m\x02\u0A1B\u0A1C\x07\u0198\x02" +
    "\x02\u0A1C\u0A1E\x05\xD8m\x02\u0A1D\u0A1B\x03\x02\x02\x02\u0A1E\u0A21" +
    "\x03\x02\x02\x02\u0A1F\u0A1D\x03\x02\x02\x02\u0A1F\u0A20\x03\x02\x02\x02" +
    "\u0A20\xD7\x03\x02\x02\x02\u0A21\u0A1F\x03\x02\x02\x02\u0A22\u0A23\x05" +
    "\u0446\u0224\x02\u0A23\u0A24\x07\u028F\x02\x02\u0A24\u0A25\x05\u0440\u0221" +
    "\x02\u0A25\xD9\x03\x02\x02\x02\u0A26\u0A28\x074\x02\x02\u0A27\u0A29\x07" +
    "\u0289\x02\x02\u0A28\u0A27\x03\x02\x02\x02\u0A28\u0A29\x03\x02\x02\x02" +
    "\u0A29\u0A2A\x03\x02\x02\x02\u0A2A\u0A2B\x05\u0446\u0224\x02\u0A2B\xDB" +
    "\x03\x02\x02\x02\u0A2C\u0A2D\x07\xA4\x02\x02\u0A2D\u0A2E\x07\u0289\x02" +
    "\x02\u0A2E\u0A2F\x07\u01FD\x02\x02\u0A2F\u0A30\x05\u0484\u0243\x02\u0A30" +
    "\xDD\x03\x02\x02\x02\u0A31\u0A32\x07\u01BF\x02\x02\u0A32\u0A38\x05\u041E" +
    "\u0210\x02\u0A33\u0A35\x07\u019B\x02\x02\u0A34\u0A36\x05\u02EC\u0177\x02" +
    "\u0A35\u0A34\x03\x02\x02\x02\u0A35\u0A36\x03\x02\x02\x02\u0A36\u0A37\x03" +
    "\x02\x02\x02\u0A37\u0A39\x07\u019C\x02\x02\u0A38\u0A33\x03\x02\x02\x02" +
    "\u0A38\u0A39\x03\x02\x02\x02\u0A39\xDF\x03\x02\x02\x02\u0A3A\u0A3B\x06" +
    "q%\x02\u0A3B\u0A3D\x05\u0142\xA2\x02\u0A3C\u0A3A\x03\x02\x02\x02\u0A3C" +
    "\u0A3D\x03\x02\x02\x02\u0A3D\u0A3E\x03\x02\x02\x02\u0A3E\u0A42\x07\u01E2" +
    "\x02\x02\u0A3F\u0A41\x05\xE4s\x02\u0A40\u0A3F\x03\x02\x02\x02\u0A41\u0A44" +
    "\x03\x02\x02\x02\u0A42\u0A40\x03\x02\x02\x02\u0A42\u0A43\x03\x02\x02\x02" +
    "\u0A43\u0A65\x03\x02\x02\x02\u0A44\u0A42\x03\x02\x02\x02\u0A45\u0A5D\x07" +
    "\u01FD\x02\x02\u0A46\u0A47\x05\u044A\u0226\x02\u0A47\u0A48\x07\u029C\x02" +
    "\x02\u0A48\u0A4A\x05\u0150\xA9\x02\u0A49\u0A4B\x05\u0160\xB1\x02\u0A4A" +
    "\u0A49\x03\x02\x02\x02\u0A4A\u0A4B\x03\x02\x02\x02\u0A4B\u0A5E\x03\x02" +
    "\x02\x02\u0A4C\u0A4F\x05\u0446\u0224\x02\u0A4D\u0A4E\x06q&\x02\u0A4E\u0A50" +
    "\x05\u0188\xC5\x02\u0A4F\u0A4D\x03\x02\x02\x02\u0A4F\u0A50\x03\x02\x02" +
    "\x02\u0A50\u0A52\x03\x02\x02\x02\u0A51\u0A53\x05\xE2r\x02\u0A52\u0A51" +
    "\x03\x02\x02\x02\u0A52\u0A53\x03\x02\x02\x02\u0A53\u0A55\x03\x02\x02\x02" +
    "\u0A54\u0A56\x05\u0160\xB1\x02\u0A55\u0A54\x03\x02\x02\x02\u0A55\u0A56" +
    "\x03\x02\x02\x02\u0A56\u0A58\x03\x02\x02\x02\u0A57\u0A59\x05\u014A\xA6" +
    "\x02\u0A58\u0A57\x03\x02\x02\x02\u0A58\u0A59\x03\x02\x02\x02\u0A59\u0A5B" +
    "\x03\x02\x02\x02\u0A5A\u0A5C\x05\u0120\x91\x02\u0A5B\u0A5A\x03\x02\x02" +
    "\x02\u0A5B\u0A5C\x03\x02\x02\x02\u0A5C\u0A5E\x03\x02\x02\x02\u0A5D\u0A46" +
    "\x03\x02\x02\x02\u0A5D\u0A4C\x03\x02\x02\x02\u0A5E\u0A66\x03\x02\x02\x02" +
    "\u0A5F\u0A60\x05\u044A\u0226\x02\u0A60\u0A61\x07\u01FD\x02\x02\u0A61\u0A63" +
    "\x05\u0150\xA9\x02\u0A62\u0A64\x05\u0160\xB1\x02\u0A63\u0A62\x03\x02\x02" +
    "\x02\u0A63\u0A64\x03\x02\x02\x02\u0A64\u0A66\x03\x02\x02\x02\u0A65\u0A45";
MySQLParser._serializedATNSegment7 = "\x03\x02\x02\x02\u0A65\u0A5F\x03\x02\x02\x02\u0A66\xE1\x03\x02\x02\x02" +
    "\u0A67\u0A68\x06r\'\x02\u0A68\u0A69\x07\"\x02\x02\u0A69\u0A6A\x07\u019B" +
    "\x02\x02\u0A6A\u0A6B\x05\u0462\u0232\x02\u0A6B\u0A6C\x07\u019C\x02\x02" +
    "\u0A6C\xE3\x03\x02\x02\x02\u0A6D\u0A6E\t\x15\x02\x02\u0A6E\xE5\x03\x02" +
    "\x02\x02\u0A6F\u0A74\x07\x11\x02\x02\u0A70\u0A71\x06t(\x02\u0A71\u0A75" +
    "\x05\u02EC\u0177\x02\u0A72\u0A73\x06t)\x02\u0A73\u0A75\x05\u015A\xAE\x02" +
    "\u0A74\u0A70\x03\x02\x02\x02\u0A74\u0A72\x03\x02\x02\x02\u0A75\xE7\x03" +
    "\x02\x02\x02\u0A76\u0A88\x07\x18\x02\x02\u0A77\u0A78\x05\u0446\u0224\x02" +
    "\u0A78\u0A7A\x07\x1E\x02\x02\u0A79\u0A7B\x05\u0188\xC5\x02\u0A7A\u0A79" +
    "\x03\x02\x02\x02\u0A7A\u0A7B\x03\x02\x02\x02\u0A7B\u0A89\x03\x02\x02\x02" +
    "\u0A7C\u0A86\x05\u0460\u0231\x02\u0A7D\u0A87\x07\f\x02\x02\u0A7E\u0A7F" +
    "\x07\u0258\x02\x02\u0A7F\u0A81\x05\xEAv\x02\u0A80\u0A82\x05\u0160\xB1" +
    "\x02\u0A81\u0A80\x03\x02\x02\x02\u0A81\u0A82\x03\x02\x02\x02\u0A82\u0A84" +
    "\x03\x02\x02\x02\u0A83\u0A85\x05\u011E\x90\x02\u0A84\u0A83\x03\x02\x02" +
    "\x02\u0A84\u0A85\x03\x02\x02\x02\u0A85\u0A87\x03\x02\x02\x02\u0A86\u0A7D" +
    "\x03\x02\x02\x02\u0A86\u0A7E\x03\x02\x02\x02\u0A87\u0A89\x03\x02\x02\x02" +
    "\u0A88\u0A77\x03\x02\x02\x02\u0A88\u0A7C\x03\x02\x02\x02\u0A89\xE9\x03" +
    "\x02\x02\x02\u0A8A\u0A95\t\x16\x02\x02\u0A8B\u0A92\x05\u0460\u0231\x02" +
    "\u0A8C\u0A93\t\x17\x02\x02\u0A8D\u0A8E\t\x18\x02\x02\u0A8E\u0A8F\x07\u019B" +
    "\x02\x02\u0A8F\u0A90\x05\xFA~\x02\u0A90\u0A91\x07\u019C\x02\x02\u0A91" +
    "\u0A93\x03\x02\x02\x02\u0A92\u0A8C\x03\x02\x02\x02\u0A92\u0A8D\x03\x02" +
    "\x02\x02\u0A93\u0A95\x03\x02\x02\x02\u0A94\u0A8A\x03\x02\x02\x02\u0A94" +
    "\u0A8B\x03\x02\x02\x02\u0A95\xEB\x03\x02\x02\x02\u0A96\u0A98\x07\u0210" +
    "\x02\x02\u0A97\u0A99\x05\xEEx\x02\u0A98\u0A97\x03\x02\x02\x02\u0A98\u0A99" +
    "\x03\x02\x02\x02\u0A99\u0A9B\x03\x02\x02\x02\u0A9A\u0A9C\x07\u020A\x02" +
    "\x02\u0A9B\u0A9A\x03\x02\x02\x02\u0A9B\u0A9C\x03\x02\x02\x02\u0A9C\u0A9E" +
    "\x03\x02\x02\x02\u0A9D\u0A9F\x07\u0212\x02\x02\u0A9E\u0A9D\x03\x02\x02" +
    "\x02\u0A9E\u0A9F\x03\x02\x02\x02\u0A9F\u0AA0\x03\x02\x02\x02\u0AA0\u0AA2" +
    "\x05\u0446\u0224\x02\u0AA1\u0AA3\x05\u0404\u0203\x02\u0AA2\u0AA1\x03\x02" +
    "\x02\x02\u0AA2\u0AA3\x03\x02\x02\x02\u0AA3\u0AB0\x03\x02\x02\x02\u0AA4" +
    "\u0AA7\x05\xF0y\x02\u0AA5\u0AA6\x06w*\x02\u0AA6\u0AA8\x05\xFC\x7F\x02" +
    "\u0AA7\u0AA5\x03\x02\x02\x02\u0AA7\u0AA8\x03\x02\x02\x02\u0AA8\u0AB1\x03" +
    "\x02\x02\x02\u0AA9\u0AAA\x07\u026D\x02\x02\u0AAA\u0AAD\x05\u03DA\u01EE" +
    "\x02\u0AAB\u0AAC\x06w+\x02\u0AAC\u0AAE\x05\xFC\x7F\x02\u0AAD\u0AAB\x03" +
    "\x02\x02\x02\u0AAD\u0AAE\x03\x02\x02\x02\u0AAE\u0AB1\x03\x02\x02\x02\u0AAF" +
    "\u0AB1\x05\xF6|\x02\u0AB0\u0AA4\x03\x02\x02\x02\u0AB0\u0AA9\x03\x02\x02" +
    "\x02\u0AB0\u0AAF\x03\x02\x02\x02\u0AB1\u0AB3\x03\x02\x02\x02\u0AB2\u0AB4" +
    "\x05\xFE\x80\x02\u0AB3\u0AB2\x03\x02\x02\x02\u0AB3\u0AB4\x03\x02\x02\x02" +
    "\u0AB4\xED\x03\x02\x02\x02\u0AB5\u0AB6\t\x19\x02\x02\u0AB6\xEF\x03\x02" +
    "\x02\x02\u0AB7\u0AB9\x07\u019B\x02\x02\u0AB8\u0ABA\x05\xF2z\x02\u0AB9" +
    "\u0AB8\x03\x02\x02\x02\u0AB9\u0ABA\x03\x02\x02\x02\u0ABA\u0ABB\x03\x02" +
    "\x02\x02\u0ABB\u0ABD\x07\u019C\x02\x02\u0ABC\u0AB7\x03\x02\x02\x02\u0ABC" +
    "\u0ABD\x03\x02\x02\x02\u0ABD\u0ABE\x03\x02\x02\x02\u0ABE\u0ABF\x05\xF4" +
    "{\x02\u0ABF\xF1\x03\x02\x02\x02\u0AC0\u0AC5\x05\u0410\u0209\x02\u0AC1" +
    "\u0AC2\x07\u0198\x02\x02\u0AC2\u0AC4\x05\u0410\u0209\x02\u0AC3\u0AC1\x03" +
    "\x02\x02\x02\u0AC4\u0AC7\x03\x02\x02\x02\u0AC5\u0AC3\x03\x02\x02\x02\u0AC5" +
    "\u0AC6\x03\x02\x02\x02\u0AC6\xF3\x03\x02\x02\x02\u0AC7\u0AC5\x03\x02\x02" +
    "\x02\u0AC8\u0AC9\t\x1A\x02\x02\u0AC9\u0ACA\x05\xF8}\x02\u0ACA\xF5\x03" +
    "\x02\x02\x02\u0ACB\u0AD3\x05^0\x02\u0ACC\u0ACE\x07\u019B\x02\x02\u0ACD" +
    "\u0ACF\x05\xF2z\x02\u0ACE\u0ACD\x03\x02\x02\x02\u0ACE\u0ACF\x03\x02\x02" +
    "\x02\u0ACF\u0AD0\x03\x02\x02\x02\u0AD0\u0AD1\x07\u019C\x02\x02\u0AD1\u0AD3" +
    "\x05^0\x02\u0AD2\u0ACB\x03\x02\x02\x02\u0AD2\u0ACC\x03\x02\x02\x02\u0AD3" +
    "\xF7\x03\x02\x02\x02\u0AD4\u0AD6\x07\u019B\x02\x02\u0AD5\u0AD7\x05\xFA" +
    "~\x02\u0AD6\u0AD5\x03\x02\x02\x02\u0AD6\u0AD7\x03\x02\x02\x02\u0AD7\u0AD8" +
    "\x03\x02\x02\x02\u0AD8\u0AE1\x07\u019C\x02\x02\u0AD9\u0ADA\x07\u0198\x02" +
    "\x02\u0ADA\u0ADC\x07\u019B\x02\x02\u0ADB\u0ADD\x05\xFA~\x02\u0ADC\u0ADB" +
    "\x03\x02\x02\x02\u0ADC\u0ADD\x03\x02\x02\x02\u0ADD\u0ADE\x03\x02\x02\x02" +
    "\u0ADE\u0AE0\x07\u019C\x02\x02\u0ADF\u0AD9\x03\x02\x02\x02\u0AE0\u0AE3" +
    "\x03\x02\x02\x02\u0AE1\u0ADF\x03\x02\x02\x02\u0AE1\u0AE2\x03\x02\x02\x02" +
    "\u0AE2\xF9\x03\x02\x02\x02\u0AE3\u0AE1\x03\x02\x02\x02\u0AE4\u0AE7\x05" +
    "\u029C\u014F\x02\u0AE5\u0AE7\x07\u01E0\x02\x02\u0AE6\u0AE4\x03\x02\x02" +
    "\x02\u0AE6\u0AE5\x03\x02\x02\x02\u0AE7\u0AEF\x03\x02\x02\x02\u0AE8\u0AEB" +
    "\x07\u0198\x02\x02\u0AE9\u0AEC\x05\u029C\u014F\x02\u0AEA\u0AEC\x07\u01E0" +
    "\x02\x02\u0AEB\u0AE9\x03\x02\x02\x02\u0AEB\u0AEA\x03\x02\x02\x02\u0AEC" +
    "\u0AEE\x03\x02\x02\x02\u0AED\u0AE8\x03\x02\x02\x02\u0AEE\u0AF1\x03\x02" +
    "\x02\x02\u0AEF\u0AED\x03\x02\x02\x02\u0AEF\u0AF0\x03\x02\x02\x02\u0AF0" +
    "\xFB\x03\x02\x02\x02\u0AF1\u0AEF\x03\x02\x02\x02\u0AF2\u0AF3\x07\u01B1" +
    "\x02\x02\u0AF3\u0AF5\x05\u0460\u0231\x02\u0AF4\u0AF6\x05\u040C\u0207\x02" +
    "\u0AF5\u0AF4\x03\x02\x02\x02\u0AF5\u0AF6\x03\x02\x02\x02\u0AF6\xFD\x03" +
    "\x02\x02\x02\u0AF7\u0AF8\x07\u0245\x02\x02\u0AF8\u0AF9\x07~\x02\x02\u0AF9" +
    "\u0AFA\x07\u021B\x02\x02\u0AFA\u0AFB\x07\u0299\x02\x02\u0AFB\u0AFC\x05" +
    "\u03DA\u01EE\x02\u0AFC\xFF\x03\x02\x02\x02\u0AFD\u0AFE\x07\u0224\x02\x02" +
    "\u0AFE\u0B00\x05\u0102\x82\x02\u0AFF\u0B01\t\x1B\x02\x02\u0B00\u0AFF\x03" +
    "\x02\x02\x02\u0B00\u0B01\x03\x02\x02\x02\u0B01\u0B03\x03\x02\x02\x02\u0B02" +
    "\u0B04\x07\xB6\x02\x02\u0B03\u0B02\x03\x02\x02\x02\u0B03\u0B04\x03\x02" +
    "\x02\x02\u0B04\u0B05\x03\x02\x02\x02\u0B05\u0B06\x07\u020C\x02\x02\u0B06" +
    "\u0B08\x05\u0480\u0241\x02\u0B07\u0B09\t\n\x02\x02\u0B08\u0B07\x03\x02" +
    "\x02\x02\u0B08\u0B09\x03\x02\x02\x02\u0B09\u0B0A\x03\x02\x02\x02\u0B0A" +
    "\u0B0B\x07\u0212\x02\x02\u0B0B\u0B0C\x07\u0289\x02\x02\u0B0C\u0B0E\x05" +
    "\u0446\u0224\x02\u0B0D\u0B0F\x05\u0404\u0203\x02\u0B0E\u0B0D\x03\x02\x02" +
    "\x02\u0B0E\u0B0F\x03\x02\x02\x02\u0B0F\u0B11\x03\x02\x02\x02\u0B10\u0B12" +
    "\x05\u03DE\u01F0\x02\u0B11\u0B10\x03\x02\x02\x02\u0B11\u0B12\x03\x02\x02" +
    "\x02\u0B12\u0B14\x03\x02\x02\x02\u0B13\u0B15\x05\u0104\x83\x02\u0B14\u0B13" +
    "\x03\x02\x02\x02\u0B14\u0B15\x03\x02\x02\x02\u0B15\u0B17\x03\x02\x02\x02" +
    "\u0B16\u0B18\x05\u03E0\u01F1\x02\u0B17\u0B16\x03\x02\x02\x02\u0B17\u0B18" +
    "\x03\x02\x02\x02\u0B18\u0B1A\x03\x02\x02\x02\u0B19\u0B1B\x05\u03E4\u01F3" +
    "\x02\u0B1A\u0B19\x03\x02\x02\x02\u0B1A\u0B1B\x03\x02\x02\x02\u0B1B\u0B1C" +
    "\x03\x02\x02\x02\u0B1C\u0B1D\x05\u0106\x84\x02\u0B1D\u0101\x03\x02\x02" +
    "\x02\u0B1E\u0B1F\t\x1C\x02\x02\u0B1F\u0103\x03\x02\x02\x02\u0B20\u0B21" +
    "\x07\u012C\x02\x02\u0B21\u0B22\x07\xA1\x02\x02\u0B22\u0B23\x07\u01BE\x02" +
    "\x02\u0B23\u0B24\x05\u047C\u023F\x02\u0B24\u0105\x03\x02\x02\x02\u0B25" +
    "\u0B26\x07\u020A\x02\x02\u0B26\u0B27\x07\u017E\x02\x02\u0B27\u0B29\t\x1D" +
    "\x02\x02\u0B28\u0B25\x03\x02\x02\x02\u0B28\u0B29\x03\x02\x02\x02\u0B29" +
    "\u0B2B\x03\x02\x02\x02\u0B2A\u0B2C\x05\u0108\x85\x02\u0B2B\u0B2A\x03\x02" +
    "\x02\x02\u0B2B\u0B2C\x03\x02\x02\x02\u0B2C\u0B2F\x03\x02\x02\x02\u0B2D" +
    "\u0B2E\x07\u026D\x02\x02\u0B2E\u0B30\x05\u03DA\u01EE\x02\u0B2F\u0B2D\x03" +
    "\x02\x02\x02\u0B2F\u0B30\x03\x02\x02\x02\u0B30\u0107\x03\x02\x02\x02\u0B31" +
    "\u0B33\x07\u019B\x02\x02\u0B32\u0B34\x05\u010A\x86\x02\u0B33\u0B32\x03" +
    "\x02\x02\x02\u0B33\u0B34\x03\x02\x02\x02\u0B34\u0B35\x03\x02\x02\x02\u0B35" +
    "\u0B36\x07\u019C\x02\x02\u0B36\u0109\x03\x02\x02\x02\u0B37\u0B3A\x05\u040E" +
    "\u0208\x02\u0B38\u0B3A\x05\u02DE\u0170\x02\u0B39\u0B37\x03\x02\x02\x02" +
    "\u0B39\u0B38\x03\x02\x02\x02\u0B3A\u0B42\x03\x02\x02\x02\u0B3B\u0B3E\x07" +
    "\u0198\x02\x02\u0B3C\u0B3F\x05\u040E\u0208\x02\u0B3D\u0B3F\x05\u02DE\u0170" +
    "\x02\u0B3E\u0B3C\x03\x02\x02\x02\u0B3E\u0B3D\x03\x02\x02\x02\u0B3F\u0B41" +
    "\x03\x02\x02\x02\u0B40\u0B3B\x03\x02\x02\x02\u0B41\u0B44\x03\x02\x02\x02" +
    "\u0B42\u0B40\x03\x02\x02\x02\u0B42\u0B43\x03\x02\x02\x02\u0B43\u010B\x03" +
    "\x02\x02\x02\u0B44\u0B42\x03\x02\x02\x02\u0B45\u0B47\x07\u0260\x02\x02" +
    "\u0B46\u0B48\t\x1E\x02\x02\u0B47\u0B46\x03\x02\x02\x02\u0B47\u0B48\x03" +
    "\x02\x02\x02\u0B48\u0B4A\x03\x02\x02\x02\u0B49\u0B4B\x07\u0212\x02\x02" +
    "\u0B4A\u0B49\x03\x02\x02\x02\u0B4A\u0B4B\x03\x02\x02\x02\u0B4B\u0B4C\x03" +
    "\x02\x02\x02\u0B4C\u0B4E\x05\u0446\u0224\x02\u0B4D\u0B4F\x05\u0404\u0203" +
    "\x02\u0B4E\u0B4D\x03\x02\x02\x02\u0B4E\u0B4F\x03\x02\x02\x02\u0B4F\u0B54" +
    "\x03\x02\x02\x02\u0B50\u0B55\x05\xF0y\x02\u0B51\u0B52\x07\u026D\x02\x02" +
    "\u0B52\u0B55\x05\u03DA\u01EE\x02\u0B53\u0B55\x05\xF6|\x02\u0B54\u0B50" +
    "\x03\x02\x02\x02\u0B54\u0B51\x03\x02\x02\x02\u0B54\u0B53\x03\x02\x02\x02" +
    "\u0B55\u010D\x03\x02\x02\x02\u0B56\u0B5A\x05\u0112\x8A\x02\u0B57\u0B5A" +
    "\x05\u0116\x8C\x02\u0B58\u0B5A\x05\u0110\x89\x02\u0B59\u0B56\x03\x02\x02" +
    "\x02\u0B59\u0B57\x03\x02\x02\x02\u0B59\u0B58\x03\x02\x02\x02\u0B5A\u010F" +
    "\x03\x02\x02\x02\u0B5B\u0B5C\x07\u019B\x02\x02\u0B5C\u0B5D\x05\u0110\x89" +
    "\x02\u0B5D\u0B5E\x07\u019C\x02\x02\u0B5E\u0B63\x03\x02\x02\x02\u0B5F\u0B60" +
    "\x05\u0112\x8A\x02\u0B60\u0B61\x05\u0126\x94\x02\u0B61\u0B63\x03\x02\x02" +
    "\x02\u0B62\u0B5B\x03\x02\x02\x02\u0B62\u0B5F\x03\x02\x02\x02\u0B63\u0111" +
    "\x03\x02\x02\x02\u0B64\u0B65\x06\x8A,\x02\u0B65\u0B67\x05\u0142\xA2\x02" +
    "\u0B66\u0B64\x03\x02\x02\x02\u0B66\u0B67\x03\x02\x02\x02\u0B67\u0B77\x03" +
    "\x02\x02\x02\u0B68\u0B6A\x05\u0114\x8B\x02\u0B69\u0B6B\x05\u014A\xA6\x02" +
    "\u0B6A\u0B69\x03\x02\x02\x02\u0B6A\u0B6B\x03\x02\x02\x02\u0B6B\u0B6D\x03" +
    "\x02\x02\x02\u0B6C\u0B6E\x05\u011E\x90\x02\u0B6D\u0B6C\x03\x02\x02\x02" +
    "\u0B6D\u0B6E\x03\x02\x02\x02\u0B6E\u0B78\x03\x02\x02\x02\u0B6F\u0B75\x05" +
    "\u0116\x8C\x02\u0B70\u0B72\x05\u014A\xA6\x02\u0B71\u0B73\x05\u011E\x90" +
    "\x02\u0B72\u0B71\x03\x02\x02\x02\u0B72\u0B73\x03\x02\x02\x02\u0B73\u0B76" +
    "\x03\x02\x02\x02\u0B74\u0B76\x05\u011E\x90\x02\u0B75\u0B70\x03\x02\x02" +
    "\x02\u0B75\u0B74\x03\x02\x02\x02\u0B76\u0B78\x03\x02\x02\x02\u0B77\u0B68" +
    "\x03\x02\x02\x02\u0B77\u0B6F\x03\x02\x02\x02\u0B78\u0B7B\x03\x02\x02\x02" +
    "\u0B79\u0B7A\x06\x8A-\x02\u0B7A\u0B7C\x05\u0128\x95\x02\u0B7B\u0B79\x03" +
    "\x02\x02\x02\u0B7B\u0B7C\x03\x02\x02\x02\u0B7C\u0B7E\x03\x02\x02\x02\u0B7D" +
    "\u0B7F\x05\u0154\xAB\x02\u0B7E\u0B7D\x03\x02\x02\x02\u0B7E\u0B7F\x03\x02" +
    "\x02\x02\u0B7F\u0B87\x03\x02\x02\x02\u0B80\u0B81\x06\x8A.\x02\u0B81\u0B82" +
    "\x05\u0142\xA2\x02\u0B82\u0B84\x05\u0116\x8C\x02\u0B83\u0B85\x05\u0154" +
    "\xAB\x02\u0B84\u0B83\x03\x02\x02\x02\u0B84\u0B85\x03\x02\x02\x02\u0B85" +
    "\u0B87\x03\x02\x02\x02\u0B86\u0B66\x03\x02\x02\x02\u0B86\u0B80\x03\x02" +
    "\x02\x02\u0B87\u0113\x03\x02\x02\x02\u0B88\u0B89\b\x8B\x01\x02\u0B89\u0B94" +
    "\x05\u0118\x8D\x02\u0B8A\u0B8B\x05\u0116\x8C\x02\u0B8B\u0B8D\x07\u0295" +
    "\x02\x02\u0B8C\u0B8E\x05\u0186\xC4\x02\u0B8D\u0B8C\x03\x02\x02\x02\u0B8D" +
    "\u0B8E\x03\x02\x02\x02\u0B8E\u0B91\x03\x02\x02\x02\u0B8F\u0B92\x05\u0118" +
    "\x8D\x02\u0B90\u0B92\x05\u0116\x8C\x02\u0B91\u0B8F\x03\x02\x02\x02\u0B91" +
    "\u0B90\x03\x02\x02\x02\u0B92\u0B94\x03\x02\x02\x02\u0B93\u0B88\x03\x02" +
    "\x02\x02\u0B93\u0B8A\x03\x02\x02\x02\u0B94\u0BA0\x03\x02\x02\x02\u0B95" +
    "\u0B96\f\x04\x02\x02\u0B96\u0B98\x07\u0295\x02\x02\u0B97\u0B99\x05\u0186" +
    "\xC4\x02\u0B98\u0B97\x03\x02\x02\x02\u0B98\u0B99\x03\x02\x02\x02\u0B99" +
    "\u0B9C\x03\x02\x02\x02\u0B9A\u0B9D\x05\u0118\x8D\x02\u0B9B\u0B9D\x05\u0116" +
    "\x8C\x02\u0B9C\u0B9A\x03\x02\x02\x02\u0B9C\u0B9B\x03\x02\x02\x02\u0B9D" +
    "\u0B9F\x03\x02\x02\x02\u0B9E\u0B95\x03\x02\x02\x02\u0B9F\u0BA2\x03\x02" +
    "\x02\x02\u0BA0\u0B9E\x03\x02\x02\x02\u0BA0\u0BA1\x03\x02\x02\x02\u0BA1" +
    "\u0115\x03\x02\x02\x02\u0BA2\u0BA0\x03\x02\x02\x02\u0BA3\u0BA6\x07\u019B" +
    "\x02\x02\u0BA4\u0BA7\x05\u0116\x8C\x02\u0BA5\u0BA7\x05\u0112\x8A\x02\u0BA6" +
    "\u0BA4\x03\x02\x02\x02\u0BA6\u0BA5\x03\x02\x02\x02\u0BA7\u0BA8\x03\x02" +
    "\x02\x02\u0BA8\u0BA9\x07\u019C\x02\x02\u0BA9\u0117\x03\x02\x02\x02\u0BAA" +
    "\u0BAE\x07\u0268\x02\x02\u0BAB\u0BAD\x05\u0152\xAA\x02\u0BAC\u0BAB\x03" +
    "\x02\x02\x02\u0BAD\u0BB0\x03\x02\x02\x02\u0BAE\u0BAC\x03\x02\x02\x02\u0BAE" +
    "\u0BAF\x03\x02\x02\x02\u0BAF\u0BB1\x03\x02\x02\x02\u0BB0\u0BAE\x03\x02" +
    "\x02\x02\u0BB1\u0BB3\x05\u015A\xAE\x02\u0BB2\u0BB4\x05\u0126\x94\x02\u0BB3" +
    "\u0BB2\x03\x02\x02\x02\u0BB3\u0BB4\x03\x02\x02\x02\u0BB4\u0BB6\x03\x02" +
    "\x02\x02\u0BB5\u0BB7\x05\u014E\xA8\x02\u0BB6\u0BB5\x03\x02\x02\x02\u0BB6" +
    "\u0BB7\x03\x02\x02\x02\u0BB7\u0BB9\x03\x02\x02\x02\u0BB8\u0BBA\x05\u0160" +
    "\xB1\x02\u0BB9\u0BB8\x03\x02\x02\x02\u0BB9\u0BBA\x03\x02\x02\x02\u0BBA" +
    "\u0BBC\x03\x02\x02\x02\u0BBB\u0BBD\x05\u0146\xA4\x02\u0BBC\u0BBB\x03\x02" +
    "\x02\x02\u0BBC\u0BBD\x03\x02\x02\x02\u0BBD\u0BBF\x03\x02\x02\x02\u0BBE" +
    "\u0BC0\x05\u012A\x96\x02\u0BBF\u0BBE\x03\x02\x02\x02\u0BBF\u0BC0\x03\x02" +
    "\x02\x02\u0BC0\u0BC3\x03\x02\x02\x02\u0BC1\u0BC2\x06\x8D0\x02\u0BC2\u0BC4" +
    "\x05\u012C\x97\x02\u0BC3\u0BC1\x03\x02\x02\x02\u0BC3\u0BC4\x03\x02\x02" +
    "\x02\u0BC4\u0119\x03\x02\x02\x02\u0BC5\u0BC6\x05\u0116\x8C\x02\u0BC6\u011B" +
    "\x03\x02\x02\x02\u0BC7\u0BC8\t\x1F\x02\x02\u0BC8\u011D\x03\x02\x02\x02" +
    "\u0BC9\u0BCA\x07\u0221\x02\x02\u0BCA\u0BCB\x05\u0122\x92\x02\u0BCB\u011F" +
    "\x03\x02\x02\x02\u0BCC\u0BCD\x07\u0221\x02\x02\u0BCD\u0BCE\x05\u0124\x93" +
    "\x02\u0BCE\u0121\x03\x02\x02\x02\u0BCF\u0BD2\x05\u0124\x93\x02\u0BD0\u0BD1" +
    "\t \x02\x02\u0BD1\u0BD3\x05\u0124\x93\x02\u0BD2\u0BD0\x03\x02\x02\x02" +
    "\u0BD2\u0BD3\x03\x02\x02\x02\u0BD3\u0123\x03\x02\x02\x02\u0BD4\u0BD7\x05" +
    "\u0460\u0231\x02\u0BD5\u0BD7\t!\x02\x02\u0BD6\u0BD4\x03\x02\x02\x02\u0BD6" +
    "\u0BD5\x03\x02\x02\x02\u0BD7\u0125\x03\x02\x02\x02\u0BD8\u0BF4\x07\u0212" +
    "\x02\x02\u0BD9\u0BDA\x07\u024F\x02\x02\u0BDA\u0BDC\x05\u047A\u023E\x02" +
    "\u0BDB\u0BDD\x05\u03DE\u01F0\x02\u0BDC\u0BDB\x03\x02\x02\x02\u0BDC\u0BDD" +
    "\x03\x02\x02\x02\u0BDD\u0BDF\x03\x02\x02\x02\u0BDE\u0BE0\x05\u03E0\u01F1" +
    "\x02\u0BDF\u0BDE\x03\x02\x02\x02\u0BDF\u0BE0\x03\x02\x02\x02\u0BE0\u0BE2" +
    "\x03\x02\x02\x02\u0BE1\u0BE3\x05\u03E4\u01F3\x02\u0BE2\u0BE1\x03\x02\x02" +
    "\x02\u0BE2\u0BE3\x03\x02\x02\x02\u0BE3\u0BF5\x03\x02\x02\x02\u0BE4\u0BE5" +
    "\x07}\x02\x02\u0BE5\u0BF5\x05\u047A\u023E\x02\u0BE6\u0BE9\x05\u0494\u024B" +
    "\x02\u0BE7\u0BE9\x05\u02DE\u0170\x02\u0BE8\u0BE6\x03\x02\x02\x02\u0BE8" +
    "\u0BE7\x03\x02\x02\x02\u0BE9\u0BF1\x03\x02\x02\x02\u0BEA\u0BED\x07\u0198" +
    "\x02\x02\u0BEB\u0BEE\x05\u0494\u024B\x02\u0BEC\u0BEE\x05\u02DE\u0170\x02" +
    "\u0BED\u0BEB\x03\x02\x02\x02\u0BED\u0BEC\x03\x02\x02\x02\u0BEE\u0BF0\x03" +
    "\x02\x02\x02\u0BEF\u0BEA\x03\x02\x02\x02\u0BF0\u0BF3\x03\x02\x02\x02\u0BF1" +
    "\u0BEF\x03\x02\x02\x02\u0BF1\u0BF2\x03\x02\x02\x02\u0BF2\u0BF5\x03\x02" +
    "\x02\x02\u0BF3\u0BF1\x03\x02\x02\x02\u0BF4\u0BD9\x03\x02\x02\x02\u0BF4" +
    "\u0BE4\x03\x02\x02\x02\u0BF4\u0BE8\x03\x02\x02\x02\u0BF5\u0127\x03\x02" +
    "\x02\x02\u0BF6\u0BF7\x07\u0254\x02\x02\u0BF7\u0BF8\x07\u01AF\x02\x02\u0BF8" +
    "\u0BFE\x07\u019B\x02\x02\u0BF9\u0BFC\x07\u017E\x02\x02\u0BFA\u0BFB\x07" +
    "\u0198\x02\x02\u0BFB\u0BFD\x07\u017E\x02\x02\u0BFC\u0BFA\x03\x02\x02\x02" +
    "\u0BFC\u0BFD\x03\x02\x02\x02\u0BFD\u0BFF\x03\x02\x02\x02\u0BFE\u0BF9\x03" +
    "\x02\x02\x02\u0BFE\u0BFF\x03\x02\x02\x02\u0BFF\u0C00\x03\x02\x02\x02\u0C00" +
    "\u0C01\x07\u019C\x02\x02\u0C01\u0129\x03\x02\x02\x02\u0C02\u0C03\x07\u0204" +
    "\x02\x02\u0C03\u0C04\x05\u029C\u014F\x02\u0C04\u012B\x03\x02\x02\x02\u0C05" +
    "\u0C06\x07\u02DB\x02\x02\u0C06\u0C0B\x05\u012E\x98\x02\u0C07\u0C08\x07" +
    "\u0198\x02\x02\u0C08\u0C0A\x05\u012E\x98\x02\u0C09\u0C07\x03\x02\x02\x02" +
    "\u0C0A\u0C0D\x03\x02\x02\x02\u0C0B\u0C09\x03\x02\x02\x02\u0C0B\u0C0C\x03" +
    "\x02\x02\x02\u0C0C\u012D\x03\x02\x02\x02\u0C0D\u0C0B\x03\x02\x02\x02\u0C0E" +
    "\u0C0F\x05\u045C\u022F\x02\u0C0F\u0C10\x07\u01B1\x02\x02\u0C10\u0C11\x05" +
    "\u0130\x99\x02\u0C11\u012F\x03\x02\x02\x02\u0C12\u0C13\x07\u019B\x02\x02" +
    "\u0C13\u0C14\x05\u0132\x9A\x02\u0C14\u0C15\x07\u019C\x02\x02\u0C15\u0131" +
    "\x03\x02\x02\x02\u0C16\u0C18\x05\u045C\u022F\x02\u0C17\u0C16\x03\x02\x02" +
    "\x02\u0C17\u0C18\x03\x02\x02\x02\u0C18\u0C1C\x03\x02\x02\x02\u0C19\u0C1A" +
    "\x07\"\x02\x02\u0C1A\u0C1B\x07\u01BE\x02\x02\u0C1B\u0C1D\x05\u02FE\u0180" +
    "\x02\u0C1C\u0C19\x03\x02\x02\x02\u0C1C\u0C1D\x03\x02\x02\x02\u0C1D\u0C1F" +
    "\x03\x02\x02\x02\u0C1E\u0C20\x05\u014A\xA6\x02\u0C1F\u0C1E\x03\x02\x02" +
    "\x02\u0C1F\u0C20\x03\x02\x02\x02\u0C20\u0C22\x03\x02\x02\x02\u0C21\u0C23" +
    "\x05\u0134\x9B\x02\u0C22\u0C21\x03\x02\x02\x02\u0C22\u0C23\x03\x02\x02" +
    "\x02\u0C23\u0133\x03\x02\x02\x02\u0C24\u0C25\x05\u0136\x9C\x02\u0C25\u0C27" +
    "\x05\u0138\x9D\x02\u0C26\u0C28\x05\u0140\xA1\x02\u0C27\u0C26\x03\x02\x02" +
    "\x02\u0C27\u0C28\x03\x02\x02\x02\u0C28\u0135\x03\x02\x02\x02\u0C29\u0C2A" +
    "\t\"\x02\x02\u0C2A\u0137\x03\x02\x02\x02\u0C2B\u0C2E\x05\u013A\x9E\x02" +
    "\u0C2C\u0C2E\x05\u013C\x9F\x02\u0C2D\u0C2B\x03\x02\x02\x02\u0C2D\u0C2C" +
    "\x03\x02\x02\x02\u0C2E\u0139\x03\x02\x02\x02\u0C2F\u0C30\x07\u02DA\x02" +
    "\x02\u0C30\u0C3E\x07\u02D5\x02\x02\u0C31\u0C32\x05\u0470\u0239\x02\u0C32" +
    "\u0C33\x07\u02D5\x02\x02\u0C33\u0C3E\x03\x02\x02\x02\u0C34\u0C35\x07\u01A6" +
    "\x02\x02\u0C35\u0C3E\x07\u02D5\x02\x02\u0C36\u0C37\x07\u0211\x02\x02\u0C37" +
    "\u0C38\x05\u029C\u014F\x02\u0C38\u0C39\x05\u02F4\u017B\x02\u0C39\u0C3A" +
    "\x07\u02D5\x02\x02\u0C3A\u0C3E\x03\x02\x02\x02\u0C3B\u0C3C\x07m\x02\x02" +
    "\u0C3C\u0C3E\x07\u012F\x02\x02\u0C3D\u0C2F\x03\x02\x02\x02\u0C3D\u0C31" +
    "\x03\x02\x02\x02\u0C3D\u0C34\x03\x02\x02\x02\u0C3D\u0C36\x03\x02\x02\x02" +
    "\u0C3D\u0C3B\x03\x02\x02\x02\u0C3E\u013B\x03\x02\x02\x02\u0C3F\u0C40\x07" +
    "\u01B5\x02\x02\u0C40\u0C41\x05\u013E\xA0\x02\u0C41\u0C42\x07\u01B0\x02" +
    "\x02\u0C42\u0C43\x05\u013E\xA0\x02\u0C43\u013D\x03\x02\x02\x02\u0C44\u0C52" +
    "\x05\u013A\x9E\x02\u0C45\u0C46\x07\u02DA\x02\x02\u0C46\u0C52\x07\u02CA" +
    "\x02\x02\u0C47\u0C48\x05\u0470\u0239\x02\u0C48\u0C49\x07\u02CA\x02\x02" +
    "\u0C49\u0C52\x03\x02\x02\x02\u0C4A\u0C4B\x07\u01A6\x02\x02\u0C4B\u0C52" +
    "\x07\u02CA\x02\x02\u0C4C\u0C4D\x07\u0211\x02\x02\u0C4D\u0C4E\x05\u029C" +
    "\u014F\x02\u0C4E\u0C4F\x05\u02F4\u017B\x02\u0C4F\u0C50\x07\u02CA\x02\x02" +
    "\u0C50\u0C52\x03\x02\x02\x02\u0C51\u0C44\x03\x02\x02\x02\u0C51\u0C45\x03" +
    "\x02\x02\x02\u0C51\u0C47\x03\x02\x02\x02\u0C51\u0C4A\x03\x02\x02\x02\u0C51" +
    "\u0C4C\x03\x02\x02\x02\u0C52\u013F\x03\x02\x02\x02\u0C53\u0C5A\x07\u02C8" +
    "\x02\x02\u0C54\u0C55\x07m\x02\x02\u0C55\u0C5B\x07\u012F\x02\x02\u0C56" +
    "\u0C5B\x07\u0202\x02\x02\u0C57\u0C5B\x07\u02D9\x02\x02\u0C58\u0C59\x07" +
    "\x1D\x02\x02\u0C59\u0C5B\x07\u02D2\x02\x02\u0C5A\u0C54\x03\x02\x02\x02" +
    "\u0C5A\u0C56\x03\x02\x02\x02\u0C5A\u0C57\x03\x02\x02\x02\u0C5A\u0C58\x03" +
    "\x02\x02\x02\u0C5B\u0141\x03\x02\x02\x02\u0C5C\u0C5E\x07\u02AC\x02\x02" +
    "\u0C5D\u0C5F\x07\u02B9\x02\x02\u0C5E\u0C5D\x03\x02\x02\x02\u0C5E\u0C5F" +
    "\x03\x02\x02\x02\u0C5F\u0C60\x03\x02\x02\x02\u0C60\u0C65\x05\u0144\xA3" +
    "\x02\u0C61\u0C62\x07\u0198\x02\x02\u0C62\u0C64\x05\u0144\xA3\x02\u0C63" +
    "\u0C61\x03\x02\x02\x02\u0C64\u0C67\x03\x02\x02\x02\u0C65\u0C63\x03\x02" +
    "\x02\x02\u0C65\u0C66\x03\x02\x02\x02\u0C66\u0143\x03\x02\x02\x02\u0C67" +
    "\u0C65\x03\x02\x02\x02\u0C68\u0C6A\x05\u0460\u0231\x02\u0C69\u0C6B\x05" +
    "\u040C\u0207\x02\u0C6A\u0C69\x03\x02\x02\x02\u0C6A\u0C6B\x03\x02\x02\x02" +
    "\u0C6B\u0C6C\x03\x02\x02\x02\u0C6C\u0C6D\x07\u01B1\x02\x02\u0C6D\u0C6E" +
    "\x05\u011A\x8E\x02\u0C6E\u0145\x03\x02\x02\x02\u0C6F\u0C70\x07\u0202\x02" +
    "\x02\u0C70\u0C71\x07\u01BE\x02\x02\u0C71\u0C73\x05\u02FE\u0180\x02\u0C72" +
    "\u0C74\x05\u0148\xA5\x02\u0C73\u0C72\x03\x02\x02\x02\u0C73\u0C74\x03\x02" +
    "\x02\x02\u0C74\u0147\x03\x02\x02\x02\u0C75\u0C76\x07\u02AC\x02\x02\u0C76" +
    "\u0C7B\x07\u0129\x02\x02\u0C77\u0C78\x06\xA51\x02\u0C78\u0C79\x07\u02AC" +
    "\x02\x02\u0C79\u0C7B\x07l\x02\x02\u0C7A\u0C75\x03\x02\x02\x02\u0C7A\u0C77" +
    "\x03\x02\x02\x02\u0C7B\u0149\x03\x02\x02\x02\u0C7C\u0C7D\x07\u024C\x02" +
    "\x02\u0C7D\u0C7E\x07\u01BE\x02\x02\u0C7E\u0C7F\x05\u02FE\u0180\x02\u0C7F" +
    "\u014B\x03\x02\x02\x02\u0C80\u0C81\t#\x02\x02\u0C81\u014D\x03\x02\x02" +
    "\x02\u0C82\u0C85\x07\u01FD\x02\x02\u0C83\u0C86\x07\u01EA\x02\x02\u0C84" +
    "\u0C86\x05\u0150\xA9\x02\u0C85\u0C83\x03\x02\x02\x02\u0C85\u0C84\x03\x02" +
    "\x02\x02\u0C86\u014F\x03\x02\x02\x02\u0C87\u0C8C\x05\u0162\xB2\x02\u0C88" +
    "\u0C89\x07\u0198\x02\x02\u0C89\u0C8B\x05\u0162\xB2\x02\u0C8A\u0C88\x03" +
    "\x02\x02\x02\u0C8B\u0C8E\x03\x02\x02\x02\u0C8C\u0C8A\x03\x02\x02\x02\u0C8C" +
    "\u0C8D\x03\x02\x02\x02\u0C8D\u0151\x03\x02\x02\x02\u0C8E\u0C8C\x03\x02" +
    "\x02\x02\u0C8F\u0C98\x05\u011C\x8F\x02\u0C90\u0C98\x07\u0142\x02\x02\u0C91" +
    "\u0C92\x06\xAA2\x02\u0C92\u0C98\x07\u0140\x02\x02\u0C93\u0C94\x06\xAA" +
    "3\x02\u0C94\u0C95\x07\xD3\x02\x02\u0C95\u0C96\x07\u0181\x02\x02\u0C96" +
    "\u0C98\x05\u046E\u0238\x02\u0C97\u0C8F\x03\x02\x02\x02\u0C97\u0C90\x03" +
    "\x02\x02\x02\u0C97\u0C91\x03\x02\x02\x02\u0C97\u0C93\x03\x02\x02\x02\u0C98" +
    "\u0153\x03\x02\x02\x02\u0C99\u0C9A\x07\u01FC\x02\x02\u0C9A\u0C9E\x05\u0156" +
    "\xAC\x02\u0C9B\u0C9C\x06\xAB4\x02\u0C9C\u0C9D\x07\u02BC\x02\x02\u0C9D" +
    "\u0C9F\x05\u044A\u0226\x02\u0C9E\u0C9B\x03\x02\x02\x02\u0C9E\u0C9F\x03" +
    "\x02\x02\x02\u0C9F\u0CA2\x03\x02\x02\x02\u0CA0\u0CA1\x06\xAB5\x02\u0CA1" +
    "\u0CA3\x05\u0158\xAD\x02\u0CA2\u0CA0\x03\x02\x02\x02\u0CA2\u0CA3\x03\x02" +
    "\x02\x02\u0CA3\u0CA9\x03\x02\x02\x02\u0CA4\u0CA5\x07\u0226\x02\x02\u0CA5" +
    "\u0CA6\x07\u0214\x02\x02\u0CA6\u0CA7\x07\u0138\x02\x02\u0CA7\u0CA9\x07" +
    "\xE0\x02\x02\u0CA8\u0C99\x03\x02\x02\x02\u0CA8\u0CA4\x03\x02\x02\x02\u0CA9" +
    "\u0155\x03\x02\x02\x02\u0CAA\u0CAE\x07\u0299\x02\x02\u0CAB\u0CAC\x06\xAC" +
    "6\x02\u0CAC\u0CAE\x07\u0138\x02\x02\u0CAD\u0CAA\x03\x02\x02\x02\u0CAD" +
    "\u0CAB\x03\x02\x02\x02\u0CAE\u0157\x03\x02\x02\x02\u0CAF\u0CB0\x07\u02BD" +
    "\x02\x02\u0CB0\u0CB3\x07\u02BE\x02\x02\u0CB1\u0CB3\x07\u02BF\x02\x02\u0CB2" +
    "\u0CAF\x03\x02\x02\x02\u0CB2\u0CB1\x03\x02\x02\x02\u0CB3\u0159\x03\x02" +
    "\x02\x02\u0CB4\u0CB7\x05\u015C\xAF\x02\u0CB5\u0CB7\x07\u018B\x02\x02\u0CB6" +
    "\u0CB4\x03\x02\x02\x02\u0CB6\u0CB5\x03\x02\x02\x02\u0CB7\u0CBC\x03\x02" +
    "\x02\x02\u0CB8\u0CB9\x07\u0198\x02\x02\u0CB9\u0CBB\x05\u015C\xAF\x02\u0CBA" +
    "\u0CB8\x03\x02\x02\x02\u0CBB\u0CBE\x03\x02\x02\x02\u0CBC\u0CBA\x03\x02" +
    "\x02\x02\u0CBC\u0CBD\x03\x02\x02\x02\u0CBD\u015B\x03\x02\x02\x02\u0CBE" +
    "\u0CBC\x03\x02\x02\x02\u0CBF\u0CC5\x05\u0416\u020C\x02\u0CC0\u0CC2\x05" +
    "\u029C\u014F\x02\u0CC1\u0CC3\x05\u015E\xB0\x02\u0CC2\u0CC1\x03\x02\x02" +
    "\x02\u0CC2\u0CC3\x03\x02\x02\x02\u0CC3\u0CC5\x03\x02\x02\x02\u0CC4\u0CBF" +
    "\x03\x02\x02\x02\u0CC4\u0CC0\x03\x02\x02\x02\u0CC5\u015D\x03\x02\x02\x02" +
    "\u0CC6\u0CC8\x07\u01B1\x02\x02\u0CC7\u0CC6\x03\x02\x02\x02\u0CC7\u0CC8" +
    "\x03\x02\x02\x02\u0CC8\u0CCB\x03\x02\x02\x02\u0CC9\u0CCC\x05\u0460\u0231" +
    "\x02\u0CCA\u0CCC\x05\u047A\u023E\x02\u0CCB\u0CC9\x03\x02\x02\x02\u0CCB" +
    "\u0CCA\x03\x02\x02\x02\u0CCC\u015F\x03\x02\x02\x02\u0CCD\u0CCE\x07\u02AA" +
    "\x02\x02\u0CCE\u0CCF\x05\u029C\u014F\x02\u0CCF\u0161\x03\x02\x02\x02\u0CD0" +
    "\u0CDB\x05\u016E\xB8\x02\u0CD1\u0CD5\x07\u019D\x02\x02\u0CD2\u0CD3\x06" +
    "\xB27\x02\u0CD3\u0CD6\x05\u0460\u0231\x02\u0CD4\u0CD6\x07\u02FC\x02\x02" +
    "\u0CD5\u0CD2\x03\x02\x02\x02\u0CD5\u0CD4\x03\x02\x02\x02\u0CD6\u0CD7\x03" +
    "\x02\x02\x02\u0CD7\u0CD8\x05\u0164\xB3\x02\u0CD8\u0CD9\x07\u019E\x02\x02" +
    "\u0CD9\u0CDB\x03\x02\x02\x02\u0CDA\u0CD0\x03\x02\x02\x02\u0CDA\u0CD1\x03" +
    "\x02\x02\x02\u0CDB\u0CDF\x03\x02\x02\x02\u0CDC\u0CDE\x05\u0166\xB4\x02" +
    "\u0CDD\u0CDC\x03\x02\x02\x02\u0CDE\u0CE1\x03\x02\x02\x02\u0CDF\u0CDD\x03" +
    "\x02\x02\x02\u0CDF\u0CE0\x03\x02\x02\x02\u0CE0\u0163\x03\x02\x02\x02\u0CE1" +
    "\u0CDF\x03\x02\x02\x02\u0CE2\u0CE6\x05\u016E\xB8\x02\u0CE3\u0CE5\x05\u0166" +
    "\xB4\x02\u0CE4\u0CE3\x03\x02\x02\x02\u0CE5\u0CE8\x03\x02\x02\x02\u0CE6" +
    "\u0CE4\x03\x02\x02\x02\u0CE6\u0CE7\x03\x02\x02\x02\u0CE7\u0165\x03\x02" +
    "\x02\x02\u0CE8\u0CE6\x03\x02\x02\x02\u0CE9\u0CEA\x05\u016A\xB6\x02\u0CEA" +
    "\u0CEF\x05\u0162\xB2\x02\u0CEB\u0CEC\x07\u0245\x02\x02\u0CEC\u0CF0\x05" +
    "\u029C\u014F\x02\u0CED\u0CEE\x07\u029C\x02\x02\u0CEE\u0CF0\x05\u0464\u0233" +
    "\x02\u0CEF\u0CEB\x03\x02\x02\x02\u0CEF\u0CED\x03\x02\x02\x02\u0CEF\u0CF0" +
    "\x03\x02\x02\x02\u0CF0\u0CFD\x03\x02\x02\x02\u0CF1\u0CF2\x05\u016C\xB7" +
    "\x02\u0CF2\u0CF7\x05\u0162\xB2\x02\u0CF3\u0CF4\x07\u0245\x02\x02\u0CF4" +
    "\u0CF8\x05\u029C\u014F\x02\u0CF5\u0CF6\x07\u029C\x02\x02\u0CF6\u0CF8\x05" +
    "\u0464\u0233\x02\u0CF7\u0CF3\x03\x02\x02\x02\u0CF7\u0CF5\x03\x02\x02\x02" +
    "\u0CF8\u0CFD\x03\x02\x02\x02\u0CF9\u0CFA\x05\u0168\xB5\x02\u0CFA\u0CFB" +
    "\x05\u016E\xB8\x02\u0CFB\u0CFD\x03\x02\x02\x02\u0CFC\u0CE9\x03\x02\x02" +
    "\x02\u0CFC\u0CF1\x03\x02\x02\x02\u0CFC\u0CF9\x03\x02\x02\x02\u0CFD\u0167" +
    "\x03\x02\x02\x02\u0CFE\u0D00\x07\u023B\x02\x02\u0CFF\u0D01\x07\u020D\x02" +
    "\x02\u0D00\u0CFF\x03\x02\x02\x02\u0D00\u0D01\x03\x02\x02\x02\u0D01\u0D02" +
    "\x03\x02\x02\x02\u0D02\u0D0A\x07\u0219\x02\x02\u0D03\u0D04\x07\u023B\x02" +
    "\x02\u0D04\u0D06\t$\x02\x02\u0D05\u0D07\x07\u024E\x02\x02\u0D06\u0D05" +
    "\x03\x02\x02\x02\u0D06\u0D07\x03\x02\x02\x02\u0D07\u0D08\x03\x02\x02\x02" +
    "\u0D08\u0D0A\x07\u0219\x02\x02\u0D09\u0CFE\x03\x02\x02\x02\u0D09\u0D03" +
    "\x03\x02\x02\x02\u0D0A\u0169\x03\x02\x02\x02\u0D0B\u0D0D\t%\x02\x02\u0D0C" +
    "\u0D0B\x03\x02\x02\x02\u0D0C\u0D0D\x03\x02\x02\x02\u0D0D\u0D0E\x03\x02" +
    "\x02\x02\u0D0E\u0D11\x07\u0219\x02\x02\u0D0F\u0D11\x07\u0282\x02\x02\u0D10" +
    "\u0D0C\x03\x02\x02\x02\u0D10\u0D0F\x03\x02\x02\x02\u0D11\u016B\x03\x02" +
    "\x02\x02\u0D12\u0D14\t$\x02\x02\u0D13\u0D15\x07\u024E\x02\x02\u0D14\u0D13" +
    "\x03\x02\x02\x02\u0D14\u0D15\x03\x02\x02\x02\u0D15\u0D16\x03\x02\x02\x02" +
    "\u0D16\u0D17\x07\u0219\x02\x02\u0D17\u016D\x03\x02";
MySQLParser._serializedATNSegment8 = "\x02\x02\u0D18\u0D1F\x05\u0170\xB9\x02\u0D19\u0D1F\x05\u0172\xBA\x02\u0D1A" +
    "\u0D1F\x05\u0174\xBB\x02\u0D1B\u0D1F\x05\u0176\xBC\x02\u0D1C\u0D1D\x06" +
    "\xB88\x02\u0D1D\u0D1F\x05\u0178\xBD\x02\u0D1E\u0D18\x03\x02\x02\x02\u0D1E" +
    "\u0D19\x03\x02\x02\x02\u0D1E\u0D1A\x03\x02\x02\x02\u0D1E\u0D1B\x03\x02" +
    "\x02\x02\u0D1E\u0D1C\x03\x02\x02\x02\u0D1F\u016F\x03\x02\x02\x02\u0D20" +
    "\u0D22\x05\u0446\u0224\x02\u0D21\u0D23\x05\u0404\u0203\x02\u0D22\u0D21" +
    "\x03\x02\x02\x02\u0D22\u0D23\x03\x02\x02\x02\u0D23\u0D25\x03\x02\x02\x02" +
    "\u0D24\u0D26\x05\u0188\xC5\x02\u0D25\u0D24\x03\x02\x02\x02\u0D25\u0D26" +
    "\x03\x02\x02\x02\u0D26\u0D28\x03\x02\x02\x02\u0D27\u0D29\x05\u018A\xC6" +
    "\x02\u0D28\u0D27\x03\x02\x02\x02\u0D28\u0D29\x03\x02\x02\x02\u0D29\u0171" +
    "\x03\x02\x02\x02\u0D2A\u0D2D\x07\u019B\x02\x02\u0D2B\u0D2E\x05\u0170\xB9" +
    "\x02\u0D2C\u0D2E\x05\u0172\xBA\x02\u0D2D\u0D2B\x03\x02\x02\x02\u0D2D\u0D2C" +
    "\x03\x02\x02\x02\u0D2E\u0D2F\x03\x02\x02\x02\u0D2F\u0D30\x07\u019C\x02" +
    "\x02\u0D30\u0173\x03\x02\x02\x02\u0D31\u0D33\x05\u011A\x8E\x02\u0D32\u0D34" +
    "\x05\u0188\xC5\x02\u0D33\u0D32\x03\x02\x02\x02\u0D33\u0D34\x03\x02\x02" +
    "\x02\u0D34\u0D37\x03\x02\x02\x02\u0D35\u0D36\x06\xBB9\x02\u0D36\u0D38" +
    "\x05\u040C\u0207\x02\u0D37\u0D35\x03\x02\x02\x02\u0D37\u0D38\x03\x02\x02" +
    "\x02\u0D38\u0D43\x03\x02\x02\x02\u0D39\u0D3A\x06\xBB:\x02\u0D3A\u0D3B" +
    "\x07\u02F6\x02\x02\u0D3B\u0D3D\x05\u011A\x8E\x02\u0D3C\u0D3E\x05\u0188" +
    "\xC5\x02\u0D3D\u0D3C\x03\x02\x02\x02\u0D3D\u0D3E\x03\x02\x02\x02\u0D3E" +
    "\u0D40\x03\x02\x02\x02\u0D3F\u0D41\x05\u040C\u0207\x02\u0D40\u0D3F\x03" +
    "\x02\x02\x02\u0D40\u0D41\x03\x02\x02\x02\u0D41\u0D43\x03\x02\x02\x02\u0D42" +
    "\u0D31\x03\x02\x02\x02\u0D42\u0D39\x03\x02\x02\x02\u0D43\u0175\x03\x02" +
    "\x02\x02\u0D44\u0D47\x07\u019B\x02\x02\u0D45\u0D48\x05\u0150\xA9\x02\u0D46" +
    "\u0D48\x05\u0176\xBC\x02\u0D47\u0D45\x03\x02\x02\x02\u0D47\u0D46\x03\x02" +
    "\x02\x02\u0D48\u0D49\x03\x02\x02\x02\u0D49\u0D4A\x07\u019C\x02\x02\u0D4A" +
    "\u0177\x03\x02\x02\x02\u0D4B\u0D4C\x07\u02DD\x02\x02\u0D4C\u0D4D\x07\u019B" +
    "\x02\x02\u0D4D\u0D4E\x05\u029C\u014F\x02\u0D4E\u0D4F\x07\u0198\x02\x02" +
    "\u0D4F\u0D50\x05\u047A\u023E\x02\u0D50\u0D51\x05\u017A\xBE\x02\u0D51\u0D53" +
    "\x07\u019C\x02\x02\u0D52\u0D54\x05\u0188\xC5\x02\u0D53\u0D52\x03\x02\x02" +
    "\x02\u0D53\u0D54\x03\x02\x02\x02\u0D54\u0179\x03\x02\x02\x02\u0D55\u0D56" +
    "\x07\\\x02\x02\u0D56\u0D57\x07\u019B\x02\x02\u0D57\u0D5C\x05\u017C\xBF" +
    "\x02\u0D58\u0D59\x07\u0198\x02\x02\u0D59\u0D5B\x05\u017C\xBF\x02\u0D5A" +
    "\u0D58\x03\x02\x02\x02\u0D5B\u0D5E\x03\x02\x02\x02\u0D5C\u0D5A\x03\x02" +
    "\x02\x02\u0D5C\u0D5D\x03\x02\x02\x02\u0D5D\u0D5F\x03\x02\x02\x02\u0D5E" +
    "\u0D5C\x03\x02\x02\x02\u0D5F\u0D60\x07\u019C\x02\x02\u0D60\u017B\x03\x02" +
    "\x02\x02\u0D61\u0D62\x05\u0460\u0231\x02\u0D62\u0D63\x07\u01FC\x02\x02" +
    "\u0D63\u0D64\x07\u02DF\x02\x02\u0D64\u0D79\x03\x02\x02\x02\u0D65\u0D66" +
    "\x05\u0460\u0231\x02\u0D66\u0D69\x05\u038C\u01C7\x02\u0D67\u0D68\x06\xBF" +
    ";\x02\u0D68\u0D6A\x05\u03D2\u01EA\x02\u0D69\u0D67\x03\x02\x02\x02\u0D69" +
    "\u0D6A\x03\x02\x02\x02\u0D6A\u0D6C\x03\x02\x02\x02\u0D6B\u0D6D\x07\u01F2" +
    "\x02\x02\u0D6C\u0D6B\x03\x02\x02\x02\u0D6C\u0D6D\x03\x02\x02\x02\u0D6D" +
    "\u0D6E\x03\x02\x02\x02\u0D6E\u0D6F\x07\u02E0\x02\x02\u0D6F\u0D71\x05\u047A" +
    "\u023E\x02\u0D70\u0D72\x05\u017E\xC0\x02\u0D71\u0D70\x03\x02\x02\x02\u0D71" +
    "\u0D72\x03\x02\x02\x02\u0D72\u0D79\x03\x02\x02\x02\u0D73\u0D74\x07\u02DE" +
    "\x02\x02\u0D74\u0D75\x07\u02E0\x02\x02\u0D75\u0D76\x05\u047A\u023E\x02" +
    "\u0D76\u0D77\x05\u017A\xBE\x02\u0D77\u0D79\x03\x02\x02\x02\u0D78\u0D61" +
    "\x03\x02\x02\x02\u0D78\u0D65\x03\x02\x02\x02\u0D78\u0D73\x03\x02\x02\x02" +
    "\u0D79\u017D\x03\x02\x02\x02\u0D7A\u0D7C\x05\u0180\xC1\x02\u0D7B\u0D7D" +
    "\x05\u0182\xC2\x02\u0D7C\u0D7B\x03\x02\x02\x02\u0D7C\u0D7D\x03\x02\x02" +
    "\x02\u0D7D\u0D83\x03\x02\x02\x02\u0D7E\u0D80\x05\u0182\xC2\x02\u0D7F\u0D81" +
    "\x05\u0180\xC1\x02\u0D80\u0D7F\x03\x02\x02\x02\u0D80\u0D81\x03\x02\x02" +
    "\x02\u0D81\u0D83\x03\x02\x02\x02\u0D82\u0D7A\x03\x02\x02\x02\u0D82\u0D7E" +
    "\x03\x02\x02\x02\u0D83\u017F\x03\x02\x02\x02\u0D84\u0D85\x05\u0184\xC3" +
    "\x02\u0D85\u0D86\x07\u0245\x02\x02\u0D86\u0D87\x07\u02DC\x02\x02\u0D87" +
    "\u0181\x03\x02\x02\x02\u0D88\u0D89\x05\u0184\xC3\x02\u0D89\u0D8A\x07\u0245" +
    "\x02\x02\u0D8A\u0D8B\x07\x84\x02\x02\u0D8B\u0183\x03\x02\x02\x02\u0D8C" +
    "\u0D91\x07\x84\x02\x02\u0D8D\u0D91\x07\u0242\x02\x02\u0D8E\u0D8F\x07\u01E0" +
    "\x02\x02\u0D8F\u0D91\x05\u047A\u023E\x02\u0D90\u0D8C\x03\x02\x02\x02\u0D90" +
    "\u0D8D\x03\x02\x02\x02\u0D90\u0D8E\x03\x02\x02\x02\u0D91\u0185\x03\x02" +
    "\x02\x02\u0D92\u0D93\t&\x02\x02\u0D93\u0187\x03\x02\x02\x02\u0D94\u0D98" +
    "\x07\u01B1\x02\x02\u0D95\u0D96\x06\xC5<\x02\u0D96\u0D98\x07\u0181\x02" +
    "\x02\u0D97\u0D94\x03\x02\x02\x02\u0D97\u0D95\x03\x02\x02\x02\u0D97\u0D98" +
    "\x03\x02\x02\x02\u0D98\u0D99\x03\x02\x02\x02\u0D99\u0D9A\x05\u0460\u0231" +
    "\x02\u0D9A\u0189\x03\x02\x02\x02\u0D9B\u0DA0\x05\u018C\xC7\x02\u0D9C\u0D9D" +
    "\x07\u0198\x02\x02\u0D9D\u0D9F\x05\u018C\xC7\x02\u0D9E\u0D9C\x03\x02\x02" +
    "\x02\u0D9F\u0DA2\x03\x02\x02\x02\u0DA0\u0D9E\x03\x02\x02\x02\u0DA0\u0DA1" +
    "\x03\x02\x02\x02\u0DA1\u018B\x03\x02\x02\x02\u0DA2\u0DA0\x03\x02\x02\x02" +
    "\u0DA3\u0DA4\x05\u018E\xC8\x02\u0DA4\u0DA6\x05\u0190\xC9\x02\u0DA5\u0DA7" +
    "\x05\u0194\xCB\x02\u0DA6\u0DA5\x03\x02\x02\x02\u0DA6\u0DA7\x03\x02\x02" +
    "\x02\u0DA7\u0DA8\x03\x02\x02\x02\u0DA8\u0DA9\x07\u019B\x02\x02\u0DA9\u0DAA" +
    "\x05\u0196\xCC\x02\u0DAA\u0DAB\x07\u019C\x02\x02\u0DAB\u0DB8\x03\x02\x02" +
    "\x02\u0DAC\u0DAD\x07\u029B\x02\x02\u0DAD\u0DAF\x05\u0190\xC9\x02\u0DAE" +
    "\u0DB0\x05\u0194\xCB\x02\u0DAF\u0DAE\x03\x02\x02\x02\u0DAF\u0DB0\x03\x02" +
    "\x02\x02\u0DB0\u0DB1\x03\x02\x02\x02\u0DB1\u0DB3\x07\u019B\x02\x02\u0DB2" +
    "\u0DB4\x05\u0196\xCC\x02\u0DB3\u0DB2\x03\x02\x02\x02\u0DB3\u0DB4\x03\x02" +
    "\x02\x02\u0DB4\u0DB5\x03\x02\x02\x02\u0DB5\u0DB6\x07\u019C\x02\x02\u0DB6" +
    "\u0DB8\x03\x02\x02\x02\u0DB7\u0DA3\x03\x02\x02\x02\u0DB7\u0DAC\x03\x02" +
    "\x02\x02\u0DB8\u018D\x03\x02\x02\x02\u0DB9\u0DBA\t\'\x02\x02\u0DBA\u018F" +
    "\x03\x02\x02\x02\u0DBB\u0DBC\t(\x02\x02\u0DBC\u0191\x03\x02\x02\x02\u0DBD" +
    "\u0DBE\x07\u0253\x02\x02\u0DBE\u0DC4\x07\u021B\x02\x02\u0DBF\u0DC1\x07" +
    "\u0296\x02\x02\u0DC0\u0DC2\x05\u0190\xC9\x02\u0DC1\u0DC0\x03\x02\x02\x02" +
    "\u0DC1\u0DC2\x03\x02\x02\x02\u0DC2\u0DC4\x03\x02\x02\x02\u0DC3\u0DBD\x03" +
    "\x02\x02\x02\u0DC3\u0DBF\x03\x02\x02\x02\u0DC4\u0193\x03\x02\x02\x02\u0DC5" +
    "\u0DCB\x07\u01FC\x02\x02\u0DC6\u0DCC\x07\u0219\x02\x02\u0DC7\u0DC8\x07" +
    "\u024C\x02\x02\u0DC8\u0DCC\x07\u01BE\x02\x02\u0DC9\u0DCA\x07\u0202\x02" +
    "\x02\u0DCA\u0DCC\x07\u01BE\x02\x02\u0DCB\u0DC6\x03\x02\x02\x02\u0DCB\u0DC7" +
    "\x03\x02\x02\x02\u0DCB\u0DC9\x03\x02\x02\x02\u0DCC\u0195\x03\x02\x02\x02" +
    "\u0DCD\u0DD2\x05\u0198\xCD\x02\u0DCE\u0DCF\x07\u0198\x02\x02\u0DCF\u0DD1" +
    "\x05\u0198\xCD\x02\u0DD0\u0DCE\x03\x02\x02\x02\u0DD1\u0DD4\x03\x02\x02" +
    "\x02\u0DD2\u0DD0\x03\x02\x02\x02\u0DD2\u0DD3\x03\x02\x02\x02\u0DD3\u0197" +
    "\x03\x02\x02\x02\u0DD4\u0DD2\x03\x02\x02\x02\u0DD5\u0DD8\x05\u0460\u0231" +
    "\x02\u0DD6\u0DD8\x07\u0253\x02\x02\u0DD7\u0DD5\x03\x02\x02\x02\u0DD7\u0DD6" +
    "\x03\x02\x02\x02\u0DD8\u0199\x03\x02\x02\x02\u0DD9\u0DDA\x06\xCE=\x02" +
    "\u0DDA\u0DDC\x05\u0142\xA2\x02\u0DDB\u0DD9\x03\x02\x02\x02\u0DDB\u0DDC" +
    "\x03\x02\x02\x02\u0DDC\u0DDD\x03\x02\x02\x02\u0DDD\u0DDF\x07\u0299\x02" +
    "\x02\u0DDE\u0DE0\x07\u022C\x02\x02\u0DDF\u0DDE\x03\x02\x02\x02\u0DDF\u0DE0" +
    "\x03\x02\x02\x02\u0DE0\u0DE2\x03\x02\x02\x02\u0DE1\u0DE3\x07\u020A\x02" +
    "\x02\u0DE2\u0DE1\x03\x02\x02\x02\u0DE2\u0DE3\x03\x02\x02\x02\u0DE3\u0DE4" +
    "\x03\x02\x02\x02\u0DE4\u0DE5\x05\u0150\xA9\x02\u0DE5\u0DE6\x07\u026D\x02" +
    "\x02\u0DE6\u0DE8\x05\u03DA\u01EE\x02\u0DE7\u0DE9\x05\u0160\xB1\x02\u0DE8" +
    "\u0DE7\x03\x02\x02\x02\u0DE8\u0DE9\x03\x02\x02\x02\u0DE9\u0DEB\x03\x02" +
    "\x02\x02\u0DEA\u0DEC\x05\u014A\xA6\x02\u0DEB\u0DEA\x03\x02\x02\x02\u0DEB" +
    "\u0DEC\x03\x02\x02\x02\u0DEC\u0DEE\x03\x02\x02\x02\u0DED\u0DEF\x05\u0120" +
    "\x91\x02\u0DEE\u0DED\x03\x02\x02\x02\u0DEE\u0DEF\x03\x02\x02\x02\u0DEF" +
    "\u019B\x03\x02\x02\x02\u0DF0\u0DF5\x05\u019E\xD0\x02\u0DF1\u0DF5\x05\u01A4" +
    "\xD3\x02\u0DF2\u0DF5\x05\u01A6\xD4\x02\u0DF3\u0DF5\x05\u01AC\xD7\x02\u0DF4" +
    "\u0DF0\x03\x02\x02\x02\u0DF4\u0DF1\x03\x02\x02\x02\u0DF4\u0DF2\x03\x02" +
    "\x02\x02\u0DF4\u0DF3\x03\x02\x02\x02\u0DF5\u019D\x03\x02\x02\x02\u0DF6" +
    "\u0DF7\x072\x02\x02\u0DF7\u0DFB\x07\u015D\x02\x02\u0DF8\u0DFA\x05\u01A2" +
    "\xD2\x02\u0DF9\u0DF8\x03\x02\x02\x02\u0DFA\u0DFD\x03\x02\x02\x02\u0DFB" +
    "\u0DF9\x03\x02\x02\x02\u0DFB\u0DFC\x03\x02\x02\x02\u0DFC\u0E10\x03\x02" +
    "\x02\x02\u0DFD\u0DFB\x03\x02\x02\x02\u0DFE\u0E00\x07\x0E\x02\x02\u0DFF" +
    "\u0E01\x07\u0176\x02\x02\u0E00\u0DFF\x03\x02\x02\x02\u0E00\u0E01\x03\x02" +
    "\x02\x02\u0E01\u0E07\x03\x02\x02\x02\u0E02\u0E04\x07\u01B0\x02\x02\u0E03" +
    "\u0E05\x07\x1D\x02\x02\u0E04\u0E03\x03\x02\x02\x02\u0E04\u0E05\x03\x02" +
    "\x02\x02\u0E05\u0E06\x03\x02\x02\x02\u0E06\u0E08\x07Q\x02\x02\u0E07\u0E02" +
    "\x03\x02\x02\x02\u0E07\u0E08\x03\x02\x02\x02\u0E08\u0E0D\x03\x02\x02\x02" +
    "\u0E09\u0E0B\x07\x1D\x02\x02\u0E0A\u0E09\x03\x02\x02\x02\u0E0A\u0E0B\x03" +
    "\x02\x02\x02\u0E0B\u0E0C\x03\x02\x02\x02\u0E0C\u0E0E\x07\u025D\x02\x02" +
    "\u0E0D\u0E0A\x03\x02\x02\x02\u0E0D\u0E0E\x03\x02\x02\x02\u0E0E\u0E10\x03" +
    "\x02\x02\x02\u0E0F\u0DF6\x03\x02\x02\x02\u0E0F\u0DFE\x03\x02\x02\x02\u0E10" +
    "\u019F\x03\x02\x02\x02\u0E11\u0E13\x07\x07\x02\x02\u0E12\u0E14\x07\u0176" +
    "\x02\x02\u0E13\u0E12\x03\x02\x02\x02\u0E13\u0E14\x03\x02\x02\x02\u0E14" +
    "\u01A1\x03\x02\x02\x02\u0E15\u0E16\x07\u02AC\x02\x02\u0E16\u0E17\x07e" +
    "\x02\x02\u0E17\u0E1C\x07\u013A\x02\x02\u0E18\u0E19\x06\xD2>\x02\u0E19" +
    "\u0E1A\x07\u0258\x02\x02\u0E1A\u0E1C\t)\x02\x02\u0E1B\u0E15\x03\x02\x02" +
    "\x02\u0E1B\u0E18\x03\x02\x02\x02\u0E1C\u01A3\x03\x02\x02\x02\u0E1D\u0E1E" +
    "\x07+\x02\x02\u0E1E\u0E3B\x05\u0460\u0231\x02\u0E1F\u0E21\x07*\x02\x02" +
    "\u0E20\u0E22\x07\u0176\x02\x02\u0E21\u0E20\x03\x02\x02\x02\u0E21\u0E22" +
    "\x03\x02\x02\x02\u0E22\u0E35\x03\x02\x02\x02\u0E23\u0E25\x07\u028F\x02" +
    "\x02\u0E24\u0E26\x07+\x02\x02\u0E25\u0E24\x03\x02\x02\x02\u0E25\u0E26" +
    "\x03\x02\x02\x02\u0E26\u0E27\x03\x02\x02\x02\u0E27\u0E36\x05\u0460\u0231" +
    "\x02\u0E28\u0E2A\x07\u01B0\x02\x02\u0E29\u0E2B\x07\x1D\x02\x02\u0E2A\u0E29" +
    "\x03\x02\x02\x02\u0E2A\u0E2B\x03\x02\x02\x02\u0E2B\u0E2C\x03\x02\x02\x02" +
    "\u0E2C\u0E2E\x07Q\x02\x02\u0E2D\u0E28\x03\x02\x02\x02\u0E2D\u0E2E\x03" +
    "\x02\x02\x02\u0E2E\u0E33\x03\x02\x02\x02\u0E2F\u0E31\x07\x1D\x02\x02\u0E30" +
    "\u0E2F\x03\x02\x02\x02\u0E30\u0E31\x03\x02\x02\x02\u0E31\u0E32\x03\x02" +
    "\x02\x02\u0E32\u0E34\x07\u025D\x02\x02\u0E33\u0E30\x03\x02\x02\x02\u0E33" +
    "\u0E34\x03\x02\x02\x02\u0E34\u0E36\x03\x02\x02\x02\u0E35\u0E23\x03\x02" +
    "\x02\x02\u0E35\u0E2D\x03\x02\x02\x02\u0E36\u0E3B\x03\x02\x02\x02\u0E37" +
    "\u0E38\x07\u025D\x02\x02\u0E38\u0E39\x07+\x02\x02\u0E39\u0E3B\x05\u0460" +
    "\u0231\x02\u0E3A\u0E1D\x03\x02\x02\x02\u0E3A\u0E1F\x03\x02\x02\x02\u0E3A" +
    "\u0E37\x03\x02\x02\x02\u0E3B\u01A5\x03\x02\x02\x02\u0E3C\u0E3D\x07\u0226" +
    "\x02\x02\u0E3D\u0E3E\t\x14\x02\x02\u0E3E\u0E43\x05\u01A8\xD5\x02\u0E3F" +
    "\u0E40\x07\u0198\x02\x02\u0E40\u0E42\x05\u01A8\xD5\x02\u0E41\u0E3F\x03" +
    "\x02\x02\x02\u0E42\u0E45\x03\x02\x02\x02\u0E43\u0E41\x03\x02\x02\x02\u0E43" +
    "\u0E44\x03\x02\x02\x02\u0E44\u0E53\x03\x02\x02\x02\u0E45\u0E43\x03\x02" +
    "\x02\x02\u0E46\u0E47\x06\xD4?\x02\u0E47\u0E48\x07\u0226\x02\x02\u0E48" +
    "\u0E49\x07\xA7\x02\x02\u0E49\u0E4A\x07\u01FC\x02\x02\u0E4A\u0E53\x07\x06" +
    "\x02\x02\u0E4B\u0E50\x07\u0297\x02\x02\u0E4C\u0E51\x07\u0156\x02\x02\u0E4D" +
    "\u0E51\x07\u0289\x02\x02\u0E4E\u0E4F\x06\xD4@\x02\u0E4F\u0E51\x07\xA7" +
    "\x02\x02\u0E50\u0E4C\x03\x02\x02\x02\u0E50\u0E4D\x03\x02\x02\x02\u0E50" +
    "\u0E4E\x03\x02\x02\x02\u0E51\u0E53\x03\x02\x02\x02\u0E52\u0E3C\x03\x02" +
    "\x02\x02\u0E52\u0E46\x03\x02\x02\x02\u0E52\u0E4B\x03\x02\x02\x02\u0E53" +
    "\u01A7\x03\x02\x02\x02\u0E54\u0E56\x05\u0446\u0224\x02\u0E55\u0E57\x05" +
    "\u0188\xC5\x02\u0E56\u0E55\x03\x02\x02\x02\u0E56\u0E57\x03\x02\x02\x02" +
    "\u0E57\u0E58\x03\x02\x02\x02\u0E58\u0E59\x05\u01AA\xD6\x02\u0E59\u01A9" +
    "\x03\x02\x02\x02\u0E5A\u0E5C\x07\u0258\x02\x02\u0E5B\u0E5D\x07\xB6\x02" +
    "\x02\u0E5C\u0E5B\x03\x02\x02\x02\u0E5C\u0E5D\x03\x02\x02\x02\u0E5D\u0E63" +
    "\x03\x02\x02\x02\u0E5E\u0E60\x07\u022C\x02\x02\u0E5F\u0E5E\x03\x02\x02" +
    "\x02\u0E5F\u0E60\x03\x02\x02\x02\u0E60\u0E61\x03\x02\x02\x02\u0E61\u0E63" +
    "\x07\u02AE\x02\x02\u0E62\u0E5A\x03\x02\x02\x02\u0E62\u0E5F\x03\x02\x02" +
    "\x02\u0E63\u01AB\x03\x02\x02\x02\u0E64\u0E7F\x079\x02\x02\u0E65\u0E66" +
    "\t*\x02\x02\u0E66\u0E68\x05\u01B0\xD9\x02\u0E67\u0E69\t+\x02\x02\u0E68" +
    "\u0E67\x03\x02\x02\x02\u0E68\u0E69\x03\x02\x02\x02\u0E69\u0E80\x03\x02" +
    "\x02\x02\u0E6A\u0E6B\x07\x12\x02\x02\u0E6B\u0E71\x05\u01B0\xD9\x02\u0E6C" +
    "\u0E6F\x07\u0152\x02\x02\u0E6D\u0E6E\x07\u01FC\x02\x02\u0E6E\u0E70\x07" +
    "\xDC\x02\x02\u0E6F\u0E6D\x03\x02\x02\x02\u0E6F\u0E70\x03\x02\x02\x02\u0E70" +
    "\u0E72\x03\x02\x02\x02\u0E71\u0E6C\x03\x02\x02\x02\u0E71\u0E72\x03\x02" +
    "\x02\x02\u0E72\u0E80\x03\x02\x02\x02\u0E73\u0E74\x07%\x02\x02\u0E74\u0E80" +
    "\x05\u01B0\xD9\x02\u0E75\u0E76\x07\x0E\x02\x02\u0E76\u0E79\x05\u01B0\xD9" +
    "\x02\u0E77\u0E78\x07\xF7\x02\x02\u0E78\u0E7A\x07\xFE\x02\x02\u0E79\u0E77" +
    "\x03\x02\x02\x02\u0E79\u0E7A\x03\x02\x02\x02\u0E7A\u0E80\x03\x02\x02\x02" +
    "\u0E7B\u0E7C\x07*\x02\x02\u0E7C\u0E80\x05\u01B0\xD9\x02\u0E7D\u0E7E\x07" +
    "\u0111\x02\x02\u0E7E\u0E80\x05\u01AE\xD8\x02\u0E7F\u0E65\x03\x02\x02\x02" +
    "\u0E7F\u0E6A\x03\x02\x02\x02\u0E7F\u0E73\x03\x02\x02\x02\u0E7F\u0E75\x03" +
    "\x02\x02\x02\u0E7F\u0E7B\x03\x02\x02\x02\u0E7F\u0E7D\x03\x02\x02\x02\u0E80" +
    "\u01AD\x03\x02\x02\x02\u0E81\u0E84\x06\xD8A\x02\u0E82\u0E83\x07\u01CB" +
    "\x02\x02\u0E83\u0E85\x07\u0179\x02\x02\u0E84\u0E82\x03\x02\x02\x02\u0E84" +
    "\u0E85\x03\x02\x02\x02\u0E85\u0E88\x03\x02\x02\x02\u0E86\u0E88\x03\x02" +
    "\x02\x02\u0E87\u0E81\x03\x02\x02\x02\u0E87\u0E86\x03\x02\x02\x02\u0E88" +
    "\u01AF\x03\x02\x02\x02\u0E89\u0E90\x05\u047C\u023F\x02\u0E8A\u0E8B\x07" +
    "\u0198\x02\x02\u0E8B\u0E8E\x05\u047C\u023F\x02\u0E8C\u0E8D\x07\u0198\x02" +
    "\x02\u0E8D\u0E8F\x05\u046C\u0237\x02\u0E8E\u0E8C\x03\x02\x02\x02\u0E8E" +
    "\u0E8F\x03\x02\x02\x02\u0E8F\u0E91\x03\x02\x02\x02\u0E90\u0E8A\x03\x02" +
    "\x02\x02\u0E90\u0E91\x03\x02\x02\x02\u0E91\u01B1\x03\x02\x02\x02\u0E92" +
    "\u0E93\x07\u0255\x02\x02\u0E93\u0E94\t,\x02\x02\u0E94\u0E99\x07\xB9\x02" +
    "\x02\u0E95\u0E96\x07\u028F\x02\x02\u0E96\u0E9A\x05\u0480\u0241\x02\u0E97" +
    "\u0E98\x07\u01B4\x02\x02\u0E98\u0E9A\x05\u029C\u014F\x02\u0E99\u0E95\x03" +
    "\x02\x02\x02\u0E99\u0E97\x03\x02\x02\x02\u0E9A\u0EB4\x03\x02\x02\x02\u0E9B" +
    "\u0EB4\x05\u01BA\xDE\x02\u0E9C\u0E9D\x07(\x02\x02\u0E9D\u0EA2\x05\u01B4" +
    "\xDB\x02\u0E9E\u0E9F\x07\u0198\x02\x02\u0E9F\u0EA1\x05\u01B4\xDB\x02\u0EA0" +
    "\u0E9E\x03\x02\x02\x02\u0EA1\u0EA4\x03\x02\x02\x02\u0EA2\u0EA0\x03\x02" +
    "\x02\x02\u0EA2\u0EA3\x03\x02\x02\x02\u0EA3\u0EB4\x03\x02\x02\x02\u0EA4" +
    "\u0EA2\x03\x02\x02\x02\u0EA5\u0EA6\x06\xDAB\x02\u0EA6\u0EA7\x07(\x02\x02" +
    "\u0EA7\u0EAB\x07\u02B2\x02\x02\u0EA8\u0EA9\x05\u03CA\u01E6\x02\u0EA9\u0EAA" +
    "\x05\u0460\u0231\x02\u0EAA\u0EAC\x03\x02\x02\x02\u0EAB\u0EA8\x03\x02\x02" +
    "\x02\u0EAB\u0EAC\x03\x02\x02\x02\u0EAC\u0EB4\x03\x02\x02\x02\u0EAD\u0EB4" +
    "\x05\u01D6\xEC\x02\u0EAE\u0EAF\x06\xDAC\x02\u0EAF\u0EB4\x05\u01C8\xE5" +
    "\x02\u0EB0\u0EB4\x05\u01B8\xDD\x02\u0EB1\u0EB2\x06\xDAD\x02\u0EB2\u0EB4" +
    "\x05\u01E0\xF1\x02\u0EB3\u0E92\x03\x02\x02\x02\u0EB3\u0E9B\x03\x02\x02" +
    "\x02\u0EB3\u0E9C\x03\x02\x02\x02\u0EB3\u0EA5\x03\x02\x02\x02\u0EB3\u0EAD" +
    "\x03\x02\x02\x02\u0EB3\u0EAE\x03\x02\x02\x02\u0EB3\u0EB0\x03\x02\x02\x02" +
    "\u0EB3\u0EB1\x03\x02\x02\x02\u0EB4\u01B3\x03\x02\x02\x02\u0EB5\u0EB7\x07" +
    "\xBB\x02\x02\u0EB6\u0EB8\x05\u01B6\xDC\x02\u0EB7\u0EB6\x03\x02\x02\x02" +
    "\u0EB7\u0EB8\x03\x02\x02\x02\u0EB8\u0EC4\x03\x02\x02\x02\u0EB9\u0EBA\x06" +
    "\xDBE\x02\u0EBA\u0EBB\x07\u010D\x02\x02\u0EBB\u0EC4\x07\t\x02\x02\u0EBC" +
    "\u0EBE\x07/\x02\x02\u0EBD\u0EBF\x07\u01AD\x02\x02\u0EBE\u0EBD\x03\x02" +
    "\x02\x02\u0EBE\u0EBF\x03\x02\x02\x02\u0EBF\u0EC1\x03\x02\x02\x02\u0EC0" +
    "\u0EC2\x05\u0306\u0184\x02\u0EC1\u0EC0\x03\x02\x02\x02\u0EC1\u0EC2\x03" +
    "\x02\x02\x02\u0EC2\u0EC4\x03\x02\x02\x02\u0EC3\u0EB5\x03\x02\x02\x02\u0EC3" +
    "\u0EB9\x03\x02\x02\x02\u0EC3\u0EBC\x03\x02\x02\x02\u0EC4\u01B5\x03\x02" +
    "\x02\x02\u0EC5\u0EC6\x06\xDCF\x02\u0EC6\u0ECB\x07\u028F\x02\x02\u0EC7" +
    "\u0EC8\x06\xDCG\x02\u0EC8\u0ECC\x05\u046E\u0238\x02\u0EC9\u0ECA\x06\xDC" +
    "H\x02\u0ECA\u0ECC\x05\u0472\u023A\x02\u0ECB\u0EC7\x03\x02\x02\x02\u0ECB" +
    "\u0EC9\x03\x02\x02\x02\u0ECC\u01B7\x03\x02\x02\x02\u0ECD\u0ED1\x07\u0224" +
    "\x02\x02\u0ECE\u0ED2\x07o\x02\x02\u0ECF\u0ED0\x07\u0289\x02\x02\u0ED0" +
    "\u0ED2\x05\u0446\u0224\x02\u0ED1\u0ECE\x03\x02\x02\x02\u0ED1\u0ECF\x03" +
    "\x02\x02\x02\u0ED2\u0ED3\x03\x02\x02\x02\u0ED3\u0ED4\x07\u01FD\x02\x02" +
    "\u0ED4\u0ED5\x07\xBB\x02\x02\u0ED5\u01B9\x03\x02\x02\x02\u0ED6\u0ED7\x07" +
    "\u01C3\x02\x02\u0ED7\u0ED8\x07\xBB\x02\x02\u0ED8\u0ED9\x07\u028F\x02\x02" +
    "\u0ED9\u0EDB\x05\u01BC\xDF\x02\u0EDA\u0EDC\x05\u0306\u0184\x02\u0EDB\u0EDA" +
    "\x03\x02\x02\x02\u0EDB\u0EDC\x03\x02\x02\x02\u0EDC\u01BB\x03\x02\x02\x02" +
    "\u0EDD\u0EE2\x05\u01BE\xE0\x02\u0EDE\u0EDF\x07\u0198\x02\x02\u0EDF\u0EE1" +
    "\x05\u01BE\xE0\x02\u0EE0\u0EDE\x03\x02\x02\x02\u0EE1\u0EE4\x03\x02\x02" +
    "\x02\u0EE2\u0EE0\x03\x02\x02\x02\u0EE2\u0EE3\x03\x02\x02\x02\u0EE3\u01BD" +
    "\x03\x02\x02\x02\u0EE4\u0EE2\x03\x02\x02\x02\u0EE5\u0EE6\x07\xBD\x02\x02" +
    "\u0EE6\u0EE7\x07\u0181\x02\x02\u0EE7\u0F3B\x05\u0482\u0242\x02\u0EE8\u0EE9" +
    "\x07\u02F9\x02\x02\u0EE9\u0EEA\x07\u0181\x02\x02\u0EEA\u0F3B\x05\u0482" +
    "\u0242\x02\u0EEB\u0EEC\x07\u022D\x02\x02\u0EEC\u0EED\x07\u0181\x02\x02" +
    "\u0EED\u0F3B\x05\u0482\u0242\x02\u0EEE\u0EEF\x07\xC1\x02\x02\u0EEF\u0EF0" +
    "\x07\u0181\x02\x02\u0EF0\u0F3B\x05\u0482\u0242\x02\u0EF1\u0EF2\x07\xC2" +
    "\x02\x02\u0EF2\u0EF3\x07\u0181\x02\x02\u0EF3\u0F3B\x05\u0482\u0242\x02" +
    "\u0EF4\u0EF5\x07\xBE\x02\x02\u0EF5\u0EF6\x07\u0181\x02\x02\u0EF6\u0F3B" +
    "\x05\u046C\u0237\x02\u0EF7\u0EF8\x07\xC4\x02\x02\u0EF8\u0EF9\x07\u0181" +
    "\x02\x02\u0EF9\u0F3B\x05\u046C\u0237\x02\u0EFA\u0EFB\x07\xC5\x02\x02\u0EFB" +
    "\u0EFC\x07\u0181\x02\x02\u0EFC\u0F3B\x05\u046C\u0237\x02\u0EFD\u0EFE\x07" +
    "\xC6\x02\x02\u0EFE\u0EFF\x07\u0181\x02\x02\u0EFF\u0F3B\x05\u046C\u0237" +
    "\x02\u0F00\u0F01\x07\xC7\x02\x02\u0F01\u0F02\x07\u0181\x02\x02\u0F02\u0F3B" +
    "\x05\u046C\u0237\x02\u0F03\u0F04\x07\xC8\x02\x02\u0F04\u0F05\x07\u0181" +
    "\x02\x02\u0F05\u0F3B\x05\u0482\u0242\x02\u0F06\u0F07\x07\xC9\x02\x02\u0F07" +
    "\u0F08\x07\u0181\x02\x02\u0F08\u0F3B\x05\u0482\u0242\x02\u0F09\u0F0A\x07" +
    "\xCA\x02\x02\u0F0A\u0F0B\x07\u0181\x02\x02\u0F0B\u0F3B\x05\u0482\u0242" +
    "\x02\u0F0C\u0F0D\x07\xCB\x02\x02\u0F0D\u0F0E\x07\u0181\x02\x02\u0F0E\u0F3B" +
    "\x05\u0482\u0242\x02\u0F0F\u0F10\x07\u0302\x02\x02\u0F10\u0F11\x07\u0181" +
    "\x02\x02\u0F11\u0F3B\x05\u01C2\xE2\x02\u0F12\u0F13\x07\xCC\x02\x02\u0F13" +
    "\u0F14\x07\u0181\x02\x02\u0F14\u0F3B\x05\u0482\u0242\x02\u0F15\u0F16\x07" +
    "\xCF\x02\x02\u0F16\u0F17\x07\u0181\x02\x02\u0F17\u0F3B\x05\u0482\u0242" +
    "\x02\u0F18\u0F19\x07\u022E\x02\x02\u0F19\u0F1A\x07\u0181\x02\x02\u0F1A" +
    "\u0F3B\x05\u046C\u0237\x02\u0F1B\u0F1C\x07\xCD\x02\x02\u0F1C\u0F1D\x07" +
    "\u0181\x02\x02\u0F1D\u0F3B\x05\u0480\u0241\x02\u0F1E\u0F1F\x07\xCE\x02" +
    "\x02\u0F1F\u0F20\x07\u0181\x02\x02\u0F20\u0F3B\x05\u0482\u0242\x02\u0F21" +
    "\u0F22\x07\u02E8\x02\x02\u0F22\u0F23\x07\u0181\x02\x02\u0F23\u0F3B\x05" +
    "\u0482\u0242\x02\u0F24\u0F25\x07\u02E9\x02\x02\u0F25\u0F26\x07\u0181\x02" +
    "\x02\u0F26\u0F3B\x05\u046C\u0237\x02\u0F27\u0F28\x07\xBC\x02\x02\u0F28" +
    "\u0F29\x07\u0181\x02\x02\u0F29\u0F3B\x05\u046C\u0237\x02\u0F2A\u0F2B\x07" +
    "\xA2\x02\x02\u0F2B\u0F2C\x07\u0181\x02\x02\u0F2C\u0F3B\x05\u01C6\xE4\x02" +
    "\u0F2D\u0F2E\x07\u02FF\x02\x02\u0F2E\u0F2F\x07\u0181\x02\x02\u0F2F\u0F3B" +
    "\x05\u047A\u023E\x02\u0F30\u0F31\x07\u0300\x02\x02\u0F31\u0F32\x07\u0181" +
    "\x02\x02\u0F32\u0F3B\x05\u046C\u0237\x02\u0F33\u0F34\x07\xD0\x02\x02\u0F34" +
    "\u0F35\x07\u0181\x02\x02\u0F35\u0F3B\x05\u046C\u0237\x02\u0F36\u0F37\x07" +
    "\u0301\x02\x02\u0F37\u0F38\x07\u0181\x02\x02\u0F38\u0F3B\x05\u01C0\xE1" +
    "\x02\u0F39\u0F3B\x05\u01C4\xE3\x02\u0F3A\u0EE5\x03\x02\x02\x02\u0F3A\u0EE8" +
    "\x03\x02\x02\x02\u0F3A\u0EEB\x03\x02\x02\x02\u0F3A\u0EEE\x03\x02\x02\x02" +
    "\u0F3A\u0EF1\x03\x02\x02\x02\u0F3A\u0EF4\x03\x02\x02\x02\u0F3A\u0EF7\x03" +
    "\x02\x02\x02\u0F3A\u0EFA\x03\x02\x02\x02\u0F3A\u0EFD\x03\x02\x02\x02\u0F3A" +
    "\u0F00\x03\x02\x02\x02\u0F3A\u0F03\x03\x02\x02\x02\u0F3A\u0F06\x03\x02" +
    "\x02\x02\u0F3A\u0F09\x03\x02\x02\x02\u0F3A\u0F0C\x03\x02\x02\x02\u0F3A" +
    "\u0F0F\x03\x02\x02\x02\u0F3A\u0F12\x03\x02\x02\x02\u0F3A\u0F15\x03\x02" +
    "\x02\x02\u0F3A\u0F18\x03\x02\x02\x02\u0F3A\u0F1B\x03\x02\x02\x02\u0F3A" +
    "\u0F1E\x03\x02\x02\x02\u0F3A\u0F21\x03\x02\x02\x02\u0F3A\u0F24\x03\x02" +
    "\x02\x02\u0F3A\u0F27\x03\x02\x02\x02\u0F3A\u0F2A\x03\x02\x02\x02\u0F3A" +
    "\u0F2D\x03\x02\x02\x02\u0F3A\u0F30\x03\x02\x02\x02\u0F3A\u0F33\x03\x02" +
    "\x02\x02\u0F3A\u0F36\x03\x02\x02\x02\u0F3A\u0F39\x03\x02\x02\x02\u0F3B" +
    "\u01BF\x03\x02\x02\x02\u0F3C\u0F3F\x05\u03F8\u01FD\x02\u0F3D\u0F3F\x07" +
    "\u0242\x02\x02\u0F3E\u0F3C\x03\x02\x02\x02\u0F3E\u0F3D\x03\x02\x02\x02" +
    "\u0F3F\u01C1\x03\x02\x02\x02\u0F40\u0F43\x05\u0482\u0242\x02\u0F41\u0F43" +
    "\x07\u0242\x02\x02\u0F42\u0F40\x03\x02\x02\x02\u0F42\u0F41\x03\x02\x02" +
    "\x02\u0F43\u01C3\x03\x02\x02\x02\u0F44\u0F45\x07\xBF\x02\x02\u0F45\u0F46" +
    "\x07\u0181\x02\x02\u0F46\u0F51\x05\u0482\u0242\x02\u0F47\u0F48\x07\xC0" +
    "\x02\x02\u0F48\u0F49\x07\u0181\x02\x02\u0F49\u0F51\x05\u0470\u0239\x02" +
    "\u0F4A\u0F4B\x07\u0117\x02\x02\u0F4B\u0F4C\x07\u0181\x02\x02\u0F4C\u0F51" +
    "\x05\u0482\u0242\x02\u0F4D\u0F4E\x07\u0118\x02\x02\u0F4E\u0F4F\x07\u0181" +
    "\x02\x02\u0F4F\u0F51\x05\u046C\u0237\x02\u0F50\u0F44\x03\x02\x02\x02\u0F50" +
    "\u0F47\x03\x02\x02\x02\u0F50\u0F4A\x03\x02\x02\x02\u0F50\u0F4D\x03\x02" +
    "\x02\x02\u0F51\u01C5\x03\x02\x02\x02\u0F52\u0F5B\x07\u019B\x02\x02\u0F53" +
    "\u0F58\x05\u046C\u0237\x02\u0F54\u0F55\x07\u0198\x02\x02\u0F55\u0F57\x05" +
    "\u046C\u0237\x02\u0F56\u0F54\x03\x02\x02\x02\u0F57\u0F5A\x03\x02\x02\x02" +
    "\u0F58\u0F56\x03\x02\x02\x02\u0F58\u0F59\x03\x02\x02\x02\u0F59\u0F5C\x03" +
    "\x02\x02\x02\u0F5A\u0F58\x03\x02\x02\x02\u0F5B\u0F53\x03\x02\x02\x02\u0F5B" +
    "\u0F5C\x03\x02\x02\x02\u0F5C\u0F5D\x03\x02\x02\x02\u0F5D\u0F5E\x07\u019C" +
    "\x02\x02\u0F5E\u01C7\x03\x02\x02\x02\u0F5F\u0F60\x07\u01C3\x02\x02\u0F60" +
    "\u0F61\x07\u011D\x02\x02\u0F61\u0F62\x07\x95\x02\x02\u0F62\u0F67\x05\u01CA" +
    "\xE6\x02\u0F63\u0F64\x07\u0198\x02\x02\u0F64\u0F66\x05\u01CA\xE6\x02\u0F65" +
    "\u0F63\x03\x02\x02\x02\u0F66\u0F69\x03\x02\x02\x02\u0F67\u0F65\x03\x02" +
    "\x02\x02\u0F67\u0F68\x03\x02\x02\x02\u0F68\u0F6C\x03\x02\x02\x02\u0F69" +
    "\u0F67\x03\x02\x02\x02\u0F6A\u0F6B\x06\xE5I\x02\u0F6B\u0F6D\x05\u0306" +
    "\u0184\x02\u0F6C\u0F6A\x03\x02\x02\x02\u0F6C\u0F6D\x03\x02\x02\x02\u0F6D" +
    "\u01C9\x03\x02\x02\x02\u0F6E\u0F6F\x07\u011E\x02\x02\u0F6F\u0F70\x07\u0181" +
    "\x02\x02\u0F70\u0F72\x07\u019B\x02\x02\u0F71\u0F73\x05\u01CC\xE7\x02\u0F72" +
    "\u0F71\x03\x02\x02\x02\u0F72\u0F73\x03\x02\x02\x02\u0F73\u0F74\x03\x02" +
    "\x02\x02\u0F74\u0FA0\x07\u019C\x02\x02\u0F75\u0F76\x07\u011F\x02\x02\u0F76" +
    "\u0F77\x07\u0181\x02\x02\u0F77\u0F79\x07\u019B\x02\x02\u0F78\u0F7A\x05" +
    "\u01CC\xE7\x02\u0F79\u0F78\x03\x02\x02\x02\u0F79\u0F7A\x03\x02\x02\x02" +
    "\u0F7A\u0F7B\x03\x02\x02\x02\u0F7B\u0FA0\x07\u019C\x02\x02\u0F7C\u0F7D" +
    "\x07\u0120\x02\x02\u0F7D\u0F7E\x07\u0181\x02\x02\u0F7E\u0F80\x07\u019B" +
    "\x02\x02\u0F7F\u0F81\x05\u01CE\xE8\x02\u0F80\u0F7F\x03\x02\x02\x02\u0F80" +
    "\u0F81\x03\x02\x02\x02\u0F81\u0F82\x03\x02\x02\x02\u0F82\u0FA0\x07\u019C" +
    "\x02\x02\u0F83\u0F84\x07\u0121\x02\x02\u0F84\u0F85\x07\u0181\x02\x02\u0F85" +
    "\u0F87\x07\u019B\x02\x02\u0F86\u0F88\x05\u01CE\xE8\x02\u0F87\u0F86\x03" +
    "\x02\x02\x02\u0F87\u0F88\x03\x02\x02\x02\u0F88\u0F89\x03\x02\x02\x02\u0F89" +
    "\u0FA0\x07\u019C\x02\x02\u0F8A\u0F8B\x07\u0122\x02\x02\u0F8B\u0F8C\x07" +
    "\u0181\x02\x02\u0F8C\u0F8E\x07\u019B\x02\x02\u0F8D\u0F8F\x05\u01D0\xE9" +
    "\x02\u0F8E\u0F8D\x03\x02\x02\x02\u0F8E\u0F8F\x03\x02\x02\x02\u0F8F\u0F90" +
    "\x03\x02\x02\x02\u0F90\u0FA0\x07\u019C\x02\x02\u0F91\u0F92\x07\u0123\x02" +
    "\x02\u0F92\u0F93\x07\u0181\x02\x02\u0F93\u0F95\x07\u019B\x02\x02\u0F94" +
    "\u0F96\x05\u01D0\xE9\x02\u0F95\u0F94\x03\x02\x02\x02\u0F95\u0F96\x03\x02" +
    "\x02\x02\u0F96\u0F97\x03\x02\x02\x02\u0F97\u0FA0\x07\u019C\x02\x02\u0F98" +
    "\u0F99\x07\u0124\x02\x02\u0F99\u0F9A\x07\u0181\x02\x02\u0F9A\u0F9C\x07" +
    "\u019B\x02\x02\u0F9B\u0F9D\x05\u01D4\xEB\x02\u0F9C\u0F9B\x03\x02\x02\x02" +
    "\u0F9C\u0F9D\x03\x02\x02\x02\u0F9D\u0F9E\x03\x02\x02\x02\u0F9E\u0FA0\x07" +
    "\u019C\x02\x02\u0F9F\u0F6E\x03\x02\x02\x02\u0F9F\u0F75\x03\x02\x02\x02" +
    "\u0F9F\u0F7C\x03\x02\x02\x02\u0F9F\u0F83\x03\x02\x02\x02\u0F9F\u0F8A\x03" +
    "\x02\x02\x02\u0F9F\u0F91\x03\x02\x02\x02\u0F9F\u0F98\x03\x02\x02\x02\u0FA0" +
    "\u01CB\x03\x02\x02\x02\u0FA1\u0FA6\x05\u041A\u020E\x02\u0FA2\u0FA3\x07" +
    "\u0198\x02\x02\u0FA3\u0FA5\x05\u041A\u020E\x02\u0FA4\u0FA2\x03\x02\x02" +
    "\x02\u0FA5\u0FA8\x03\x02\x02\x02\u0FA6\u0FA4\x03\x02\x02\x02\u0FA6\u0FA7" +
    "\x03\x02\x02\x02\u0FA7\u01CD\x03\x02\x02\x02\u0FA8\u0FA6\x03\x02\x02\x02" +
    "\u0FA9\u0FAE\x05\u0442\u0222\x02\u0FAA\u0FAB\x07\u0198\x02\x02\u0FAB\u0FAD" +
    "\x05\u0442\u0222\x02\u0FAC\u0FAA\x03\x02\x02\x02\u0FAD\u0FB0\x03\x02\x02" +
    "\x02\u0FAE\u0FAC\x03\x02\x02\x02\u0FAE\u0FAF\x03\x02\x02\x02\u0FAF\u01CF" +
    "\x03\x02\x02\x02\u0FB0\u0FAE\x03\x02\x02\x02\u0FB1\u0FB6\x05\u01D2\xEA" +
    "\x02\u0FB2\u0FB3\x07\u0198\x02\x02\u0FB3\u0FB5\x05\u01D2\xEA\x02\u0FB4" +
    "\u0FB2\x03\x02\x02\x02\u0FB5\u0FB8\x03\x02\x02\x02\u0FB6\u0FB4\x03\x02" +
    "\x02\x02\u0FB6\u0FB7\x03\x02\x02\x02\u0FB7\u01D1\x03\x02\x02\x02\u0FB8" +
    "\u0FB6\x03\x02\x02\x02";
MySQLParser._serializedATNSegment9 = "\u0FB9\u0FBA\x05\u0482\u0242\x02\u0FBA\u01D3\x03\x02\x02\x02\u0FBB\u0FC0" +
    "\x05\u03D6\u01EC\x02\u0FBC\u0FBD\x07\u0198\x02\x02\u0FBD\u0FBF\x05\u03D6" +
    "\u01EC\x02\u0FBE\u0FBC\x03\x02\x02\x02\u0FBF\u0FC2\x03\x02\x02\x02\u0FC0" +
    "\u0FBE\x03\x02\x02\x02\u0FC0\u0FC1\x03\x02\x02\x02\u0FC1\u01D5\x03\x02" +
    "\x02\x02\u0FC2\u0FC0\x03\x02\x02\x02\u0FC3\u0FC4\x072\x02\x02\u0FC4\u0FC6" +
    "\x07/\x02\x02\u0FC5\u0FC7\x05\u01DC\xEF\x02\u0FC6\u0FC5\x03\x02\x02\x02" +
    "\u0FC6\u0FC7\x03\x02\x02\x02\u0FC7\u0FCA\x03\x02\x02\x02\u0FC8\u0FC9\x07" +
    "\u016C\x02\x02\u0FC9\u0FCB\x05\u01D8\xED\x02\u0FCA\u0FC8\x03\x02\x02\x02" +
    "\u0FCA\u0FCB\x03\x02\x02\x02\u0FCB\u0FCC\x03\x02\x02\x02\u0FCC\u0FCE\x05" +
    "\u01DA\xEE\x02\u0FCD\u0FCF\x05\u0306\u0184\x02\u0FCE\u0FCD\x03\x02\x02" +
    "\x02\u0FCE\u0FCF\x03\x02\x02\x02\u0FCF\u0FD9\x03\x02\x02\x02\u0FD0\u0FD1" +
    "\x073\x02\x02\u0FD1\u0FD3\x07/\x02\x02\u0FD2\u0FD4\x05\u01DC\xEF\x02\u0FD3" +
    "\u0FD2\x03\x02\x02\x02\u0FD3\u0FD4\x03\x02\x02\x02\u0FD4\u0FD6\x03\x02" +
    "\x02\x02\u0FD5\u0FD7\x05\u0306\u0184\x02\u0FD6\u0FD5\x03\x02\x02\x02\u0FD6" +
    "\u0FD7\x03\x02\x02\x02\u0FD7\u0FD9\x03\x02\x02\x02\u0FD8\u0FC3\x03\x02" +
    "\x02\x02\u0FD8\u0FD0\x03\x02\x02\x02\u0FD9\u01D7\x03\x02\x02\x02\u0FDA" +
    "\u0FE2\x05\u01C4\xE3\x02\u0FDB\u0FDC\x06\xEDJ\x02\u0FDC\u0FDD\t-\x02\x02" +
    "\u0FDD\u0FDE\x07\u0181\x02\x02\u0FDE\u0FE2\x05\u047C\u023F\x02\u0FDF\u0FE0" +
    "\x06\xEDK\x02\u0FE0\u0FE2\x07\u013E\x02\x02\u0FE1\u0FDA\x03\x02\x02\x02" +
    "\u0FE1\u0FDB\x03\x02\x02\x02\u0FE1\u0FDF\x03\x02\x02\x02\u0FE2\u0FE7\x03" +
    "\x02\x02\x02\u0FE3\u0FE4\x07\u0198\x02\x02\u0FE4\u0FE6\x05\u01C4\xE3\x02" +
    "\u0FE5\u0FE3\x03\x02\x02\x02\u0FE6\u0FE9\x03\x02\x02\x02\u0FE7\u0FE5\x03" +
    "\x02\x02\x02\u0FE7\u0FE8\x03\x02\x02\x02\u0FE8\u01D9\x03\x02\x02\x02\u0FE9" +
    "\u0FE7\x03\x02\x02\x02\u0FEA\u0FEE\x06\xEEL\x02\u0FEB\u0FEC\x07\u016E" +
    "\x02\x02\u0FEC\u0FED\x07\u0181\x02\x02\u0FED\u0FEF\x05\u047C\u023F\x02" +
    "\u0FEE\u0FEB\x03\x02\x02\x02\u0FEE\u0FEF\x03\x02\x02\x02\u0FEF\u0FF3\x03" +
    "\x02\x02\x02\u0FF0\u0FF1\x07\xFD\x02\x02\u0FF1\u0FF2\x07\u0181\x02\x02" +
    "\u0FF2\u0FF4\x05\u047C\u023F\x02\u0FF3\u0FF0\x03\x02\x02\x02\u0FF3\u0FF4" +
    "\x03\x02\x02\x02\u0FF4\u0FF8\x03\x02\x02\x02\u0FF5\u0FF6\x07t\x02\x02" +
    "\u0FF6\u0FF7\x07\u0181\x02\x02\u0FF7\u0FF9\x05\u047C\u023F\x02\u0FF8\u0FF5" +
    "\x03\x02\x02\x02\u0FF8\u0FF9\x03\x02\x02\x02\u0FF9\u0FFD\x03\x02\x02\x02" +
    "\u0FFA\u0FFB\x07\xFF\x02\x02\u0FFB\u0FFC\x07\u0181\x02\x02\u0FFC\u0FFE" +
    "\x05\u047C\u023F\x02\u0FFD\u0FFA\x03\x02\x02\x02\u0FFD\u0FFE\x03\x02\x02" +
    "\x02\u0FFE\u1001\x03\x02\x02\x02\u0FFF\u1001\x03\x02\x02\x02\u1000\u0FEA" +
    "\x03\x02\x02\x02\u1000\u0FFF\x03\x02\x02\x02\u1001\u01DB\x03\x02\x02\x02" +
    "\u1002\u1007\x05\u01DE\xF0\x02\u1003\u1004\x07\u0198\x02\x02\u1004\u1006" +
    "\x05\u01DE\xF0\x02\u1005\u1003\x03\x02\x02\x02\u1006\u1009\x03\x02\x02" +
    "\x02\u1007\u1005\x03\x02\x02\x02\u1007\u1008\x03\x02\x02\x02\u1008\u01DD" +
    "\x03\x02\x02\x02\u1009\u1007\x03\x02\x02\x02\u100A\u100B\t.\x02\x02\u100B" +
    "\u01DF\x03\x02\x02\x02\u100C\u100D\t/\x02\x02\u100D\u100E\x07\x17\x02" +
    "\x02\u100E\u01E1\x03\x02\x02\x02\u100F\u1010\x07%\x02\x02\u1010\u1011" +
    "\x05\u0460\u0231\x02\u1011\u1014\x07\u01FD\x02\x02\u1012\u1015\x05\u0480" +
    "\u0241\x02\u1013\u1015\x05\u02DE\u0170\x02\u1014\u1012\x03\x02\x02\x02" +
    "\u1014\u1013\x03\x02\x02\x02\u1015\u101B\x03\x02\x02\x02\u1016\u101B\x05" +
    "\u01E4\xF3\x02\u1017\u1018\t0\x02\x02\u1018\u1019\x07%\x02\x02\u1019\u101B" +
    "\x05\u0460\u0231\x02\u101A\u100F\x03\x02\x02\x02\u101A\u1016\x03\x02\x02" +
    "\x02\u101A\u1017\x03\x02\x02\x02\u101B\u01E3\x03\x02\x02\x02\u101C\u101D" +
    "\x07\x13\x02\x02\u101D\u1020\x05\u0460\u0231\x02\u101E\u101F\x07\u029C" +
    "\x02\x02\u101F\u1021\x05\u01E6\xF4\x02\u1020\u101E\x03\x02\x02\x02\u1020" +
    "\u1021\x03\x02\x02\x02\u1021\u01E5\x03\x02\x02\x02\u1022\u1027\x05\u02DE" +
    "\u0170\x02\u1023\u1024\x07\u0198\x02\x02\u1024\u1026\x05\u02DE\u0170\x02" +
    "\u1025\u1023\x03\x02\x02\x02\u1026\u1029\x03\x02\x02\x02\u1027\u1025\x03" +
    "\x02\x02\x02\u1027\u1028\x03\x02\x02\x02\u1028\u01E7\x03\x02\x02\x02\u1029" +
    "\u1027\x03\x02\x02\x02\u102A\u1043\x07\u02C5\x02\x02\u102B\u102C\x07\xB6" +
    "\x02\x02\u102C\u102D\x07o\x02\x02\u102D\u102F\x07y\x02\x02\u102E\u1030" +
    "\x05\u049E\u0250\x02\u102F\u102E\x03\x02\x02\x02\u102F\u1030\x03\x02\x02" +
    "\x02\u1030\u1031\x03\x02\x02\x02\u1031\u1044\x05\u047A\u023E\x02\u1032" +
    "\u1035\x07\u02C4\x02\x02\u1033\u1034\x07\u01FC\x02\x02\u1034\u1036\x07" +
    "\u011D\x02\x02\u1035\u1033\x03\x02\x02\x02\u1035\u1036\x03\x02\x02\x02" +
    "\u1036\u1044\x03\x02\x02\x02\u1037\u1038\x06\xF5M\x02\u1038\u1039\x07" +
    "\xA7\x02\x02\u1039\u103A\x07\u01FD\x02\x02\u103A\u103B\x05\u03FA\u01FE" +
    "\x02\u103B\u103C\x07\u019A\x02\x02\u103C\u103D\x05\u046C\u0237\x02\u103D" +
    "\u103E\x07\xA1\x02\x02\u103E\u103F\x07\u01BE\x02\x02\u103F\u1041\x05\u047A" +
    "\u023E\x02\u1040\u1042\x05\u01EA\xF6\x02\u1041\u1040\x03\x02\x02\x02\u1041" +
    "\u1042\x03\x02\x02\x02\u1042\u1044\x03\x02\x02\x02\u1043\u102B\x03\x02" +
    "\x02\x02\u1043\u1032\x03\x02\x02\x02\u1043\u1037\x03\x02\x02\x02\u1044" +
    "\u01E9\x03\x02\x02\x02\u1045\u1050\x05\u01EC\xF7\x02\u1046\u1047\x07o" +
    "\x02\x02\u1047\u1049\x07y\x02\x02\u1048\u104A\x05\u049E\u0250\x02\u1049" +
    "\u1048\x03\x02\x02\x02\u1049\u104A\x03\x02\x02\x02\u104A\u104B\x03\x02" +
    "\x02\x02\u104B\u104D\x05\u047A\u023E\x02\u104C\u104E\x05\u01EC\xF7\x02" +
    "\u104D\u104C\x03\x02\x02\x02\u104D\u104E\x03\x02\x02\x02\u104E\u1050\x03" +
    "\x02\x02\x02\u104F\u1045\x03\x02\x02\x02\u104F\u1046\x03\x02\x02\x02\u1050" +
    "\u01EB\x03\x02\x02\x02\u1051\u1053\x07\u0261\x02\x02\u1052\u1054\x07\x1D" +
    "\x02\x02\u1053\u1052\x03\x02\x02\x02\u1053\u1054\x03\x02\x02\x02\u1054" +
    "\u1055\x03\x02\x02\x02\u1055\u1056\x07\u027B\x02\x02\u1056\u01ED\x03\x02" +
    "\x02\x02\u1057\u1058\x06\xF8N\x02\u1058\u1061\x05\u01F0\xF9\x02\u1059" +
    "\u1061\x05\u01F6\xFC\x02\u105A\u1061\x05\u0202\u0102\x02\u105B\u1061\x05" +
    "\u0204\u0103\x02\u105C\u1061\x05\u0212\u010A\x02\u105D\u1061\x05\u0214" +
    "\u010B\x02\u105E\u105F\x06\xF8O\x02\u105F\u1061\x05\u0226\u0114\x02\u1060" +
    "\u1057\x03\x02\x02\x02\u1060\u1059\x03\x02\x02\x02\u1060\u105A\x03\x02" +
    "\x02\x02\u1060\u105B\x03\x02\x02\x02\u1060\u105C\x03\x02\x02\x02\u1060" +
    "\u105D\x03\x02\x02\x02\u1060\u105E\x03\x02\x02\x02\u1061\u01EF\x03\x02" +
    "\x02\x02\u1062\u1063\x07\u01AE\x02\x02\u1063\u1066\x07\u016E\x02\x02\u1064" +
    "\u1065\x06\xF9P\x02\u1065\u1067\x05\u03CA\u01E6\x02\u1066\u1064\x03\x02" +
    "\x02\x02\u1066\u1067\x03\x02\x02\x02\u1067\u1068\x03\x02\x02\x02\u1068" +
    "\u1069\x05\u01F2\xFA\x02\u1069\u01F1\x03\x02\x02\x02\u106A\u106B\x06\xFA" +
    "Q\x02\u106B\u106F\x05\u03EA\u01F6\x02\u106C\u106D\x06\xFAR\x02\u106D\u106F" +
    "\x05\u03EC\u01F7\x02\u106E\u106A\x03\x02\x02\x02\u106E\u106C\x03\x02\x02" +
    "\x02\u106F\u1070\x03\x02\x02\x02\u1070\u1071\x05\u01F8\xFD\x02\u1071\u109A" +
    "\x03\x02\x02\x02\u1072\u1073\x06\xFAS\x02\u1073\u1074\x05\u03FA\u01FE" +
    "\x02\u1074\u1075\x07\xA1\x02\x02\u1075\u1076\x07\u01BE\x02\x02\u1076\u1079" +
    "\x05\u047C\u023F\x02\u1077\u1078\x06\xFAT\x02\u1078\u107A\x05\u03F6\u01FC" +
    "\x02\u1079\u1077\x03\x02\x02\x02\u1079\u107A\x03\x02\x02\x02\u107A\u107D" +
    "\x03\x02\x02\x02\u107B\u107C\x06\xFAU\x02\u107C\u107E\x05\u03F2\u01FA" +
    "\x02\u107D\u107B\x03\x02\x02\x02\u107D\u107E\x03\x02\x02\x02\u107E\u109A" +
    "\x03\x02\x02\x02\u107F\u1080\x06\xFAV\x02\u1080\u1081\x05\u03FA\u01FE" +
    "\x02\u1081\u1082\x05\u03F4\u01FB\x02\u1082\u109A\x03\x02\x02\x02\u1083" +
    "\u1084\x06\xFAW\x02\u1084\u1085\x05\u03FA\u01FE\x02\u1085\u1086\x07\u01E0" +
    "\x02\x02\u1086\u108A\x07\u02B3\x02\x02\u1087\u108B\x07\u01AD\x02\x02\u1088" +
    "\u108B\x07\xF1\x02\x02\u1089\u108B\x05\u0228\u0115\x02\u108A\u1087\x03" +
    "\x02\x02\x02\u108A\u1088\x03\x02\x02\x02\u108A\u1089\x03\x02\x02\x02\u108B" +
    "\u109A\x03\x02\x02\x02\u108C\u108D\x06\xFAX\x02\u108D\u108E\x05\u03FA" +
    "\u01FE\x02\u108E\u1091\x07\xA1\x02\x02\u108F\u1090\x07\u02AC\x02\x02\u1090" +
    "\u1092\x05\u0494\u024B\x02\u1091\u108F\x03\x02\x02\x02\u1091\u1092\x03" +
    "\x02\x02\x02\u1092\u1093\x03\x02\x02\x02\u1093\u1094\x07\u01BE\x02\x02" +
    "\u1094\u1095\x07\u02FE\x02\x02\u1095\u1097\x07\xFD\x02\x02\u1096\u1098" +
    "\x05\u03F2\u01FA\x02\u1097\u1096\x03\x02\x02\x02\u1097\u1098\x03\x02\x02" +
    "\x02\u1098\u109A\x03\x02\x02\x02\u1099\u106E\x03\x02\x02\x02\u1099\u1072" +
    "\x03\x02\x02\x02\u1099\u107F\x03\x02\x02\x02\u1099\u1083\x03\x02\x02\x02" +
    "\u1099\u108C\x03\x02\x02\x02\u109A\u01F3\x03\x02\x02\x02\u109B\u109C\x07" +
    "\u016E\x02\x02\u109C\u109D\x05\u049C\u024F\x02\u109D\u01F5\x03\x02\x02" +
    "\x02\u109E\u109F\x07\u01CD\x02\x02\u109F\u10A3\x07\u016E\x02\x02\u10A0" +
    "\u10A1\x06\xFCY\x02\u10A1\u10A4\x05\u03CC\u01E7\x02\u10A2\u10A4\x03\x02" +
    "\x02\x02\u10A3\u10A0\x03\x02\x02\x02\u10A3\u10A2\x03\x02\x02\x02\u10A4" +
    "\u10A5\x03\x02\x02\x02\u10A5\u10A6\x05\u03EA\u01F6\x02\u10A6\u10A7\x05" +
    "\u01FA\xFE\x02\u10A7\u10A8\x05\u01F8\xFD\x02\u10A8\u01F7\x03\x02\x02\x02" +
    "\u10A9\u10AB\x06\xFDZ\x02\u10AA\u10AC\x05\u01FC\xFF\x02\u10AB\u10AA\x03" +
    "\x02\x02\x02\u10AB\u10AC\x03\x02\x02\x02\u10AC\u10AE\x03\x02\x02\x02\u10AD" +
    "\u10AF\x05\u01FE\u0100\x02\u10AE\u10AD\x03\x02\x02\x02\u10AE\u10AF\x03" +
    "\x02\x02\x02\u10AF\u10B3\x03\x02\x02\x02\u10B0\u10B2\x05\u0200\u0101\x02" +
    "\u10B1\u10B0\x03\x02\x02\x02\u10B2\u10B5\x03\x02\x02\x02\u10B3\u10B1\x03" +
    "\x02\x02\x02\u10B3\u10B4\x03\x02\x02\x02\u10B4\u10B8\x03\x02\x02\x02\u10B5" +
    "\u10B3\x03\x02\x02\x02\u10B6\u10B8\x03\x02\x02\x02\u10B7\u10A9\x03\x02" +
    "\x02\x02\u10B7\u10B6\x03\x02\x02\x02\u10B8\u01F9\x03\x02\x02\x02\u10B9" +
    "\u10BD\x06\xFE[\x02\u10BA\u10BB\x07\u01E0\x02\x02\u10BB\u10BC\x07\u02B3" +
    "\x02\x02\u10BC\u10BE\x05\u0228\u0115\x02\u10BD\u10BA\x03\x02\x02\x02\u10BD" +
    "\u10BE\x03\x02\x02\x02\u10BE\u10C1\x03\x02\x02\x02\u10BF\u10C1\x03\x02" +
    "\x02\x02\u10C0\u10B9\x03\x02\x02\x02\u10C0\u10BF\x03\x02\x02\x02\u10C1" +
    "\u01FB\x03\x02\x02\x02\u10C2\u10C5\x07\u0261\x02\x02\u10C3\u10C6\x05\u0220" +
    "\u0111\x02\u10C4\u10C6\t1\x02\x02\u10C5\u10C3\x03\x02\x02\x02\u10C5\u10C4" +
    "\x03\x02\x02\x02\u10C6\u01FD\x03\x02\x02\x02\u10C7\u10D0\x07\u02AC\x02" +
    "\x02\u10C8\u10C9\x07\xD2\x02\x02\u10C9\u10D1\x05\u046C\u0237\x02\u10CA" +
    "\u10CB\x07\xD5\x02\x02\u10CB\u10D1\x05\u046C\u0237\x02\u10CC\u10CD\x07" +
    "\xD1\x02\x02\u10CD\u10D1\x05\u046C\u0237\x02\u10CE\u10CF\x07\xD6\x02\x02" +
    "\u10CF\u10D1\x05\u046C\u0237\x02\u10D0\u10C8\x03\x02\x02\x02\u10D0\u10CA" +
    "\x03\x02\x02\x02\u10D0\u10CC\x03\x02\x02\x02\u10D0\u10CE\x03\x02\x02\x02" +
    "\u10D1\u10D2\x03\x02\x02\x02\u10D2\u10D0\x03\x02\x02\x02\u10D2\u10D3\x03" +
    "\x02\x02\x02\u10D3\u01FF\x03\x02\x02\x02\u10D4\u10D5\x07\x03\x02\x02\u10D5" +
    "\u10F6\t2\x02\x02\u10D6\u10F3\x07\xFD\x02\x02\u10D7\u10DE\x07\u01F4\x02" +
    "\x02\u10D8\u10D9\x07\u0211\x02\x02\u10D9\u10DA\x05\u046E\u0238\x02\u10DA" +
    "\u10DB\x07s\x02\x02\u10DB\u10DF\x03\x02\x02\x02\u10DC\u10DF\x07\xEC\x02" +
    "\x02\u10DD\u10DF\x07\u01E0\x02\x02\u10DE\u10D8\x03\x02\x02\x02\u10DE\u10DC" +
    "\x03\x02\x02\x02\u10DE\u10DD\x03\x02\x02\x02\u10DE\u10DF\x03\x02\x02\x02" +
    "\u10DF\u10F4\x03\x02\x02\x02\u10E0\u10E3\x07\u02E1\x02\x02\u10E1\u10E4" +
    "\x05\u046E\u0238\x02\u10E2\u10E4\x07\u01E0\x02\x02\u10E3\u10E1\x03\x02" +
    "\x02\x02\u10E3\u10E2\x03\x02\x02\x02\u10E4\u10F4\x03\x02\x02\x02\u10E5" +
    "\u10E6\x07\u02E2\x02\x02\u10E6\u10EB\x07\u0211\x02\x02\u10E7\u10E8\x05" +
    "\u046E\u0238\x02\u10E8\u10E9\x07s\x02\x02\u10E9\u10EC\x03\x02\x02\x02" +
    "\u10EA\u10EC\x07\u01E0\x02\x02\u10EB\u10E7\x03\x02\x02\x02\u10EB\u10EA" +
    "\x03\x02\x02\x02\u10EC\u10F4\x03\x02\x02\x02\u10ED\u10EE\x06\u0101\\\x02" +
    "\u10EE\u10EF\x07\u0261\x02\x02\u10EF\u10F1\x07m\x02\x02\u10F0\u10F2\t" +
    "3\x02\x02\u10F1\u10F0\x03\x02\x02\x02\u10F1\u10F2\x03\x02\x02\x02\u10F2" +
    "\u10F4\x03\x02\x02\x02\u10F3\u10D7\x03\x02\x02\x02\u10F3\u10E0\x03\x02" +
    "\x02\x02\u10F3\u10E5\x03\x02\x02\x02\u10F3\u10ED\x03\x02\x02\x02\u10F4" +
    "\u10F6\x03\x02\x02\x02\u10F5\u10D4\x03\x02\x02\x02\u10F5\u10D6\x03\x02" +
    "\x02\x02\u10F6\u0201\x03\x02\x02\x02\u10F7\u10F8\x07\u01E9\x02\x02\u10F8" +
    "\u10FB\x07\u016E\x02\x02\u10F9\u10FA\x06\u0102]\x02\u10FA\u10FC\x05\u03CA" +
    "\u01E6\x02\u10FB\u10F9\x03\x02\x02\x02\u10FB\u10FC\x03\x02\x02\x02\u10FC" +
    "\u10FD\x03\x02\x02\x02\u10FD\u10FE\x05\u03E8\u01F5\x02\u10FE\u0203\x03" +
    "\x02\x02\x02\u10FF\u112A\x07\u0201\x02\x02\u1100\u1101\x06\u0103^\x02" +
    "\u1101\u1102\x05\u021A\u010E\x02\u1102\u1103\x07\u028F\x02\x02\u1103\u1107" +
    "\x05\u03E8\u01F5\x02\u1104\u1105\x07\u02AC\x02\x02\u1105\u1106\x07\u02B4" +
    "\x02\x02\u1106\u1108\x07\u024A\x02\x02\u1107\u1104\x03\x02\x02\x02\u1107" +
    "\u1108\x03\x02\x02\x02\u1108\u112B\x03\x02\x02\x02\u1109\u110F\x05\u021A" +
    "\u010E\x02\u110A\u110C\x07\u01AD\x02\x02\u110B\u110D\x07\u0106\x02\x02" +
    "\u110C\u110B\x03\x02\x02\x02\u110C\u110D\x03\x02\x02\x02\u110D\u110F\x03" +
    "\x02\x02\x02\u110E\u1109\x03\x02\x02\x02\u110E\u110A\x03\x02\x02\x02\u110F" +
    "\u1110\x03\x02\x02\x02\u1110\u1112\x07\u0245\x02\x02\u1111\u1113\x05\u0218" +
    "\u010D\x02\u1112\u1111\x03\x02\x02\x02\u1112\u1113\x03\x02\x02\x02\u1113" +
    "\u1114\x03\x02\x02\x02\u1114\u1115\x05\u021E\u0110\x02\u1115\u1116\x07" +
    "\u028F\x02\x02\u1116\u1118\x05\u0206\u0104\x02\u1117\u1119\x05\u0210\u0109" +
    "\x02\u1118\u1117\x03\x02\x02\x02\u1118\u1119\x03\x02\x02\x02\u1119\u111B" +
    "\x03\x02\x02\x02\u111A\u111C\x05\u0208\u0105\x02\u111B\u111A\x03\x02\x02" +
    "\x02\u111B\u111C\x03\x02\x02\x02\u111C\u111E\x03\x02\x02\x02\u111D\u111F" +
    "\x05\u020E\u0108\x02\u111E\u111D\x03\x02\x02\x02\u111E\u111F\x03\x02\x02" +
    "\x02\u111F\u112B\x03\x02\x02\x02\u1120\u1121\x07\u010B\x02\x02\u1121\u1122" +
    "\x07\u0245\x02\x02\u1122\u1123\x05\u03FA\u01FE\x02\u1123\u1124\x07\u028F" +
    "\x02\x02\u1124\u1128\x05\u0206\u0104\x02\u1125\u1126\x07\u02AC\x02\x02" +
    "\u1126\u1127\x07\u0201\x02\x02\u1127\u1129\x07\u024A\x02\x02\u1128\u1125" +
    "\x03\x02\x02\x02\u1128\u1129\x03\x02\x02\x02\u1129\u112B\x03\x02\x02\x02" +
    "\u112A\u1100\x03\x02\x02\x02\u112A\u110E\x03\x02\x02\x02\u112A\u1120\x03" +
    "\x02\x02\x02\u112B\u0205\x03\x02\x02\x02\u112C\u112D\x06\u0104_\x02\u112D" +
    "\u1131\x05\u03EA\u01F6\x02\u112E\u112F\x06\u0104`\x02\u112F\u1131\x05" +
    "\u03E8\u01F5\x02\u1130\u112C\x03\x02\x02\x02\u1130\u112E\x03\x02\x02\x02" +
    "\u1131\u0207\x03\x02\x02\x02\u1132\u1133\x06\u0105a\x02\u1133\u1135\x07" +
    "\u02AC\x02\x02\u1134\u1136\x05\u0224\u0113\x02\u1135\u1134\x03\x02\x02" +
    "\x02\u1136\u1137\x03\x02\x02\x02\u1137\u1135\x03\x02\x02\x02\u1137\u1138" +
    "\x03\x02\x02\x02\u1138\u113E\x03\x02\x02\x02\u1139\u113A\x06\u0105b\x02" +
    "\u113A\u113B\x07\u02AC\x02\x02\u113B\u113C\x07\u0201\x02\x02\u113C\u113E" +
    "\x07\u024A\x02\x02\u113D\u1132\x03\x02\x02\x02\u113D\u1139\x03\x02\x02" +
    "\x02\u113E\u0209\x03\x02\x02\x02\u113F\u1140\x07\u02B7\x02\x02\u1140\u1141" +
    "\x05\u0228\u0115\x02\u1141\u020B\x03\x02\x02\x02\u1142\u1143\x07\u02AC" +
    "\x02\x02\u1143\u114B\x07\u02B3\x02\x02\u1144\u114C\x05\u0228\u0115\x02" +
    "\u1145\u1147\x07\u01AD\x02\x02\u1146\u1148\x05\u020A\u0106\x02\u1147\u1146" +
    "\x03\x02\x02\x02\u1147\u1148\x03\x02\x02\x02\u1148\u114C\x03\x02\x02\x02" +
    "\u1149\u114C\x07\xF1\x02\x02\u114A\u114C\x07\u01E0\x02\x02\u114B\u1144" +
    "\x03\x02\x02\x02\u114B\u1145\x03\x02\x02\x02\u114B\u1149\x03\x02\x02\x02" +
    "\u114B\u114A\x03\x02\x02\x02\u114C\u020D\x03\x02\x02\x02\u114D\u114E\x07" +
    "\u01B1\x02\x02\u114E\u1150\x07\u016E\x02\x02\u114F\u1151\x05\u020C\u0107" +
    "\x02\u1150\u114F\x03\x02\x02\x02\u1150\u1151\x03\x02\x02\x02\u1151\u020F" +
    "\x03\x02\x02\x02\u1152\u1153\x06\u0109c\x02\u1153\u1154\x05\u01FC\xFF" +
    "\x02\u1154\u0211\x03\x02\x02\x02\u1155\u1156\x07\u025E\x02\x02\u1156\u1157" +
    "\x07\u016E\x02\x02\u1157\u1158\x05\u03FA\u01FE\x02\u1158\u1159\x07\u028F" +
    "\x02\x02\u1159\u1161\x05\u03FA\u01FE\x02\u115A\u115B\x07\u0198\x02\x02" +
    "\u115B\u115C\x05\u03FA\u01FE\x02\u115C\u115D\x07\u028F\x02\x02\u115D\u115E" +
    "\x05\u03FA\u01FE\x02\u115E\u1160\x03\x02\x02\x02\u115F\u115A\x03\x02\x02" +
    "\x02\u1160\u1163\x03\x02\x02\x02\u1161\u115F\x03\x02\x02\x02\u1161\u1162" +
    "\x03\x02\x02\x02\u1162\u0213\x03\x02\x02\x02\u1163\u1161\x03\x02\x02\x02" +
    "\u1164\u1186\x07\u0265\x02\x02\u1165\u1166\x06\u010Bd\x02\u1166\u1167" +
    "\x05\u021A\u010E\x02\u1167\u1168\x07\u01FD\x02\x02\u1168\u1169\x05\u03E8" +
    "\u01F5\x02\u1169\u1187\x03\x02\x02\x02\u116A\u116B\x05\u021A\u010E\x02" +
    "\u116B\u116C\x05\u0216\u010C\x02\u116C\u116D\x07\u01FD\x02\x02\u116D\u116E" +
    "\x05\u03E8\u01F5\x02\u116E\u1187\x03\x02\x02\x02\u116F\u1171\x07\u01AD" +
    "\x02\x02\u1170\u1172\x07\u0106\x02\x02\u1171\u1170\x03\x02\x02\x02\u1171" +
    "\u1172\x03\x02\x02\x02\u1172\u117E\x03\x02\x02\x02\u1173\u1174\x06\u010B" +
    "e\x02\u1174\u1176\x07\u0245\x02\x02\u1175\u1177\x05\u0218\u010D\x02\u1176" +
    "\u1175\x03\x02\x02\x02\u1176\u1177\x03\x02\x02\x02\u1177\u1178\x03\x02" +
    "\x02\x02\u1178\u117F\x05\u021E\u0110\x02\u1179\u117A\x07\u0198\x02\x02" +
    "\u117A\u117B\x07\u0201\x02\x02\u117B\u117C\x07\u024A\x02\x02\u117C\u117D" +
    "\x07\u01FD\x02\x02\u117D\u117F\x05\u03E8\u01F5\x02\u117E\u1173\x03\x02" +
    "\x02\x02\u117E\u1179\x03\x02\x02\x02\u117F\u1187\x03\x02\x02\x02\u1180" +
    "\u1181\x07\u010B\x02\x02\u1181\u1182\x07\u0245\x02\x02\u1182\u1183\x05" +
    "\u03FA\u01FE\x02\u1183\u1184\x07\u01FD\x02\x02\u1184\u1185\x05\u03E8\u01F5" +
    "\x02\u1185\u1187\x03\x02\x02\x02\u1186\u1165\x03\x02\x02\x02\u1186\u116A" +
    "\x03\x02\x02\x02\u1186\u116F\x03\x02\x02\x02\u1186\u1180\x03\x02\x02\x02" +
    "\u1187\u0215\x03\x02\x02\x02\u1188\u1189\x06\u010Cf\x02\u1189\u118B\x07" +
    "\u0245\x02\x02\u118A\u118C\x05\u0218\u010D\x02\u118B\u118A\x03\x02\x02" +
    "\x02\u118B\u118C\x03\x02\x02\x02\u118C\u118D\x03\x02\x02\x02\u118D\u1197" +
    "\x05\u021E\u0110\x02\u118E\u1194\x06\u010Cg\x02\u118F\u1191\x07\u0245" +
    "\x02\x02\u1190\u1192\x05\u0218\u010D\x02\u1191\u1190\x03\x02\x02\x02\u1191" +
    "\u1192\x03\x02\x02\x02\u1192\u1193\x03\x02\x02\x02\u1193\u1195\x05\u021E" +
    "\u0110\x02\u1194\u118F\x03\x02\x02\x02\u1194\u1195\x03\x02\x02\x02\u1195" +
    "\u1197\x03\x02\x02\x02\u1196\u1188\x03\x02\x02\x02\u1196\u118E\x03\x02" +
    "\x02\x02\u1197\u0217\x03\x02\x02\x02\u1198\u1199\t4\x02\x02\u1199\u0219" +
    "\x03\x02\x02\x02\u119A\u119F\x05\u021C\u010F\x02\u119B\u119C\x07\u0198" +
    "\x02\x02\u119C\u119E\x05\u021C\u010F\x02\u119D\u119B\x03\x02\x02\x02\u119E" +
    "\u11A1\x03\x02\x02\x02\u119F\u119D\x03\x02\x02\x02\u119F\u11A0\x03\x02" +
    "\x02\x02\u11A0\u021B\x03\x02\x02\x02\u11A1\u119F\x03\x02\x02\x02\u11A2" +
    "\u11AD\x06\u010Fh\x02\u11A3\u11A5\x05\u0498\u024D\x02\u11A4\u11A6\x05" +
    "\u040C\u0207\x02\u11A5\u11A4\x03\x02\x02\x02\u11A5\u11A6\x03\x02\x02\x02" +
    "\u11A6\u11AE\x03\x02\x02\x02\u11A7\u11AB\x05\u0498\u024D\x02\u11A8\u11AC" +
    "\x07\u01A3\x02\x02\u11A9\u11AA\x07\u01A2\x02\x02\u11AA\u11AC\x05\u0494" +
    "\u024B\x02\u11AB\u11A8\x03\x02\x02\x02\u11AB\u11A9\x03\x02\x02\x02\u11AC" +
    "\u11AE\x03\x02\x02\x02\u11AD\u11A3\x03\x02\x02\x02\u11AD\u11A7\x03\x02" +
    "\x02\x02\u11AE\u11CC\x03\x02\x02\x02\u11AF\u11B1\t5\x02\x02\u11B0\u11B2" +
    "\x05\u040C\u0207\x02\u11B1\u11B0\x03\x02\x02\x02\u11B1\u11B2\x03\x02\x02" +
    "\x02\u11B2\u11CC\x03\x02\x02\x02\u11B3\u11CC\t6\x02\x02\u11B4\u11B5\x07" +
    "\u0201\x02\x02\u11B5\u11CC\x07\u024A\x02\x02\u11B6\u11B7\x07\u026F\x02" +
    "\x02\u11B7\u11CC\x07\u01D6\x02\x02\u11B8\u11BC\x07\u01CD\x02\x02\u11B9" +
    "\u11BA\x07\u0159\x02\x02\u11BA\u11BD\x07\u0156\x02\x02\u11BB\u11BD\t7" +
    "\x02\x02\u11BC\u11B9\x03\x02\x02\x02\u11BC\u11BB\x03\x02\x02\x02\u11BC" +
    "\u11BD\x03\x02\x02\x02\u11BD\u11CC\x03\x02\x02\x02\u11BE\u11BF\x07\u0226" +
    "\x02\x02\u11BF\u11CC\x07\u0156\x02\x02\u11C0\u11C1\x07\u011D\x02\x02\u11C1" +
    "\u11CC\t8\x02\x02\u11C2\u11C3\x07\u026F\x02\x02\u11C3\u11CC\x07\u0171" +
    "\x02\x02\u11C4\u11C6\x07\u01AE\x02\x02\u11C5\u11C7\x07\u012B\x02\x02\u11C6" +
    "\u11C5\x03\x02\x02\x02\u11C6\u11C7\x03\x02\x02\x02\u11C7\u11CC\x03\x02" +
    "\x02\x02\u11C8\u11C9\x06\u010Fi\x02\u11C9\u11CA\t9\x02\x02\u11CA\u11CC" +
    "\x07\u02B3\x02\x02\u11CB\u11A2\x03\x02\x02\x02\u11CB\u11AF\x03\x02\x02" +
    "\x02\u11CB\u11B3\x03\x02\x02\x02\u11CB\u11B4\x03\x02\x02\x02\u11CB\u11B6" +
    "\x03\x02\x02\x02\u11CB\u11B8\x03\x02\x02\x02\u11CB\u11BE\x03\x02\x02\x02" +
    "\u11CB\u11C0\x03\x02\x02\x02\u11CB\u11C2\x03\x02\x02\x02\u11CB\u11C4\x03" +
    "\x02\x02\x02\u11CB\u11C8\x03\x02\x02\x02\u11CC\u021D\x03\x02\x02\x02\u11CD" +
    "\u11D0\x07\u018B\x02\x02\u11CE\u11CF\x07\u0197\x02\x02\u11CF\u11D1\x07" +
    "\u018B\x02\x02\u11D0\u11CE\x03\x02\x02\x02\u11D0\u11D1\x03\x02\x02\x02" +
    "\u11D1\u11DE\x03\x02\x02\x02\u11D2\u11D5\x05\u041A\u020E\x02\u11D3\u11D4" +
    "\x07\u0197\x02\x02\u11D4\u11D6\x07\u018B\x02\x02\u11D5\u11D3\x03\x02\x02" +
    "\x02\u11D5\u11D6\x03\x02\x02\x02\u11D6\u11DE\x03\x02\x02\x02\u11D7\u11DE" +
    "\x05\u0446\u0224\x02\u11D8\u11D9\x06\u0110j\x02\u11D9\u11DA\x05\u041A" +
    "\u020E\x02\u11DA\u11DB\x07\u0197\x02\x02\u11DB\u11DC\x05\u0446\u0224\x02" +
    "\u11DC\u11DE\x03\x02\x02\x02\u11DD\u11CD\x03\x02\x02\x02\u11DD\u11D2\x03" +
    "\x02\x02\x02\u11DD\u11D7\x03\x02\x02\x02\u11DD\u11D8\x03\x02\x02\x02\u11DE" +
    "\u021F\x03\x02\x02\x02\u11DF\u11E6\x05\u0222\u0112\x02\u11E0\u11E2\x07" +
    "\u01B0\x02\x02\u11E1\u11E0\x03\x02\x02\x02\u11E1\u11E2\x03\x02\x02\x02" +
    "\u11E2\u11E3\x03\x02\x02\x02\u11E3\u11E5\x05\u0222\u0112\x02\u11E4\u11E1" +
    "\x03\x02\x02\x02\u11E5\u11E8\x03\x02\x02\x02\u11E6\u11E4\x03\x02\x02\x02" +
    "\u11E6\u11E7\x03\x02\x02\x02\u11E7\u0221\x03\x02\x02\x02\u11E8\u11E6\x03" +
    "\x02\x02\x02\u11E9\u11EA\x07T\x02\x02\u11EA\u11F0\x05\u047C\u023F\x02" +
    "\u11EB\u11EC\x07\xAC\x02\x02\u11EC\u11F0\x05\u047C\u023F\x02\u11ED\u11EE" +
    "\x07\u014E\x02\x02\u11EE\u11F0\x05\u047C\u023F\x02\u11EF\u11E9\x03\x02" +
    "\x02\x02\u11EF\u11EB\x03\x02\x02\x02\u11EF\u11ED\x03\x02\x02\x02\u11F0" +
    "\u0223\x03\x02\x02\x02\u11F1\u11F2\x07\u0201\x02\x02\u11F2\u11FC\x07\u024A" +
    "\x02\x02\u11F3\u11F4\x07\xD2\x02\x02\u11F4\u11FC\x05\u046C\u0237\x02\u11F5" +
    "\u11F6\x07\xD5\x02\x02\u11F6\u11FC\x05\u046C\u0237\x02\u11F7\u11F8\x07" +
    "\xD1\x02\x02\u11F8\u11FC\x05\u046C\u0237\x02\u11F9\u11FA\x07\xD6\x02\x02" +
    "\u11FA\u11FC\x05\u046C\u0237\x02\u11FB\u11F1\x03\x02\x02\x02\u11FB\u11F3" +
    "\x03\x02\x02\x02\u11FB\u11F5\x03\x02\x02\x02\u11FB\u11F7\x03\x02\x02\x02" +
    "\u11FB\u11F9\x03\x02\x02\x02\u11FC\u0225\x03\x02\x02\x02\u11FD\u11FE\x07" +
    "\u026D\x02\x02\u11FE\u11FF\x07\u02B3\x02\x02\u11FF\u1215\x05\u0228\u0115" +
    "\x02\u1200\u1201\x07\u026D\x02\x02\u1201\u1202\x07\u02B3\x02\x02\u1202" +
    "\u1215\t:\x02\x02\u1203\u1204\x07\u026D\x02\x02\u1204\u1205\x07\u01E0" +
    "\x02\x02\u1205\u1209\x07\u02B3\x02\x02\u1206\u120A\x05\u0228\u0115\x02" +
    "\u1207\u120A\x07\xF1\x02\x02\u1208\u120A\x07\u01AD\x02\x02\u1209\u1206" +
    "\x03\x02\x02\x02\u1209\u1207\x03\x02\x02\x02\u1209\u1208\x03\x02\x02\x02" +
    "\u120A\u120B\x03\x02\x02\x02\u120B\u120C\x07\u028F\x02\x02\u120C\u1215" +
    "\x05\u0228\u0115\x02\u120D\u120E\x07\u026D\x02\x02\u120E\u120F\x07\u02B3" +
    "\x02\x02\u120F\u1212\x07\u01AD\x02\x02\u1210\u1211\x07\u02B7\x02\x02\u1211" +
    "\u1213\x05\u0228\u0115\x02\u1212\u1210\x03\x02\x02\x02\u1212\u1213\x03" +
    "\x02\x02\x02\u1213\u1215\x03\x02\x02\x02\u1214\u11FD\x03\x02\x02\x02\u1214" +
    "\u1200\x03\x02\x02\x02\u1214\u1203\x03\x02\x02\x02\u1214\u120D\x03\x02" +
    "\x02\x02\u1215\u0227\x03\x02\x02\x02\u1216\u121B\x05\u022A\u0116\x02\u1217" +
    "\u1218\x07\u0198\x02\x02\u1218\u121A\x05\u022A\u0116\x02\u1219\u1217\x03" +
    "\x02\x02\x02\u121A\u121D\x03\x02\x02\x02\u121B\u1219\x03\x02\x02\x02\u121B" +
    "\u121C\x03\x02\x02\x02\u121C\u0229\x03\x02\x02\x02\u121D\u121B\x03\x02" +
    "\x02\x02\u121E\u1222\x05\u0498\u024D\x02\u121F\u1220\x07\u01A2\x02\x02" +
    "\u1220\u1223\x05\u0494\u024B\x02\u1221\u1223\x07\u01A3\x02\x02\u1222\u121F" +
    "\x03\x02\x02\x02\u1222\u1221\x03\x02\x02\x02\u1222\u1223\x03\x02\x02\x02" +
    "\u1223\u022B\x03\x02\x02\x02\u1224\u1226\x07A\x02\x02\u1225\u1227\x05" +
    "\u0402\u0202\x02\u1226\u1225\x03\x02\x02\x02\u1226\u1227\x03\x02\x02\x02" +
    "\u1227\u1228\x03\x02\x02\x02\u1228\u1229\x07\u0289\x02\x02\u1229\u122C" +
    "\x05\u0448\u0225\x02\u122A\u122B\x06\u0117k\x02\u122B\u122D\x05\u022E" +
    "\u0118\x02\u122C\u122A\x03\x02\x02\x02\u122C\u122D\x03\x02\x02\x02\u122D" +
    "\u1250\x03\x02\x02\x02\u122E\u122F\x07\u01C5\x02\x02\u122F\u1230\x07\u0289" +
    "\x02\x02\u1230\u1234\x05\u0448\u0225\x02\u1231\u1233\x05\u0230\u0119\x02" +
    "\u1232\u1231\x03\x02\x02\x02\u1233\u1236\x03\x02\x02\x02\u1234\u1232\x03" +
    "\x02\x02\x02\u1234\u1235\x03\x02\x02\x02\u1235\u1250\x03\x02\x02\x02\u1236" +
    "\u1234\x03\x02\x02\x02\u1237\u1238\x07\v\x02\x02\u1238\u1239\x07\u0289" +
    "\x02\x02\u1239\u123B\x05\u0448\u0225\x02\u123A\u123C\t;\x02\x02\u123B" +
    "\u123A\x03\x02\x02\x02\u123B\u123C\x03\x02\x02\x02\u123C\u1250\x03\x02" +
    "\x02\x02\u123D\u123F\x07\u0248\x02\x02\u123E\u1240\x05\u0402\u0202\x02" +
    "\u123F\u123E\x03\x02\x02\x02\u123F\u1240\x03\x02\x02\x02\u1240\u1241\x03" +
    "\x02\x02\x02\u1241\u1242\x07\u0289\x02\x02\u1242\u1250\x05\u0448\u0225" +
    "\x02\u1243\u1245\x07\'\x02\x02\u1244\u1246\x05\u0402\u0202\x02\u1245\u1244" +
    "\x03\x02\x02\x02\u1245\u1246\x03\x02\x02\x02\u1246\u1247\x03\x02\x02\x02" +
    "\u1247\u1248\x07\u0289\x02\x02\u1248\u124C\x05\u0448\u0225\x02\u1249\u124B" +
    "\x05\u0232\u011A\x02\u124A\u1249\x03\x02\x02\x02\u124B\u124E\x03\x02\x02" +
    "\x02\u124C\u124A\x03\x02\x02\x02\u124C\u124D\x03\x02\x02\x02\u124D\u1250" +
    "\x03\x02\x02\x02\u124E\u124C\x03\x02\x02\x02\u124F\u1224\x03\x02\x02\x02" +
    "\u124F\u122E\x03\x02\x02\x02\u124F\u1237\x03\x02\x02\x02\u124F\u123D\x03" +
    "\x02\x02\x02\u124F\u1243\x03\x02\x02\x02\u1250\u022D\x03\x02\x02\x02\u1251" +
    "\u1252\x07\u0299\x02\x02\u1252\u1253\x07\u02C2\x02\x02\u1253\u1254\x07" +
    "\u0245\x02\x02\u1254\u1258\x05\u0462\u0232\x02\u1255\u1256\x07\u02AC\x02" +
    "\x02\u1256\u1257\x07\u017E\x02\x02\u1257\u1259\x07\u02C3\x02\x02\u1258" +
    "\u1255\x03\x02\x02\x02\u1258\u1259\x03\x02\x02\x02\u1259\u125F\x03\x02" +
    "\x02\x02\u125A\u125B\x07\u01E9\x02\x02\u125B\u125C\x07\u02C2\x02\x02\u125C" +
    "\u125D\x07\u0245\x02\x02\u125D\u125F\x05\u0462\u0232\x02\u125E\u1251\x03" +
    "\x02\x02\x02\u125E\u125A\x03\x02\x02\x02\u125F\u022F\x03\x02\x02\x02\u1260" +
    "\u1261\x07\u01FC\x02\x02\u1261\u1264";
MySQLParser._serializedATNSegment10 = "\x077\x02\x02\u1262\u1264\t<\x02\x02\u1263\u1260\x03\x02\x02\x02\u1263" +
    "\u1262\x03\x02\x02\x02\u1264\u0231\x03\x02\x02\x02\u1265\u1266\t=\x02" +
    "\x02\u1266\u0233\x03\x02\x02\x02\u1267\u1268\x07\x1B\x02\x02\u1268\u1269" +
    "\x07\u0100\x02\x02\u1269\u126A\x05\u0460\u0231\x02\u126A\u126B\x071\x02" +
    "\x02\u126B\u126C\x05\u047A\u023E\x02\u126C\u127E\x03\x02\x02\x02\u126D" +
    "\u126E\x07\x1B\x02\x02\u126E\u126F\x07\u02B8\x02\x02\u126F\u127E\x05\u0484" +
    "\u0243\x02\u1270\u1271\x076\x02\x02\u1271\u1272\x07\u0100\x02\x02\u1272" +
    "\u127E\x05\u0456\u022C\x02\u1273\u1274\x076\x02\x02\u1274\u1275\x07\u02B8" +
    "\x02\x02\u1275\u127A\x05\u0458\u022D\x02\u1276\u1277\x07\u0198\x02\x02" +
    "\u1277\u1279\x05\u0458\u022D\x02\u1278\u1276\x03\x02\x02\x02\u1279\u127C" +
    "\x03\x02\x02\x02\u127A\u1278\x03\x02\x02\x02\u127A\u127B\x03\x02\x02\x02" +
    "\u127B\u127E\x03\x02\x02\x02\u127C\u127A\x03\x02\x02\x02\u127D\u1267\x03" +
    "\x02\x02\x02\u127D\u126D\x03\x02\x02\x02\u127D\u1270\x03\x02\x02\x02\u127D" +
    "\u1273\x03\x02\x02\x02\u127E\u0235\x03\x02\x02\x02\u127F\u1280\x07\u026D" +
    "\x02\x02\u1280\u1281\x05\u0238\u011D\x02\u1281\u0237\x03\x02\x02\x02\u1282" +
    "\u1283\x05\u0242\u0122\x02\u1283\u1284\x05\u0240\u0121\x02\u1284\u12BB" +
    "\x03\x02\x02\x02\u1285\u1286\x07\u015D\x02\x02\u1286\u12BB\x05\u023A\u011E" +
    "\x02\u1287\u1288\x05\u04A0\u0251\x02\u1288\u1289\x05\u0248\u0125\x02\u1289" +
    "\u12BB\x03\x02\x02\x02\u128A\u128D\x07\xFD\x02\x02\u128B\u128C\x07\u01FC" +
    "\x02\x02\u128C\u128E\x05\u03FA\u01FE\x02\u128D\u128B\x03\x02\x02\x02\u128D" +
    "\u128E\x03\x02\x02\x02\u128E\u128F\x03\x02\x02\x02\u128F\u12AA\x05\u049E" +
    "\u0250\x02\u1290\u1292\x05\u047C\u023F\x02\u1291\u1293\x05\u03F6\u01FC" +
    "\x02\u1292\u1291\x03\x02\x02\x02\u1292\u1293\x03\x02\x02\x02\u1293\u1295" +
    "\x03\x02\x02\x02\u1294\u1296\x05\u03F2\u01FA\x02\u1295\u1294\x03\x02\x02" +
    "\x02\u1295\u1296\x03\x02\x02\x02\u1296\u12AB\x03\x02\x02\x02\u1297\u1299" +
    "\x05\u047C\u023F\x02\u1298\u129A\x05\u03F6\u01FC\x02\u1299\u1298\x03\x02" +
    "\x02\x02\u1299\u129A\x03\x02\x02\x02\u129A\u129C\x03\x02\x02\x02\u129B" +
    "\u129D\x05\u03F2\u01FA\x02\u129C\u129B\x03\x02\x02\x02\u129C\u129D\x03" +
    "\x02\x02\x02\u129D\u12AB\x03\x02\x02\x02\u129E\u129F\x06\u011Dl\x02\u129F" +
    "\u12A0\x07\xF5\x02\x02\u12A0\u12A1\x07\u019B\x02\x02\u12A1\u12A2\x05\u047C" +
    "\u023F\x02\u12A2\u12A3\x07\u019C\x02\x02\u12A3\u12AB\x03\x02\x02\x02\u12A4" +
    "\u12A5\x06\u011Dm\x02\u12A5\u12A6\x07\xFD\x02\x02\u12A6\u12A7\x07\u019B" +
    "\x02\x02\u12A7\u12A8\x05\u047C\u023F\x02\u12A8\u12A9\x07\u019C\x02\x02" +
    "\u12A9\u12AB\x03\x02\x02\x02\u12AA\u1290\x03\x02\x02\x02\u12AA\u1297\x03" +
    "\x02\x02\x02\u12AA\u129E\x03\x02\x02\x02\u12AA\u12A4\x03\x02\x02\x02\u12AB" +
    "\u12BB\x03\x02\x02\x02\u12AC\u12AD\x06\u011Dn\x02\u12AD\u12B0\x07\xFD" +
    "\x02\x02\u12AE\u12AF\x07\u01FC\x02\x02\u12AF\u12B1\x05\u03FA\u01FE\x02" +
    "\u12B0\u12AE\x03\x02\x02\x02\u12B0\u12B1\x03\x02\x02\x02\u12B1\u12B2\x03" +
    "\x02\x02\x02\u12B2\u12B3\x07\u028F\x02\x02\u12B3\u12B5\x07\u02FE\x02\x02" +
    "\u12B4\u12B6\x05\u03F6\u01FC\x02\u12B5\u12B4\x03\x02\x02\x02\u12B5\u12B6" +
    "\x03\x02\x02\x02\u12B6\u12B8\x03\x02\x02\x02\u12B7\u12B9\x05\u03F2\u01FA" +
    "\x02\u12B8\u12B7\x03\x02\x02\x02\u12B8\u12B9\x03\x02\x02\x02\u12B9\u12BB" +
    "\x03\x02\x02\x02\u12BA\u1282\x03\x02\x02\x02\u12BA\u1285\x03\x02\x02\x02" +
    "\u12BA\u1287\x03\x02\x02\x02\u12BA\u128A\x03\x02\x02\x02\u12BA\u12AC\x03" +
    "\x02\x02\x02\u12BB\u0239\x03\x02\x02\x02\u12BC\u12BE\x05\u023C\u011F\x02" +
    "\u12BD\u12BF\x05\u023E\u0120\x02\u12BE\u12BD\x03\x02\x02\x02\u12BE\u12BF" +
    "\x03\x02\x02\x02\u12BF\u12C6\x03\x02\x02\x02\u12C0\u12C3\x05\u023E\u0120" +
    "\x02\u12C1\u12C2\x07\u0198\x02\x02\u12C2\u12C4\x05\u023C\u011F\x02\u12C3" +
    "\u12C1\x03\x02\x02\x02\u12C3\u12C4\x03\x02\x02\x02\u12C4\u12C6\x03\x02" +
    "\x02\x02\u12C5\u12BC\x03\x02\x02\x02\u12C5\u12C0\x03\x02\x02\x02\u12C6" +
    "\u023B\x03\x02\x02\x02\u12C7\u12C8\x07\u0258\x02\x02\u12C8\u12C9\t)\x02" +
    "\x02\u12C9\u023D\x03\x02\x02\x02\u12CA\u12CB\x07\xAB\x02\x02\u12CB\u12D1" +
    "\x07\xB3\x02\x02\u12CC\u12CD\x07\u011C\x02\x02\u12CD\u12D2\x07\u0258\x02" +
    "\x02\u12CE\u12CF\x07\u0258\x02\x02\u12CF\u12D2\t>\x02\x02\u12D0\u12D2" +
    "\x07\u0135\x02\x02\u12D1\u12CC\x03\x02\x02\x02\u12D1\u12CE\x03\x02\x02" +
    "\x02\u12D1\u12D0\x03\x02\x02\x02\u12D2\u023F\x03\x02\x02\x02\u12D3\u12D4" +
    "\x07\u0198\x02\x02\u12D4\u12D6\x05\u0244\u0123\x02\u12D5\u12D3\x03\x02" +
    "\x02\x02\u12D6\u12D9\x03\x02\x02\x02\u12D7\u12D5\x03\x02\x02\x02\u12D7" +
    "\u12D8\x03\x02\x02\x02\u12D8\u0241\x03\x02\x02\x02\u12D9\u12D7\x03\x02" +
    "\x02\x02\u12DA\u12DB\x05\u02E2\u0172\x02\u12DB\u12DC\x05\u049E\u0250\x02" +
    "\u12DC\u12DD\x05\u024C\u0127\x02\u12DD\u12F4\x03\x02\x02\x02\u12DE\u12F4" +
    "\x05\u03DE\u01F0\x02\u12DF\u12E0\x05\u02DE\u0170\x02\u12E0\u12E1\x05\u049E" +
    "\u0250\x02\u12E1\u12E2\x05\u029C\u014F\x02\u12E2\u12F4\x03\x02\x02\x02" +
    "\u12E3\u12E4\x05\u0246\u0124\x02\u12E4\u12E5\x05\u049E\u0250\x02\u12E5" +
    "\u12E6\x05\u024C\u0127\x02\u12E6\u12F4\x03\x02\x02\x02\u12E7\u12F1\x07" +
    "\xE8\x02\x02\u12E8\u12E9\x05\u049E\u0250\x02\u12E9\u12EA\x05\u029C\u014F" +
    "\x02\u12EA\u12F2\x03\x02\x02\x02\u12EB\u12ED\x05\u03A0\u01D1\x02\u12EC" +
    "\u12EE\x05\u03D2\u01EA\x02\u12ED\u12EC\x03\x02\x02\x02\u12ED\u12EE\x03" +
    "\x02\x02\x02\u12EE\u12F2\x03\x02\x02\x02\u12EF\u12F0\x06\u0122o\x02\u12F0" +
    "\u12F2\x07\u01E0\x02\x02\u12F1\u12E8\x03\x02\x02\x02\u12F1\u12EB\x03\x02" +
    "\x02\x02\u12F1\u12EF\x03\x02\x02\x02\u12F2\u12F4\x03\x02\x02\x02\u12F3" +
    "\u12DA\x03\x02\x02\x02\u12F3\u12DE\x03\x02\x02\x02\u12F3\u12DF\x03\x02" +
    "\x02\x02\u12F3\u12E3\x03\x02\x02\x02\u12F3\u12E7\x03\x02\x02\x02\u12F4" +
    "\u0243\x03\x02\x02\x02\u12F5\u12F6\x05\u04A0\u0251\x02\u12F6\u12F7\x05" +
    "\u02E2\u0172\x02\u12F7\u12F8\x05\u049E\u0250\x02\u12F8\u12F9\x05\u024C" +
    "\u0127\x02\u12F9\u12FC\x03\x02\x02\x02\u12FA\u12FC\x05\u0242\u0122\x02" +
    "\u12FB\u12F5\x03\x02\x02\x02\u12FB\u12FA\x03\x02\x02\x02\u12FC\u0245\x03" +
    "\x02\x02\x02\u12FD\u12FF\x07\u01A4\x02\x02\u12FE\u1300\x05\u04A4\u0253" +
    "\x02\u12FF\u12FE\x03\x02\x02\x02\u12FF\u1300\x03\x02\x02\x02\u1300\u1301" +
    "\x03\x02\x02\x02\u1301\u1302\x05\u02E2\u0172\x02\u1302\u0247\x03\x02\x02" +
    "\x02\u1303\u1304\x05\u024A\u0126\x02\u1304\u1305\x05\u0240\u0121\x02\u1305" +
    "\u1309\x03\x02\x02\x02\u1306\u1307\x07\u015D\x02\x02\u1307\u1309\x05\u023A" +
    "\u011E\x02\u1308\u1303\x03\x02\x02\x02\u1308\u1306\x03\x02\x02\x02\u1309" +
    "\u0249\x03\x02\x02\x02\u130A\u130B\x05\u02E2\u0172\x02\u130B\u130C\x05" +
    "\u049E\u0250\x02\u130C\u130D\x05\u024C\u0127\x02\u130D\u024B\x03\x02\x02" +
    "\x02\u130E\u1313\x05\u029C\u014F\x02\u130F\u1313\t?\x02\x02\u1310\u1311" +
    "\x06\u0127p\x02\u1311\u1313\t@\x02\x02\u1312\u130E\x03\x02\x02\x02\u1312" +
    "\u130F\x03\x02\x02\x02\u1312\u1310\x03\x02\x02\x02\u1313\u024D\x03\x02" +
    "\x02\x02\u1314\u13F0\x07\u026F\x02\x02\u1315\u1316\x06\u0128q\x02\u1316" +
    "\u13F1\x07D\x02\x02\u1317\u1319\x07\u01D6\x02\x02\u1318\u131A\x05\u03FE" +
    "\u0200\x02\u1319\u1318\x03\x02\x02\x02\u1319\u131A\x03\x02\x02\x02\u131A" +
    "\u13F1\x03\x02\x02\x02\u131B\u131D\x05\u0250\u0129\x02\u131C\u131B\x03" +
    "\x02\x02\x02\u131C\u131D\x03\x02\x02\x02\u131D\u131E\x03\x02\x02\x02\u131E" +
    "\u1320\x07\u0156\x02\x02\u131F\u1321\x05\u0256\u012C\x02\u1320\u131F\x03" +
    "\x02\x02\x02\u1320\u1321\x03\x02\x02\x02\u1321\u1323\x03\x02\x02\x02\u1322" +
    "\u1324\x05\u03FE\u0200\x02\u1323\u1322\x03\x02\x02\x02\u1323\u1324\x03" +
    "\x02\x02\x02\u1324\u13F1\x03\x02\x02\x02\u1325\u1327\x07\x92\x02\x02\u1326" +
    "\u1325\x03\x02\x02\x02\u1326\u1327\x03\x02\x02\x02\u1327\u1328\x03\x02" +
    "\x02\x02\u1328\u132A\x07\u015E\x02\x02\u1329\u132B\x05\u0256\u012C\x02" +
    "\u132A\u1329\x03\x02\x02\x02\u132A\u132B\x03\x02\x02\x02\u132B\u132D\x03" +
    "\x02\x02\x02\u132C\u132E\x05\u03FE\u0200\x02\u132D\u132C\x03\x02\x02\x02" +
    "\u132D\u132E\x03\x02\x02\x02\u132E\u13F1\x03\x02\x02\x02\u132F\u1331\x07" +
    "\x88\x02\x02\u1330\u1332\x05\u0256\u012C\x02\u1331\u1330\x03\x02\x02\x02" +
    "\u1331\u1332\x03\x02\x02\x02\u1332\u1334\x03\x02\x02\x02\u1333\u1335\x05" +
    "\u03FE\u0200\x02\u1334\u1333\x03\x02\x02\x02\u1334\u1335\x03\x02\x02\x02" +
    "\u1335\u13F1\x03\x02\x02\x02\u1336\u1337\x07\u0289\x02\x02\u1337\u1339" +
    "\x07\u0149\x02\x02\u1338\u133A\x05\u0256\u012C\x02\u1339\u1338\x03\x02" +
    "\x02\x02\u1339\u133A\x03\x02\x02\x02\u133A\u133C\x03\x02\x02\x02\u133B" +
    "\u133D\x05\u03FE\u0200\x02\u133C\u133B\x03\x02\x02\x02\u133C\u133D\x03" +
    "\x02\x02\x02\u133D\u13F1\x03\x02\x02\x02\u133E\u133F\x07\x1E\x02\x02\u133F" +
    "\u1341\x07\u0156\x02\x02\u1340\u1342\x05\u0256\u012C\x02\u1341\u1340\x03" +
    "\x02\x02\x02\u1341\u1342\x03\x02\x02\x02\u1342\u1344\x03\x02\x02\x02\u1343" +
    "\u1345\x05\u03FE\u0200\x02\u1344\u1343\x03\x02\x02\x02\u1344\u1345\x03" +
    "\x02\x02\x02\u1345\u13F1\x03\x02\x02\x02\u1346\u13F1\x07\u0101\x02\x02" +
    "\u1347\u134A\x07\x82\x02\x02\u1348\u134B\x05\u043E\u0220\x02\u1349\u134B" +
    "\x07\u01AD\x02\x02\u134A\u1348\x03\x02\x02\x02\u134A\u1349\x03\x02\x02" +
    "\x02\u134B\u134C\x03\x02\x02\x02\u134C\u13F1\tA\x02\x02\u134D\u134F\x05" +
    "\u0250\u0129\x02\u134E\u134D\x03\x02\x02\x02\u134E\u134F\x03\x02\x02\x02" +
    "\u134F\u1350\x03\x02\x02\x02\u1350\u1351\x07\\\x02\x02\u1351\u1352\tB" +
    "\x02\x02\u1352\u1354\x05\u0446\u0224\x02\u1353\u1355\x05\u0256\u012C\x02" +
    "\u1354\u1353\x03\x02\x02\x02\u1354\u1355\x03\x02\x02\x02\u1355\u1357\x03" +
    "\x02\x02\x02\u1356\u1358\x05\u03FE\u0200\x02\u1357\u1356\x03\x02\x02\x02" +
    "\u1357\u1358\x03\x02\x02\x02\u1358\u13F1\x03\x02\x02\x02\u1359\u135A\t" +
    ",\x02\x02\u135A\u13F1\x07\xB9\x02\x02\u135B\u1362\x07/\x02\x02\u135C\u1363" +
    "\x07\x9F\x02\x02\u135D\u135E\x07\u0149\x02\x02\u135E\u1360\x05\u0252\u012A" +
    "\x02\u135F\u1361\x05\u0306\u0184\x02\u1360\u135F\x03\x02\x02\x02\u1360" +
    "\u1361\x03\x02\x02\x02\u1361\u1363\x03\x02\x02\x02\u1362\u135C\x03\x02" +
    "\x02\x02\u1362\u135D\x03\x02\x02\x02\u1363\u13F1\x03\x02\x02\x02\u1364" +
    "\u1365\tC\x02\x02\u1365\u1368\x07\x88\x02\x02\u1366\u1367\x07\u0214\x02" +
    "\x02\u1367\u1369\x05\u047C\u023F\x02\u1368\u1366\x03\x02\x02\x02\u1368" +
    "\u1369\x03\x02\x02\x02\u1369\u136C\x03\x02\x02\x02\u136A\u136B\x07\u01FD" +
    "\x02\x02\u136B\u136D\x05\u0470\u0239\x02\u136C\u136A\x03\x02\x02\x02\u136C" +
    "\u136D\x03\x02\x02\x02\u136D\u136F\x03\x02\x02\x02\u136E\u1370\x05\u011E" +
    "\x90\x02\u136F\u136E\x03\x02\x02\x02\u136F\u1370\x03\x02\x02\x02\u1370" +
    "\u1372\x03\x02\x02\x02\u1371\u1373\x05\u0306\u0184\x02\u1372\u1371\x03" +
    "\x02\x02\x02\u1372\u1373\x03\x02\x02\x02\u1373\u13F1\x03\x02\x02\x02\u1374" +
    "\u1375\x06\u0128r\x02\u1375\u1377\x07\x8C\x02\x02\u1376\u1374\x03\x02" +
    "\x02\x02\u1376\u1377\x03\x02\x02\x02\u1377\u1378\x03\x02\x02\x02\u1378" +
    "\u1379\tD\x02\x02\u1379\u137A\x05\u0254\u012B\x02\u137A\u137C\x05\u0446" +
    "\u0224\x02\u137B\u137D\x05\u0256\u012C\x02\u137C\u137B\x03\x02\x02\x02" +
    "\u137C\u137D\x03\x02\x02\x02\u137D\u137F\x03\x02\x02\x02\u137E\u1380\x05" +
    "\u0160\xB1\x02\u137F\u137E\x03\x02\x02\x02\u137F\u1380\x03\x02\x02\x02" +
    "\u1380\u13F1\x03\x02\x02\x02\u1381\u1383\x07\u014A\x02\x02\u1382\u1381" +
    "\x03\x02\x02\x02\u1382\u1383\x03\x02\x02\x02\u1383\u1384\x03\x02\x02\x02" +
    "\u1384\u13F1\x07\x83\x02\x02\u1385\u1386\x07\u01CC\x02\x02\u1386\u1387" +
    "\x07\u019B\x02\x02\u1387\u1388\x07\u018B\x02\x02\u1388\u1389\x07\u019C" +
    "\x02\x02\u1389\u13F1\tE\x02\x02\u138A\u138C\x07\u0173\x02\x02\u138B\u138D" +
    "\x05\u011E\x90\x02\u138C\u138B\x03\x02\x02\x02\u138C\u138D\x03\x02\x02" +
    "\x02\u138D\u13F1\x03\x02\x02\x02\u138E\u1390\x07\x85\x02\x02\u138F\u1391" +
    "\x05\u011E\x90\x02\u1390\u138F\x03\x02\x02\x02\u1390\u1391\x03\x02\x02" +
    "\x02\u1391\u13F1\x03\x02\x02\x02\u1392\u13F1\x07\u010A\x02\x02\u1393\u139C" +
    "\x07\u0109\x02\x02\u1394\u1399\x05\u0258\u012D\x02\u1395\u1396\x07\u0198" +
    "\x02\x02\u1396\u1398\x05\u0258\u012D\x02\u1397\u1395\x03\x02\x02\x02\u1398" +
    "\u139B\x03\x02\x02\x02\u1399\u1397\x03\x02\x02\x02\u1399\u139A\x03\x02" +
    "\x02\x02\u139A\u139D\x03\x02\x02\x02\u139B\u1399\x03\x02\x02\x02\u139C" +
    "\u1394\x03\x02\x02\x02\u139C\u139D\x03\x02\x02\x02\u139D\u13A1\x03\x02" +
    "\x02\x02\u139E\u139F\x07\u01FC\x02\x02\u139F\u13A0\x07\u010D\x02\x02\u13A0" +
    "\u13A2\x07\u017E\x02\x02\u13A1\u139E\x03\x02\x02\x02\u13A1\u13A2\x03\x02" +
    "\x02\x02\u13A2\u13A4\x03\x02\x02\x02\u13A3\u13A5\x05\u011E\x90\x02\u13A4" +
    "\u13A3\x03\x02\x02\x02\u13A4\u13A5\x03\x02\x02\x02\u13A5\u13F1\x03\x02" +
    "\x02\x02\u13A6\u13A8\x05\u04A0\u0251\x02\u13A7\u13A6\x03\x02\x02\x02\u13A7" +
    "\u13A8\x03\x02\x02\x02\u13A8\u13A9\x03\x02\x02\x02\u13A9\u13AB\tF\x02" +
    "\x02\u13AA\u13AC\x05\u03FE\u0200\x02\u13AB\u13AA\x03\x02\x02\x02\u13AB" +
    "\u13AC\x03\x02\x02\x02\u13AC\u13F1\x03\x02\x02\x02\u13AD\u13AF\x07\x92" +
    "\x02\x02\u13AE\u13AD\x03\x02\x02\x02\u13AE\u13AF\x03\x02\x02\x02\u13AF" +
    "\u13B0\x03\x02\x02\x02\u13B0\u13F1\x07\u0108\x02\x02\u13B1\u13B3\x05\u02EE" +
    "\u0178\x02\u13B2\u13B4\x05\u03FE\u0200\x02\u13B3\u13B2\x03\x02\x02\x02" +
    "\u13B3\u13B4\x03\x02\x02\x02\u13B4\u13F1\x03\x02\x02\x02\u13B5\u13B7\x07" +
    "Y\x02\x02\u13B6\u13B8\x05\u03FE\u0200\x02\u13B7\u13B6\x03\x02\x02\x02" +
    "\u13B7\u13B8\x03\x02\x02\x02\u13B8\u13F1\x03\x02\x02\x02\u13B9\u13BA\x06" +
    "\u0128s\x02\u13BA\u13F1\x07j\x02\x02\u13BB\u13F1\x07\u0106\x02\x02\u13BC" +
    "\u13BF\x07\x9C\x02\x02\u13BD\u13BE\x07\u01FC\x02\x02\u13BE\u13C0\x05\u03FA" +
    "\u01FE\x02\u13BF\u13BD\x03\x02\x02\x02\u13BF\u13C0\x03\x02\x02\x02\u13C0" +
    "\u13F1\x03\x02\x02\x02\u13C1\u13C2\x07\x9C\x02\x02\u13C2\u13C3\x07\u01FC" +
    "\x02\x02\u13C3\u13C4\x05\u03FA\u01FE\x02\u13C4\u13C5\x07\u029C\x02\x02" +
    "\u13C5\u13C6\x05\u03E8\u01F5\x02\u13C6\u13F1\x03\x02\x02\x02\u13C7\u13C8" +
    "\x07\xBB\x02\x02\u13C8\u13F1\x07\u0149\x02\x02\u13C9\u13DE\x07\u01CD\x02" +
    "\x02\u13CA\u13CC\x07\u01D5\x02\x02\u13CB\u13CD\x05\u03CC\u01E7\x02\u13CC" +
    "\u13CB\x03\x02\x02\x02\u13CC\u13CD\x03\x02\x02\x02\u13CD\u13CE\x03\x02" +
    "\x02\x02\u13CE\u13DF\x05\u041A\u020E\x02\u13CF\u13D0\x07\x87\x02\x02\u13D0" +
    "\u13DF\x05\u0436\u021C\x02\u13D1\u13D2\x07\u0166\x02\x02\u13D2\u13DF\x05" +
    "\u0422\u0212\x02\u13D3\u13D4\x07\u0254\x02\x02\u13D4\u13DF\x05\u041E\u0210" +
    "\x02\u13D5\u13D6\x07\u0289\x02\x02\u13D6\u13DF\x05\u0446\u0224\x02\u13D7" +
    "\u13D8\x07\u0291\x02\x02\u13D8\u13DF\x05\u0426\u0214\x02\u13D9\u13DA\x07" +
    "\u0171\x02\x02\u13DA\u13DF\x05\u042A\u0216\x02\u13DB\u13DC\x06\u0128t" +
    "\x02\u13DC\u13DD\x07\u016E\x02\x02\u13DD\u13DF\x05\u03FA\u01FE\x02\u13DE" +
    "\u13CA\x03\x02\x02\x02\u13DE\u13CF\x03\x02\x02\x02\u13DE\u13D1\x03\x02" +
    "\x02\x02\u13DE\u13D3\x03\x02\x02\x02\u13DE\u13D5\x03\x02\x02\x02\u13DE" +
    "\u13D7\x03\x02\x02\x02\u13DE\u13D9\x03\x02\x02\x02\u13DE\u13DB\x03\x02" +
    "\x02\x02\u13DF\u13F1\x03\x02\x02\x02\u13E0\u13E1\x07\u0254\x02\x02\u13E1" +
    "\u13E3\x07\u0149\x02\x02\u13E2\u13E4\x05\u03FE\u0200\x02\u13E3\u13E2\x03" +
    "\x02\x02\x02\u13E3\u13E4\x03\x02\x02\x02\u13E4\u13F1\x03\x02\x02\x02\u13E5" +
    "\u13E6\x07\u0166\x02\x02\u13E6\u13E8\x07\u0149\x02\x02\u13E7\u13E9\x05" +
    "\u03FE\u0200\x02\u13E8\u13E7\x03\x02\x02\x02\u13E8\u13E9\x03\x02\x02\x02" +
    "\u13E9\u13F1\x03\x02\x02\x02\u13EA\u13EB\x07\u0254\x02\x02\u13EB\u13EC" +
    "\x07X\x02\x02\u13EC\u13F1\x05\u041E\u0210\x02\u13ED\u13EE\x07\u0166\x02" +
    "\x02\u13EE\u13EF\x07X\x02\x02\u13EF\u13F1\x05\u0422\u0212\x02\u13F0\u1315" +
    "\x03\x02\x02\x02\u13F0\u1317\x03\x02\x02\x02\u13F0\u131C\x03\x02\x02\x02" +
    "\u13F0\u1326\x03\x02\x02\x02\u13F0\u132F\x03\x02\x02\x02\u13F0\u1336\x03" +
    "\x02\x02\x02\u13F0\u133E\x03\x02\x02\x02\u13F0\u1346\x03\x02\x02\x02\u13F0" +
    "\u1347\x03\x02\x02\x02\u13F0\u134E\x03\x02\x02\x02\u13F0\u1359\x03\x02" +
    "\x02\x02\u13F0\u135B\x03\x02\x02\x02\u13F0\u1364\x03\x02\x02\x02\u13F0" +
    "\u1376\x03\x02\x02\x02\u13F0\u1382\x03\x02\x02\x02\u13F0\u1385\x03\x02" +
    "\x02\x02\u13F0\u138A\x03\x02\x02\x02\u13F0\u138E\x03\x02\x02\x02\u13F0" +
    "\u1392\x03\x02\x02\x02\u13F0\u1393\x03\x02\x02\x02\u13F0\u13A7\x03\x02" +
    "\x02\x02\u13F0\u13AE\x03\x02\x02\x02\u13F0\u13B1\x03\x02\x02\x02\u13F0" +
    "\u13B5\x03\x02\x02\x02\u13F0\u13B9\x03\x02\x02\x02\u13F0\u13BB\x03\x02" +
    "\x02\x02\u13F0\u13BC\x03\x02\x02\x02\u13F0\u13C1\x03\x02\x02\x02\u13F0" +
    "\u13C7\x03\x02\x02\x02\u13F0\u13C9\x03\x02\x02\x02\u13F0\u13E0\x03\x02" +
    "\x02\x02\u13F0\u13E5\x03\x02\x02\x02\u13F0\u13EA\x03\x02\x02\x02\u13F0" +
    "\u13ED\x03\x02\x02\x02\u13F1\u024F\x03\x02\x02\x02\u13F2\u13F9\x07\x92" +
    "\x02\x02\u13F3\u13F4\x06\u0129u\x02\u13F4\u13F6\x07\x8C\x02\x02\u13F5" +
    "\u13F7\x07\x92\x02\x02\u13F6\u13F5\x03\x02\x02\x02\u13F6\u13F7\x03\x02" +
    "\x02\x02\u13F7\u13F9\x03\x02\x02\x02\u13F8\u13F2\x03\x02\x02\x02\u13F8" +
    "\u13F3\x03\x02\x02\x02\u13F9\u0251\x03\x02\x02\x02\u13FA\u13FC\x06\u012A" +
    "v\x02\u13FB\u13FD\x07\u023E\x02\x02\u13FC\u13FB\x03\x02\x02\x02\u13FC" +
    "\u13FD\x03\x02\x02\x02\u13FD\u1400\x03\x02\x02\x02\u13FE\u1400\x03\x02" +
    "\x02\x02\u13FF\u13FA\x03\x02\x02\x02\u13FF\u13FE\x03\x02\x02\x02\u1400" +
    "\u0253\x03\x02\x02\x02\u1401\u1402\tB\x02\x02\u1402\u0255\x03\x02\x02" +
    "\x02\u1403\u1404\x05\u0254\u012B\x02\u1404\u1405\x05\u0460\u0231\x02\u1405" +
    "\u0257\x03\x02\x02\x02\u1406\u1407\x07K\x02\x02\u1407\u140E\x07\xA9\x02" +
    "\x02\u1408\u1409\x07i\x02\x02\u1409\u140E\x07\u0154\x02\x02\u140A\u140B" +
    "\x07\xF9\x02\x02\u140B\u140E\x07\x8E\x02\x02\u140C\u140E\tG\x02\x02\u140D" +
    "\u1406\x03\x02\x02\x02\u140D\u1408\x03\x02\x02\x02\u140D\u140A\x03\x02" +
    "\x02\x02\u140D\u140C\x03\x02\x02\x02\u140E\u0259\x03\x02\x02\x02\u140F" +
    "\u1410\x07I\x02\x02\u1410\u1435\x05\u0480\u0241\x02\u1411\u1412\x07\t" +
    "\x02\x02\u1412\u1413\x07\u020B\x02\x02\u1413\u1414\x05\u025C\u012F\x02" +
    "\u1414\u1417\x07\u0214\x02\x02\u1415\u1418\x05\u0460\u0231\x02\u1416\u1418" +
    "\x07\u01E0\x02\x02\u1417\u1415\x03\x02\x02\x02\u1417\u1416\x03\x02\x02" +
    "\x02\u1418\u1435\x03\x02\x02\x02\u1419\u141B\x07\x14\x02\x02\u141A\u141C" +
    "\x05\u0402\u0202\x02\u141B\u141A\x03\x02\x02\x02\u141B\u141C\x03\x02\x02" +
    "\x02\u141C\u1426\x03\x02\x02\x02\u141D\u1427\x05\u026E\u0138\x02\u141E" +
    "\u1423\x05\u026A\u0136\x02\u141F\u1420\x07\u0198\x02\x02\u1420\u1422\x05" +
    "\u026A\u0136\x02\u1421\u141F\x03\x02\x02\x02\u1422\u1425\x03\x02\x02\x02" +
    "\u1423\u1421\x03\x02\x02\x02\u1423\u1424\x03\x02\x02\x02\u1424\u1427\x03" +
    "\x02\x02\x02\u1425\u1423\x03\x02\x02\x02\u1426\u141D\x03\x02\x02\x02\u1426" +
    "\u141E\x03\x02\x02\x02\u1427\u1435\x03\x02\x02\x02\u1428\u142A\x07\u021C" +
    "\x02\x02\u1429\u142B\tH\x02\x02\u142A\u1429\x03\x02\x02\x02\u142A\u142B" +
    "\x03\x02\x02\x02\u142B\u142C\x03\x02\x02\x02\u142C\u1435\x05\u029C\u014F" +
    "\x02\u142D\u142E\x07\u0224\x02\x02\u142E\u142F\x07\u020B\x02\x02\u142F" +
    "\u1430\x07\u0212\x02\x02\u1430\u1431\x07\t\x02\x02\u1431\u1435\x05\u0272" +
    "\u013A\x02\u1432\u1433\x06\u012Ew\x02\u1433\u1435\x07:\x02\x02\u1434\u140F" +
    "\x03\x02\x02\x02\u1434\u1411\x03\x02\x02\x02\u1434\u1419\x03\x02\x02\x02" +
    "\u1434\u1428\x03\x02\x02\x02\u1434\u142D\x03\x02\x02\x02\u1434\u1432\x03" +
    "\x02\x02\x02\u1435\u025B\x03\x02\x02\x02\u1436\u1439\x05\u025E\u0130\x02" +
    "\u1437\u1439\x05\u0262\u0132\x02\u1438\u1436\x03\x02\x02\x02\u1438\u1437" +
    "\x03\x02\x02\x02\u1439\u025D\x03\x02\x02\x02\u143A\u143F\x05\u0260\u0131" +
    "\x02\u143B\u143C\x07\u0198\x02\x02\u143C\u143E\x05\u0260\u0131\x02\u143D" +
    "\u143B\x03\x02\x02\x02\u143E\u1441\x03\x02\x02\x02\u143F\u143D\x03\x02" +
    "\x02\x02\u143F\u1440\x03\x02\x02\x02\u1440\u025F\x03\x02\x02\x02\u1441" +
    "\u143F\x03\x02\x02\x02\u1442\u1444\x05\u0446\u0224\x02\u1443\u1445\x05" +
    "\u0264\u0133\x02\u1444\u1443\x03\x02\x02\x02\u1444\u1445\x03\x02\x02\x02" +
    "\u1445\u0261\x03\x02\x02\x02\u1446\u1447\x05\u0446\u0224\x02\u1447\u1448" +
    "\x07\"\x02\x02\u1448\u1449\x07\u019B\x02\x02\u1449\u144A\x056\x1C\x02" +
    "\u144A\u144C\x07\u019C\x02\x02\u144B\u144D\x05\u0264\u0133\x02\u144C\u144B" +
    "\x03\x02\x02\x02\u144C\u144D\x03\x02\x02\x02\u144D\u0263\x03\x02\x02\x02" +
    "\u144E\u144F\x05\u0190\xC9\x02\u144F\u1451\x07\u019B\x02\x02\u1450\u1452" +
    "\x05\u0268\u0135\x02\u1451\u1450\x03\x02\x02\x02\u1451\u1452\x03\x02\x02" +
    "\x02\u1452\u1453\x03\x02\x02\x02\u1453\u1454\x07\u019C\x02\x02\u1454\u0265" +
    "\x03\x02\x02\x02\u1455\u1458\x05\u0460\u0231\x02\u1456\u1458\x07\u0253" +
    "\x02\x02\u1457\u1455\x03\x02\x02\x02\u1457\u1456\x03\x02\x02\x02\u1458" +
    "\u0267\x03\x02\x02\x02\u1459\u145E\x05\u0266\u0134\x02\u145A\u145B\x07" +
    "\u0198\x02\x02\u145B\u145D\x05\u0266\u0134\x02\u145C\u145A\x03\x02\x02" +
    "\x02\u145D\u1460\x03\x02\x02\x02\u145E\u145C\x03\x02\x02\x02\u145E\u145F" +
    "\x03\x02\x02\x02\u145F\u0269\x03\x02\x02\x02\u1460\u145E\x03\x02\x02\x02" +
    "\u1461\u1471\tI\x02\x02\u1462\u1464\x05\u026C\u0137\x02\u1463\u1462\x03" +
    "\x02\x02\x02\u1463\u1464\x03\x02\x02\x02\u1464\u1465\x03\x02\x02\x02\u1465" +
    "\u1471\x07\xB9\x02\x02\u1466\u1467\x07\u0115\x02\x02\u1467\u1469\x07\xB9" +
    "\x02\x02\u1468\u146A\x05\u0306\u0184\x02\u1469\u1468\x03\x02\x02\x02\u1469" +
    "\u146A\x03\x02\x02\x02\u146A\u1471\x03\x02\x02\x02\u146B\u146C\x06\u0136" +
    "x\x02\u146C\u146D\x07\u010D\x02\x02\u146D\u1471\x07\t\x02\x02\u146E\u146F" +
    "\x06\u0136y\x02\u146F\u1471\x07\u0249\x02\x02\u1470\u1461\x03\x02\x02" +
    "\x02\u1470\u1463\x03\x02\x02\x02\u1470\u1466\x03\x02\x02\x02\u1470\u146B" +
    "\x03\x02\x02\x02\u1470\u146E\x03\x02\x02\x02\u1471\u026B\x03\x02\x02\x02" +
    "\u1472\u1473\tJ\x02\x02\u1473\u026D\x03\x02\x02\x02\u1474\u147C\t\x14" +
    "\x02\x02\u1475\u1476\x07\u02AC\x02\x02\u1476\u1477\x07\u0258\x02\x02\u1477" +
    "\u147D\x07\u0226\x02\x02\u1478\u147A\x05\u0462\u0232\x02\u1479\u147B\x05" +
    "\u0270\u0139\x02\u147A\u1479\x03\x02\x02\x02\u147A\u147B\x03\x02\x02\x02" +
    "\u147B\u147D\x03\x02\x02\x02\u147C\u1475\x03\x02\x02\x02\u147C\u1478\x03" +
    "\x02\x02\x02\u147C\u147D\x03\x02\x02\x02\u147D\u026F\x03\x02\x02\x02\u147E" +
    "\u147F\x06\u0139z\x02\u147F\u1480\x07\u01FC\x02\x02\u1480\u1485\x07\x8B" +
    "\x02\x02\u1481\u1482\x07\u02AC\x02\x02\u1482\u1483\x07\u0258\x02\x02\u1483" +
    "\u1485\x07\u0226\x02\x02\u1484\u147E\x03\x02\x02\x02\u1484\u1481\x03\x02" +
    "\x02\x02\u1485\u0271\x03\x02\x02\x02\u1486\u1487\x05\u0446\u0224\x02\u1487" +
    "\u1489\x05\u0278\u013D\x02\u1488\u148A\x05\u0264\u0133\x02\u1489\u1488" +
    "\x03\x02\x02\x02\u1489\u148A\x03\x02\x02\x02\u148A\u148D\x03\x02\x02\x02" +
    "\u148B\u148C\x07\u020A\x02\x02\u148C\u148E\x07\xB1\x02\x02\u148D\u148B" +
    "\x03\x02\x02\x02\u148D\u148E\x03\x02\x02\x02\u148E\u1491\x03\x02\x02\x02" +
    "\u148F\u1491\x05\u0274\u013B\x02\u1490\u1486\x03\x02\x02\x02\u1490\u148F" +
    "\x03\x02\x02\x02\u1491\u0273\x03\x02\x02\x02\u1492\u1497\x05\u0276\u013C" +
    "\x02\u1493\u1494\x07\u0198\x02\x02\u1494\u1496\x05\u0276\u013C\x02\u1495" +
    "\u1493\x03\x02\x02\x02\u1496\u1499\x03\x02\x02\x02\u1497\u1495\x03\x02" +
    "\x02\x02\u1497\u1498\x03\x02\x02\x02\u1498\u0275\x03\x02\x02\x02\u1499" +
    "\u1497\x03\x02\x02\x02\u149A\u149C\x05\u0446\u0224\x02\u149B\u149D\x05" +
    "\u0264\u0133\x02\u149C\u149B\x03\x02\x02\x02\u149C\u149D\x03\x02\x02\x02" +
    "\u149D\u14A0\x03\x02\x02\x02\u149E\u149F\x07\u020A\x02\x02\u149F\u14A1" +
    "\x07\xB1\x02\x02\u14A0\u149E\x03\x02\x02\x02\u14A0\u14A1\x03\x02\x02\x02" +
    "\u14A1\u0277\x03\x02\x02\x02\u14A2\u14A3\x07\"\x02\x02\u14A3\u14A4\x07" +
    "\u019B\x02\x02\u14A4\u14A5\x056\x1C\x02\u14A5\u14A6\x07\u019C\x02\x02" +
    "\u14A6\u0279\x03\x02\x02\x02\u14A7\u14AC\x05\u027C\u013F\x02\u14A8\u14AC" +
    "\x05\u0286\u0144\x02\u14A9\u14AC\x05\u0288\u0145\x02\u14AA\u14AC\x05\u028C" +
    "\u0147\x02\u14AB\u14A7\x03\x02\x02\x02\u14AB\u14A8\x03\x02\x02\x02\u14AB" +
    "\u14A9\x03\x02\x02\x02\u14AB\u14AA\x03\x02\x02\x02\u14AC\u027B\x03\x02" +
    "\x02\x02\u14AD\u14AE\x07\u01CD\x02\x02\u14AE\u14AF\x07\u02E5\x02\x02\u14AF" +
    "\u14B0\x07\u0202\x02\x02\u14B0\u14B1\x05\u0460\u0231\x02\u14B1\u14B3\x07" +
    "\u0164\x02\x02\u14B2\u14B4\x05\u049E\u0250\x02\u14B3\u14B2\x03\x02\x02" +
    "\x02\u14B3\u14B4\x03\x02\x02\x02\u14B4\u14B5\x03\x02\x02\x02\u14B5\u14B7" +
    "\tK\x02\x02\u14B6\u14B8\x05\u027E\u0140\x02\u14B7\u14B6\x03\x02\x02\x02" +
    "\u14B7\u14B8\x03\x02\x02\x02\u14B8\u14BA\x03\x02\x02\x02\u14B9\u14BB\x05" +
    "\u0282\u0142\x02\u14BA\u14B9\x03\x02\x02\x02\u14BA\u14BB\x03\x02\x02\x02" +
    "\u14BB\u14BD\x03\x02\x02\x02\u14BC\u14BE\x05\u0284\u0143\x02\u14BD\u14BC" +
    "\x03\x02\x02\x02\u14BD\u14BE\x03\x02\x02\x02\u14BE\u027D\x03\x02\x02\x02" +
    "\u14BF\u14C1\x07\u02E7\x02\x02\u14C0\u14C2\x05\u049E\u0250\x02\u14C1\u14C0" +
    "\x03\x02\x02\x02\u14C1\u14C2\x03\x02\x02\x02\u14C2\u14C3\x03\x02\x02\x02" +
    "\u14C3\u14CA\x05\u0280\u0141\x02\u14C4\u14C6\x07\u0198\x02\x02\u14C5\u14C4" +
    "\x03\x02\x02\x02\u14C5\u14C6\x03\x02\x02\x02\u14C6\u14C7\x03\x02\x02\x02" +
    "\u14C7\u14C9\x05\u0280\u0141\x02\u14C8\u14C5\x03\x02\x02\x02\u14C9\u14CC" +
    "\x03\x02\x02\x02\u14CA\u14C8\x03\x02\x02\x02\u14CA\u14CB\x03\x02\x02\x02" +
    "\u14CB\u027F\x03\x02\x02\x02\u14CC\u14CA\x03\x02\x02\x02\u14CD\u14D0\x07" +
    "\u017E\x02\x02\u14CE\u14CF\x07\u018A\x02\x02\u14CF\u14D1\x07\u017E\x02" +
    "\x02\u14D0\u14CE\x03\x02\x02\x02\u14D0\u14D1\x03\x02\x02\x02\u14D1\u0281" +
    "\x03\x02\x02\x02\u14D2\u14D4\x07\u02E4\x02\x02\u14D3\u14D5\x05\u049E\u0250" +
    "\x02\u14D4\u14D3\x03\x02\x02\x02\u14D4\u14D5\x03\x02\x02\x02\u14D5\u14D6" +
    "\x03\x02\x02\x02\u14D6\u14D7\x07\u017E\x02\x02\u14D7\u0283\x03\x02\x02" +
    "\x02\u14D8\u14D9\tL\x02\x02\u14D9\u0285\x03\x02\x02\x02\u14DA\u14DB\x07" +
    "\u01AE\x02\x02\u14DB\u14DC\x07\u02E5\x02\x02\u14DC\u14DD\x07\u0202\x02" +
    "\x02\u14DD\u14DF\x05\u045A\u022E\x02\u14DE\u14E0\x05\u027E\u0140\x02\u14DF" +
    "\u14DE\x03\x02\x02\x02\u14DF\u14E0\x03\x02\x02\x02\u14E0\u14E2\x03\x02" +
    "\x02\x02\u14E1\u14E3\x05\u0282\u0142\x02\u14E2\u14E1\x03\x02\x02\x02\u14E2" +
    "\u14E3\x03\x02\x02\x02\u14E3\u14E5\x03\x02\x02\x02\u14E4\u14E6\x05\u0284" +
    "\u0143\x02\u14E5\u14E4\x03\x02\x02\x02\u14E5\u14E6\x03\x02\x02\x02\u14E6" +
    "\u14E8\x03\x02\x02\x02\u14E7\u14E9\x07\u01FA\x02\x02\u14E8\u14E7\x03\x02" +
    "\x02\x02\u14E8\u14E9\x03\x02\x02\x02\u14E9\u0287\x03\x02\x02\x02\u14EA" +
    "\u14EB\x07\u026D\x02\x02\u14EB\u14EC\x07\u02E5\x02\x02\u14EC\u14ED\x07" +
    "\u0202\x02\x02\u14ED\u14F0\x05\u0460\u0231\x02\u14EE\u14EF\x07\u01FC\x02" +
    "\x02\u14EF\u14F1\x05\u028A\u0146\x02\u14F0\u14EE\x03\x02\x02\x02\u14F0" +
    "\u14F1\x03\x02\x02\x02\u14F1\u0289\x03\x02";
MySQLParser._serializedATNSegment11 = "\x02\x02\u14F2\u14F9\x05\u046E\u0238\x02\u14F3\u14F5\x07\u0198\x02\x02" +
    "\u14F4\u14F3\x03\x02\x02\x02\u14F4\u14F5\x03\x02\x02\x02\u14F5\u14F6\x03" +
    "\x02\x02\x02\u14F6\u14F8\x05\u046E\u0238\x02\u14F7\u14F4\x03\x02\x02\x02" +
    "\u14F8\u14FB\x03\x02\x02\x02\u14F9\u14F7\x03\x02\x02\x02\u14F9\u14FA\x03" +
    "\x02\x02\x02\u14FA\u028B\x03\x02\x02\x02\u14FB\u14F9\x03\x02\x02\x02\u14FC" +
    "\u14FD\x07\u01E9\x02\x02\u14FD\u14FE\x07\u02E5\x02\x02\u14FE\u14FF\x07" +
    "\u0202\x02\x02\u14FF\u1501\x05\u045A\u022E\x02\u1500\u1502\x07\u01FA\x02" +
    "\x02\u1501\u1500\x03\x02\x02\x02\u1501\u1502\x03\x02\x02\x02\u1502\u028D" +
    "\x03\x02\x02\x02\u1503\u150A\x05\u0290\u0149\x02\u1504\u150A\x05\u0292" +
    "\u014A\x02\u1505\u150A\x05\u0296\u014C\x02\u1506\u150A\x05\u0298\u014D" +
    "\x02\u1507\u1508\x06\u0148{\x02\u1508\u150A\x05\u029A\u014E\x02\u1509" +
    "\u1503\x03\x02\x02\x02\u1509\u1504\x03\x02\x02\x02\u1509\u1505\x03\x02" +
    "\x02\x02\u1509\u1506\x03\x02\x02\x02\u1509\u1507\x03\x02\x02\x02\u150A" +
    "\u028F\x03\x02\x02\x02\u150B\u150C\tM\x02\x02\u150C\u150F\x05\u0446\u0224" +
    "\x02\u150D\u1510\x05\u047C\u023F\x02\u150E\u1510\x05\u040E\u0208\x02\u150F" +
    "\u150D\x03\x02\x02\x02\u150F\u150E\x03\x02\x02\x02\u150F\u1510\x03\x02" +
    "\x02\x02\u1510\u0291\x03\x02\x02\x02\u1511\u151C\tM\x02\x02\u1512\u1513" +
    "\x06\u014A|\x02\u1513\u151D\x07\x8C\x02\x02\u1514\u1515\x06\u014A}\x02" +
    "\u1515\u151D\x07\xFC\x02\x02\u1516\u1517\x06\u014A~\x02\u1517\u1518\x07" +
    "\x16\x02\x02\u1518\u1519\x07\u0181\x02\x02\u1519\u151D\x05\u0494\u024B" +
    "\x02\u151A\u151B\x06\u014A\x7F\x02\u151B\u151D\x07A\x02\x02\u151C\u1512" +
    "\x03\x02\x02\x02\u151C\u1514\x03\x02\x02\x02\u151C\u1516\x03\x02\x02\x02" +
    "\u151C\u151A\x03\x02\x02\x02\u151C\u151D\x03\x02\x02\x02\u151D\u151E\x03" +
    "\x02\x02\x02\u151E\u151F\x05\u0294\u014B\x02\u151F\u0293\x03\x02\x02\x02" +
    "\u1520\u152D\x05\u010E\x88\x02\u1521\u1526\x06\u014B\x80\x02\u1522\u1527" +
    "\x05\xE0q\x02\u1523\u1527\x05\xECw\x02\u1524\u1527\x05\u010C\x87\x02\u1525" +
    "\u1527\x05\u019A\xCE\x02\u1526\u1522\x03\x02\x02\x02\u1526\u1523\x03\x02" +
    "\x02\x02\u1526\u1524\x03\x02\x02\x02\u1526\u1525\x03\x02\x02\x02\u1527" +
    "\u152D\x03\x02\x02\x02\u1528\u1529\x06\u014B\x81\x02\u1529\u152A\x07\u01FC" +
    "\x02\x02\u152A\u152B\x07d\x02\x02\u152B\u152D\x05\u046E\u0238\x02\u152C" +
    "\u1520\x03\x02\x02\x02\u152C\u1521\x03\x02\x02\x02\u152C\u1528\x03\x02" +
    "\x02\x02\u152D\u0295\x03\x02\x02\x02\u152E\u152F\x07\x19\x02\x02\u152F" +
    "\u1530\x05\u0494\u024B\x02\u1530\u0297\x03\x02\x02\x02\u1531\u1532\x07" +
    "\u029B\x02\x02\u1532\u1533\x05\u0460\u0231\x02\u1533\u0299\x03\x02\x02" +
    "\x02\u1534\u1535\x07\u02EA\x02\x02\u1535\u029B\x03\x02\x02\x02\u1536\u1537" +
    "\b\u014F\x01\x02\u1537\u153D\x05\u029E\u0150\x02\u1538\u153A\x07\u0217" +
    "\x02\x02\u1539\u153B\x05\u02F0\u0179\x02\u153A\u1539\x03\x02\x02\x02\u153A" +
    "\u153B\x03\x02\x02\x02\u153B\u153C\x03\x02\x02\x02\u153C\u153E\tN\x02" +
    "\x02\u153D\u1538\x03\x02\x02\x02\u153D\u153E\x03\x02\x02\x02\u153E\u1542" +
    "\x03\x02\x02\x02\u153F\u1540\x07\u023F\x02\x02\u1540\u1542\x05\u029C\u014F" +
    "\x06\u1541\u1536\x03\x02\x02\x02\u1541\u153F\x03\x02\x02\x02\u1542\u154E" +
    "\x03\x02\x02\x02\u1543\u1544\f\x05\x02\x02\u1544\u1545\tO\x02\x02\u1545" +
    "\u154D\x05\u029C\u014F\x06\u1546\u1547\f\x04\x02\x02\u1547\u1548\x07\u02AF" +
    "\x02\x02\u1548\u154D\x05\u029C\u014F\x05\u1549\u154A\f\x03\x02\x02\u154A" +
    "\u154B\tP\x02\x02\u154B\u154D\x05\u029C\u014F\x04\u154C\u1543\x03\x02" +
    "\x02\x02\u154C\u1546\x03\x02\x02\x02\u154C\u1549\x03\x02\x02\x02\u154D" +
    "\u1550\x03\x02\x02\x02\u154E\u154C\x03\x02\x02\x02\u154E\u154F\x03\x02" +
    "\x02\x02\u154F\u029D\x03\x02\x02\x02\u1550\u154E\x03\x02\x02\x02\u1551" +
    "\u1552\b\u0150\x01\x02\u1552\u1553\x05\u02A2\u0152\x02\u1553\u1565\x03" +
    "\x02\x02\x02\u1554\u1555\f\x05\x02\x02\u1555\u1557\x07\u0217\x02\x02\u1556" +
    "\u1558\x05\u02F0\u0179\x02\u1557\u1556\x03\x02\x02\x02\u1557\u1558\x03" +
    "\x02\x02\x02\u1558\u1559\x03\x02\x02\x02\u1559\u1564\x07\u0242\x02\x02" +
    "\u155A\u155B\f\x04\x02\x02\u155B\u155C\x05\u02A0\u0151\x02\u155C\u155D" +
    "\x05\u02A2\u0152\x02\u155D\u1564\x03\x02\x02\x02\u155E\u155F\f\x03\x02" +
    "\x02\u155F\u1560\x05\u02A0\u0151\x02\u1560\u1561\tQ\x02\x02\u1561\u1562" +
    "\x05\u011A\x8E\x02\u1562\u1564\x03\x02\x02\x02\u1563\u1554\x03\x02\x02" +
    "\x02\u1563\u155A\x03\x02\x02\x02\u1563\u155E\x03\x02\x02\x02\u1564\u1567" +
    "\x03\x02\x02\x02\u1565\u1563\x03\x02\x02\x02\u1565\u1566\x03\x02\x02\x02" +
    "\u1566\u029F\x03\x02\x02\x02\u1567\u1565\x03\x02\x02\x02\u1568\u1569\t" +
    "R\x02\x02\u1569\u02A1\x03\x02\x02\x02\u156A\u1578\x05\u02A6\u0154\x02" +
    "\u156B\u156D\x05\u02F0\u0179\x02\u156C\u156B\x03\x02\x02\x02\u156C\u156D" +
    "\x03\x02\x02\x02\u156D\u156E\x03\x02\x02\x02\u156E\u1579\x05\u02A4\u0153" +
    "\x02\u156F\u1570\x06\u0152\x88\x02\u1570\u1572\x07\u02FD\x02\x02\u1571" +
    "\u1573\x07\u02BC\x02\x02\u1572\u1571\x03\x02\x02\x02\u1572\u1573\x03\x02" +
    "\x02\x02\u1573\u1574\x03\x02\x02\x02\u1574\u1579\x05\u02FC\u017F\x02\u1575" +
    "\u1576\x07\u013B\x02\x02\u1576\u1577\x07\u0220\x02\x02\u1577\u1579\x05" +
    "\u02A6\u0154\x02\u1578\u156C\x03\x02\x02\x02\u1578\u156F\x03\x02\x02\x02" +
    "\u1578\u1575\x03\x02\x02\x02\u1578\u1579\x03\x02\x02\x02\u1579\u02A3\x03" +
    "\x02\x02\x02\u157A\u1580\x07\u0214\x02\x02\u157B\u1581\x05\u011A\x8E\x02" +
    "\u157C\u157D\x07\u019B\x02\x02\u157D\u157E\x05\u02EC\u0177\x02\u157E\u157F" +
    "\x07\u019C\x02\x02\u157F\u1581\x03\x02\x02\x02\u1580\u157B\x03\x02\x02" +
    "\x02\u1580\u157C\x03\x02\x02\x02\u1581\u1590\x03\x02\x02\x02\u1582\u1583" +
    "\x07\u01B5\x02\x02\u1583\u1584\x05\u02A6\u0154\x02\u1584\u1585\x07\u01B0" +
    "\x02\x02\u1585\u1586\x05\u02A2\u0152\x02\u1586\u1590\x03\x02\x02\x02\u1587" +
    "\u1588\x07\u0220\x02\x02\u1588\u158B\x05\u02A8\u0155\x02\u1589\u158A\x07" +
    "\x86\x02\x02\u158A\u158C\x05\u02A8\u0155\x02\u158B\u1589\x03\x02\x02\x02" +
    "\u158B\u158C\x03\x02\x02\x02\u158C\u1590\x03\x02\x02\x02\u158D\u158E\x07" +
    "\u025C\x02\x02\u158E\u1590\x05\u02A6\u0154\x02\u158F\u157A\x03\x02\x02" +
    "\x02\u158F\u1582\x03\x02\x02\x02\u158F\u1587\x03\x02\x02\x02\u158F\u158D" +
    "\x03\x02\x02\x02\u1590\u02A5\x03\x02\x02\x02\u1591\u1592\b\u0154\x01\x02" +
    "\u1592\u1593\x05\u02A8\u0155\x02\u1593\u15AE\x03\x02\x02\x02\u1594\u1595" +
    "\f\t\x02\x02\u1595\u1596\x07\u0194\x02\x02\u1596\u15AD\x05\u02A6\u0154" +
    "\n\u1597\u1598\f\b\x02\x02\u1598\u1599\tS\x02\x02\u1599\u15AD\x05\u02A6" +
    "\u0154\t\u159A\u159B\f\x07\x02\x02\u159B\u159C\tT\x02\x02\u159C\u15AD" +
    "\x05\u02A6\u0154\b\u159D\u159E\f\x05\x02\x02\u159E\u159F\tU\x02\x02\u159F" +
    "\u15AD\x05\u02A6\u0154\x06\u15A0\u15A1\f\x04\x02\x02\u15A1\u15A2\x07\u0193" +
    "\x02\x02\u15A2\u15AD\x05\u02A6\u0154\x05\u15A3\u15A4\f\x03\x02\x02\u15A4" +
    "\u15A5\x07\u0196\x02\x02\u15A5\u15AD\x05\u02A6\u0154\x04\u15A6\u15A7\f" +
    "\x06\x02\x02\u15A7\u15A8\tT\x02\x02\u15A8\u15A9\x07\u0211\x02\x02\u15A9" +
    "\u15AA\x05\u029C\u014F\x02\u15AA\u15AB\x05\u02F4\u017B\x02\u15AB\u15AD" +
    "\x03\x02\x02\x02\u15AC\u1594\x03\x02\x02\x02\u15AC\u1597\x03\x02\x02\x02" +
    "\u15AC\u159A\x03\x02\x02\x02\u15AC\u159D\x03\x02\x02\x02\u15AC\u15A0\x03" +
    "\x02\x02\x02\u15AC\u15A3\x03\x02\x02\x02\u15AC\u15A6\x03\x02\x02\x02\u15AD" +
    "\u15B0\x03\x02\x02\x02\u15AE\u15AC\x03\x02\x02\x02\u15AE\u15AF\x03\x02" +
    "\x02\x02\u15AF\u02A7\x03\x02\x02\x02\u15B0\u15AE\x03\x02\x02\x02\u15B1" +
    "\u15B2\b\u0155\x01\x02\u15B2\u161A\x05\u02DC\u016F\x02\u15B3\u15B5\x05" +
    "\u040E\u0208\x02\u15B4\u15B6\x05\u02AC\u0157\x02\u15B5\u15B4\x03\x02\x02" +
    "\x02\u15B5\u15B6\x03\x02\x02\x02\u15B6\u161A\x03\x02\x02\x02\u15B7\u161A" +
    "\x05\u02C4\u0163\x02\u15B8\u161A\x05\u02D6\u016C\x02\u15B9\u161A\x05\u0474" +
    "\u023B\x02\u15BA\u161A\x07\u01A6\x02\x02\u15BB\u161A\x05\u02AE\u0158\x02" +
    "\u15BC\u15BD\x06\u0155\x90\x02\u15BD\u161A\x05\u02B0\u0159\x02\u15BE\u15BF" +
    "\x06\u0155\x91\x02\u15BF\u161A\x05\u02B2\u015A\x02\u15C0\u15C1\tV\x02" +
    "\x02\u15C1\u161A\x05\u02A8\u0155\x10\u15C2\u15C3\x05\u02F2\u017A\x02\u15C3" +
    "\u15C4\x05\u02A8\u0155\x0F\u15C4\u161A\x03\x02\x02\x02\u15C5\u15C7\x07" +
    "\u012F\x02\x02\u15C6\u15C5\x03\x02\x02\x02\u15C6\u15C7\x03\x02\x02\x02" +
    "\u15C7\u15C8\x03\x02\x02\x02\u15C8\u15C9\x07\u019B\x02\x02\u15C9\u15CA" +
    "\x05\u02EC\u0177\x02\u15CA\u15CB\x07\u019C\x02\x02\u15CB\u161A\x03\x02" +
    "\x02\x02\u15CC\u15CE\x07\u01F2\x02\x02\u15CD\u15CC\x03\x02\x02\x02\u15CD" +
    "\u15CE\x03\x02\x02\x02\u15CE\u15CF\x03\x02\x02\x02\u15CF\u161A\x05\u011A" +
    "\x8E\x02\u15D0\u15D1\x07\u019D\x02\x02\u15D1\u15D2\x05\u0460\u0231\x02" +
    "\u15D2\u15D3\x05\u029C\u014F\x02\u15D3\u15D4\x07\u019E\x02\x02\u15D4\u161A" +
    "\x03\x02\x02\x02\u15D5\u15D6\x07\u022F\x02\x02\u15D6\u15D7\x05\u02BE\u0160" +
    "\x02\u15D7\u15D8\x07>\x02\x02\u15D8\u15D9\x07\u019B\x02\x02\u15D9\u15DB" +
    "\x05\u02A6\u0154\x02\u15DA\u15DC\x05\u02C2\u0162\x02\u15DB\u15DA\x03\x02" +
    "\x02\x02\u15DB\u15DC\x03\x02\x02\x02\u15DC\u15DD\x03\x02\x02\x02\u15DD" +
    "\u15DE\x07\u019C\x02\x02\u15DE\u161A\x03\x02\x02\x02\u15DF\u15E0\x07\u01B7" +
    "\x02\x02\u15E0\u161A\x05\u02A8\u0155\n\u15E1\u15E2\x07\u01C2\x02\x02\u15E2" +
    "\u15E3\x07\u019B\x02\x02\u15E3\u15E4\x05\u029C\u014F\x02\u15E4\u15E5\x07" +
    "\u01B1\x02\x02\u15E5\u15E7\x05\u02EA\u0176\x02\u15E6\u15E8\x05\u02AA\u0156" +
    "\x02\u15E7\u15E6\x03\x02\x02\x02\u15E7\u15E8\x03\x02\x02\x02\u15E8\u15E9" +
    "\x03\x02\x02\x02\u15E9\u15EA\x07\u019C\x02\x02\u15EA\u161A\x03\x02\x02" +
    "\x02\u15EB\u15ED\x07\u01C1\x02\x02\u15EC\u15EE\x05\u029C\u014F\x02\u15ED" +
    "\u15EC\x03\x02\x02\x02\u15ED\u15EE\x03\x02\x02\x02\u15EE\u15F2\x03\x02" +
    "\x02\x02\u15EF\u15F0\x05\u02E4\u0173\x02\u15F0\u15F1\x05\u02E6\u0174\x02" +
    "\u15F1\u15F3\x03\x02\x02\x02\u15F2\u15EF\x03\x02\x02\x02\u15F3\u15F4\x03" +
    "\x02\x02\x02\u15F4\u15F2\x03\x02\x02\x02\u15F4\u15F5\x03\x02\x02\x02\u15F5" +
    "\u15F7\x03\x02\x02\x02\u15F6\u15F8\x05\u02E8\u0175\x02\u15F7\u15F6\x03" +
    "\x02\x02\x02\u15F7\u15F8\x03\x02\x02\x02\u15F8\u15F9\x03\x02\x02\x02\u15F9" +
    "\u15FA\x07\x12\x02\x02\u15FA\u161A\x03\x02\x02\x02\u15FB\u15FC\x07\u01CB" +
    "\x02\x02\u15FC\u15FD\x07\u019B\x02\x02\u15FD\u15FE\x05\u029C\u014F\x02" +
    "\u15FE\u15FF\x07\u0198\x02\x02\u15FF\u1600\x05\u02EA\u0176\x02\u1600\u1601" +
    "\x07\u019C\x02\x02\u1601\u161A\x03\x02\x02\x02\u1602\u1603\x07\u01CB\x02" +
    "\x02\u1603\u1604\x07\u019B\x02\x02\u1604\u1605\x05\u029C\u014F\x02\u1605" +
    "\u1606\x07\u029C\x02\x02\u1606\u1607\x05\u03A0\u01D1\x02\u1607\u1608\x07" +
    "\u019C\x02\x02\u1608\u161A\x03\x02\x02\x02\u1609\u160A\x07\u01E0\x02\x02" +
    "\u160A\u160B\x07\u019B\x02\x02\u160B\u160C\x05\u0468\u0235\x02\u160C\u160D" +
    "\x07\u019C\x02\x02\u160D\u161A\x03\x02\x02\x02\u160E\u160F\x07\u02A1\x02" +
    "\x02\u160F\u1610\x07\u019B\x02\x02\u1610\u1611\x05\u0468\u0235\x02\u1611" +
    "\u1612\x07\u019C\x02\x02\u1612\u161A\x03\x02\x02\x02\u1613\u1614\x07\u0211" +
    "\x02\x02\u1614\u1615\x05\u029C\u014F\x02\u1615\u1616\x05\u02F4\u017B\x02" +
    "\u1616\u1617\x07\u0189\x02\x02\u1617\u1618\x05\u029C\u014F\x02\u1618\u161A" +
    "\x03\x02\x02\x02\u1619\u15B1\x03\x02\x02\x02\u1619\u15B3\x03\x02\x02\x02" +
    "\u1619\u15B7\x03\x02\x02\x02\u1619\u15B8\x03\x02\x02\x02\u1619\u15B9\x03" +
    "\x02\x02\x02\u1619\u15BA\x03\x02\x02\x02\u1619\u15BB\x03\x02\x02\x02\u1619" +
    "\u15BC\x03\x02\x02\x02\u1619\u15BE\x03\x02\x02\x02\u1619\u15C0\x03\x02" +
    "\x02\x02\u1619\u15C2\x03\x02\x02\x02\u1619\u15C6\x03\x02\x02\x02\u1619" +
    "\u15CD\x03\x02\x02\x02\u1619\u15D0\x03\x02\x02\x02\u1619\u15D5\x03\x02" +
    "\x02\x02\u1619\u15DF\x03\x02\x02\x02\u1619\u15E1\x03\x02\x02\x02\u1619" +
    "\u15EB\x03\x02\x02\x02\u1619\u15FB\x03\x02\x02\x02\u1619\u1602\x03\x02" +
    "\x02\x02\u1619\u1609\x03\x02\x02\x02\u1619\u160E\x03\x02\x02\x02\u1619" +
    "\u1613\x03\x02\x02\x02\u161A\u1623\x03\x02\x02\x02\u161B\u161C\f\x11\x02" +
    "\x02\u161C\u161D\x07\u017D\x02\x02\u161D\u1622\x05\u02A8\u0155\x12\u161E" +
    "\u161F\f\x17\x02\x02\u161F\u1620\x07\u01C6\x02\x02\u1620\u1622\x05\u0494" +
    "\u024B\x02\u1621\u161B\x03\x02\x02\x02\u1621\u161E\x03\x02\x02\x02\u1622" +
    "\u1625\x03\x02\x02\x02\u1623\u1621\x03\x02\x02\x02\u1623\u1624\x03\x02" +
    "\x02\x02\u1624\u02A9\x03\x02\x02\x02\u1625\u1623\x03\x02\x02\x02\u1626" +
    "\u1627\x06\u0156\x94\x02\u1627\u1628\x07\u02FB\x02\x02\u1628\u02AB\x03" +
    "\x02\x02\x02\u1629\u162A\x06\u0157\x95\x02\u162A\u162B\x07\u01A0\x02\x02" +
    "\u162B\u1630\x05\u047A\u023E\x02\u162C\u162D\x06\u0157\x96\x02\u162D\u162E" +
    "\x07\u01A1\x02\x02\u162E\u1630\x05\u047A\u023E\x02\u162F\u1629\x03\x02" +
    "\x02\x02\u162F\u162C\x03\x02\x02\x02\u1630\u02AD\x03\x02\x02\x02\u1631" +
    "\u1632\x07H\x02\x02\u1632\u1634\x07\u019B\x02\x02\u1633\u1635\x07\u01E6" +
    "\x02\x02\u1634\u1633\x03\x02\x02\x02\u1634\u1635\x03\x02\x02\x02\u1635" +
    "\u1636\x03\x02\x02\x02\u1636\u1637\x05\u02BC\u015F\x02\u1637\u163A\x07" +
    "\u019C\x02\x02\u1638\u1639\x06\u0158\x97\x02\u1639\u163B\x05\u02B4\u015B" +
    "\x02\u163A\u1638\x03\x02\x02\x02\u163A\u163B\x03\x02\x02\x02\u163B\u16B5" +
    "\x03\x02\x02\x02\u163C\u163D\tW\x02\x02\u163D\u163E\x07\u019B\x02\x02" +
    "\u163E\u163F\x05\u02BC\u015F\x02\u163F\u1642\x07\u019C\x02\x02\u1640\u1641" +
    "\x06\u0158\x98\x02\u1641\u1643\x05\u02B4\u015B\x02\u1642\u1640\x03\x02" +
    "\x02\x02\u1642\u1643\x03\x02\x02\x02\u1643\u16B5\x03\x02\x02\x02\u1644" +
    "\u1645\x06\u0158\x99\x02\u1645\u16B5\x05\u02BA\u015E\x02\u1646\u1647\x07" +
    "\u01CC\x02\x02\u1647\u1649\x07\u019B\x02\x02\u1648\u164A\x07\u01AD\x02" +
    "\x02\u1649\u1648\x03\x02\x02\x02\u1649\u164A\x03\x02\x02\x02\u164A\u164B" +
    "\x03\x02\x02\x02\u164B\u164C\x07\u018B\x02\x02\u164C\u164F\x07\u019C\x02" +
    "\x02\u164D\u164E\x06\u0158\x9A\x02\u164E\u1650\x05\u02B4\u015B\x02\u164F" +
    "\u164D\x03\x02\x02\x02\u164F\u1650\x03\x02\x02\x02\u1650\u16B5\x03\x02" +
    "\x02\x02\u1651\u1652\x07\u01CC\x02\x02\u1652\u165A\x07\u019B\x02\x02\u1653" +
    "\u1655\x07\u01AD\x02\x02\u1654\u1653\x03\x02\x02\x02\u1654\u1655\x03\x02" +
    "\x02\x02\u1655\u1656\x03\x02\x02\x02\u1656\u165B\x07\u018B\x02\x02\u1657" +
    "\u165B\x05\u02BC\u015F\x02\u1658\u1659\x07\u01E6\x02\x02\u1659\u165B\x05" +
    "\u02EC\u0177\x02\u165A\u1654\x03\x02\x02\x02\u165A\u1657\x03\x02\x02\x02" +
    "\u165A\u1658\x03\x02\x02\x02\u165B\u165C\x03\x02\x02\x02\u165C\u165F\x07" +
    "\u019C\x02\x02\u165D\u165E\x06\u0158\x9B\x02\u165E\u1660\x05\u02B4\u015B" +
    "\x02\u165F\u165D\x03\x02\x02\x02\u165F\u1660\x03\x02\x02\x02\u1660\u16B5" +
    "\x03\x02\x02\x02\u1661\u1662\x07\u0238\x02\x02\u1662\u1664\x07\u019B\x02" +
    "\x02\u1663\u1665\x07\u01E6\x02\x02\u1664\u1663\x03\x02\x02\x02\u1664\u1665" +
    "\x03\x02\x02\x02\u1665\u1666\x03\x02\x02\x02\u1666\u1667\x05\u02BC\u015F" +
    "\x02\u1667\u166A\x07\u019C\x02\x02\u1668\u1669\x06\u0158\x9C\x02\u1669" +
    "\u166B\x05\u02B4\u015B\x02\u166A\u1668\x03\x02\x02\x02\u166A\u166B\x03" +
    "\x02\x02\x02\u166B\u16B5\x03\x02\x02\x02\u166C\u166D\x07\u0230\x02\x02" +
    "\u166D\u166F\x07\u019B\x02\x02\u166E\u1670\x07\u01E6\x02\x02\u166F\u166E" +
    "\x03\x02\x02\x02\u166F\u1670\x03\x02\x02\x02\u1670\u1671\x03\x02\x02\x02" +
    "\u1671\u1672\x05\u02BC\u015F\x02\u1672\u1675\x07\u019C\x02\x02\u1673\u1674" +
    "\x06\u0158\x9D\x02\u1674\u1676\x05\u02B4\u015B\x02\u1675\u1673\x03\x02" +
    "\x02\x02\u1675\u1676\x03\x02\x02\x02\u1676\u16B5\x03\x02\x02\x02\u1677" +
    "\u1678\x07\u0280\x02\x02\u1678\u1679\x07\u019B\x02\x02\u1679\u167A\x05" +
    "\u02BC\u015F\x02\u167A\u167D\x07\u019C\x02\x02\u167B\u167C\x06\u0158\x9E" +
    "\x02\u167C\u167E\x05\u02B4\u015B\x02\u167D\u167B\x03\x02\x02\x02\u167D" +
    "\u167E\x03\x02\x02\x02\u167E\u16B5\x03\x02\x02\x02\u167F\u1680\x07\u02A4" +
    "\x02\x02\u1680\u1681\x07\u019B\x02\x02\u1681\u1682\x05\u02BC\u015F\x02" +
    "\u1682\u1685\x07\u019C\x02\x02\u1683\u1684\x06\u0158\x9F\x02\u1684\u1686" +
    "\x05\u02B4\u015B\x02\u1685\u1683\x03\x02\x02\x02\u1685\u1686\x03\x02\x02" +
    "\x02\u1686\u16B5\x03\x02\x02\x02\u1687\u1688\x07\u027D\x02\x02\u1688\u1689" +
    "\x07\u019B\x02\x02\u1689\u168A\x05\u02BC\u015F\x02\u168A\u168D\x07\u019C" +
    "\x02\x02\u168B\u168C\x06\u0158\xA0\x02\u168C\u168E\x05\u02B4\u015B\x02" +
    "\u168D\u168B\x03\x02\x02\x02\u168D\u168E\x03\x02\x02\x02\u168E\u16B5\x03" +
    "\x02\x02\x02\u168F\u1690\x07\u02A7\x02\x02\u1690\u1691\x07\u019B\x02\x02" +
    "\u1691\u1692\x05\u02BC\u015F\x02\u1692\u1695\x07\u019C\x02\x02\u1693\u1694" +
    "\x06\u0158\xA1\x02\u1694\u1696\x05\u02B4\u015B\x02\u1695\u1693\x03\x02" +
    "\x02\x02\u1695\u1696\x03\x02\x02\x02\u1696\u16B5\x03\x02\x02\x02\u1697" +
    "\u1698\x07\u0285\x02\x02\u1698\u169A\x07\u019B\x02\x02\u1699\u169B\x07" +
    "\u01E6\x02\x02\u169A\u1699\x03\x02\x02\x02\u169A\u169B\x03\x02\x02\x02" +
    "\u169B\u169C\x03\x02\x02\x02\u169C\u169D\x05\u02BC\u015F\x02\u169D\u16A0" +
    "\x07\u019C\x02\x02\u169E\u169F\x06\u0158\xA2\x02\u169F\u16A1\x05\u02B4" +
    "\u015B\x02\u16A0\u169E\x03\x02\x02\x02\u16A0\u16A1\x03\x02\x02\x02\u16A1" +
    "\u16B5\x03\x02\x02\x02\u16A2\u16A3\x07\u0203\x02\x02\u16A3\u16A5\x07\u019B" +
    "\x02\x02\u16A4\u16A6\x07\u01E6\x02\x02\u16A5\u16A4\x03\x02\x02\x02\u16A5" +
    "\u16A6\x03\x02\x02\x02\u16A6\u16A7\x03\x02\x02\x02\u16A7\u16A9\x05\u02EC" +
    "\u0177\x02\u16A8\u16AA\x05\u014A\xA6\x02\u16A9\u16A8\x03\x02\x02\x02\u16A9" +
    "\u16AA\x03\x02\x02\x02\u16AA\u16AD\x03\x02\x02\x02\u16AB\u16AC\x07\u026A" +
    "\x02\x02\u16AC\u16AE\x05\u047C\u023F\x02\u16AD\u16AB\x03\x02\x02\x02\u16AD" +
    "\u16AE\x03\x02\x02\x02\u16AE\u16AF\x03\x02\x02\x02\u16AF\u16B2\x07\u019C" +
    "\x02\x02\u16B0\u16B1\x06\u0158\xA3\x02\u16B1\u16B3\x05\u02B4\u015B\x02" +
    "\u16B2\u16B0\x03\x02\x02\x02\u16B2\u16B3\x03\x02\x02\x02\u16B3\u16B5\x03" +
    "\x02\x02\x02\u16B4\u1631\x03\x02\x02\x02\u16B4\u163C\x03\x02\x02\x02\u16B4" +
    "\u1644\x03\x02\x02\x02\u16B4\u1646\x03\x02\x02\x02\u16B4\u1651\x03\x02" +
    "\x02\x02\u16B4\u1661\x03\x02\x02\x02\u16B4\u166C\x03\x02\x02\x02\u16B4" +
    "\u1677\x03\x02\x02\x02\u16B4\u167F\x03\x02\x02\x02\u16B4\u1687\x03\x02" +
    "\x02\x02\u16B4\u168F\x03\x02\x02\x02\u16B4\u1697\x03\x02\x02\x02\u16B4" +
    "\u16A2\x03\x02\x02\x02\u16B5\u02AF\x03\x02\x02\x02\u16B6\u16B7\x07\u02C0" +
    "\x02\x02\u16B7\u16B8\x07\u019B\x02\x02\u16B8\u16B9\x05\u02EC\u0177\x02" +
    "\u16B9\u16BA\x07\u019C\x02\x02\u16BA\u02B1\x03\x02\x02\x02\u16BB\u16BC" +
    "\tX\x02\x02\u16BC\u16BD\x05\u049C\u024F\x02\u16BD\u16BE\x05\u02B4\u015B" +
    "\x02\u16BE\u16E6\x03\x02\x02\x02\u16BF\u16C0\x07\u02D0\x02\x02\u16C0\u16C1" +
    "\x05\u02FC\u017F\x02\u16C1\u16C2\x05\u02B4\u015B\x02\u16C2\u16E6\x03\x02" +
    "\x02\x02\u16C3\u16C4\tY\x02\x02\u16C4\u16C5\x07\u019B\x02\x02\u16C5\u16C7" +
    "\x05\u029C\u014F\x02\u16C6\u16C8\x05\u02B6\u015C\x02\u16C7\u16C6\x03\x02" +
    "\x02\x02\u16C7\u16C8\x03\x02\x02\x02\u16C8\u16C9\x03\x02\x02\x02\u16C9" +
    "\u16CB\x07\u019C\x02\x02\u16CA\u16CC\x05\u02B8\u015D\x02\u16CB\u16CA\x03" +
    "\x02\x02\x02\u16CB\u16CC\x03\x02\x02\x02\u16CC\u16CD\x03\x02\x02\x02\u16CD" +
    "\u16CE\x05\u02B4\u015B\x02\u16CE\u16E6\x03\x02\x02\x02\u16CF\u16D0\tZ" +
    "\x02\x02\u16D0\u16D2\x05\u02FA\u017E\x02\u16D1\u16D3\x05\u02B8\u015D\x02" +
    "\u16D2\u16D1\x03\x02\x02\x02\u16D2\u16D3\x03\x02\x02\x02\u16D3\u16D4\x03" +
    "\x02\x02\x02\u16D4\u16D5\x05\u02B4\u015B\x02\u16D5\u16E6\x03\x02\x02\x02" +
    "\u16D6\u16D7\x07\u02CF\x02\x02\u16D7\u16D8\x07\u019B\x02\x02\u16D8\u16D9" +
    "\x05\u029C\u014F\x02\u16D9\u16DA\x07\u0198\x02\x02\u16DA\u16DB\x05\u02A8" +
    "\u0155\x02\u16DB\u16DE\x07\u019C\x02\x02\u16DC\u16DD\x07\u01FD\x02\x02" +
    "\u16DD\u16DF\t[\x02\x02\u16DE\u16DC\x03\x02\x02\x02\u16DE\u16DF\x03\x02" +
    "\x02\x02\u16DF\u16E1\x03\x02\x02\x02\u16E0\u16E2\x05\u02B8\u015D\x02\u16E1" +
    "\u16E0\x03\x02\x02\x02\u16E1\u16E2\x03\x02\x02\x02\u16E2\u16E3\x03\x02" +
    "\x02\x02\u16E3\u16E4\x05\u02B4\u015B\x02\u16E4\u16E6\x03\x02\x02\x02\u16E5" +
    "\u16BB\x03\x02\x02\x02\u16E5\u16BF\x03\x02\x02\x02\u16E5\u16C3\x03\x02" +
    "\x02\x02\u16E5\u16CF\x03\x02\x02\x02\u16E5\u16D6\x03\x02\x02\x02\u16E6" +
    "\u02B3\x03\x02\x02\x02\u16E7\u16EA\x07\u02D3\x02\x02\u16E8\u16EB\x05\u045C" +
    "\u022F\x02\u16E9\u16EB\x05\u0130\x99\x02\u16EA\u16E8\x03\x02\x02\x02\u16EA" +
    "\u16E9\x03\x02\x02\x02\u16EB\u02B5\x03\x02\x02\x02\u16EC\u16EF\x07\u0198" +
    "\x02\x02\u16ED\u16F0\x05\u0470\u0239\x02\u16EE\u16F0\x07\u01A6\x02\x02" +
    "\u16EF\u16ED\x03\x02\x02\x02\u16EF\u16EE\x03\x02\x02\x02\u16F0\u16F3\x03" +
    "\x02\x02\x02\u16F1\u16F2\x07\u0198\x02\x02\u16F2\u16F4\x05\u029C\u014F" +
    "\x02\u16F3\u16F1\x03\x02\x02\x02\u16F3\u16F4\x03\x02\x02\x02\u16F4\u02B7" +
    "\x03\x02\x02\x02\u16F5\u16F6\t\\\x02\x02\u16F6\u16F7\x07\u02D1\x02\x02" +
    "\u16F7\u02B9\x03\x02\x02\x02\u16F8\u16F9\x07\u02BB\x02\x02\u16F9\u16FA" +
    "\x07\u019B\x02\x02\u16FA\u16FB\x05\u02BC\u015F\x02\u16FB\u16FD\x07\u019C" +
    "\x02\x02\u16FC\u16FE\x05\u02B4\u015B\x02\u16FD\u16FC\x03\x02\x02\x02\u16FD" +
    "\u16FE\x03\x02\x02\x02\u16FE\u1709\x03\x02\x02\x02\u16FF\u1700\x07\u02BA" +
    "\x02\x02\u1700\u1701\x07\u019B\x02\x02\u1701\u1702\x05\u02BC\u015F\x02" +
    "\u1702\u1703\x07\u0198\x02\x02\u1703\u1704\x05\u02BC\u015F\x02\u1704\u1706" +
    "\x07\u019C\x02\x02\u1705\u1707\x05\u02B4\u015B\x02\u1706\u1705\x03\x02" +
    "\x02\x02\u1706\u1707\x03\x02\x02\x02\u1707\u1709\x03\x02\x02\x02\u1708" +
    "\u16F8\x03\x02\x02\x02\u1708\u16FF\x03\x02\x02\x02\u1709\u02BB\x03\x02" +
    "\x02\x02\u170A\u170C\x07\u01AD\x02\x02\u170B\u170A\x03\x02\x02\x02\u170B" +
    "\u170C\x03\x02\x02\x02\u170C\u170D\x03\x02\x02\x02\u170D\u170E\x05\u029C" +
    "\u014F\x02\u170E\u02BD\x03\x02\x02\x02\u170F\u1715\x05\u02C0\u0161\x02" +
    "\u1710\u1711\x07\u019B\x02\x02\u1711\u1712\x05\u02C0\u0161\x02\u1712\u1713" +
    "\x07\u019C\x02\x02\u1713\u1715\x03\x02\x02\x02\u1714\u170F\x03\x02\x02" +
    "\x02\u1714\u1710\x03\x02\x02\x02\u1715\u02BF\x03\x02\x02\x02\u1716\u171B" +
    "\x05\u0468\u0235\x02\u1717\u1718\x07\u0198\x02\x02\u1718\u171A\x05\u0468" +
    "\u0235\x02\u1719\u1717\x03\x02\x02\x02\u171A\u171D\x03\x02\x02\x02\u171B" +
    "\u1719\x03\x02\x02\x02\u171B\u171C\x03\x02\x02\x02\u171C\u02C1\x03\x02" +
    "\x02\x02\u171D\u171B\x03\x02\x02\x02\u171E\u171F\x07\u0214\x02\x02\u171F" +
    "\u1720\x07M\x02\x02\u1720\u172E\x07\xE0\x02\x02\u1721\u1722\x07\u0214" +
    "\x02\x02\u1722\u1723\x07\u023B\x02\x02\u1723\u1724\x07\x1C\x02\x02\u1724" +
    "\u1728\x07\xE0\x02\x02\u1725\u1726\x07\u02AC\x02\x02\u1726\u1727\x07\u010D" +
    "\x02\x02\u1727\u1729\x07\x8A\x02\x02\u1728\u1725\x03\x02\x02\x02\u1728" +
    "\u1729\x03\x02\x02\x02\u1729\u172E\x03\x02\x02\x02\u172A\u172B\x07\u02AC" +
    "\x02\x02\u172B\u172C\x07\u010D\x02\x02\u172C\u172E\x07\x8A\x02\x02\u172D" +
    "\u171E\x03\x02\x02\x02\u172D\u1721\x03\x02\x02\x02\u172D\u172A\x03\x02" +
    "\x02\x02\u172E\u02C3\x03\x02\x02\x02\u172F\u1730\x07\u01C4\x02\x02\u1730" +
    "\u1731\x07\u019B\x02\x02\u1731\u1734\x05\u02EC\u0177\x02\u1732\u1733\x07" +
    "\u029C\x02\x02\u1733\u1735\x05\u03A0\u01D1\x02\u1734\u1732\x03\x02\x02" +
    "\x02\u1734\u1735\x03\x02\x02\x02\u1735\u1736\x03\x02\x02\x02\u1736\u1737" +
    "\x07\u019C\x02\x02\u1737\u1841\x03\x02\x02\x02\u1738\u173A\x07\u01D2\x02" +
    "\x02\u1739\u173B\x05\u049C\u024F\x02\u173A\u1739\x03\x02\x02\x02\u173A" +
    "\u173B\x03\x02\x02\x02\u173B\u1841\x03\x02\x02\x02\u173C\u173D\x07r\x02" +
    "\x02\u173D\u1841\x05\u02FA\u017E\x02\u173E\u173F\x07s\x02\x02\u173F\u1841" +
    "\x05\u02FA\u017E\x02\u1740\u1741\x07\xA0\x02\x02\u1741\u1841\x05\u02FA" +
    "\u017E\x02\u1742\u1743\x07\u0210\x02\x02\u1743\u1744\x07\u019B\x02\x02" +
    "\u1744\u1745\x05\u029C\u014F\x02\u1745\u1746\x07\u0198\x02\x02\u1746\u1747" +
    "\x05\u029C\u014F\x02\u1747\u1748\x07\u0198\x02\x02\u1748\u1749\x05\u029C" +
    "\u014F\x02\u1749\u174A\x07\u0198\x02\x02\u174A\u174B\x05\u029C\u014F\x02" +
    "\u174B\u174C\x07\u019C\x02\x02\u174C\u1841\x03\x02\x02\x02\u174D\u174E" +
    "\x07\u0211\x02\x02\u174E\u174F\x07\u019B\x02\x02\u174F\u1752\x05\u029C" +
    "\u014F\x02\u1750\u1751\x07\u0198\x02\x02\u1751\u1753\x05\u029C\u014F\x02" +
    "\u1752\u1750\x03\x02\x02\x02\u1753\u1754\x03\x02\x02\x02\u1754\u1752\x03" +
    "\x02\x02\x02\u1754\u1755\x03\x02\x02\x02\u1755\u1756\x03\x02\x02\x02\u1756" +
    "\u1757\x07\u019C\x02\x02\u1757\u1841\x03\x02\x02\x02\u1758\u1759\x07\u021F" +
    "\x02\x02\u1759\u175A\x07\u019B\x02\x02\u175A\u175B\x05\u029C\u014F\x02" +
    "\u175B\u175C\x07\u0198\x02\x02\u175C\u175D\x05\u029C\u014F\x02\u175D\u175E" +
    "\x07\u019C\x02\x02\u175E\u1841\x03\x02\x02\x02\u175F\u1760\x07\xDD\x02" +
    "\x02\u1760\u1841\x05\u02FA\u017E\x02\u1761\u1762\x07\xE1\x02\x02\u1762" +
    "\u1841\x05\u02FA\u017E\x02\u1763\u1764\x07\u0266\x02\x02\u1764\u1765\x07" +
    "\u019B\x02\x02\u1765\u1766\x05\u029C\u014F\x02\u1766\u1767\x07\u0198\x02" +
    "\x02\u1767\u1768\x05\u029C\u014F\x02\u1768\u1769\x07\u019C\x02\x02\u1769" +
    "\u1841\x03\x02\x02\x02\u176A\u176B\x07\u0133\x02\x02\u176B\u1841\x05\u02FA" +
    "\u017E\x02\u176C\u176D\x07\u0162\x02\x02\u176D\u1841\x05\u02FA\u017E\x02" +
    "\u176E\u176F\x07\u015F\x02\x02\u176F\u1770\x07\u019B\x02\x02\u1770\u1773" +
    "\x05\u029C\u014F\x02\u1771\u1772\x07\u0198\x02\x02\u1772\u1774\x05\u029C" +
    "\u014F\x02\u1773\u1771\x03\x02\x02\x02\u1773\u1774\x03\x02\x02\x02\u1774" +
    "\u1775\x03\x02\x02\x02\u1775\u1776\x07\u019C\x02\x02\u1776\u1841\x03\x02" +
    "\x02\x02\u1777\u1841\x05\u02D2\u016A\x02\u1778\u1779\x07\u016E\x02\x02" +
    "\u1779\u1841\x05\u049C\u024F\x02\u177A\u177B\x07\u02A1\x02\x02\u177B\u1841" +
    "\x05\u02FA\u017E\x02\u177C\u177D\x07\u017B\x02\x02\u177D\u1841\x05\u02FA" +
    "\u017E\x02\u177E\u177F\t]\x02\x02\u177F\u1780\x07\u019B\x02\x02\u1780" +
    "\u1781\x05\u029C\u014F\x02\u1781\u1787\x07\u0198\x02\x02\u1782\u1788\x05" +
    "\u029C\u014F\x02\u1783\u1784\x07\u0211\x02\x02\u1784\u1785\x05\u029C\u014F" +
    "\x02\u1785\u1786\x05\u02F4\u017B\x02\u1786\u1788\x03\x02\x02\x02\u1787" +
    "\u1782\x03\x02\x02\x02\u1787\u1783\x03\x02\x02\x02\u1788\u1789\x03\x02" +
    "\x02\x02\u1789\u178A\x07\u019C\x02\x02\u178A\u1841\x03\x02\x02\x02\u178B" +
    "\u178D\x07\u01CF\x02\x02\u178C\u178E\x05\u049C\u024F\x02\u178D\u178C\x03" +
    "\x02\x02\x02\u178D\u178E\x03\x02\x02\x02\u178E\u1841\x03\x02\x02\x02\u178F" +
    "\u1791\x07\u01D4\x02\x02\u1790\u1792\x05\u02C8\u0165\x02\u1791\u1790\x03" +
    "\x02\x02\x02\u1791\u1792\x03\x02\x02\x02\u1792\u1841\x03\x02\x02\x02\u1793" +
    "\u1794\t^\x02\x02\u1794\u1795\x07\u019B\x02\x02\u1795\u1796\x05\u029C" +
    "\u014F\x02\u1796\u1797\x07\u0198\x02\x02\u1797\u1798\x07\u0211\x02\x02" +
    "\u1798\u1799\x05\u029C\u014F\x02\u1799\u179A\x05\u02F4\u017B\x02\u179A" +
    "\u179B\x07\u019C\x02\x02\u179B\u1841\x03\x02\x02\x02\u179C\u179D\x07\u01F6" +
    "\x02\x02\u179D\u179E\x07\u019B\x02\x02\u179E\u179F\x05\u02F4\u017B\x02" +
    "\u179F\u17A0\x07\u01FD\x02\x02\u17A0\u17A1\x05\u029C\u014F\x02\u17A1\u17A2" +
    "\x07\u019C\x02\x02\u17A2\u1841\x03\x02\x02\x02\u17A3\u17A4\x07\x9B\x02" +
    "\x02\u17A4\u17A5\x07\u019B\x02\x02\u17A5\u17A6\x05\u02D0\u0169\x02";
MySQLParser._serializedATNSegment12 = "\u17A6\u17A7\x07\u0198\x02\x02\u17A7\u17A8\x05\u029C\u014F\x02\u17A8\u17A9" +
    "\x07\u019C\x02\x02\u17A9\u1841\x03\x02\x02\x02\u17AA\u17AC\x07\u0240\x02" +
    "\x02\u17AB\u17AD\x05\u02C8\u0165\x02\u17AC\u17AB\x03\x02\x02\x02\u17AC" +
    "\u17AD\x03\x02\x02\x02\u17AD\u1841\x03\x02\x02\x02\u17AE\u17AF\x07\u0251" +
    "\x02\x02\u17AF\u17B0\x07\u019B\x02\x02\u17B0\u17B1\x05\u02A6\u0154\x02" +
    "\u17B1\u17B2\x07\u0214\x02\x02\u17B2\u17B3\x05\u029C\u014F\x02\u17B3\u17B4" +
    "\x07\u019C\x02\x02\u17B4\u1841\x03\x02\x02\x02\u17B5\u1841\x05\u02D4\u016B" +
    "\x02\u17B6\u17B8\x07\u0286\x02\x02\u17B7\u17B9\x05\u02C8\u0165\x02\u17B8" +
    "\u17B7\x03\x02\x02\x02\u17B8\u17B9\x03\x02\x02\x02\u17B9\u1841\x03\x02" +
    "\x02\x02\u17BA\u17BB\t_\x02\x02\u17BB\u17BC\x07\u019B\x02\x02\u17BC\u17BD" +
    "\x05\u02F6\u017C\x02\u17BD\u17BE\x07\u0198\x02\x02\u17BE\u17BF\x05\u029C" +
    "\u014F\x02\u17BF\u17C0\x07\u0198\x02\x02\u17C0\u17C1\x05\u029C\u014F\x02" +
    "\u17C1\u17C2\x07\u019C\x02\x02\u17C2\u1841\x03\x02\x02\x02\u17C3\u17C5" +
    "\x07\u029D\x02\x02\u17C4\u17C6\x05\u049C\u024F\x02\u17C5\u17C4\x03\x02" +
    "\x02\x02\u17C5\u17C6\x03\x02\x02\x02\u17C6\u1841\x03\x02\x02\x02\u17C7" +
    "\u17C9\x07\u029F\x02\x02\u17C8\u17CA\x05\u02C8\u0165\x02\u17C9\u17C8\x03" +
    "\x02\x02\x02\u17C9\u17CA\x03\x02\x02\x02\u17CA\u1841\x03\x02\x02\x02\u17CB" +
    "\u17CD\x07\u029E\x02\x02\u17CC\u17CE\x05\u02C8\u0165\x02\u17CD\u17CC\x03" +
    "\x02\x02\x02\u17CD\u17CE\x03\x02\x02\x02\u17CE\u1841\x03\x02\x02\x02\u17CF" +
    "\u17D0\x07\x04\x02\x02\u17D0\u1841\x05\u02FA\u017E\x02\u17D1\u17D2\x07" +
    "\n\x02\x02\u17D2\u1841\x05\u02FA\u017E\x02\u17D3\u17D4\x07W\x02\x02\u17D4" +
    "\u1841\x05\u02F8\u017D\x02\u17D5\u17D6\x07Y\x02\x02\u17D6\u1841\x05\u02FA" +
    "\u017E\x02\u17D7\u17D8\x07\u01D5\x02\x02\u17D8\u1841\x05\u049C\u024F\x02" +
    "\u17D9\u17DA\x07\u0209\x02\x02\u17DA\u17DB\x07\u019B\x02\x02\u17DB\u17DC" +
    "\x05\u029C\u014F\x02\u17DC\u17DD\x07\u0198\x02\x02\u17DD\u17DE\x05\u029C" +
    "\u014F\x02\u17DE\u17DF\x07\u0198\x02\x02\u17DF\u17E0\x05\u029C\u014F\x02" +
    "\u17E0\u17E1\x07\u019C\x02\x02\u17E1\u1841\x03\x02\x02\x02\u17E2\u17E3" +
    "\x07\x16\x02\x02\u17E3\u17E4\x07\u019B\x02\x02\u17E4\u17E5\x05\u029C\u014F" +
    "\x02\u17E5\u17E6\x07\u0198\x02\x02\u17E6\u17E9\x05\u029C\u014F\x02\u17E7" +
    "\u17E8\x07\u0198\x02\x02\u17E8\u17EA\x05\u029C\u014F\x02\u17E9\u17E7\x03" +
    "\x02\x02\x02\u17E9\u17EA\x03\x02\x02\x02\u17EA\u17EB\x03\x02\x02\x02\u17EB" +
    "\u17EC\x07\u019C\x02\x02\u17EC\u1841\x03\x02\x02\x02\u17ED\u17EE\x07\xDB" +
    "\x02\x02\u17EE\u1841\x05\u02FA\u017E\x02\u17EF\u17F0\x07\u023A\x02\x02" +
    "\u17F0\u17F1\x07\u019B\x02\x02\u17F1\u17F2\x05\u029C\u014F\x02\u17F2\u17F3" +
    "\x07\u0198\x02\x02\u17F3\u17F4\x05\u029C\u014F\x02\u17F4\u17F5\x07\u019C" +
    "\x02\x02\u17F5\u1841\x03\x02\x02\x02\u17F6\u17F7\x06\u0163\xA4\x02\u17F7" +
    "\u17F8\x07\xF5\x02\x02\u17F8\u17F9\x07\u019B\x02\x02\u17F9\u17FA\x05\u0480" +
    "\u0241\x02\u17FA\u17FB\x07\u019C\x02\x02\u17FB\u1841\x03\x02\x02\x02\u17FC" +
    "\u17FD\x06\u0163\xA5\x02\u17FD\u17FE\x07\xFD\x02\x02\u17FE\u1841\x05\u02FA" +
    "\u017E\x02\u17FF\u1800\x07\u010C\x02\x02\u1800\u1841\x05\u02FA\u017E\x02" +
    "\u1801\u1802\x07\u025F\x02\x02\u1802\u1803\x07\u019B\x02\x02\u1803\u1804" +
    "\x05\u029C\u014F\x02\u1804\u1805\x07\u0198\x02\x02\u1805\u1806\x05\u029C" +
    "\u014F\x02\u1806\u1807\x07\u019C\x02\x02\u1807\u1841\x03\x02\x02\x02\u1808" +
    "\u1809\x07\u0260\x02\x02\u1809\u180A\x07\u019B\x02\x02\u180A\u180B\x05" +
    "\u029C\u014F\x02\u180B\u180C\x07\u0198\x02\x02\u180C\u180D\x05\u029C\u014F" +
    "\x02\u180D\u180E\x07\u0198\x02\x02\u180E\u180F\x05\u029C\u014F\x02\u180F" +
    "\u1810\x07\u019C\x02\x02\u1810\u1841\x03\x02\x02\x02\u1811\u1812\x07\u0128" +
    "\x02\x02\u1812\u1841\x05\u02FA\u017E\x02\u1813\u1814\x07\u012D\x02\x02" +
    "\u1814\u1841\x05\u049C\u024F\x02\u1815\u1816\x074\x02\x02\u1816\u1817" +
    "\x07\u019B\x02\x02\u1817\u1818\x05\u029C\u014F\x02\u1818\u1819\x07\u0198" +
    "\x02\x02\u1819\u181A\x05\u029C\u014F\x02\u181A\u181B\x07\u019C\x02\x02" +
    "\u181B\u1841\x03\x02\x02\x02\u181C\u181D\x07\u0175\x02\x02\u181D\u181E" +
    "\x07\u019B\x02\x02\u181E\u1821\x05\u029C\u014F\x02\u181F\u1820\x07\u0198" +
    "\x02\x02\u1820\u1822\x05\u029C\u014F\x02\u1821\u181F\x03\x02\x02\x02\u1821" +
    "\u1822\x03\x02\x02\x02\u1822\u1823\x03\x02\x02\x02\u1823\u1824\x07\u019C" +
    "\x02\x02\u1824\u1841\x03\x02\x02\x02\u1825\u1826\x07\u0177\x02\x02\u1826" +
    "\u1827\x07\u019B\x02\x02\u1827\u183B\x05\u029C\u014F\x02\u1828\u1829\x07" +
    "\u01B1\x02\x02\u1829\u182A\x07\u01C4\x02\x02\u182A\u182C\x05\u039C\u01CF" +
    "\x02\u182B\u1828\x03\x02\x02\x02\u182B\u182C\x03\x02\x02\x02\u182C\u182F" +
    "\x03\x02\x02\x02\u182D\u182E\x06\u0163\xA6\x02\u182E\u1830\x05\u02CC\u0167" +
    "\x02\u182F\u182D\x03\x02\x02\x02\u182F\u1830\x03\x02\x02\x02\u1830\u183C" +
    "\x03\x02\x02\x02\u1831\u1832\x07\u01B1\x02\x02\u1832\u1833\x07\u01B7\x02" +
    "\x02\u1833\u183C\x05\u039C\u01CF\x02\u1834\u1835\x07\u0198\x02\x02\u1835" +
    "\u1836\x05\u046C\u0237\x02\u1836\u1837\x07\u0198\x02\x02\u1837\u1838\x05" +
    "\u046C\u0237\x02\u1838\u1839\x07\u0198\x02\x02\u1839\u183A\x05\u046C\u0237" +
    "\x02\u183A\u183C\x03\x02\x02\x02\u183B\u182B\x03\x02\x02\x02\u183B\u1831" +
    "\x03\x02\x02\x02\u183B\u1834\x03\x02\x02\x02\u183C\u183D\x03\x02\x02\x02" +
    "\u183D\u183E\x07\u019C\x02\x02\u183E\u1841\x03\x02\x02\x02\u183F\u1841" +
    "\x05\u02C6\u0164\x02\u1840\u172F\x03\x02\x02\x02\u1840\u1738\x03\x02\x02" +
    "\x02\u1840\u173C\x03\x02\x02\x02\u1840\u173E\x03\x02\x02\x02\u1840\u1740" +
    "\x03\x02\x02\x02\u1840\u1742\x03\x02\x02\x02\u1840\u174D\x03\x02\x02\x02" +
    "\u1840\u1758\x03\x02\x02\x02\u1840\u175F\x03\x02\x02\x02\u1840\u1761\x03" +
    "\x02\x02\x02\u1840\u1763\x03\x02\x02\x02\u1840\u176A\x03\x02\x02\x02\u1840" +
    "\u176C\x03\x02\x02\x02\u1840\u176E\x03\x02\x02\x02\u1840\u1777\x03\x02" +
    "\x02\x02\u1840\u1778\x03\x02\x02\x02\u1840\u177A\x03\x02\x02\x02\u1840" +
    "\u177C\x03\x02\x02\x02\u1840\u177E\x03\x02\x02\x02\u1840\u178B\x03\x02" +
    "\x02\x02\u1840\u178F\x03\x02\x02\x02\u1840\u1793\x03\x02\x02\x02\u1840" +
    "\u179C\x03\x02\x02\x02\u1840\u17A3\x03\x02\x02\x02\u1840\u17AA\x03\x02" +
    "\x02\x02\u1840\u17AE\x03\x02\x02\x02\u1840\u17B5\x03\x02\x02\x02\u1840" +
    "\u17B6\x03\x02\x02\x02\u1840\u17BA\x03\x02\x02\x02\u1840\u17C3\x03\x02" +
    "\x02\x02\u1840\u17C7\x03\x02\x02\x02\u1840\u17CB\x03\x02\x02\x02\u1840" +
    "\u17CF\x03\x02\x02\x02\u1840\u17D1\x03\x02\x02\x02\u1840\u17D3\x03\x02" +
    "\x02\x02\u1840\u17D5\x03\x02\x02\x02\u1840\u17D7\x03\x02\x02\x02\u1840" +
    "\u17D9\x03\x02\x02\x02\u1840\u17E2\x03\x02\x02\x02\u1840\u17ED\x03\x02" +
    "\x02\x02\u1840\u17EF\x03\x02\x02\x02\u1840\u17F6\x03\x02\x02\x02\u1840" +
    "\u17FC\x03\x02\x02\x02\u1840\u17FF\x03\x02\x02\x02\u1840\u1801\x03\x02" +
    "\x02\x02\u1840\u1808\x03\x02\x02\x02\u1840\u1811\x03\x02\x02\x02\u1840" +
    "\u1813\x03\x02\x02\x02\u1840\u1815\x03\x02\x02\x02\u1840\u181C\x03\x02" +
    "\x02\x02\u1840\u1825\x03\x02\x02\x02\u1840\u183F\x03\x02\x02\x02\u1841" +
    "\u02C5\x03\x02\x02\x02\u1842\u1843\x06\u0164\xA7\x02\u1843\u1844\x07\x0F" +
    "\x02\x02\u1844\u1845\x07\u019B\x02\x02\u1845\u1846\x05\u029C\u014F\x02" +
    "\u1846\u1847\x07\u0198\x02\x02\u1847\u1848\x05\u029C\u014F\x02\u1848\u1849" +
    "\x07\u019C\x02\x02\u1849\u1862\x03\x02\x02\x02\u184A\u184B\x07\x9A\x02" +
    "\x02\u184B\u184D\x07\u019B\x02\x02\u184C\u184E\x05\u02EC\u0177\x02\u184D" +
    "\u184C\x03\x02\x02\x02\u184D\u184E\x03\x02\x02\x02\u184E\u184F\x03\x02" +
    "\x02\x02\u184F\u1862\x07\u019C\x02\x02\u1850\u1851\x07\xB4\x02\x02\u1851" +
    "\u1862\x05\u02F8\u017D\x02\u1852\u1853\x07\xE2\x02\x02\u1853\u1862\x05" +
    "\u02F8\u017D\x02\u1854\u1855\x07\xE3\x02\x02\u1855\u1862\x05\u02F8\u017D" +
    "\x02\u1856\u1857\x07\xE4\x02\x02\u1857\u1862\x05\u02F8\u017D\x02\u1858" +
    "\u1859\x07\u0102\x02\x02\u1859\u185A\x07\u019B\x02\x02\u185A\u185B\x05" +
    "\u029C\u014F\x02\u185B\u185C\x07\u0198\x02\x02\u185C\u185D\x05\u029C\u014F" +
    "\x02\u185D\u185E\x07\u019C\x02\x02\u185E\u1862\x03\x02\x02\x02\u185F\u1860" +
    "\x07\u0103\x02\x02\u1860\u1862\x05\u02F8\u017D\x02\u1861\u1842\x03\x02" +
    "\x02\x02\u1861\u184A\x03\x02\x02\x02\u1861\u1850\x03\x02\x02\x02\u1861" +
    "\u1852\x03\x02\x02\x02\u1861\u1854\x03\x02\x02\x02\u1861\u1856\x03\x02" +
    "\x02\x02\u1861\u1858\x03\x02\x02\x02\u1861\u185F\x03\x02\x02\x02\u1862" +
    "\u02C7\x03\x02\x02\x02\u1863\u1865\x07\u019B\x02\x02\u1864\u1866\x05\u02CA" +
    "\u0166\x02\u1865\u1864\x03\x02\x02\x02\u1865\u1866\x03\x02\x02\x02\u1866" +
    "\u1867\x03\x02\x02\x02\u1867\u1868\x07\u019C\x02\x02\u1868\u02C9\x03\x02" +
    "\x02\x02\u1869\u186A\x06\u0166\xA8\x02\u186A\u186B\x07\u017E\x02\x02\u186B" +
    "\u02CB\x03\x02\x02\x02\u186C\u1879\x07\xB3\x02\x02\u186D\u186E\x05\u046E" +
    "\u0238\x02\u186E\u186F\x07\u018A\x02\x02\u186F\u1870\x05\u046E\u0238\x02" +
    "\u1870\u187A\x03\x02\x02\x02\u1871\u1876\x05\u02CE\u0168\x02\u1872\u1873" +
    "\x07\u0198\x02\x02\u1873\u1875\x05\u02CE\u0168\x02\u1874\u1872\x03\x02" +
    "\x02\x02\u1875\u1878\x03\x02\x02\x02\u1876\u1874\x03\x02\x02\x02\u1876" +
    "\u1877\x03\x02\x02\x02\u1877\u187A\x03\x02\x02\x02\u1878\u1876\x03\x02" +
    "\x02\x02\u1879\u186D\x03\x02\x02\x02\u1879\u1871\x03\x02\x02\x02\u187A" +
    "\u02CD\x03\x02\x02\x02\u187B\u1881\x05\u046E\u0238\x02\u187C\u187E\t#" +
    "\x02\x02\u187D\u187F\x07\u0128\x02\x02\u187E\u187D\x03\x02\x02\x02\u187E" +
    "\u187F\x03\x02\x02\x02\u187F\u1882\x03\x02\x02\x02\u1880\u1882\x07\u0128" +
    "\x02\x02\u1881\u187C\x03\x02\x02\x02\u1881\u1880\x03\x02\x02\x02\u1881" +
    "\u1882\x03\x02\x02\x02\u1882\u02CF\x03\x02\x02\x02\u1883\u1884\t`\x02" +
    "\x02\u1884\u02D1\x03\x02\x02\x02\u1885\u1886\x07\u0292\x02\x02\u1886\u189E" +
    "\x07\u019B\x02\x02\u1887\u188A\x05\u029C\u014F\x02\u1888\u1889\x07\u01FD" +
    "\x02\x02\u1889\u188B\x05\u029C\u014F\x02\u188A\u1888\x03\x02\x02\x02\u188A" +
    "\u188B\x03\x02\x02\x02\u188B\u189F\x03\x02\x02\x02\u188C\u188E\x07\u021D" +
    "\x02\x02\u188D\u188F\x05\u029C\u014F\x02\u188E\u188D\x03\x02\x02\x02\u188E" +
    "\u188F\x03\x02\x02\x02\u188F\u1890\x03\x02\x02\x02\u1890\u1891\x07\u01FD" +
    "\x02\x02\u1891\u189F\x05\u029C\u014F\x02\u1892\u1894\x07\u0290\x02\x02" +
    "\u1893\u1895\x05\u029C\u014F\x02\u1894\u1893\x03\x02\x02\x02\u1894\u1895" +
    "\x03\x02\x02\x02\u1895\u1896\x03\x02\x02\x02\u1896\u1897\x07\u01FD\x02" +
    "\x02\u1897\u189F\x05\u029C\u014F\x02\u1898\u189A\x07\u01BD\x02\x02\u1899" +
    "\u189B\x05\u029C\u014F\x02\u189A\u1899\x03\x02\x02\x02\u189A\u189B\x03" +
    "\x02\x02\x02\u189B\u189C\x03\x02\x02\x02\u189C\u189D\x07\u01FD\x02\x02" +
    "\u189D\u189F\x05\u029C\u014F\x02\u189E\u1887\x03\x02\x02\x02\u189E\u188C" +
    "\x03\x02\x02\x02\u189E\u1892\x03\x02\x02\x02\u189E\u1898\x03\x02\x02\x02" +
    "\u189F\u18A0\x03\x02\x02\x02\u18A0\u18A1\x07\u019C\x02\x02\u18A1\u02D3" +
    "\x03\x02\x02\x02\u18A2\u18A3\x07\u0284\x02\x02\u18A3\u18A4\x07\u019B\x02" +
    "\x02\u18A4\u18B1\x05\u029C\u014F\x02\u18A5\u18A6\x07\u0198\x02\x02\u18A6" +
    "\u18A9\x05\u029C\u014F\x02\u18A7\u18A8\x07\u0198\x02\x02\u18A8\u18AA\x05" +
    "\u029C\u014F\x02\u18A9\u18A7\x03\x02\x02\x02\u18A9\u18AA\x03\x02\x02\x02" +
    "\u18AA\u18B2\x03\x02\x02\x02\u18AB\u18AC\x07\u01FD\x02\x02\u18AC\u18AF" +
    "\x05\u029C\u014F\x02\u18AD\u18AE\x07\u01FC\x02\x02\u18AE\u18B0\x05\u029C" +
    "\u014F\x02\u18AF\u18AD\x03\x02\x02\x02\u18AF\u18B0\x03\x02\x02\x02\u18B0" +
    "\u18B2\x03\x02\x02\x02\u18B1\u18A5\x03\x02\x02\x02\u18B1\u18AB\x03\x02" +
    "\x02\x02\u18B2\u18B3\x03\x02\x02\x02\u18B3\u18B4\x07\u019C\x02\x02\u18B4" +
    "\u02D5\x03\x02\x02\x02\u18B5\u18B6\x05\u045E\u0230\x02\u18B6\u18B8\x07" +
    "\u019B\x02\x02\u18B7\u18B9\x05\u02D8\u016D\x02\u18B8\u18B7\x03\x02\x02" +
    "\x02\u18B8\u18B9\x03\x02\x02\x02\u18B9\u18BA\x03\x02\x02\x02\u18BA\u18BB" +
    "\x07\u019C\x02\x02\u18BB\u18C4\x03\x02\x02\x02\u18BC\u18BD\x05\u0466\u0234" +
    "\x02\u18BD\u18BF\x07\u019B\x02\x02\u18BE\u18C0\x05\u02EC\u0177\x02\u18BF" +
    "\u18BE\x03\x02\x02\x02\u18BF\u18C0\x03\x02\x02\x02\u18C0\u18C1\x03\x02" +
    "\x02\x02\u18C1\u18C2\x07\u019C\x02\x02\u18C2\u18C4\x03\x02\x02\x02\u18C3" +
    "\u18B5\x03\x02\x02\x02\u18C3\u18BC\x03\x02\x02\x02\u18C4\u02D7\x03\x02" +
    "\x02\x02\u18C5\u18CA\x05\u02DA\u016E\x02\u18C6\u18C7\x07\u0198\x02\x02" +
    "\u18C7\u18C9\x05\u02DA\u016E\x02\u18C8\u18C6\x03\x02\x02\x02\u18C9\u18CC" +
    "\x03\x02\x02\x02\u18CA\u18C8\x03\x02\x02\x02\u18CA\u18CB\x03\x02\x02\x02" +
    "\u18CB\u02D9\x03\x02\x02\x02\u18CC\u18CA\x03\x02\x02\x02\u18CD\u18CF\x05" +
    "\u029C\u014F\x02\u18CE\u18D0\x05\u015E\xB0\x02\u18CF\u18CE\x03\x02\x02" +
    "\x02\u18CF\u18D0\x03\x02\x02\x02\u18D0\u02DB\x03\x02\x02\x02\u18D1\u18D4" +
    "\x05\u02DE\u0170\x02\u18D2\u18D3\x07\u0182\x02\x02\u18D3\u18D5\x05\u029C" +
    "\u014F\x02\u18D4\u18D2\x03\x02\x02\x02\u18D4\u18D5\x03\x02\x02\x02\u18D5" +
    "\u18D8\x03\x02\x02\x02\u18D6\u18D8\x05\u02E0\u0171\x02\u18D7\u18D1\x03" +
    "\x02\x02\x02\u18D7\u18D6\x03\x02\x02\x02\u18D8\u02DD\x03\x02\x02\x02\u18D9" +
    "\u18DA\x07\u01A2\x02\x02\u18DA\u18DD\x05\u0494\u024B\x02\u18DB\u18DD\x07" +
    "\u01A3\x02\x02\u18DC\u18D9\x03\x02\x02\x02\u18DC\u18DB\x03\x02\x02\x02" +
    "\u18DD\u02DF\x03\x02\x02\x02\u18DE\u18E0\x07\u01A4\x02\x02\u18DF\u18E1" +
    "\x05\u04A2\u0252\x02\u18E0\u18DF\x03\x02\x02\x02\u18E0\u18E1\x03\x02\x02" +
    "\x02\u18E1\u18E2\x03\x02\x02\x02\u18E2\u18E4\x05\u0494\u024B\x02\u18E3" +
    "\u18E5\x05\u046A\u0236\x02\u18E4\u18E3\x03\x02\x02\x02\u18E4\u18E5\x03" +
    "\x02\x02\x02\u18E5\u02E1\x03\x02\x02\x02\u18E6\u18E7\x06\u0172\xA9\x02" +
    "\u18E7\u18E9\x05\u0460\u0231\x02\u18E8\u18EA\x05\u046A\u0236\x02\u18E9" +
    "\u18E8\x03\x02\x02\x02\u18E9\u18EA\x03\x02\x02\x02\u18EA\u18F1\x03\x02" +
    "\x02\x02\u18EB\u18EC\x06\u0172\xAA\x02\u18EC\u18EE\x05\u0496\u024C\x02" +
    "\u18ED\u18EF\x05\u046A\u0236\x02\u18EE\u18ED\x03\x02\x02\x02\u18EE\u18EF" +
    "\x03\x02\x02\x02\u18EF\u18F1\x03\x02\x02\x02\u18F0\u18E6\x03\x02\x02\x02" +
    "\u18F0\u18EB\x03\x02\x02\x02\u18F1\u18F5\x03\x02\x02\x02\u18F2\u18F3\x07" +
    "\u01E0\x02\x02\u18F3\u18F5\x05\u046A\u0236\x02\u18F4\u18F0\x03\x02\x02" +
    "\x02\u18F4\u18F2\x03\x02\x02\x02\u18F5\u02E3\x03\x02\x02\x02\u18F6\u18F7" +
    "\x07\u02A9\x02\x02\u18F7\u18F8\x05\u029C\u014F\x02\u18F8\u02E5\x03\x02" +
    "\x02\x02\u18F9\u18FA\x07\u028B\x02\x02\u18FA\u18FB\x05\u029C\u014F\x02" +
    "\u18FB\u02E7\x03\x02\x02\x02\u18FC\u18FD\x07\u01EC\x02\x02\u18FD\u18FE" +
    "\x05\u029C\u014F\x02\u18FE\u02E9\x03\x02\x02\x02\u18FF\u1901\x07\u01B7" +
    "\x02\x02\u1900\u1902\x05\u0392\u01CA\x02\u1901\u1900\x03\x02\x02\x02\u1901" +
    "\u1902\x03\x02\x02\x02\u1902\u192D\x03\x02\x02\x02\u1903\u1905\x07\u01C4" +
    "\x02\x02\u1904\u1906\x05\u0392\u01CA\x02\u1905\u1904\x03\x02\x02\x02\u1905" +
    "\u1906\x03\x02\x02\x02\u1906\u1908\x03\x02\x02\x02\u1907\u1909\x05\u0396" +
    "\u01CC\x02\u1908\u1907\x03\x02\x02\x02\u1908\u1909\x03\x02\x02\x02\u1909" +
    "\u192D\x03\x02\x02\x02\u190A\u190C\x05\u038E\u01C8\x02\u190B\u190D\x05" +
    "\u0392\u01CA\x02\u190C\u190B\x03\x02\x02\x02\u190C\u190D\x03\x02\x02\x02" +
    "\u190D\u192D\x03\x02\x02\x02\u190E\u1910\x07.\x02\x02\u190F\u1911\x07" +
    "\u0213\x02\x02\u1910\u190F\x03\x02\x02\x02\u1910\u1911\x03\x02\x02\x02" +
    "\u1911\u192D\x03\x02\x02\x02\u1912\u1914\x07\u0298\x02\x02\u1913\u1915" +
    "\x07\u0213\x02\x02\u1914\u1913\x03\x02\x02\x02\u1914\u1915\x03\x02\x02" +
    "\x02\u1915\u192D\x03\x02\x02\x02\u1916\u192D\x07r\x02\x02\u1917\u1919" +
    "\x07\u0162\x02\x02\u1918\u191A\x05\u039E\u01D0\x02\u1919\u1918\x03\x02" +
    "\x02\x02\u1919\u191A\x03\x02\x02\x02\u191A\u192D\x03\x02\x02\x02\u191B" +
    "\u191D\x07q\x02\x02\u191C\u191E\x05\u039E\u01D0\x02\u191D\u191C\x03\x02" +
    "\x02\x02\u191D\u191E\x03\x02\x02\x02\u191E\u192D\x03\x02\x02\x02\u191F" +
    "\u1921\x07\u01DE\x02\x02\u1920\u1922\x05\u048E\u0248\x02\u1921\u1920\x03" +
    "\x02\x02\x02\u1921\u1922\x03\x02\x02\x02\u1922\u192D\x03\x02\x02\x02\u1923" +
    "\u1924\x06\u0176\xAB\x02\u1924\u192D\x07\xAE\x02\x02\u1925\u1926\x06\u0176" +
    "\xAC\x02\u1926\u192D\x05\u0390\u01C9\x02\u1927\u1928\x06\u0176\xAD\x02" +
    "\u1928\u192A\x07\u01F9\x02\x02\u1929\u192B\x05\u0490\u0249\x02\u192A\u1929" +
    "\x03\x02\x02\x02\u192A\u192B\x03\x02\x02\x02\u192B\u192D\x03\x02\x02\x02" +
    "\u192C\u18FF\x03\x02\x02\x02\u192C\u1903\x03\x02\x02\x02\u192C\u190A\x03" +
    "\x02\x02\x02\u192C\u190E\x03\x02\x02\x02\u192C\u1912\x03\x02\x02\x02\u192C" +
    "\u1916\x03\x02\x02\x02\u192C\u1917\x03\x02\x02\x02\u192C\u191B\x03\x02" +
    "\x02\x02\u192C\u191F\x03\x02\x02\x02\u192C\u1923\x03\x02\x02\x02\u192C" +
    "\u1925\x03\x02\x02\x02\u192C\u1927\x03\x02\x02\x02\u192D\u02EB\x03\x02" +
    "\x02\x02\u192E\u1933\x05\u029C\u014F\x02\u192F\u1930\x07\u0198\x02\x02" +
    "\u1930\u1932\x05\u029C\u014F\x02\u1931\u192F\x03\x02\x02\x02\u1932\u1935" +
    "\x03\x02\x02\x02\u1933\u1931\x03\x02\x02\x02\u1933\u1934\x03\x02\x02\x02" +
    "\u1934\u02ED\x03\x02\x02\x02\u1935\u1933\x03\x02\x02\x02\u1936\u1937\x07" +
    "\u01C4\x02\x02\u1937\u193A\x07\u026D\x02\x02\u1938\u193A\x07\n\x02\x02" +
    "\u1939\u1936\x03\x02\x02\x02\u1939\u1938\x03\x02\x02\x02\u193A\u02EF\x03" +
    "\x02\x02\x02\u193B\u193C\ta\x02\x02\u193C\u02F1\x03\x02\x02\x02\u193D" +
    "\u193E\tb\x02\x02\u193E\u02F3\x03\x02\x02\x02\u193F\u1942\x05\u02F6\u017C" +
    "\x02\u1940\u1942\tc\x02\x02\u1941\u193F\x03\x02\x02\x02\u1941\u1940\x03" +
    "\x02\x02\x02\u1942\u02F5\x03\x02\x02\x02\u1943\u1944\td\x02\x02\u1944" +
    "\u02F7\x03\x02\x02\x02\u1945\u1946\x07\u019B\x02\x02\u1946\u1947\x05\u02EC" +
    "\u0177\x02\u1947\u1948\x07\u019C\x02\x02\u1948\u02F9\x03\x02\x02\x02\u1949" +
    "\u194A\x07\u019B\x02\x02\u194A\u194B\x05\u029C\u014F\x02\u194B\u194C\x07" +
    "\u019C\x02\x02\u194C\u02FB\x03\x02\x02\x02\u194D\u194E\x07\u019B\x02\x02" +
    "\u194E\u194F\x05\u02A8\u0155\x02\u194F\u1950\x07\u019C\x02\x02\u1950\u02FD" +
    "\x03\x02\x02\x02\u1951\u1956\x05\u0300\u0181\x02\u1952\u1953\x07\u0198" +
    "\x02\x02\u1953\u1955\x05\u0300\u0181\x02\u1954\u1952\x03\x02\x02\x02\u1955" +
    "\u1958\x03\x02\x02\x02\u1956\u1954\x03\x02\x02\x02\u1956\u1957\x03\x02" +
    "\x02\x02\u1957\u02FF\x03\x02\x02\x02\u1958\u1956\x03\x02\x02\x02\u1959" +
    "\u195B\x05\u029C\u014F\x02\u195A\u195C\x05\u014C\xA7\x02\u195B\u195A\x03" +
    "\x02\x02\x02\u195B\u195C\x03\x02\x02\x02\u195C\u0301\x03\x02\x02\x02\u195D" +
    "\u1962\x05\u0304\u0183\x02\u195E\u195F\x07\u0198\x02\x02\u195F\u1961\x05" +
    "\u0304\u0183\x02\u1960\u195E\x03\x02\x02\x02\u1961\u1964\x03\x02\x02\x02" +
    "\u1962\u1960\x03\x02\x02\x02\u1962\u1963\x03\x02\x02\x02\u1963\u0303\x03" +
    "\x02\x02\x02\u1964\u1962\x03\x02\x02\x02\u1965\u1966\x05\u029C\u014F\x02" +
    "\u1966\u0305\x03\x02\x02\x02\u1967\u1968\x06\u0184\xAE\x02\u1968\u1969" +
    "\x07\u01FC\x02\x02\u1969\u196A\x07S\x02\x02\u196A\u196B\x05\u0482\u0242" +
    "\x02\u196B\u0307\x03\x02\x02\x02\u196C\u197A\x05\x04\x03\x02\u196D\u197A" +
    "\x05\u030A\u0186\x02\u196E\u197A\x05\u030C\u0187\x02\u196F\u197A\x05\u0314" +
    "\u018B\x02\u1970\u197A\x05\u0318\u018D\x02\u1971\u197A\x05\u031A\u018E" +
    "\x02\u1972\u197A\x05\u0320\u0191\x02\u1973\u197A\x05\u0322\u0192\x02\u1974" +
    "\u197A\x05\u033E\u01A0\x02\u1975\u197A\x05\u033C\u019F\x02\u1976\u197A" +
    "\x05\u0350\u01A9\x02\u1977\u197A\x05\u0354\u01AB\x02\u1978\u197A\x05\u0352" +
    "\u01AA\x02\u1979\u196C\x03\x02\x02\x02\u1979\u196D\x03\x02\x02\x02\u1979" +
    "\u196E\x03\x02\x02\x02\u1979\u196F\x03\x02\x02\x02\u1979\u1970\x03\x02" +
    "\x02\x02\u1979\u1971\x03\x02\x02\x02\u1979\u1972\x03\x02\x02\x02\u1979" +
    "\u1973\x03\x02\x02\x02\u1979\u1974\x03\x02\x02\x02\u1979\u1975\x03\x02" +
    "\x02\x02\u1979\u1976\x03\x02\x02\x02\u1979\u1977\x03\x02\x02\x02\u1979" +
    "\u1978\x03\x02\x02\x02\u197A\u0309\x03\x02\x02\x02\u197B\u197C\x07\u0264" +
    "\x02\x02\u197C\u197D\x05\u029C\u014F\x02\u197D\u030B\x03\x02\x02\x02\u197E" +
    "\u197F\x07\u0209\x02\x02\u197F\u1980\x05\u030E\u0188\x02\u1980\u1981\x07" +
    "\x12\x02\x02\u1981\u1982\x07\u0209\x02\x02\u1982\u030D\x03\x02\x02\x02" +
    "\u1983\u1984\x05\u029C\u014F\x02\u1984\u1989\x05\u0310\u0189\x02\u1985" +
    "\u1986\x07\u01ED\x02\x02\u1986\u198A\x05\u030E\u0188\x02\u1987\u1988\x07" +
    "\u01EC\x02\x02\u1988\u198A\x05\u0312\u018A\x02\u1989\u1985\x03\x02\x02" +
    "\x02\u1989\u1987\x03\x02\x02\x02\u1989\u198A\x03\x02\x02\x02\u198A\u030F" +
    "\x03\x02\x02\x02\u198B\u198C\x07\u028B\x02\x02\u198C\u198D\x05\u0312\u018A" +
    "\x02\u198D\u0311\x03\x02\x02\x02\u198E\u198F\x05\u0308\u0185\x02\u198F" +
    "\u1990\x07\u0199\x02\x02\u1990\u1992\x03\x02\x02\x02\u1991\u198E\x03\x02" +
    "\x02\x02\u1992\u1993\x03\x02\x02\x02\u1993\u1991\x03\x02\x02\x02\u1993" +
    "\u1994\x03\x02\x02\x02\u1994\u0313\x03\x02\x02\x02\u1995\u1997\x07\u01C1" +
    "\x02\x02\u1996\u1998\x05\u029C\u014F\x02\u1997\u1996\x03\x02\x02\x02\u1997" +
    "\u1998\x03\x02\x02\x02\u1998\u199C\x03\x02\x02\x02\u1999\u199A\x05\u02E4" +
    "\u0173\x02\u199A\u199B\x05\u0310\u0189\x02\u199B\u199D\x03\x02\x02\x02" +
    "\u199C\u1999\x03\x02\x02\x02\u199D\u199E\x03\x02\x02\x02\u199E\u199C\x03" +
    "\x02\x02\x02\u199E\u199F\x03\x02\x02\x02\u199F\u19A1\x03\x02\x02\x02\u19A0" +
    "\u19A2\x05\u0316\u018C\x02\u19A1\u19A0\x03\x02\x02\x02\u19A1\u19A2\x03" +
    "\x02\x02\x02\u19A2\u19A3\x03\x02\x02\x02\u19A3\u19A4\x07\x12\x02\x02\u19A4" +
    "\u19A5\x07\u01C1\x02\x02\u19A5\u0315\x03\x02\x02\x02\u19A6\u19A7\x07\u01EC" +
    "\x02\x02\u19A7\u19A8\x05\u0312\u018A\x02\u19A8\u0317\x03\x02\x02\x02\u19A9" +
    "\u19AA\x05\u031C\u018F\x02\u19AA\u19AC\x05\u031E\u0190\x02\u19AB\u19AD" +
    "\x05\u0450\u0229\x02\u19AC\u19AB\x03\x02\x02\x02\u19AC\u19AD\x03\x02\x02" +
    "\x02\u19AD\u0319\x03\x02\x02\x02\u19AE\u19AF\x05\u031E\u0190\x02\u19AF" +
    "\u031B\x03\x02\x02\x02\u19B0\u19B1\x05\u044E\u0228\x02\u19B1\u19B2\x07" +
    "\u019A\x02\x02\u19B2\u031D\x03\x02\x02\x02\u19B3\u19B5\x07\x07\x02\x02" +
    "\u19B4\u19B6\x05\u032A\u0196\x02\u19B5\u19B4\x03\x02\x02\x02\u19B5\u19B6" +
    "\x03\x02\x02\x02\u19B6\u19B8\x03\x02\x02\x02\u19B7\u19B9\x05\u0312\u018A" +
    "\x02\u19B8\u19B7\x03\x02\x02\x02\u19B8\u19B9\x03\x02\x02\x02\u19B9\u19BA" +
    "\x03\x02\x02\x02\u19BA\u19BB\x07\x12\x02\x02\u19BB\u031F\x03\x02\x02\x02" +
    "\u19BC\u19BD\x05\u031C\u018F\x02\u19BD\u19BF\x05\u0322\u0192\x02\u19BE" +
    "\u19C0\x05\u0450\u0229\x02\u19BF\u19BE\x03\x02\x02\x02\u19BF\u19C0\x03" +
    "\x02\x02\x02\u19C0\u0321\x03\x02\x02\x02\u19C1\u19C5\x05\u0324\u0193\x02" +
    "\u19C2\u19C5\x05\u0326\u0194\x02\u19C3\u19C5\x05\u0328\u0195\x02\u19C4" +
    "\u19C1\x03\x02\x02\x02\u19C4\u19C2\x03\x02\x02\x02\u19C4\u19C3\x03\x02" +
    "\x02\x02\u19C5\u0323\x03\x02\x02\x02\u19C6\u19C7\x07\u022B\x02\x02\u19C7" +
    "\u19C8\x05\u0312\u018A\x02\u19C8\u19C9\x07\x12\x02\x02\u19C9\u19CA\x07" +
    "\u022B\x02\x02\u19CA\u0325\x03\x02\x02\x02\u19CB\u19CC\x07\u02AB\x02\x02" +
    "\u19CC\u19CD\x05\u029C\u014F\x02\u19CD\u19CE\x07\x11\x02\x02\u19CE\u19CF" +
    "\x05\u0312\u018A\x02\u19CF\u19D0\x07\x12\x02\x02\u19D0\u19D1\x07\u02AB" +
    "\x02\x02\u19D1\u0327\x03\x02\x02\x02\u19D2\u19D3\x07\u025F\x02\x02\u19D3" +
    "\u19D4\x05\u0312\u018A\x02\u19D4\u19D5\x07\u016C\x02\x02\u19D5\u19D6\x05" +
    "\u029C\u014F\x02\u19D6\u19D7\x07\x12\x02\x02\u19D7\u19D8\x07\u025F\x02" +
    "\x02\u19D8\u0329\x03\x02\x02\x02\u19D9\u19DA\x05\u032C\u0197\x02\u19DA" +
    "\u19DB\x07\u0199\x02\x02\u19DB\u19DD\x03\x02\x02\x02\u19DC\u19D9\x03\x02" +
    "\x02\x02\u19DD\u19DE\x03\x02\x02\x02\u19DE\u19DC\x03\x02\x02\x02\u19DE" +
    "\u19DF\x03\x02\x02\x02\u19DF\u032B\x03\x02\x02\x02\u19E0\u19E5\x05\u032E" +
    "\u0198\x02\u19E1\u19E5\x05\u0330\u0199\x02\u19E2\u19E5\x05\u0336\u019C" +
    "\x02\u19E3\u19E5\x05\u033A\u019E\x02\u19E4\u19E0\x03\x02\x02\x02\u19E4" +
    "\u19E1\x03\x02\x02\x02\u19E4\u19E2\x03\x02\x02\x02\u19E4\u19E3\x03\x02" +
    "\x02\x02\u19E5\u032D\x03\x02\x02\x02\u19E6\u19E7\x07\u01DF\x02\x02\u19E7" +
    "\u19E8\x05\u0462\u0232\x02\u19E8\u19EA\x05\u038C\u01C7\x02\u19E9\u19EB" +
    "\x05\u03D2\u01EA\x02\u19EA\u19E9\x03\x02\x02\x02\u19EA\u19EB\x03\x02\x02" +
    "\x02\u19EB\u19EE\x03\x02\x02\x02\u19EC\u19ED\x07\u01E0\x02\x02\u19ED\u19EF" +
    "\x05\u029C\u014F\x02\u19EE\u19EC\x03\x02\x02\x02\u19EE\u19EF\x03\x02\x02" +
    "\x02\u19EF\u032F\x03\x02\x02\x02\u19F0\u19F1\x07\u01DF\x02\x02\u19F1\u19F2" +
    "\x05\u0460\u0231\x02\u19F2\u19F3\x07\u01C8\x02\x02\u19F3\u19F4\x07\u01FC" +
    "\x02\x02\u19F4\u19F5\x05\u0332\u019A\x02\u19F5\u0331\x03\x02\x02\x02\u19F6" +
    "\u19F9\x05\u046C\u0237\x02\u19F7\u19F9\x05\u0334\u019B\x02\u19F8\u19F6" +
    "\x03\x02\x02\x02\u19F8\u19F7\x03\x02\x02\x02\u19F9\u0333\x03\x02\x02\x02" +
    "\u19FA\u19FC\x07\u0275\x02\x02\u19FB\u19FD\x07\u0172\x02\x02\u19FC\u19FB" +
    "\x03\x02\x02\x02\u19FC\u19FD\x03\x02\x02\x02\u19FD\u19FE\x03\x02\x02\x02" +
    "\u19FE\u19FF\x05\u0480\u0241\x02\u19FF\u0335\x03\x02\x02\x02\u1A00\u1A01" +
    "\x07\u01DF\x02\x02\u1A01\u1A02\te\x02\x02\u1A02\u1A03\x07\x18\x02\x02" +
    "\u1A03\u1A04\x07\u01FC\x02\x02\u1A04\u1A09\x05\u0338\u019D\x02\u1A05\u1A06" +
    "\x07\u0198\x02\x02\u1A06\u1A08\x05\u0338\u019D\x02\u1A07\u1A05\x03\x02" +
    "\x02\x02\u1A08\u1A0B\x03\x02\x02\x02\u1A09\u1A07\x03\x02\x02\x02\u1A09" +
    "\u1A0A\x03\x02\x02\x02\u1A0A\u1A0C\x03\x02\x02\x02\u1A0B\u1A09\x03\x02" +
    "\x02\x02\u1A0C\u1A0D\x05\u0308\u0185\x02\u1A0D\u0337\x03\x02\x02\x02\u1A0E" +
    "\u1A16\x05\u0332\u019A\x02\u1A0F\u1A16\x05\u0460\u0231\x02\u1A10\u1A16" +
    "\x07\u0276\x02\x02\u1A11\u1A12\x05\u02F0\u0179\x02\u1A12\u1A13\x07\x90" +
    "\x02\x02\u1A13\u1A16\x03\x02\x02\x02\u1A14\u1A16\x07\u0274\x02\x02\u1A15" +
    "\u1A0E\x03\x02\x02\x02\u1A15\u1A0F\x03\x02\x02\x02\u1A15\u1A10\x03\x02" +
    "\x02\x02\u1A15\u1A11\x03\x02\x02\x02\u1A15\u1A14\x03\x02\x02\x02\u1A16" +
    "\u0339\x03\x02\x02\x02\u1A17\u1A18\x07\u01DF\x02\x02\u1A18\u1A19\x05\u0460" +
    "\u0231\x02\u1A19\u1A1A\x07\u01D3\x02\x02\u1A1A\u1A1B\x07\u01FC\x02\x02" +
    "\u1A1B\u1A1C\x05\u010E\x88\x02\u1A1C\u033B\x03\x02\x02\x02\u1A1D\u1A1E" +
    "\x07\u0218\x02\x02\u1A1E\u1A1F\x05\u0450\u0229\x02\u1A1F\u033D\x03\x02" +
    "\x02\x02\u1A20\u1A21\x07\u021E\x02\x02\u1A21\u1A22\x05\u0450\u0229\x02" +
    "\u1A22\u033F\x03\x02\x02\x02\u1A23\u1A27\x07\u01FF\x02\x02\u1A24\u1A28" +
    "\x07m\x02\x02\u1A25\u1A26\x06\u01A1\xAF\x02\u1A26\u1A28\x07\u0144\x02" +
    "\x02\u1A27\u1A24\x03\x02\x02\x02\u1A27\u1A25\x03\x02\x02\x02\u1A27\u1A28" +
    "\x03\x02\x02\x02\u1A28\u1A29\x03\x02\x02\x02\u1A29\u1A3C\x07x\x02\x02" +
    "\u1A2A\u1A2F\x05\u0344\u01A3\x02\u1A2B\u1A2C\x07\u0198\x02\x02\u1A2C\u1A2E" +
    "\x05\u0344\u01A3\x02\u1A2D\u1A2B\x03\x02\x02\x02\u1A2E\u1A31\x03\x02\x02" +
    "\x02\u1A2F\u1A2D\x03\x02\x02\x02\u1A2F\u1A30\x03\x02\x02\x02\u1A30\u1A3D" +
    "\x03\x02\x02\x02\u1A31\u1A2F\x03\x02\x02\x02\u1A32\u1A33\x07\u01C8\x02" +
    "\x02\u1A33\u1A34\x05\u0342\u01A2\x02\u1A34\u1A39\x05\u0346\u01A4\x02\u1A35" +
    "\u1A36\x07\u0198\x02\x02\u1A36\u1A38\x05\u0346\u01A4\x02\u1A37\u1A35\x03" +
    "\x02\x02\x02\u1A38\u1A3B\x03\x02\x02\x02\u1A39\u1A37\x03\x02\x02\x02\u1A39" +
    "\u1A3A\x03\x02\x02\x02\u1A3A\u1A3D\x03\x02\x02\x02\u1A3B\u1A39\x03\x02" +
    "\x02\x02\u1A3C\u1A2A\x03\x02\x02\x02\u1A3C\u1A32\x03\x02\x02\x02\u1A3D" +
    "\u0341\x03\x02\x02\x02\u1A3E\u1A42";
MySQLParser._serializedATNSegment13 = "\x05\u0474\u023B\x02\u1A3F\u1A42\x05\u02DC\u016F\x02\u1A40\u1A42\x05\u0466" +
    "\u0234\x02\u1A41\u1A3E\x03\x02\x02\x02\u1A41\u1A3F\x03\x02\x02\x02\u1A41" +
    "\u1A40\x03\x02\x02\x02\u1A42\u0343\x03\x02\x02\x02\u1A43\u1A46\x05\u02DC" +
    "\u016F\x02\u1A44\u1A46\x05\u0460\u0231\x02\u1A45\u1A43\x03\x02\x02\x02" +
    "\u1A45\u1A44\x03\x02\x02\x02\u1A46\u1A47\x03\x02\x02\x02\u1A47\u1A48\x07" +
    "\u0181\x02\x02\u1A48\u1A49\tf\x02\x02\u1A49\u0345\x03\x02\x02\x02\u1A4A" +
    "\u1A4D\x05\u02DC\u016F\x02\u1A4B\u1A4D\x05\u0460\u0231\x02\u1A4C\u1A4A" +
    "\x03\x02\x02\x02\u1A4C\u1A4B\x03\x02\x02\x02\u1A4D\u1A4E\x03\x02\x02\x02" +
    "\u1A4E\u1A51\x07\u0181\x02\x02\u1A4F\u1A52\x05\u0348\u01A5\x02\u1A50\u1A52" +
    "\x07\u0126\x02\x02\u1A51\u1A4F\x03\x02\x02\x02\u1A51\u1A50\x03\x02\x02" +
    "\x02\u1A52\u0347\x03\x02\x02\x02\u1A53\u1A54\tg\x02\x02\u1A54\u0349\x03" +
    "\x02\x02\x02\u1A55\u1A58\x07\u0270\x02\x02\u1A56\u1A59\x05\u0460\u0231" +
    "\x02\u1A57\u1A59\x05\u0334\u019B\x02\u1A58\u1A56\x03\x02\x02\x02\u1A58" +
    "\u1A57\x03\x02\x02\x02\u1A59\u1A63\x03\x02\x02\x02\u1A5A\u1A5B\x07\u026D" +
    "\x02\x02\u1A5B\u1A60\x05\u034E\u01A8\x02\u1A5C\u1A5D\x07\u0198\x02\x02" +
    "\u1A5D\u1A5F\x05\u034E\u01A8\x02\u1A5E\u1A5C\x03\x02\x02\x02\u1A5F\u1A62" +
    "\x03\x02\x02\x02\u1A60\u1A5E\x03\x02\x02\x02\u1A60\u1A61\x03\x02\x02\x02" +
    "\u1A61\u1A64\x03\x02\x02\x02\u1A62\u1A60\x03\x02\x02\x02\u1A63\u1A5A\x03" +
    "\x02\x02\x02\u1A63\u1A64\x03\x02\x02\x02\u1A64\u034B\x03\x02\x02\x02\u1A65" +
    "\u1A6B\x07\u0262\x02\x02\u1A66\u1A68\x07\u0275\x02\x02\u1A67\u1A69\x07" +
    "\u0172\x02\x02\u1A68\u1A67\x03\x02\x02\x02\u1A68\u1A69\x03\x02\x02\x02" +
    "\u1A69\u1A6A\x03\x02\x02\x02\u1A6A\u1A6C\x05\u0494\u024B\x02\u1A6B\u1A66" +
    "\x03\x02\x02\x02\u1A6B\u1A6C\x03\x02\x02\x02\u1A6C\u1A76\x03\x02\x02\x02" +
    "\u1A6D\u1A6E\x07\u026D\x02\x02\u1A6E\u1A73\x05\u034E\u01A8\x02\u1A6F\u1A70" +
    "\x07\u0198\x02\x02\u1A70\u1A72\x05\u034E\u01A8\x02\u1A71\u1A6F\x03\x02" +
    "\x02\x02\u1A72\u1A75\x03\x02\x02\x02\u1A73\u1A71\x03\x02\x02\x02\u1A73" +
    "\u1A74\x03\x02\x02\x02\u1A74\u1A77\x03\x02\x02\x02\u1A75\u1A73\x03\x02" +
    "\x02\x02\u1A76\u1A6D\x03\x02\x02\x02\u1A76\u1A77\x03\x02\x02\x02\u1A77" +
    "\u034D\x03\x02\x02\x02\u1A78\u1A79\x05\u0348\u01A5\x02\u1A79\u1A7A\x07" +
    "\u0181\x02\x02\u1A7A\u1A7B\x05\u0342\u01A2\x02\u1A7B\u034F\x03\x02\x02" +
    "\x02\u1A7C\u1A7D\x07\x1E\x02\x02\u1A7D\u1A7E\x05\u0460\u0231\x02\u1A7E" +
    "\u0351\x03\x02\x02\x02\u1A7F\u1A80\x07\f\x02\x02\u1A80\u1A81\x05\u0460" +
    "\u0231\x02\u1A81\u0353\x03\x02\x02\x02\u1A82\u1A87\x07\u01F8\x02\x02\u1A83" +
    "\u1A85\x07\xED\x02\x02\u1A84\u1A83\x03\x02\x02\x02\u1A84\u1A85\x03\x02" +
    "\x02\x02\u1A85\u1A86\x03\x02\x02\x02\u1A86\u1A88\x07\u01FD\x02\x02\u1A87" +
    "\u1A84\x03\x02\x02\x02\u1A87\u1A88\x03\x02\x02\x02\u1A88\u1A89\x03\x02" +
    "\x02\x02\u1A89\u1A8A\x05\u0460\u0231\x02\u1A8A\u1A8B\x07\u0212\x02\x02" +
    "\u1A8B\u1A8C\x05\u0462\u0232\x02\u1A8C\u0355\x03\x02\x02\x02\u1A8D\u1A8E" +
    "\x07C\x02\x02\u1A8E\u1A9B\x05\u029C\u014F\x02\u1A8F\u1A90\x07\x89\x02" +
    "\x02\u1A90\u1A91\x05\u029C\u014F\x02\u1A91\u1A94\x05\u02F4\u017B\x02\u1A92" +
    "\u1A93\x07\u0145\x02\x02\u1A93\u1A95\x05\u029C\u014F\x02\u1A94\u1A92\x03" +
    "\x02\x02\x02\u1A94\u1A95\x03\x02\x02\x02\u1A95\u1A98\x03\x02\x02\x02\u1A96" +
    "\u1A97\x07\x80\x02\x02\u1A97\u1A99\x05\u029C\u014F\x02\u1A98\u1A96\x03" +
    "\x02\x02\x02\u1A98\u1A99\x03\x02\x02\x02\u1A99\u1A9B\x03\x02\x02\x02\u1A9A" +
    "\u1A8D\x03\x02\x02\x02\u1A9A\u1A8F\x03\x02\x02\x02\u1A9B\u0357\x03\x02" +
    "\x02\x02\u1A9C\u1A9D\x05\u0408\u0205\x02\u1A9D\u1A9F\x05\u0364\u01B3\x02" +
    "\u1A9E\u1AA0\x05\u035A\u01AE\x02\u1A9F\u1A9E\x03\x02\x02\x02\u1A9F\u1AA0" +
    "\x03\x02\x02\x02\u1AA0\u0359\x03\x02\x02\x02\u1AA1\u1AA2\x06\u01AE\xB0" +
    "\x02\u1AA2\u1AA5\x05\u035C\u01AF\x02\u1AA3\u1AA5\x05\u036E\u01B8\x02\u1AA4" +
    "\u1AA1\x03\x02\x02\x02\u1AA4\u1AA3\x03\x02\x02\x02\u1AA5\u035B\x03\x02" +
    "\x02\x02\u1AA6\u1AA7\x07\u01C5\x02\x02\u1AA7\u1AA8\x05\u02FA\u017E\x02" +
    "\u1AA8\u035D\x03\x02\x02\x02\u1AA9\u1AAB\x07\u023F\x02\x02\u1AAA\u1AA9" +
    "\x03\x02\x02\x02\u1AAA\u1AAB\x03\x02\x02\x02\u1AAB\u1AAC\x03\x02\x02\x02" +
    "\u1AAC\u1AAD\x07\u02FA\x02\x02\u1AAD\u035F\x03\x02\x02\x02\u1AAE\u1AB0" +
    "\t(\x02\x02\u1AAF\u1AB1\x05p9\x02\u1AB0\u1AAF\x03\x02\x02\x02\u1AB0\u1AB1" +
    "\x03\x02\x02\x02\u1AB1\u1AB2\x03\x02\x02\x02\u1AB2\u1AB6\x05\u037A\u01BE" +
    "\x02\u1AB3\u1AB5\x05\u037E\u01C0\x02\u1AB4\u1AB3\x03\x02\x02\x02\u1AB5" +
    "\u1AB8\x03\x02\x02\x02\u1AB6\u1AB4\x03\x02\x02\x02\u1AB6\u1AB7\x03\x02" +
    "\x02\x02\u1AB7\u1AFA\x03\x02\x02\x02\u1AB8\u1AB6\x03\x02\x02\x02\u1AB9" +
    "\u1ABB\x07\u01FE\x02\x02\u1ABA\u1ABC\x05\u0190\xC9\x02\u1ABB\u1ABA\x03" +
    "\x02\x02\x02\u1ABB\u1ABC\x03\x02\x02\x02\u1ABC\u1ABE\x03\x02\x02\x02\u1ABD" +
    "\u1ABF\x05\u0412\u020A\x02\u1ABE\u1ABD\x03\x02\x02\x02\u1ABE\u1ABF\x03" +
    "\x02\x02\x02\u1ABF\u1AC0\x03\x02\x02\x02\u1AC0\u1AC4\x05\u037A\u01BE\x02" +
    "\u1AC1\u1AC3\x05\u0386\u01C4\x02\u1AC2\u1AC1\x03\x02\x02\x02\u1AC3\u1AC6" +
    "\x03\x02\x02\x02\u1AC4\u1AC2\x03\x02\x02\x02\u1AC4\u1AC5\x03\x02\x02\x02" +
    "\u1AC5\u1AFA\x03\x02\x02\x02\u1AC6\u1AC4\x03\x02\x02\x02\u1AC7\u1AC9\x07" +
    "\u0272\x02\x02\u1AC8\u1ACA\x05\u0190\xC9\x02\u1AC9\u1AC8\x03\x02\x02\x02" +
    "\u1AC9\u1ACA\x03\x02\x02\x02\u1ACA\u1ACC\x03\x02\x02\x02\u1ACB\u1ACD\x05" +
    "\u0412\u020A\x02\u1ACC\u1ACB\x03\x02\x02\x02\u1ACC\u1ACD\x03\x02\x02\x02" +
    "\u1ACD\u1ACE\x03\x02\x02\x02\u1ACE\u1AD2\x05\u037A\u01BE\x02\u1ACF\u1AD1" +
    "\x05\u0388\u01C5\x02\u1AD0\u1ACF\x03\x02\x02\x02\u1AD1\u1AD4\x03\x02\x02" +
    "\x02\u1AD2\u1AD0\x03\x02\x02\x02\u1AD2\u1AD3\x03\x02\x02\x02\u1AD3\u1AFA" +
    "\x03\x02\x02\x02\u1AD4\u1AD2\x03\x02\x02\x02\u1AD5\u1AD7\x05\u0362\u01B2" +
    "\x02\u1AD6\u1AD5\x03\x02\x02\x02\u1AD6\u1AD7\x03\x02\x02\x02\u1AD7\u1AF7" +
    "\x03\x02\x02\x02\u1AD8\u1AD9\x07\u0253\x02\x02\u1AD9\u1ADF\x07\u021B\x02" +
    "\x02\u1ADA\u1ADC\x07\u0296\x02\x02\u1ADB\u1ADD\x05\u0190\xC9\x02\u1ADC" +
    "\u1ADB\x03\x02\x02\x02\u1ADC\u1ADD\x03\x02\x02\x02\u1ADD\u1ADF\x03\x02" +
    "\x02\x02\u1ADE\u1AD8\x03\x02\x02\x02\u1ADE\u1ADA\x03\x02\x02\x02\u1ADF" +
    "\u1AE1\x03\x02\x02\x02\u1AE0\u1AE2\x05p9\x02\u1AE1\u1AE0\x03\x02\x02\x02" +
    "\u1AE1\u1AE2\x03\x02\x02\x02\u1AE2\u1AE3\x03\x02\x02\x02\u1AE3\u1AE7\x05" +
    "\u037A\u01BE\x02\u1AE4\u1AE6\x05\u037E\u01C0\x02\u1AE5\u1AE4\x03\x02\x02" +
    "\x02\u1AE6\u1AE9\x03\x02\x02\x02\u1AE7\u1AE5\x03\x02\x02\x02\u1AE7\u1AE8" +
    "\x03\x02\x02\x02\u1AE8\u1AF8\x03\x02\x02\x02\u1AE9\u1AE7\x03\x02\x02\x02" +
    "\u1AEA\u1AEB\x07\u01FB\x02\x02\u1AEB\u1AED\x07\u021B\x02\x02\u1AEC\u1AEE" +
    "\x05\u0412\u020A\x02\u1AED\u1AEC\x03\x02\x02\x02\u1AED\u1AEE\x03\x02\x02" +
    "\x02\u1AEE\u1AEF\x03\x02\x02\x02\u1AEF\u1AF0\x05\u0372\u01BA\x02\u1AF0" +
    "\u1AF1\x05\u036E\u01B8\x02\u1AF1\u1AF8\x03\x02\x02\x02\u1AF2\u1AF5\x05" +
    "\u035C\u01AF\x02\u1AF3\u1AF4\x06\u01B1\xB1\x02\u1AF4\u1AF6\x05\u035E\u01B0" +
    "\x02\u1AF5\u1AF3\x03\x02\x02\x02\u1AF5\u1AF6\x03\x02\x02\x02\u1AF6\u1AF8" +
    "\x03\x02\x02\x02\u1AF7\u1ADE\x03\x02\x02\x02\u1AF7\u1AEA\x03\x02\x02\x02" +
    "\u1AF7\u1AF2\x03\x02\x02\x02\u1AF8\u1AFA\x03\x02\x02\x02\u1AF9\u1AAE\x03" +
    "\x02\x02\x02\u1AF9\u1AB9\x03\x02\x02\x02\u1AF9\u1AC7\x03\x02\x02\x02\u1AF9" +
    "\u1AD6\x03\x02\x02\x02\u1AFA\u0361\x03\x02\x02\x02\u1AFB\u1AFD\x07\u01C9" +
    "\x02\x02\u1AFC\u1AFE\x05\u0460\u0231\x02\u1AFD\u1AFC\x03\x02\x02\x02\u1AFD" +
    "\u1AFE\x03\x02\x02\x02\u1AFE\u0363\x03\x02\x02\x02\u1AFF\u1B23\x05\u038C" +
    "\u01C7\x02\u1B00\u1B02\x05\u0366\u01B4\x02\u1B01\u1B00\x03\x02\x02\x02" +
    "\u1B02\u1B05\x03\x02\x02\x02\u1B03\u1B01\x03\x02\x02\x02\u1B03\u1B04\x03" +
    "\x02\x02\x02\u1B04\u1B24\x03\x02\x02\x02\u1B05\u1B03\x03\x02\x02\x02\u1B06" +
    "\u1B08\x06\u01B3\xB2\x02\u1B07\u1B09\x05\u03D2\u01EA\x02\u1B08\u1B07\x03" +
    "\x02\x02\x02\u1B08\u1B09\x03\x02\x02\x02\u1B09\u1B0C\x03\x02\x02\x02\u1B0A" +
    "\u1B0B\x07\u0200\x02\x02\u1B0B\u1B0D\x07\x05\x02\x02\u1B0C\u1B0A\x03\x02" +
    "\x02\x02\u1B0C\u1B0D\x03\x02\x02\x02\u1B0D\u1B0E\x03\x02\x02\x02\u1B0E" +
    "\u1B0F\x07\u01B1\x02\x02\u1B0F\u1B11\x05\u02FA\u017E\x02\u1B10\u1B12\t" +
    "h\x02\x02\u1B11\u1B10\x03\x02\x02\x02\u1B11\u1B12\x03\x02\x02\x02\u1B12" +
    "\u1B21\x03\x02\x02\x02\u1B13\u1B17\x06\u01B3\xB3\x02\u1B14\u1B16\x05\u036C" +
    "\u01B7\x02\u1B15\u1B14\x03\x02\x02\x02\u1B16\u1B19\x03\x02\x02\x02\u1B17" +
    "\u1B15\x03\x02\x02\x02\u1B17\u1B18\x03\x02\x02\x02\u1B18\u1B22\x03\x02" +
    "\x02\x02\u1B19\u1B17\x03\x02\x02\x02\u1B1A\u1B1E\x06\u01B3\xB4\x02\u1B1B" +
    "\u1B1D\x05\u0366\u01B4\x02\u1B1C\u1B1B\x03\x02\x02\x02\u1B1D\u1B20\x03" +
    "\x02\x02\x02\u1B1E\u1B1C\x03\x02\x02\x02\u1B1E\u1B1F\x03\x02\x02\x02\u1B1F" +
    "\u1B22\x03\x02\x02\x02\u1B20\u1B1E\x03\x02\x02\x02\u1B21\u1B13\x03\x02" +
    "\x02\x02\u1B21\u1B1A\x03\x02\x02\x02\u1B22\u1B24\x03\x02\x02\x02\u1B23" +
    "\u1B03\x03\x02\x02\x02\u1B23\u1B06\x03\x02\x02\x02\u1B24\u0365\x03\x02" +
    "\x02\x02\u1B25\u1B27\x07\u023F\x02\x02\u1B26\u1B25\x03\x02\x02\x02\u1B26" +
    "\u1B27\x03\x02\x02\x02\u1B27\u1B28\x03\x02\x02\x02\u1B28\u1B5A\x05\u048A" +
    "\u0246\x02\u1B29\u1B2A\x06\u01B4\xB5\x02\u1B2A\u1B2B\x07\u023F\x02\x02" +
    "\u1B2B\u1B5A\x07\u02F0\x02\x02\u1B2C\u1B34\x07\u01E0\x02\x02\u1B2D\u1B35" +
    "\x05\u0476\u023C\x02\u1B2E\u1B30\x07\u0240\x02\x02\u1B2F\u1B31\x05\u02C8" +
    "\u0165\x02\u1B30\u1B2F\x03\x02\x02\x02\u1B30\u1B31\x03\x02\x02\x02\u1B31" +
    "\u1B35\x03\x02\x02\x02\u1B32\u1B33\x06\u01B4\xB6\x02\u1B33\u1B35\x05\u02FA" +
    "\u017E\x02\u1B34\u1B2D\x03\x02\x02\x02\u1B34\u1B2E\x03\x02\x02\x02\u1B34" +
    "\u1B32\x03\x02\x02\x02\u1B35\u1B5A\x03\x02\x02\x02\u1B36\u1B37\x07\u0245" +
    "\x02\x02\u1B37\u1B38\x07\u0299\x02\x02\u1B38\u1B3A\x07\u0240\x02\x02\u1B39" +
    "\u1B3B\x05\u02C8\u0165\x02\u1B3A\u1B39\x03\x02\x02\x02\u1B3A\u1B3B\x03" +
    "\x02\x02\x02\u1B3B\u1B5A\x03\x02\x02\x02\u1B3C\u1B5A\x07E\x02\x02\u1B3D" +
    "\u1B3E\x07\u0134\x02\x02\u1B3E\u1B3F\x07\u01E0\x02\x02\u1B3F\u1B5A\x07" +
    "\u0172\x02\x02\u1B40\u1B42\x07\u0253\x02\x02\u1B41\u1B40\x03\x02\x02\x02" +
    "\u1B41\u1B42\x03\x02\x02\x02\u1B42\u1B43\x03\x02\x02\x02\u1B43\u1B5A\x07" +
    "\u021B\x02\x02\u1B44\u1B46\x07\u0296\x02\x02\u1B45\u1B47\x07\u021B\x02" +
    "\x02\u1B46\u1B45\x03\x02\x02\x02\u1B46\u1B47\x03\x02\x02\x02\u1B47\u1B5A" +
    "\x03\x02\x02\x02\u1B48\u1B49\x07\r\x02\x02\u1B49\u1B5A\x05\u0480\u0241" +
    "\x02\u1B4A\u1B5A\x05\u03D2\u01EA\x02\u1B4B\u1B4C\x07[\x02\x02\u1B4C\u1B5A" +
    "\x05\u0368\u01B5\x02\u1B4D\u1B4E\x07\u014A\x02\x02\u1B4E\u1B5A\x05\u036A" +
    "\u01B6\x02\u1B4F\u1B50\x06\u01B4\xB7\x02\u1B50\u1B51\x07\u02E3\x02\x02" +
    "\u1B51\u1B5A\x05\u0472\u023A\x02\u1B52\u1B54\x06\u01B4\xB8\x02\u1B53\u1B55" +
    "\x05\u0362\u01B2\x02\u1B54\u1B53\x03\x02\x02\x02\u1B54\u1B55\x03\x02\x02" +
    "\x02\u1B55\u1B56\x03\x02\x02\x02\u1B56\u1B5A\x05\u035C\u01AF\x02\u1B57" +
    "\u1B58\x06\u01B4\xB9\x02\u1B58\u1B5A\x05\u035E\u01B0\x02\u1B59\u1B26\x03" +
    "\x02\x02\x02\u1B59\u1B29\x03\x02\x02\x02\u1B59\u1B2C\x03\x02\x02\x02\u1B59" +
    "\u1B36\x03\x02\x02\x02\u1B59\u1B3C\x03\x02\x02\x02\u1B59\u1B3D\x03\x02" +
    "\x02\x02\u1B59\u1B41\x03\x02\x02\x02\u1B59\u1B44\x03\x02\x02\x02\u1B59" +
    "\u1B48\x03\x02\x02\x02\u1B59\u1B4A\x03\x02\x02\x02\u1B59\u1B4B\x03\x02" +
    "\x02\x02\u1B59\u1B4D\x03\x02\x02\x02\u1B59\u1B4F\x03\x02\x02\x02\u1B59" +
    "\u1B52\x03\x02\x02\x02\u1B59\u1B57\x03\x02\x02\x02\u1B5A\u0367\x03\x02" +
    "\x02\x02\u1B5B\u1B5C\ti\x02\x02\u1B5C\u0369\x03\x02\x02\x02\u1B5D\u1B5E" +
    "\tj\x02\x02\u1B5E\u036B\x03\x02\x02\x02\u1B5F\u1B61\x07\u0296\x02\x02" +
    "\u1B60\u1B62\x07\u021B\x02\x02\u1B61\u1B60\x03\x02\x02\x02\u1B61\u1B62" +
    "\x03\x02\x02\x02\u1B62\u1B6E\x03\x02\x02\x02\u1B63\u1B64\x07\r\x02\x02" +
    "\u1B64\u1B6E\x05\u047C\u023F\x02\u1B65\u1B67\x05\u02F0\u0179\x02\u1B66" +
    "\u1B65\x03\x02\x02\x02\u1B66\u1B67\x03\x02\x02\x02\u1B67\u1B68\x03\x02" +
    "\x02\x02\u1B68\u1B6E\x07\u0242\x02\x02\u1B69\u1B6B\x07\u0253\x02\x02\u1B6A" +
    "\u1B69\x03\x02\x02\x02\u1B6A\u1B6B\x03\x02\x02\x02\u1B6B\u1B6C\x03\x02" +
    "\x02\x02\u1B6C\u1B6E\x07\u021B\x02\x02\u1B6D\u1B5F\x03\x02\x02\x02\u1B6D" +
    "\u1B63\x03\x02\x02\x02\u1B6D\u1B66\x03\x02\x02\x02\u1B6D\u1B6A\x03\x02" +
    "\x02\x02\u1B6E\u036D\x03\x02\x02\x02\u1B6F\u1B70\x07\u025B\x02\x02\u1B70" +
    "\u1B72\x05\u0446\u0224\x02\u1B71\u1B73\x05\u0464\u0233\x02\u1B72\u1B71" +
    "\x03\x02\x02\x02\u1B72\u1B73\x03\x02\x02\x02\u1B73\u1B76\x03\x02\x02\x02" +
    "\u1B74\u1B75\x07\u022F\x02\x02\u1B75\u1B77\tk\x02\x02\u1B76\u1B74\x03" +
    "\x02\x02\x02\u1B76\u1B77\x03\x02\x02\x02\u1B77\u1B88\x03\x02\x02\x02\u1B78" +
    "\u1B79\x07\u0245\x02\x02\u1B79\u1B7A\x07\u0299\x02\x02\u1B7A\u1B7E\x05" +
    "\u0370\u01B9\x02\u1B7B\u1B7C\x07\u0245\x02\x02\u1B7C\u1B7D\x07\u01E2\x02" +
    "\x02\u1B7D\u1B7F\x05\u0370\u01B9\x02\u1B7E\u1B7B\x03\x02\x02\x02\u1B7E" +
    "\u1B7F\x03\x02\x02\x02\u1B7F\u1B89\x03\x02\x02\x02\u1B80\u1B81\x07\u0245" +
    "\x02\x02\u1B81\u1B82\x07\u01E2\x02\x02\u1B82\u1B86\x05\u0370\u01B9\x02" +
    "\u1B83\u1B84\x07\u0245\x02\x02\u1B84\u1B85\x07\u0299\x02\x02\u1B85\u1B87" +
    "\x05\u0370\u01B9\x02\u1B86\u1B83\x03\x02\x02\x02\u1B86\u1B87\x03\x02\x02" +
    "\x02\u1B87\u1B89\x03\x02\x02\x02\u1B88\u1B78\x03\x02\x02\x02\u1B88\u1B80" +
    "\x03\x02\x02\x02\u1B88\u1B89\x03\x02\x02\x02\u1B89\u036F\x03\x02\x02\x02" +
    "\u1B8A\u1B90\t\x04\x02\x02\u1B8B\u1B8C\x07\u026D\x02\x02\u1B8C\u1B90\x05" +
    "\u048A\u0246\x02\u1B8D\u1B8E\x07\x1D\x02\x02\u1B8E\u1B90\x07;\x02\x02" +
    "\u1B8F\u1B8A\x03\x02\x02\x02\u1B8F\u1B8B\x03\x02\x02\x02\u1B8F\u1B8D\x03" +
    "\x02\x02\x02\u1B90\u0371\x03\x02\x02\x02\u1B91\u1B92\x07\u019B\x02\x02" +
    "\u1B92\u1B97\x05\u0374\u01BB\x02\u1B93\u1B94\x07\u0198\x02\x02\u1B94\u1B96" +
    "\x05\u0374\u01BB\x02\u1B95\u1B93\x03\x02\x02\x02\u1B96\u1B99\x03\x02\x02" +
    "\x02\u1B97\u1B95\x03\x02\x02\x02\u1B97\u1B98\x03\x02\x02\x02\u1B98\u1B9A" +
    "\x03\x02\x02\x02\u1B99\u1B97\x03\x02\x02\x02\u1B9A\u1B9B\x07\u019C\x02" +
    "\x02\u1B9B\u0373\x03\x02\x02\x02\u1B9C\u1B9E\x05\u0460\u0231\x02\u1B9D" +
    "\u1B9F\x05\u0392\u01CA\x02\u1B9E\u1B9D\x03\x02\x02\x02\u1B9E\u1B9F\x03" +
    "\x02\x02\x02\u1B9F\u1BA1\x03\x02\x02\x02\u1BA0\u1BA2\x05\u014C\xA7\x02" +
    "\u1BA1\u1BA0\x03\x02\x02\x02\u1BA1\u1BA2\x03\x02\x02\x02\u1BA2\u0375\x03" +
    "\x02\x02\x02\u1BA3\u1BA4\x07\u019B\x02\x02\u1BA4\u1BA9\x05\u0378\u01BD" +
    "\x02\u1BA5\u1BA6\x07\u0198\x02\x02\u1BA6\u1BA8\x05\u0378\u01BD\x02\u1BA7" +
    "\u1BA5\x03\x02\x02\x02\u1BA8\u1BAB\x03\x02\x02\x02\u1BA9\u1BA7\x03\x02" +
    "\x02\x02\u1BA9\u1BAA\x03\x02\x02\x02\u1BAA\u1BAC\x03\x02\x02\x02\u1BAB" +
    "\u1BA9\x03\x02\x02\x02\u1BAC\u1BAD\x07\u019C\x02\x02\u1BAD\u0377\x03\x02" +
    "\x02\x02\u1BAE\u1BB4\x05\u0374\u01BB\x02\u1BAF\u1BB1\x05\u02FA\u017E\x02" +
    "\u1BB0\u1BB2\x05\u014C\xA7\x02\u1BB1\u1BB0\x03\x02\x02\x02\u1BB1\u1BB2" +
    "\x03\x02\x02\x02\u1BB2\u1BB4\x03\x02\x02\x02\u1BB3\u1BAE\x03\x02\x02\x02" +
    "\u1BB3\u1BAF\x03\x02\x02\x02\u1BB4\u0379\x03\x02\x02\x02\u1BB5\u1BB6\x06" +
    "\u01BE\xBA\x02\u1BB6\u1BBA\x05\u0376\u01BC\x02\u1BB7\u1BB8\x06\u01BE\xBB" +
    "\x02\u1BB8\u1BBA\x05\u0372\u01BA\x02\u1BB9\u1BB5\x03\x02\x02\x02\u1BB9" +
    "\u1BB7\x03\x02\x02\x02\u1BBA\u037B\x03\x02\x02\x02\u1BBB\u1BBC\tl\x02" +
    "\x02\u1BBC\u037D\x03\x02\x02\x02\u1BBD\u1BC0\x05\u0380\u01C1\x02\u1BBE" +
    "\u1BC0\x05\u0384\u01C3\x02\u1BBF\u1BBD\x03\x02\x02\x02\u1BBF\u1BBE\x03" +
    "\x02\x02\x02\u1BC0\u037F\x03\x02\x02\x02\u1BC1\u1BC3\x07\xAF\x02\x02\u1BC2" +
    "\u1BC4\x07\u0181\x02\x02\u1BC3\u1BC2\x03\x02\x02\x02\u1BC3\u1BC4\x03\x02" +
    "\x02\x02\u1BC4\u1BC5\x03\x02\x02\x02\u1BC5\u1BCB\x05\u046C\u0237\x02\u1BC6" +
    "\u1BC7\x07\r\x02\x02\u1BC7\u1BCB\x05\u0480\u0241\x02\u1BC8\u1BC9\x06\u01C1" +
    "\xBC\x02\u1BC9\u1BCB\x05\u0382\u01C2\x02\u1BCA\u1BC1\x03\x02\x02\x02\u1BCA" +
    "\u1BC6\x03\x02\x02\x02\u1BCA\u1BC8\x03\x02\x02\x02\u1BCB\u0381\x03\x02" +
    "\x02\x02\u1BCC\u1BCD\tm\x02\x02\u1BCD\u0383\x03\x02\x02\x02\u1BCE\u1BCF" +
    "\tn\x02\x02\u1BCF\u1BD0\x05\u037C\u01BF\x02\u1BD0\u0385\x03\x02\x02\x02" +
    "\u1BD1\u1BD6\x05\u0380\u01C1\x02\u1BD2\u1BD3\x07\u02AC\x02\x02\u1BD3\u1BD4" +
    "\x07!\x02\x02\u1BD4\u1BD6\x05\u0460\u0231\x02\u1BD5\u1BD1\x03\x02\x02" +
    "\x02\u1BD5\u1BD2\x03\x02\x02\x02\u1BD6\u0387\x03\x02\x02\x02\u1BD7\u1BD8" +
    "\x05\u0380\u01C1\x02\u1BD8\u0389\x03\x02\x02\x02\u1BD9\u1BDA\x05\u038C" +
    "\u01C7\x02\u1BDA\u1BDB\x07\x02\x02\x03\u1BDB\u038B\x03\x02\x02\x02\u1BDC" +
    "\u1BDE\to\x02\x02\u1BDD\u1BDF\x05\u0392\u01CA\x02\u1BDE\u1BDD\x03\x02" +
    "\x02\x02\u1BDE\u1BDF\x03\x02\x02\x02\u1BDF\u1BE1\x03\x02\x02\x02\u1BE0" +
    "\u1BE2\x05\u0394\u01CB\x02\u1BE1\u1BE0\x03\x02\x02\x02\u1BE1\u1BE2\x03" +
    "\x02\x02\x02\u1BE2\u1C70\x03\x02\x02\x02\u1BE3\u1BE9\x07\u025A\x02\x02" +
    "\u1BE4\u1BE6\x07\u01E8\x02\x02\u1BE5\u1BE7\x07\u0252\x02\x02\u1BE6\u1BE5" +
    "\x03\x02\x02\x02\u1BE6\u1BE7\x03\x02\x02\x02\u1BE7\u1BE9\x03\x02\x02\x02" +
    "\u1BE8\u1BE3\x03\x02\x02\x02\u1BE8\u1BE4\x03\x02\x02\x02\u1BE9\u1BEB\x03" +
    "\x02\x02\x02\u1BEA\u1BEC\x05\u0492\u024A\x02\u1BEB\u1BEA\x03\x02\x02\x02" +
    "\u1BEB\u1BEC\x03\x02\x02\x02\u1BEC\u1BEE\x03\x02\x02\x02\u1BED\u1BEF\x05" +
    "\u0394\u01CB\x02\u1BEE\u1BED\x03\x02\x02\x02\u1BEE\u1BEF\x03\x02\x02\x02" +
    "\u1BEF\u1C70\x03\x02\x02\x02\u1BF0\u1BF2\tp\x02\x02\u1BF1\u1BF3\x05\u048E" +
    "\u0248\x02\u1BF2\u1BF1\x03\x02\x02\x02\u1BF2\u1BF3\x03\x02\x02\x02\u1BF3" +
    "\u1BF5\x03\x02\x02\x02\u1BF4\u1BF6\x05\u0394\u01CB\x02\u1BF5\u1BF4\x03" +
    "\x02\x02\x02\u1BF5\u1BF6\x03\x02\x02\x02\u1BF6\u1C70\x03\x02\x02\x02\u1BF7" +
    "\u1BF9\x07J\x02\x02\u1BF8\u1BFA\x05\u0392\u01CA\x02\u1BF9\u1BF8\x03\x02" +
    "\x02\x02\u1BF9\u1BFA\x03\x02\x02\x02\u1BFA\u1C70\x03\x02\x02\x02\u1BFB" +
    "\u1C70\tq\x02\x02\u1BFC\u1BFE\x07\u01C4\x02\x02\u1BFD\u1BFF\x05\u0392" +
    "\u01CA\x02\u1BFE\u1BFD\x03\x02\x02\x02\u1BFE\u1BFF\x03\x02\x02\x02\u1BFF" +
    "\u1C01\x03\x02\x02\x02\u1C00\u1C02\x05\u0396\u01CC\x02\u1C01\u1C00\x03" +
    "\x02\x02\x02\u1C01\u1C02\x03\x02\x02\x02\u1C02\u1C70\x03\x02\x02\x02\u1C03" +
    "\u1C05\x05\u038E\u01C8\x02\u1C04\u1C06\x05\u0392\u01CA\x02\u1C05\u1C04" +
    "\x03\x02\x02\x02\u1C05\u1C06\x03\x02\x02\x02\u1C06\u1C08\x03\x02\x02\x02" +
    "\u1C07\u1C09\x07\u01B7\x02\x02\u1C08\u1C07\x03\x02\x02\x02\u1C08\u1C09" +
    "\x03\x02\x02\x02\u1C09\u1C70\x03\x02\x02\x02\u1C0A\u1C0C\x07\u01B7\x02" +
    "\x02\u1C0B\u1C0D\x05\u0392\u01CA\x02\u1C0C\u1C0B\x03\x02\x02\x02\u1C0C" +
    "\u1C0D\x03\x02\x02\x02\u1C0D\u1C70\x03\x02\x02\x02\u1C0E\u1C0F\x07\u01C4" +
    "\x02\x02\u1C0F\u1C12\x07\u02A5\x02\x02\u1C10\u1C12\x07\u02A3\x02\x02\u1C11" +
    "\u1C0E\x03\x02\x02\x02\u1C11\u1C10\x03\x02\x02\x02\u1C12\u1C13\x03\x02" +
    "\x02\x02\u1C13\u1C15\x05\u0392\u01CA\x02\u1C14\u1C16\x05\u0396\u01CC\x02" +
    "\u1C15\u1C14\x03\x02\x02\x02\u1C15\u1C16\x03\x02\x02\x02\u1C16\u1C70\x03" +
    "\x02\x02\x02\u1C17\u1C18\x07\xE9\x02\x02\u1C18\u1C22\x07\u02A3\x02\x02" +
    "\u1C19\u1C22\x07\xF3\x02\x02\u1C1A\u1C1B\x07\xEA\x02\x02\u1C1B\u1C22\x07" +
    "\u02A3\x02\x02\u1C1C\u1C1D\x07\xE9\x02\x02\u1C1D\u1C1E\x07\u01C4\x02\x02" +
    "\u1C1E\u1C22\x07\u02A5\x02\x02\u1C1F\u1C20\x07\xEA\x02\x02\u1C20\u1C22" +
    "\x07\u02A5\x02\x02\u1C21\u1C17\x03\x02\x02\x02\u1C21\u1C19\x03\x02\x02" +
    "\x02\u1C21\u1C1A\x03\x02\x02\x02\u1C21\u1C1C\x03\x02\x02\x02\u1C21\u1C1F" +
    "\x03\x02\x02\x02\u1C22\u1C23\x03\x02\x02\x02\u1C23\u1C25\x05\u0392\u01CA" +
    "\x02\u1C24\u1C26\x07\u01B7\x02\x02\u1C25\u1C24\x03\x02\x02\x02\u1C25\u1C26" +
    "\x03\x02\x02\x02\u1C26\u1C70\x03\x02\x02\x02\u1C27\u1C28\x07\u02A2\x02" +
    "\x02\u1C28\u1C70\x05\u0392\u01CA\x02\u1C29\u1C2B\x07\u017B\x02\x02\u1C2A" +
    "\u1C2C\x05\u0392\u01CA\x02\u1C2B\u1C2A\x03\x02\x02\x02\u1C2B\u1C2C\x03" +
    "\x02\x02\x02\u1C2C\u1C2E\x03\x02\x02\x02\u1C2D\u1C2F\x05\u0394\u01CB\x02" +
    "\u1C2E\u1C2D\x03\x02\x02\x02\u1C2E\u1C2F\x03\x02\x02\x02\u1C2F\u1C70\x03" +
    "\x02\x02\x02\u1C30\u1C70\x07r\x02\x02\u1C31\u1C33\x07\u0162\x02\x02\u1C32" +
    "\u1C34\x05\u039E\u01D0\x02\u1C33\u1C32\x03\x02\x02\x02\u1C33\u1C34\x03" +
    "\x02\x02\x02\u1C34\u1C70\x03\x02\x02\x02\u1C35\u1C37\x07\u015F\x02\x02" +
    "\u1C36\u1C38\x05\u039E\u01D0\x02\u1C37\u1C36\x03\x02\x02\x02\u1C37\u1C38" +
    "\x03\x02\x02\x02\u1C38\u1C70\x03\x02\x02\x02\u1C39\u1C3B\x07q\x02\x02" +
    "\u1C3A\u1C3C\x05\u039E\u01D0\x02\u1C3B\u1C3A\x03\x02\x02\x02\u1C3B\u1C3C" +
    "\x03\x02\x02\x02\u1C3C\u1C70\x03\x02\x02\x02\u1C3D\u1C70\x07\u028C\x02" +
    "\x02\u1C3E\u1C40\x07\u01BC\x02\x02\u1C3F\u1C41\x05\u0392\u01CA\x02\u1C40" +
    "\u1C3F\x03\x02\x02\x02\u1C40\u1C41\x03\x02\x02\x02\u1C41\u1C70\x03\x02" +
    "\x02\x02\u1C42\u1C70\tr\x02\x02\u1C43\u1C44\x07\u022A\x02\x02\u1C44\u1C70" +
    "\x07\u02A2\x02\x02\u1C45\u1C49\x07\u022A\x02\x02\u1C46\u1C47\x07\u01C4" +
    "\x02\x02\u1C47\u1C4A\x07\u02A5\x02\x02\u1C48\u1C4A\x07\u02A3\x02\x02\u1C49" +
    "\u1C46\x03\x02\x02\x02\u1C49\u1C48\x03\x02\x02\x02\u1C49\u1C4A\x03\x02" +
    "\x02\x02\u1C4A\u1C4C\x03\x02\x02\x02\u1C4B\u1C4D\x05\u0396\u01CC\x02\u1C4C" +
    "\u1C4B\x03\x02\x02\x02\u1C4C\u1C4D\x03\x02\x02\x02\u1C4D\u1C70\x03\x02" +
    "\x02\x02\u1C4E\u1C50\x07\u028E\x02\x02\u1C4F\u1C51\x05\u0396\u01CC\x02" +
    "\u1C50\u1C4F\x03\x02\x02\x02\u1C50\u1C51\x03\x02\x02\x02\u1C51\u1C70\x03" +
    "\x02\x02\x02\u1C52\u1C54\x07\u015B\x02\x02\u1C53\u1C55\x05\u0392\u01CA" +
    "\x02\u1C54\u1C53\x03\x02\x02\x02\u1C54\u1C55\x03\x02\x02\x02\u1C55\u1C57" +
    "\x03\x02\x02\x02\u1C56\u1C58\x05\u0396\u01CC\x02\u1C57\u1C56\x03\x02\x02" +
    "\x02\u1C57\u1C58\x03\x02\x02\x02\u1C58\u1C70\x03\x02\x02\x02\u1C59\u1C5B" +
    "\x07\u0234\x02\x02\u1C5A\u1C5C\x05\u0396\u01CC\x02\u1C5B\u1C5A\x03\x02" +
    "\x02\x02\u1C5B\u1C5C\x03\x02\x02\x02\u1C5C\u1C70\x03\x02\x02\x02\u1C5D" +
    "\u1C5F\x07\u0228\x02\x02\u1C5E\u1C60\x05\u0396\u01CC\x02\u1C5F\u1C5E\x03" +
    "\x02\x02\x02\u1C5F\u1C60\x03\x02\x02\x02\u1C60\u1C70\x03\x02\x02\x02\u1C61" +
    "\u1C62\x07\x81\x02\x02\u1C62\u1C64\x05\u0478\u023D\x02\u1C63\u1C65\x05" +
    "\u0396\u01CC\x02\u1C64\u1C63\x03\x02\x02\x02\u1C64\u1C65\x03\x02\x02\x02" +
    "\u1C65\u1C70\x03\x02\x02\x02\u1C66\u1C67\x07\u026D\x02\x02\u1C67\u1C69" +
    "\x05\u0478\u023D\x02\u1C68\u1C6A\x05\u0396\u01CC\x02\u1C69\u1C68\x03\x02" +
    "\x02\x02\u1C69\u1C6A\x03\x02\x02\x02\u1C6A\u1C70\x03\x02\x02\x02\u1C6B" +
    "\u1C70\x07\u0134\x02\x02\u1C6C\u1C6D\x06\u01C7\xBD\x02\u1C6D\u1C70\x07" +
    "\xAE\x02\x02\u1C6E\u1C70\ts\x02\x02\u1C6F\u1BDC\x03\x02\x02\x02\u1C6F" +
    "\u1BE8\x03\x02\x02\x02\u1C6F\u1BF0\x03\x02\x02\x02\u1C6F\u1BF7\x03\x02" +
    "\x02\x02\u1C6F\u1BFB\x03\x02\x02\x02\u1C6F\u1BFC\x03\x02\x02\x02\u1C6F" +
    "\u1C03\x03\x02\x02\x02\u1C6F\u1C0A\x03\x02\x02\x02\u1C6F\u1C11\x03\x02" +
    "\x02\x02\u1C6F\u1C21\x03\x02\x02\x02\u1C6F\u1C27\x03\x02\x02\x02\u1C6F" +
    "\u1C29\x03\x02\x02\x02\u1C6F\u1C30\x03\x02\x02\x02\u1C6F\u1C31\x03\x02" +
    "\x02\x02\u1C6F\u1C35\x03\x02\x02\x02\u1C6F\u1C39\x03\x02\x02\x02\u1C6F" +
    "\u1C3D\x03\x02\x02\x02\u1C6F\u1C3E\x03\x02\x02\x02\u1C6F\u1C42\x03\x02" +
    "\x02\x02\u1C6F\u1C43\x03\x02\x02\x02\u1C6F\u1C45\x03\x02\x02\x02\u1C6F" +
    "\u1C4E\x03\x02\x02\x02\u1C6F\u1C52\x03\x02\x02\x02\u1C6F\u1C59\x03\x02" +
    "\x02\x02\u1C6F\u1C5D\x03\x02\x02\x02\u1C6F\u1C61\x03\x02\x02\x02\u1C6F" +
    "\u1C66\x03\x02\x02\x02\u1C6F\u1C6B\x03\x02\x02\x02\u1C6F\u1C6C\x03\x02" +
    "\x02\x02\u1C6F\u1C6E\x03\x02\x02\x02\u1C70\u038D\x03\x02\x02\x02\u1C71" +
    "\u1C75\x07\xEA\x02\x02\u1C72\u1C73\x07\xE9\x02\x02\u1C73\u1C75\x07\u01C4" +
    "\x02\x02\u1C74\u1C71\x03\x02\x02\x02\u1C74\u1C72\x03\x02\x02\x02\u1C75" +
    "\u038F\x03\x02\x02\x02\u1C76\u1C7C\x07\u025A\x02\x02\u1C77\u1C79\x07\u01E8" +
    "\x02\x02\u1C78\u1C7A\x07\u0252\x02\x02\u1C79\u1C78\x03\x02\x02\x02\u1C79" +
    "\u1C7A\x03\x02\x02\x02\u1C7A\u1C7C\x03\x02\x02\x02\u1C7B\u1C76\x03\x02" +
    "\x02\x02\u1C7B\u1C77\x03\x02\x02\x02\u1C7C\u0391\x03\x02\x02\x02\u1C7D" +
    "\u1C80\x07\u019B\x02\x02\u1C7E\u1C81\x05\u0472\u023A\x02\u1C7F\u1C81\x07" +
    "\u01A9\x02\x02\u1C80\u1C7E\x03\x02\x02\x02\u1C80\u1C7F\x03\x02\x02\x02" +
    "\u1C81\u1C82\x03\x02\x02\x02\u1C82\u1C83\x07\u019C\x02\x02\u1C83\u0393" +
    "\x03\x02\x02\x02\u1C84\u1C86\tt\x02\x02\u1C85\u1C84\x03\x02\x02\x02\u1C86" +
    "\u1C87\x03\x02\x02\x02\u1C87\u1C85\x03\x02\x02\x02\u1C87\u1C88\x03\x02" +
    "\x02\x02\u1C88\u0395\x03\x02\x02\x02\u1C89\u1C98\x05\u0398\u01CD\x02\u1C8A" +
    "\u1C98\x05\u039A\u01CE\x02\u1C8B\u1C98\x07\b\x02\x02\u1C8C\u1C8D\x05\u02EE" +
    "\u0178\x02\u1C8D\u1C8F\x05\u03A0\u01D1\x02\u1C8E\u1C90\x07\u01B7\x02\x02" +
    "\u1C8F\u1C8E\x03\x02\x02\x02\u1C8F\u1C90\x03\x02\x02\x02\u1C90\u1C98\x03" +
    "\x02\x02\x02\u1C91\u1C95\x07\u01B7\x02\x02\u1C92\u1C93\x05\u02EE\u0178" +
    "\x02\u1C93\u1C94\x05\u03A0\u01D1\x02\u1C94\u1C96\x03\x02\x02\x02\u1C95" +
    "\u1C92\x03\x02\x02\x02\u1C95\u1C96\x03\x02\x02\x02\u1C96\u1C98\x03\x02" +
    "\x02\x02\u1C97\u1C89\x03\x02\x02\x02\u1C97\u1C8A\x03\x02\x02\x02\u1C97" +
    "\u1C8B\x03\x02\x02\x02\u1C97\u1C8C\x03\x02\x02\x02\u1C97\u1C91\x03\x02" +
    "\x02\x02\u1C98\u0397\x03\x02\x02\x02\u1C99\u1C9B\x07\x04\x02\x02\u1C9A" +
    "\u1C9C\x07\u01B7\x02\x02\u1C9B\u1C9A\x03\x02\x02\x02\u1C9B\u1C9C\x03\x02" +
    "\x02\x02\u1C9C\u1CA0\x03\x02\x02\x02\u1C9D\u1C9E\x07\u01B7\x02\x02\u1C9E" +
    "\u1CA0\x07\x04\x02\x02\u1C9F\u1C99\x03\x02\x02\x02\u1C9F\u1C9D\x03\x02" +
    "\x02\x02\u1CA0\u0399\x03\x02\x02\x02\u1CA1\u1CA3\x075\x02\x02\u1CA2\u1CA4" +
    "\x07\u01B7\x02\x02\u1CA3\u1CA2\x03\x02\x02\x02\u1CA3\u1CA4\x03\x02\x02" +
    "\x02\u1CA4\u1CA8\x03\x02\x02\x02\u1CA5\u1CA6\x07\u01B7\x02\x02\u1CA6\u1CA8" +
    "\x075\x02\x02\u1CA7\u1CA1\x03\x02\x02\x02\u1CA7\u1CA5\x03\x02\x02\x02" +
    "\u1CA8\u039B\x03\x02\x02\x02\u1CA9\u1CAA\x07\u019B\x02\x02\u1CAA\u1CAB" +
    "\x05\u046E\u0238\x02\u1CAB\u1CAC\x07\u019C\x02\x02\u1CAC\u039D\x03\x02" +
    "\x02\x02\u1CAD\u1CAE\x07\u019B\x02\x02\u1CAE\u1CAF\x07\u017E\x02\x02\u1CAF" +
    "\u1CB0\x07\u019C\x02\x02\u1CB0\u039F\x03\x02\x02\x02\u1CB1\u1CB6\x05\u0494" +
    "\u024B\x02\u1CB2\u1CB6\x07\u01B7\x02\x02\u1CB3\u1CB4\x06\u01D1\xBE\x02" +
    "\u1CB4\u1CB6\x07\u01E0\x02\x02\u1CB5\u1CB1\x03\x02\x02\x02\u1CB5\u1CB2" +
    "\x03\x02\x02\x02\u1CB5\u1CB3\x03\x02\x02\x02\u1CB6\u03A1\x03\x02\x02\x02" +
    "\u1CB7\u1CBD\x05\u0494\u024B\x02\u1CB8\u1CB9\x06\u01D2\xBF\x02\u1CB9\u1CBD" +
    "\x07\u01E0\x02\x02\u1CBA\u1CBB\x06\u01D2\xC0\x02\u1CBB\u1CBD\x07\u01B7" +
    "\x02\x02\u1CBC\u1CB7\x03\x02\x02\x02\u1CBC\u1CB8\x03\x02\x02\x02\u1CBC" +
    "\u1CBA\x03\x02\x02\x02\u1CBD\u03A3\x03\x02\x02\x02\u1CBE\u1CC5\x05\u03A8" +
    "\u01D5\x02\u1CBF\u1CC1\x07\u0198\x02\x02\u1CC0\u1CBF\x03\x02\x02\x02\u1CC0" +
    "\u1CC1\x03\x02\x02\x02\u1CC1\u1CC2\x03\x02\x02\x02\u1CC2\u1CC4\x05\u03A8" +
    "\u01D5\x02\u1CC3\u1CC0\x03\x02\x02\x02\u1CC4\u1CC7\x03\x02\x02\x02\u1CC5" +
    "\u1CC3\x03\x02\x02\x02\u1CC5\u1CC6\x03\x02\x02\x02\u1CC6\u03A5\x03\x02" +
    "\x02\x02\u1CC7\u1CC5\x03\x02";
MySQLParser._serializedATNSegment14 = "\x02\x02\u1CC8\u1CCA\x05\u03A8\u01D5\x02\u1CC9\u1CC8\x03\x02\x02\x02\u1CCA" +
    "\u1CCB\x03\x02\x02\x02\u1CCB\u1CC9\x03\x02\x02\x02\u1CCB\u1CCC\x03\x02" +
    "\x02\x02\u1CCC\u03A7\x03\x02\x02\x02\u1CCD\u1CCF\x07\x82\x02\x02\u1CCE" +
    "\u1CD0\x07\u0181\x02\x02\u1CCF\u1CCE\x03\x02\x02\x02\u1CCF\u1CD0\x03\x02" +
    "\x02\x02\u1CD0\u1CD1\x03\x02\x02\x02\u1CD1\u1D4F\x05\u043E\u0220\x02\u1CD2" +
    "\u1CD3\x06\u01D5\xC1\x02\u1CD3\u1CD5\x07\u02F1\x02\x02\u1CD4\u1CD6\x05" +
    "\u049E\u0250\x02\u1CD5\u1CD4\x03\x02\x02\x02\u1CD5\u1CD6\x03\x02\x02\x02" +
    "\u1CD6\u1CD9\x03\x02\x02\x02\u1CD7\u1CDA\x07\u0242\x02\x02\u1CD8\u1CDA" +
    "\x05\u0494\u024B\x02\u1CD9\u1CD7\x03\x02\x02\x02\u1CD9\u1CD8\x03\x02\x02" +
    "\x02\u1CDA\u1D4F\x03\x02\x02\x02\u1CDB\u1CDD\x07\xBA\x02\x02\u1CDC\u1CDE" +
    "\x07\u0181\x02\x02\u1CDD\u1CDC\x03\x02\x02\x02\u1CDD\u1CDE\x03\x02\x02" +
    "\x02\u1CDE\u1CDF\x03\x02\x02\x02\u1CDF\u1D4F\x05\u0470\u0239\x02\u1CE0" +
    "\u1CE2\x07\xDE\x02\x02\u1CE1\u1CE3\x07\u0181\x02\x02\u1CE2\u1CE1\x03\x02" +
    "\x02\x02\u1CE2\u1CE3\x03\x02\x02\x02\u1CE3\u1CE4\x03\x02\x02\x02\u1CE4" +
    "\u1D4F\x05\u0470\u0239\x02\u1CE5\u1CE7\x07G\x02\x02\u1CE6\u1CE8\x07\u0181" +
    "\x02\x02\u1CE7\u1CE6\x03\x02\x02\x02\u1CE7\u1CE8\x03\x02\x02\x02\u1CE8" +
    "\u1CE9\x03\x02\x02\x02\u1CE9\u1D4F\x05\u046C\u0237\x02\u1CEA\u1CEC\x07" +
    "\xFD\x02\x02\u1CEB\u1CED\x07\u0181\x02\x02\u1CEC\u1CEB\x03\x02\x02\x02" +
    "\u1CEC\u1CED\x03\x02\x02\x02\u1CED\u1CEE\x03\x02\x02\x02\u1CEE\u1D4F\x05" +
    "\u047A\u023E\x02\u1CEF\u1CF1\x07\r\x02\x02\u1CF0\u1CF2\x07\u0181\x02\x02" +
    "\u1CF1\u1CF0\x03\x02\x02\x02\u1CF1\u1CF2\x03\x02\x02\x02\u1CF2\u1CF3\x03" +
    "\x02\x02\x02\u1CF3\u1D4F\x05\u047A\u023E\x02\u1CF4\u1CF5\x06\u01D5\xC2" +
    "\x02\u1CF5\u1CF7\x07a\x02\x02\u1CF6\u1CF8\x07\u0181\x02\x02\u1CF7\u1CF6" +
    "\x03\x02\x02\x02\u1CF7\u1CF8\x03\x02\x02\x02\u1CF8\u1CF9\x03\x02\x02\x02" +
    "\u1CF9\u1D4F\x05\u047C\u023F\x02\u1CFA\u1CFB\x06\u01D5\xC3\x02\u1CFB\u1CFD" +
    "\x07b\x02\x02\u1CFC\u1CFE\x07\u0181\x02\x02\u1CFD\u1CFC\x03\x02\x02\x02" +
    "\u1CFD\u1CFE\x03\x02\x02\x02\u1CFE\u1CFF\x03\x02\x02\x02\u1CFF\u1D4F\x05" +
    "\u047C\u023F\x02\u1D00\u1D02\x07E\x02\x02\u1D01\u1D03\x07\u0181\x02\x02" +
    "\u1D02\u1D01\x03\x02\x02\x02\u1D02\u1D03\x03\x02\x02\x02\u1D03\u1D04\x03" +
    "\x02\x02\x02\u1D04\u1D4F\x05\u0470\u0239\x02\u1D05\u1D07\x07\xF8\x02\x02" +
    "\u1D06\u1D08\x07\u0181\x02\x02\u1D07\u1D06\x03\x02\x02\x02\u1D07\u1D08" +
    "\x03\x02\x02\x02\u1D08\u1D09\x03\x02\x02\x02\u1D09\u1D4F\x05\u03AA\u01D6" +
    "\x02\u1D0A\u1D0C\tu\x02\x02\u1D0B\u1D0D\x07\u0181\x02\x02\u1D0C\u1D0B" +
    "\x03\x02\x02\x02\u1D0C\u1D0D\x03\x02\x02\x02\u1D0D\u1D0E\x03\x02\x02\x02" +
    "\u1D0E\u1D4F\x05\u03AA\u01D6\x02\u1D0F\u1D11\tv\x02\x02\u1D10\u1D12\x07" +
    "\u0181\x02\x02\u1D11\u1D10\x03\x02\x02\x02\u1D11\u1D12\x03\x02\x02\x02" +
    "\u1D12\u1D13\x03\x02\x02\x02\u1D13\u1D4F\x05\u046C\u0237\x02\u1D14\u1D16" +
    "\x07v\x02\x02\u1D15\u1D17\x07\u0181\x02\x02\u1D16\u1D15\x03\x02\x02\x02" +
    "\u1D16\u1D17\x03\x02\x02\x02\u1D17\u1D18\x03\x02\x02\x02\u1D18\u1D4F\x05" +
    "\u046C\u0237\x02\u1D19\u1D1B\x07\u012E\x02\x02\u1D1A\u1D1C\x07\u0181\x02" +
    "\x02\u1D1B\u1D1A\x03\x02\x02\x02\u1D1B\u1D1C\x03\x02\x02\x02\u1D1C\u1D1D" +
    "\x03\x02\x02\x02\u1D1D\u1D4F\tw\x02\x02\u1D1E\u1D20\x07\u0295\x02\x02" +
    "\u1D1F\u1D21\x07\u0181\x02\x02\u1D20\u1D1F\x03\x02\x02\x02\u1D20\u1D21" +
    "\x03\x02\x02\x02\u1D21\u1D22\x03\x02\x02\x02\u1D22\u1D23\x07\u019B\x02" +
    "\x02\u1D23\u1D24\x05\u0448\u0225\x02\u1D24\u1D25\x07\u019C\x02\x02\u1D25" +
    "\u1D4F\x03\x02\x02\x02\u1D26\u1D4F\x05\u03B0\u01D9\x02\u1D27\u1D4F\x05" +
    "\u03AC\u01D7\x02\u1D28\u1D2A\x07\xAD\x02\x02\u1D29\u1D2B\x07\u0181\x02" +
    "\x02\u1D2A\u1D29\x03\x02\x02\x02\u1D2A\u1D2B\x03\x02\x02\x02\u1D2B\u1D2C" +
    "\x03\x02\x02\x02\u1D2C\u1D4F\tx\x02\x02\u1D2D\u1D2E\x07o\x02\x02\u1D2E" +
    "\u1D30\x07y\x02\x02\u1D2F\u1D31\x07\u0181\x02\x02\u1D30\u1D2F\x03\x02" +
    "\x02\x02\u1D30\u1D31\x03\x02\x02\x02\u1D31\u1D32\x03\x02\x02\x02\u1D32" +
    "\u1D4F\x05\u047C\u023F\x02\u1D33\u1D34\x07\u020B\x02\x02\u1D34\u1D36\x07" +
    "y\x02\x02\u1D35\u1D37\x07\u0181\x02\x02\u1D36\u1D35\x03\x02\x02\x02\u1D36" +
    "\u1D37\x03\x02\x02\x02\u1D37\u1D38\x03\x02\x02\x02\u1D38\u1D4F\x05\u047C" +
    "\u023F\x02\u1D39\u1D3F\x07\u0158\x02\x02\u1D3A\u1D3C\x06\u01D5\xC4\x02" +
    "\u1D3B\u1D3D\x07\u0181\x02\x02\u1D3C\u1D3B\x03\x02\x02\x02\u1D3C\u1D3D" +
    "\x03\x02\x02\x02\u1D3D\u1D40\x03\x02\x02\x02\u1D3E\u1D40\x03\x02\x02\x02" +
    "\u1D3F\u1D3A\x03\x02\x02\x02\u1D3F\u1D3E\x03\x02\x02\x02\u1D40\u1D41\x03" +
    "\x02\x02\x02\u1D41\u1D4F\x05\u0460\u0231\x02\u1D42\u1D43\x07\u014A\x02" +
    "\x02\u1D43\u1D4F\ty\x02\x02\u1D44\u1D46\x07d\x02\x02\u1D45\u1D47\x07\u0181" +
    "\x02\x02\u1D46\u1D45\x03\x02\x02\x02\u1D46\u1D47\x03\x02\x02\x02\u1D47" +
    "\u1D48\x03\x02\x02\x02\u1D48\u1D4F\x05\u047C\u023F\x02\u1D49\u1D4B\x07" +
    "\xAF\x02\x02\u1D4A\u1D4C\x07\u0181\x02\x02\u1D4B\u1D4A\x03\x02\x02\x02" +
    "\u1D4B\u1D4C\x03\x02\x02\x02\u1D4C\u1D4D\x03\x02\x02\x02\u1D4D\u1D4F\x05" +
    "\u046C\u0237\x02\u1D4E\u1CCD\x03\x02\x02\x02\u1D4E\u1CD2\x03\x02\x02\x02" +
    "\u1D4E\u1CDB\x03\x02\x02\x02\u1D4E\u1CE0\x03\x02\x02\x02\u1D4E\u1CE5\x03" +
    "\x02\x02\x02\u1D4E\u1CEA\x03\x02\x02\x02\u1D4E\u1CEF\x03\x02\x02\x02\u1D4E" +
    "\u1CF4\x03\x02\x02\x02\u1D4E\u1CFA\x03\x02\x02\x02\u1D4E\u1D00\x03\x02" +
    "\x02\x02\u1D4E\u1D05\x03\x02\x02\x02\u1D4E\u1D0A\x03\x02\x02\x02\u1D4E" +
    "\u1D0F\x03\x02\x02\x02\u1D4E\u1D14\x03\x02\x02\x02\u1D4E\u1D19\x03\x02" +
    "\x02\x02\u1D4E\u1D1E\x03\x02\x02\x02\u1D4E\u1D26\x03\x02\x02\x02\u1D4E" +
    "\u1D27\x03\x02\x02\x02\u1D4E\u1D28\x03\x02\x02\x02\u1D4E\u1D2D\x03\x02" +
    "\x02\x02\u1D4E\u1D33\x03\x02\x02\x02\u1D4E\u1D39\x03\x02\x02\x02\u1D4E" +
    "\u1D42\x03\x02\x02\x02\u1D4E\u1D44\x03\x02\x02\x02\u1D4E\u1D49\x03\x02" +
    "\x02\x02\u1D4F\u03A9\x03\x02\x02\x02\u1D50\u1D53\x05\u046C\u0237\x02\u1D51" +
    "\u1D53\x07\u01E0\x02\x02\u1D52\u1D50\x03\x02\x02\x02\u1D52\u1D51\x03\x02" +
    "\x02\x02\u1D53\u03AB\x03\x02\x02\x02\u1D54\u1D56\x07\u01E0\x02\x02\u1D55" +
    "\u1D54\x03\x02\x02\x02\u1D55\u1D56\x03\x02\x02\x02\u1D56\u1D57\x03\x02" +
    "\x02\x02\u1D57\u1D59\x07\u01C6\x02\x02\u1D58\u1D5A\x07\u0181\x02\x02\u1D59" +
    "\u1D58\x03\x02\x02\x02\u1D59\u1D5A\x03\x02\x02\x02\u1D5A\u1D5B\x03\x02" +
    "\x02\x02\u1D5B\u1D5C\x05\u03A2\u01D2\x02\u1D5C\u03AD\x03\x02\x02\x02\u1D5D" +
    "\u1D5F\x07\u01E0\x02\x02\u1D5E\u1D5D\x03\x02\x02\x02\u1D5E\u1D5F\x03\x02" +
    "\x02\x02\u1D5F\u1D60\x03\x02\x02\x02\u1D60\u1D62\x07b\x02\x02\u1D61\u1D63" +
    "\x07\u0181\x02\x02\u1D62\u1D61\x03\x02\x02\x02\u1D62\u1D63\x03\x02\x02" +
    "\x02\u1D63\u1D64\x03\x02\x02\x02\u1D64\u1D65\x05\u047A\u023E\x02\u1D65" +
    "\u03AF\x03\x02\x02\x02\u1D66\u1D68\x07\u01E0\x02\x02\u1D67\u1D66\x03\x02" +
    "\x02\x02\u1D67\u1D68\x03\x02\x02\x02\u1D68\u1D69\x03\x02\x02\x02\u1D69" +
    "\u1D6B\x05\u02EE\u0178\x02\u1D6A\u1D6C\x07\u0181\x02\x02\u1D6B\u1D6A\x03" +
    "\x02\x02\x02\u1D6B\u1D6C\x03\x02\x02\x02\u1D6C\u1D6D\x03\x02\x02\x02\u1D6D" +
    "\u1D6E\x05\u03A0\u01D1\x02\u1D6E\u03B1\x03\x02\x02\x02\u1D6F\u1D70\x07" +
    "\"\x02\x02\u1D70\u1D71\x07\u01BE\x02\x02\u1D71\u1D74\x05\u03B4\u01DB\x02" +
    "\u1D72\u1D73\x07\xFC\x02\x02\u1D73\u1D75\x05\u046E\u0238\x02\u1D74\u1D72" +
    "\x03\x02\x02\x02\u1D74\u1D75\x03\x02\x02\x02\u1D75\u1D77\x03\x02\x02\x02" +
    "\u1D76\u1D78\x05\u03B6\u01DC\x02\u1D77\u1D76\x03\x02\x02\x02\u1D77\u1D78" +
    "\x03\x02\x02\x02\u1D78\u1D7A\x03\x02\x02\x02\u1D79\u1D7B\x05\u03BA\u01DE" +
    "\x02\u1D7A\u1D79\x03\x02\x02\x02\u1D7A\u1D7B\x03\x02\x02\x02\u1D7B\u03B3" +
    "\x03\x02\x02\x02\u1D7C\u1D7E\x07\u0222\x02\x02\u1D7D\u1D7C\x03\x02\x02" +
    "\x02\u1D7D\u1D7E\x03\x02\x02\x02\u1D7E\u1D7F\x03\x02\x02\x02\u1D7F\u1D81" +
    "\x07\u021B\x02\x02\u1D80\u1D82\x05\u03B8\u01DD\x02\u1D81\u1D80\x03\x02" +
    "\x02\x02\u1D81\u1D82\x03\x02\x02\x02\u1D82\u1D83\x03\x02\x02\x02\u1D83" +
    "\u1D85\x07\u019B\x02\x02\u1D84\u1D86\x05\u0462\u0232\x02\u1D85\u1D84\x03" +
    "\x02\x02\x02\u1D85\u1D86\x03\x02\x02\x02\u1D86\u1D87\x03\x02\x02\x02\u1D87" +
    "\u1D9E\x07\u019C\x02\x02\u1D88\u1D8A\x07\u0222\x02\x02\u1D89\u1D88\x03" +
    "\x02\x02\x02\u1D89\u1D8A\x03\x02\x02\x02\u1D8A\u1D8B\x03\x02\x02\x02\u1D8B" +
    "\u1D8C\x07\x9E\x02\x02\u1D8C\u1D8D\x07\u019B\x02\x02\u1D8D\u1D8E\x05\u02A6" +
    "\u0154\x02\u1D8E\u1D8F\x07\u019C\x02\x02\u1D8F\u1D9E\x03\x02\x02\x02\u1D90" +
    "\u1D9B\tz\x02\x02\u1D91\u1D92\x07\u019B\x02\x02\u1D92\u1D93\x05\u02A6" +
    "\u0154\x02\u1D93\u1D94\x07\u019C\x02\x02\u1D94\u1D9C\x03\x02\x02\x02\u1D95" +
    "\u1D96\x07\\\x02\x02\u1D96\u1D98\x07\u019B\x02\x02\u1D97\u1D99\x05\u0462" +
    "\u0232\x02\u1D98\u1D97\x03\x02\x02\x02\u1D98\u1D99\x03\x02\x02\x02\u1D99" +
    "\u1D9A\x03\x02\x02\x02\u1D9A\u1D9C\x07\u019C\x02\x02\u1D9B\u1D91\x03\x02" +
    "\x02\x02\u1D9B\u1D95\x03\x02\x02\x02\u1D9C\u1D9E\x03\x02\x02\x02\u1D9D" +
    "\u1D7D\x03\x02\x02\x02\u1D9D\u1D89\x03\x02\x02\x02\u1D9D\u1D90\x03\x02" +
    "\x02\x02\u1D9E\u03B5\x03\x02\x02\x02\u1D9F\u1DA0\x07\u014F\x02\x02\u1DA0" +
    "\u1DA2\x07\u01BE\x02\x02\u1DA1\u1DA3\x07\u0222\x02\x02\u1DA2\u1DA1\x03" +
    "\x02\x02\x02\u1DA2\u1DA3\x03\x02\x02\x02\u1DA3\u1DAE\x03\x02\x02\x02\u1DA4" +
    "\u1DA5\x07\x9E\x02\x02\u1DA5\u1DA6\x07\u019B\x02\x02\u1DA6\u1DA7\x05\u02A6" +
    "\u0154\x02\u1DA7\u1DA8\x07\u019C\x02\x02\u1DA8\u1DAF\x03\x02\x02\x02\u1DA9" +
    "\u1DAB\x07\u021B\x02\x02\u1DAA\u1DAC\x05\u03B8\u01DD\x02\u1DAB\u1DAA\x03" +
    "\x02\x02\x02\u1DAB\u1DAC\x03\x02\x02\x02\u1DAC\u1DAD\x03\x02\x02\x02\u1DAD" +
    "\u1DAF\x05\u0464\u0233\x02\u1DAE\u1DA4\x03\x02\x02\x02\u1DAE\u1DA9\x03" +
    "\x02\x02\x02\u1DAF\u1DB2\x03\x02\x02\x02\u1DB0\u1DB1\x07\u0150\x02\x02" +
    "\u1DB1\u1DB3\x05\u046E\u0238\x02\u1DB2\u1DB0\x03\x02\x02\x02\u1DB2\u1DB3" +
    "\x03\x02\x02\x02\u1DB3\u03B7\x03\x02\x02\x02\u1DB4\u1DB5\x06\u01DD\xC5" +
    "\x02\u1DB5\u1DB6\x07@\x02\x02\u1DB6\u1DB7\x07\u0181\x02\x02\u1DB7\u1DB8" +
    "\x05\u046E\u0238\x02\u1DB8\u03B9\x03\x02\x02\x02\u1DB9\u1DBA\x07\u019B" +
    "\x02\x02\u1DBA\u1DBF\x05\u03BC\u01DF\x02\u1DBB\u1DBC\x07\u0198\x02\x02" +
    "\u1DBC\u1DBE\x05\u03BC\u01DF\x02\u1DBD\u1DBB\x03\x02\x02\x02\u1DBE\u1DC1" +
    "\x03\x02\x02\x02\u1DBF\u1DBD\x03\x02\x02\x02\u1DBF\u1DC0\x03\x02\x02\x02" +
    "\u1DC0\u1DC2\x03\x02\x02\x02\u1DC1\u1DBF\x03\x02\x02\x02\u1DC2\u1DC3\x07" +
    "\u019C\x02\x02\u1DC3\u03BB\x03\x02\x02\x02\u1DC4\u1DC5\x07\"\x02\x02\u1DC5" +
    "\u1DD0\x05\u0460\u0231\x02\u1DC6\u1DC7\x07\u02A1\x02\x02\u1DC7\u1DC8\x07" +
    "\xB2\x02\x02\u1DC8\u1DCB\x07\u015C\x02\x02\u1DC9\u1DCC\x05\u03C4\u01E3" +
    "\x02\u1DCA\u1DCC\x07\u0231\x02\x02\u1DCB\u1DC9\x03\x02\x02\x02\u1DCB\u1DCA" +
    "\x03\x02\x02\x02\u1DCC\u1DD1\x03\x02\x02\x02\u1DCD\u1DCE\x07\u02A1\x02" +
    "\x02\u1DCE\u1DCF\x07\u0214\x02\x02\u1DCF\u1DD1\x05\u03BE\u01E0\x02\u1DD0" +
    "\u1DC6\x03\x02\x02\x02\u1DD0\u1DCD\x03\x02\x02\x02\u1DD0\u1DD1\x03\x02" +
    "\x02\x02\u1DD1\u1DD5\x03\x02\x02\x02\u1DD2\u1DD4\x05\u03C0\u01E1\x02\u1DD3" +
    "\u1DD2\x03\x02\x02\x02\u1DD4\u1DD7\x03\x02\x02\x02\u1DD5\u1DD3\x03\x02" +
    "\x02\x02\u1DD5\u1DD6\x03\x02\x02\x02\u1DD6\u1DE3\x03\x02\x02\x02\u1DD7" +
    "\u1DD5\x03\x02\x02\x02\u1DD8\u1DD9\x07\u019B\x02\x02\u1DD9\u1DDE\x05\u03C2" +
    "\u01E2\x02\u1DDA\u1DDB\x07\u0198\x02\x02\u1DDB\u1DDD\x05\u03C2\u01E2\x02" +
    "\u1DDC\u1DDA\x03\x02\x02\x02\u1DDD\u1DE0\x03\x02\x02\x02\u1DDE\u1DDC\x03" +
    "\x02\x02\x02\u1DDE\u1DDF\x03\x02\x02\x02\u1DDF\u1DE1\x03\x02\x02\x02\u1DE0" +
    "\u1DDE\x03\x02\x02\x02\u1DE1\u1DE2\x07\u019C\x02\x02\u1DE2\u1DE4\x03\x02" +
    "\x02\x02\u1DE3\u1DD8\x03\x02\x02\x02\u1DE3\u1DE4\x03\x02\x02\x02\u1DE4" +
    "\u03BD\x03\x02\x02\x02\u1DE5\u1DF2\x05\u03C4\u01E3\x02\u1DE6\u1DE7\x07" +
    "\u019B\x02\x02\u1DE7\u1DEC\x05\u03C4\u01E3\x02\u1DE8\u1DE9\x07\u0198\x02" +
    "\x02\u1DE9\u1DEB\x05\u03C4\u01E3\x02\u1DEA\u1DE8\x03\x02\x02\x02\u1DEB" +
    "\u1DEE\x03\x02\x02\x02\u1DEC\u1DEA\x03\x02\x02\x02\u1DEC\u1DED\x03\x02" +
    "\x02\x02\u1DED\u1DEF\x03\x02\x02\x02\u1DEE\u1DEC\x03\x02\x02\x02\u1DEF" +
    "\u1DF0\x07\u019C\x02\x02\u1DF0\u1DF2\x03\x02\x02\x02\u1DF1\u1DE5\x03\x02" +
    "\x02\x02\u1DF1\u1DE6\x03\x02\x02\x02\u1DF2\u03BF\x03\x02\x02\x02\u1DF3" +
    "\u1DF5\x07\u0158\x02\x02\u1DF4\u1DF6\x07\u0181\x02\x02\u1DF5\u1DF4\x03" +
    "\x02\x02\x02\u1DF5\u1DF6\x03\x02\x02\x02\u1DF6\u1DF7\x03\x02\x02\x02\u1DF7" +
    "\u1E16\x05\u0460\u0231\x02\u1DF8\u1DFA\x07\u014A\x02\x02\u1DF9\u1DF8\x03" +
    "\x02\x02\x02\u1DF9\u1DFA\x03\x02\x02\x02\u1DFA\u1DFB\x03\x02\x02\x02\u1DFB" +
    "\u1DFD\x07\x82\x02\x02\u1DFC\u1DFE\x07\u0181\x02\x02\u1DFD\u1DFC\x03\x02" +
    "\x02\x02\u1DFD\u1DFE\x03\x02\x02\x02\u1DFE\u1DFF\x03\x02\x02\x02\u1DFF" +
    "\u1E16\x05\u043E\u0220\x02\u1E00\u1E02\x07\xF0\x02\x02\u1E01\u1E03\x07" +
    "\u0181\x02\x02\u1E02\u1E01\x03\x02\x02\x02\u1E02\u1E03\x03\x02\x02\x02" +
    "\u1E03\u1E04\x03\x02\x02\x02\u1E04\u1E16\x05\u046E\u0238\x02\u1E05\u1E07" +
    "\t{\x02\x02\u1E06\u1E08\x07\u0181\x02\x02\u1E07\u1E06\x03\x02\x02\x02" +
    "\u1E07\u1E08\x03\x02\x02\x02\u1E08\u1E09\x03\x02\x02\x02\u1E09\u1E16\x05" +
    "\u046E\u0238\x02\u1E0A\u1E0B\t|\x02\x02\u1E0B\u1E0D\x07y\x02\x02\u1E0C" +
    "\u1E0E\x07\u0181\x02\x02\u1E0D\u1E0C\x03\x02\x02\x02\u1E0D\u1E0E\x03\x02" +
    "\x02\x02\u1E0E\u1E0F\x03\x02\x02\x02\u1E0F\u1E16\x05\u0480\u0241\x02\u1E10" +
    "\u1E12\x07\r\x02\x02\u1E11\u1E13\x07\u0181\x02\x02\u1E12\u1E11\x03\x02" +
    "\x02\x02\u1E12\u1E13\x03\x02\x02\x02\u1E13\u1E14\x03\x02\x02\x02\u1E14" +
    "\u1E16\x05\u0480\u0241\x02\u1E15\u1DF3\x03\x02\x02\x02\u1E15\u1DF9\x03" +
    "\x02\x02\x02\u1E15\u1E00\x03\x02\x02\x02\u1E15\u1E05\x03\x02\x02\x02\u1E15" +
    "\u1E0A\x03\x02\x02\x02\u1E15\u1E10\x03\x02\x02\x02\u1E16\u03C1\x03\x02" +
    "\x02\x02\u1E17\u1E18\x07\u014F\x02\x02\u1E18\u1E1C\x05\u0494\u024B\x02" +
    "\u1E19\u1E1B\x05\u03C0\u01E1\x02\u1E1A\u1E19\x03\x02\x02\x02\u1E1B\u1E1E" +
    "\x03\x02\x02\x02\u1E1C\u1E1A\x03\x02\x02\x02\u1E1C\u1E1D\x03\x02\x02\x02" +
    "\u1E1D\u03C3\x03\x02\x02\x02\u1E1E\u1E1C\x03\x02\x02\x02\u1E1F\u1E20\x07" +
    "\u019B\x02\x02\u1E20\u1E25\x05\u03C6\u01E4\x02\u1E21\u1E22\x07\u0198\x02" +
    "\x02\u1E22\u1E24\x05\u03C6\u01E4\x02\u1E23\u1E21\x03\x02\x02\x02\u1E24" +
    "\u1E27\x03\x02\x02\x02\u1E25\u1E23\x03\x02\x02\x02\u1E25\u1E26\x03\x02" +
    "\x02\x02\u1E26\u1E28\x03\x02\x02\x02\u1E27\u1E25\x03\x02\x02\x02\u1E28" +
    "\u1E29\x07\u019C\x02\x02\u1E29\u03C5\x03\x02\x02\x02\u1E2A\u1E2D\x05\u02A6" +
    "\u0154\x02\u1E2B\u1E2D\x07\u0231\x02\x02\u1E2C\u1E2A\x03\x02\x02\x02\u1E2C" +
    "\u1E2B\x03\x02\x02\x02\u1E2D\u03C7\x03\x02\x02\x02\u1E2E\u1E2F\x07u\x02" +
    "\x02\u1E2F\u1E30\x07\u0181\x02\x02\u1E30\u1E31\x05\u03FA\u01FE\x02\u1E31" +
    "\u03C9\x03\x02\x02\x02\u1E32\u1E33\x07\u0209\x02\x02\u1E33\u1E34\x07\u01F2" +
    "\x02\x02\u1E34\u03CB\x03\x02\x02\x02\u1E35\u1E36\x07\u0209\x02\x02\u1E36" +
    "\u1E37\x05\u02F0\u0179\x02\u1E37\u1E38\x07\u01F2\x02\x02\u1E38\u03CD\x03" +
    "\x02\x02\x02\u1E39\u1E3B\t}\x02\x02\u1E3A\u1E39\x03\x02\x02\x02\u1E3A" +
    "\u1E3B\x03\x02\x02\x02\u1E3B\u1E3C\x03\x02\x02\x02\u1E3C\u1E3D\x05\u03D0" +
    "\u01E9\x02\u1E3D\u03CF\x03\x02\x02\x02\u1E3E\u1E3F\x05\u044C\u0227\x02" +
    "\u1E3F\u1E40\x05\u03D4\u01EB\x02\u1E40\u03D1\x03\x02\x02\x02\u1E41\u1E42" +
    "\x07\u01C6\x02\x02\u1E42\u1E43\x05\u03A2\u01D2\x02\u1E43\u03D3\x03\x02" +
    "\x02\x02\u1E44\u1E46\x05\u038C\u01C7\x02\u1E45\u1E47\x05\u03D2\u01EA\x02" +
    "\u1E46\u1E45\x03\x02\x02\x02\u1E46\u1E47\x03\x02\x02\x02\u1E47\u03D5\x03" +
    "\x02\x02\x02\u1E48\u1E49\x07\u019B\x02\x02\u1E49\u1E4A\x05\u041A\u020E" +
    "\x02\u1E4A\u1E4B\x07\u0198\x02\x02\u1E4B\u1E4C\x05\u041A\u020E\x02\u1E4C" +
    "\u1E4D\x07\u019C\x02\x02\u1E4D\u03D7\x03\x02\x02\x02\u1E4E\u1E53\x05\u042A" +
    "\u0216\x02\u1E4F\u1E50\x07\u0198\x02\x02\u1E50\u1E52\x05\u042A\u0216\x02" +
    "\u1E51\u1E4F\x03\x02\x02\x02\u1E52\u1E55\x03\x02\x02\x02\u1E53\u1E51\x03" +
    "\x02\x02\x02\u1E53\u1E54\x03\x02\x02\x02\u1E54\u03D9\x03\x02\x02\x02\u1E55" +
    "\u1E53\x03\x02\x02\x02\u1E56\u1E5B\x05\u03DC\u01EF\x02\u1E57\u1E58\x07" +
    "\u0198\x02\x02\u1E58\u1E5A\x05\u03DC\u01EF\x02\u1E59\u1E57\x03\x02\x02" +
    "\x02\u1E5A\u1E5D\x03\x02\x02\x02\u1E5B\u1E59\x03\x02\x02\x02\u1E5B\u1E5C" +
    "\x03\x02\x02\x02\u1E5C\u03DB\x03\x02\x02\x02\u1E5D\u1E5B\x03\x02\x02\x02" +
    "\u1E5E\u1E5F\x05\u040E\u0208\x02\u1E5F\u1E62\x07\u0181\x02\x02\u1E60\u1E63" +
    "\x05\u029C\u014F\x02\u1E61\u1E63\x07\u01E0\x02\x02\u1E62\u1E60\x03\x02" +
    "\x02\x02\u1E62\u1E61\x03\x02\x02\x02\u1E63\u03DD\x03\x02\x02\x02\u1E64" +
    "\u1E65\x05\u02EE\u0178\x02\u1E65\u1E66\x05\u03A0\u01D1\x02\u1E66\u03DF" +
    "\x03\x02\x02\x02\u1E67\u1E69\x07\\\x02\x02\u1E68\u1E6A\x05\u03E2\u01F2" +
    "\x02\u1E69\u1E68\x03\x02\x02\x02\u1E6A\u1E6B\x03\x02\x02\x02\u1E6B\u1E69" +
    "\x03\x02\x02\x02\u1E6B\u1E6C\x03\x02\x02\x02\u1E6C\u03E1\x03\x02\x02\x02" +
    "\u1E6D\u1E6E\x07\u028A\x02\x02\u1E6E\u1E6F\x07\u01BE\x02\x02\u1E6F\u1E7A" +
    "\x05\u047C\u023F\x02\u1E70\u1E72\x07\u024B\x02\x02\u1E71\u1E70\x03\x02" +
    "\x02\x02\u1E71\u1E72\x03\x02\x02\x02\u1E72\u1E73\x03\x02\x02\x02\u1E73" +
    "\u1E74\x07\u01EE\x02\x02\u1E74\u1E75\x07\u01BE\x02\x02\u1E75\u1E7A\x05" +
    "\u047C\u023F\x02\u1E76\u1E77\x07\u01F0\x02\x02\u1E77\u1E78\x07\u01BE\x02" +
    "\x02\u1E78\u1E7A\x05\u047C\u023F\x02\u1E79\u1E6D\x03\x02\x02\x02\u1E79" +
    "\u1E71\x03\x02\x02\x02\u1E79\u1E76\x03\x02\x02\x02\u1E7A\u03E3\x03\x02" +
    "\x02\x02\u1E7B\u1E7D\x07\u0223\x02\x02\u1E7C\u1E7E\x05\u03E6\u01F4\x02" +
    "\u1E7D\u1E7C\x03\x02\x02\x02\u1E7E\u1E7F\x03\x02\x02\x02\u1E7F\u1E7D\x03" +
    "\x02\x02\x02\u1E7F\u1E80\x03\x02\x02\x02\u1E80\u03E5\x03\x02\x02\x02\u1E81" +
    "\u1E82\t~\x02\x02\u1E82\u1E83\x07\u01BE\x02\x02\u1E83\u1E84\x05\u047C" +
    "\u023F\x02\u1E84\u03E7\x03\x02\x02\x02\u1E85\u1E8A\x05\u03FA\u01FE\x02" +
    "\u1E86\u1E87\x07\u0198\x02\x02\u1E87\u1E89\x05\u03FA\u01FE\x02\u1E88\u1E86" +
    "\x03\x02\x02\x02\u1E89\u1E8C\x03\x02\x02\x02\u1E8A\u1E88\x03\x02\x02\x02" +
    "\u1E8A\u1E8B\x03\x02\x02\x02\u1E8B\u03E9\x03\x02\x02\x02\u1E8C\u1E8A\x03" +
    "\x02\x02\x02\u1E8D\u1E92\x05\u03EE\u01F8\x02\u1E8E\u1E8F\x07\u0198\x02" +
    "\x02\u1E8F\u1E91\x05\u03EE\u01F8\x02\u1E90\u1E8E\x03\x02\x02\x02\u1E91" +
    "\u1E94\x03\x02\x02\x02\u1E92\u1E90\x03\x02\x02\x02\u1E92\u1E93\x03\x02" +
    "\x02\x02\u1E93\u03EB\x03\x02\x02\x02\u1E94\u1E92\x03\x02\x02\x02\u1E95" +
    "\u1E9A\x05\u03F0\u01F9\x02\u1E96\u1E97\x07\u0198\x02\x02\u1E97\u1E99\x05" +
    "\u03F0\u01F9\x02\u1E98\u1E96\x03\x02\x02\x02\u1E99\u1E9C\x03\x02\x02\x02" +
    "\u1E9A\u1E98\x03\x02\x02\x02\u1E9A\u1E9B\x03\x02\x02\x02\u1E9B\u03ED\x03" +
    "\x02\x02\x02\u1E9C\u1E9A\x03\x02\x02\x02\u1E9D\u1EB8\x05\u03FA\u01FE\x02" +
    "\u1E9E\u1EB6\x07\xA1\x02\x02\u1E9F\u1EA2\x07\u01BE\x02\x02\u1EA0\u1EA1" +
    "\x06\u01F8\xC6\x02\u1EA1\u1EA3\x07\xFD\x02\x02\u1EA2\u1EA0\x03\x02\x02" +
    "\x02\u1EA2\u1EA3\x03\x02\x02\x02\u1EA3\u1EA4\x03\x02\x02\x02\u1EA4\u1EB7" +
    "\x05\u047C\u023F\x02\u1EA5\u1EA6\x07\u02AC\x02\x02\u1EA6\u1EAC\x05\u0494" +
    "\u024B\x02\u1EA7\u1EA8\x07\u01B1\x02\x02\u1EA8\u1EAD\x05\u047E\u0240\x02" +
    "\u1EA9\u1EAA\x06\u01F8\xC7\x02\u1EAA\u1EAB\x07\u01BE\x02\x02\u1EAB\u1EAD" +
    "\x05\u047C\u023F\x02\u1EAC\u1EA7\x03\x02\x02\x02\u1EAC\u1EA9\x03\x02\x02" +
    "\x02\u1EAC\u1EAD\x03\x02\x02\x02\u1EAD\u1EB7\x03\x02\x02\x02\u1EAE\u1EB1" +
    "\x06\u01F8\xC8\x02\u1EAF\u1EB0\x07\u02AC\x02\x02\u1EB0\u1EB2\x05\u0494" +
    "\u024B\x02\u1EB1\u1EAF\x03\x02\x02\x02\u1EB1\u1EB2\x03\x02\x02\x02\u1EB2" +
    "\u1EB3\x03\x02\x02\x02\u1EB3\u1EB4\x07\u01BE\x02\x02\u1EB4\u1EB5\x07\u02FE" +
    "\x02\x02\u1EB5\u1EB7\x07\xFD\x02\x02\u1EB6\u1E9F\x03\x02\x02\x02\u1EB6" +
    "\u1EA5\x03\x02\x02\x02\u1EB6\u1EAE\x03\x02\x02\x02\u1EB7\u1EB9\x03\x02" +
    "\x02\x02\u1EB8\u1E9E\x03\x02\x02\x02\u1EB8\u1EB9\x03\x02\x02\x02\u1EB9" +
    "\u03EF\x03\x02\x02\x02\u1EBA\u1ED7\x05\u03FA\u01FE\x02\u1EBB\u1ED2\x07" +
    "\xA1\x02\x02\u1EBC\u1EBD\x07\u02AC\x02\x02\u1EBD\u1EBF\x05\u0494\u024B" +
    "\x02\u1EBE\u1EBC\x03\x02\x02\x02\u1EBE\u1EBF\x03\x02\x02\x02\u1EBF\u1EC0" +
    "\x03\x02\x02\x02\u1EC0\u1EC1\x07\u01BE\x02\x02\u1EC1\u1EC4\x05\u047C\u023F" +
    "\x02\u1EC2\u1EC3\x07\u0260\x02\x02\u1EC3\u1EC5\x05\u047C\u023F\x02\u1EC4" +
    "\u1EC2\x03\x02\x02\x02\u1EC4\u1EC5\x03\x02\x02\x02\u1EC5\u1EC7\x03\x02" +
    "\x02\x02\u1EC6\u1EC8\x05\u03F2\u01FA\x02\u1EC7\u1EC6\x03\x02\x02\x02\u1EC7" +
    "\u1EC8\x03\x02\x02\x02\u1EC8\u1ED3\x03\x02\x02\x02\u1EC9\u1ECA\x07\u02AC" +
    "\x02\x02\u1ECA\u1ED0\x05\u0494\u024B\x02\u1ECB\u1ECC\x07\u01B1\x02\x02" +
    "\u1ECC\u1ECE\x05\u047E\u0240\x02\u1ECD\u1ECF\x05\u03F2\u01FA\x02\u1ECE" +
    "\u1ECD\x03\x02\x02\x02\u1ECE\u1ECF\x03\x02\x02\x02\u1ECF\u1ED1\x03\x02" +
    "\x02\x02\u1ED0\u1ECB\x03\x02\x02\x02\u1ED0\u1ED1\x03\x02\x02\x02\u1ED1" +
    "\u1ED3\x03\x02\x02\x02\u1ED2\u1EBE\x03\x02\x02\x02\u1ED2\u1EC9\x03\x02" +
    "\x02\x02\u1ED2\u1ED3\x03\x02\x02\x02\u1ED3\u1ED8\x03\x02\x02\x02\u1ED4" +
    "\u1ED6\x05\u03F4\u01FB\x02\u1ED5\u1ED4\x03\x02\x02\x02\u1ED5\u1ED6\x03" +
    "\x02\x02\x02\u1ED6\u1ED8\x03\x02\x02\x02\u1ED7\u1EBB\x03\x02\x02\x02\u1ED7" +
    "\u1ED5\x03\x02\x02\x02\u1ED8\u03F1\x03\x02\x02\x02\u1ED9\u1EDA\x07\u02F7" +
    "\x02\x02\u1EDA\u1EDB\x07m\x02\x02\u1EDB\u1EDC\x07\xFD\x02\x02\u1EDC\u03F3" +
    "\x03\x02\x02\x02\u1EDD\u1EDE\x07{\x02\x02\u1EDE\u1EDF\x07\u02F8\x02\x02" +
    "\u1EDF\u1EE0\x07\xFD\x02\x02\u1EE0\u03F5\x03\x02\x02\x02\u1EE1\u1EE2\x07" +
    "\u0260\x02\x02\u1EE2\u1EE3\x05\u047C\u023F\x02\u1EE3\u03F7\x03\x02\x02" +
    "\x02\u1EE4\u1EE8\x05\u0494\u024B\x02\u1EE5\u1EE6\x07\u01A2\x02\x02\u1EE6" +
    "\u1EE9\x05\u0494\u024B\x02\u1EE7\u1EE9\x07\u01A3\x02\x02\u1EE8\u1EE5\x03" +
    "\x02\x02\x02\u1EE8\u1EE7\x03\x02\x02\x02\u1EE8\u1EE9\x03\x02\x02\x02\u1EE9" +
    "\u03F9\x03\x02\x02\x02\u1EEA\u1EF0\x05\u03F8\u01FD\x02\u1EEB\u1EED\x07" +
    "\u01D2\x02\x02\u1EEC\u1EEE\x05\u049C\u024F\x02\u1EED\u1EEC\x03\x02\x02" +
    "\x02\u1EED\u1EEE\x03\x02\x02\x02\u1EEE\u1EF0\x03\x02\x02\x02\u1EEF\u1EEA" +
    "\x03\x02\x02\x02\u1EEF\u1EEB\x03\x02\x02\x02\u1EF0\u03FB\x03\x02\x02\x02" +
    "\u1EF1\u1EF2\x07\u0220\x02\x02\u1EF2\u1EF3\x05\u047A\u023E\x02\u1EF3\u03FD" +
    "\x03\x02\x02\x02\u1EF4\u1EF7\x05\u03FC\u01FF\x02\u1EF5\u1EF7\x05\u0160" +
    "\xB1\x02\u1EF6\u1EF4\x03\x02\x02\x02\u1EF6\u1EF5\x03\x02\x02\x02\u1EF7" +
    "\u03FF\x03\x02\x02\x02\u1EF8\u1EF9\t\x7F\x02\x02\u1EF9\u0401\x03\x02\x02" +
    "\x02\u1EFA\u1EFB\t\x80\x02\x02\u1EFB\u0403\x03\x02\x02\x02\u1EFC\u1EFD" +
    "\x06\u0203\xC9\x02\u1EFD\u1EFE\x07\"\x02\x02\u1EFE\u1EFF\x05\u0464\u0233" +
    "\x02\u1EFF\u0405\x03\x02\x02\x02\u1F00\u1F06\x05\u046A\u0236\x02\u1F01" +
    "\u1F03\x05\u0466\u0234\x02\u1F02\u1F04\x05\u046A\u0236\x02\u1F03\u1F02" +
    "\x03\x02\x02\x02\u1F03\u1F04\x03\x02\x02\x02\u1F04\u1F06\x03\x02\x02\x02" +
    "\u1F05\u1F00\x03\x02\x02\x02\u1F05\u1F01\x03\x02\x02\x02\u1F06\u0407\x03" +
    "\x02\x02\x02\u1F07\u1F08\x06\u0205\xCA\x02\u1F08\u1F0C\x05\u0460\u0231" +
    "\x02\u1F09\u1F0A\x06\u0205\xCB\x02\u1F0A\u1F0C\x05\u0406\u0204\x02\u1F0B" +
    "\u1F07\x03\x02\x02\x02\u1F0B\u1F09\x03\x02\x02\x02\u1F0C\u0409\x03\x02" +
    "\x02\x02\u1F0D\u1F0E\x05\u0460\u0231\x02\u1F0E\u040B\x03\x02\x02\x02\u1F0F" +
    "\u1F10\x07\u019B\x02\x02\u1F10\u1F15\x05\u040A\u0206\x02\u1F11\u1F12\x07" +
    "\u0198\x02\x02\u1F12\u1F14\x05\u040A\u0206\x02\u1F13\u1F11\x03\x02\x02" +
    "\x02\u1F14\u1F17\x03\x02\x02\x02\u1F15\u1F13\x03\x02\x02\x02\u1F15\u1F16" +
    "\x03\x02\x02\x02\u1F16\u1F18\x03\x02\x02\x02\u1F17\u1F15\x03\x02\x02\x02" +
    "\u1F18\u1F19\x07\u019C\x02\x02\u1F19\u040D\x03\x02\x02\x02\u1F1A\u1F1B" +
    "\x05\u0406\u0204\x02\u1F1B\u040F\x03\x02\x02\x02\u1F1C\u1F1F\x05\u040E" +
    "\u0208\x02\u1F1D\u1F1F\x05\u0416\u020C\x02\u1F1E\u1F1C\x03\x02\x02\x02" +
    "\u1F1E\u1F1D\x03\x02\x02\x02\u1F1F\u0411\x03\x02\x02\x02\u1F20\u1F21\x05" +
    "\u0460\u0231\x02\u1F21\u0413\x03\x02\x02\x02\u1F22\u1F23\x05\u0406\u0204" +
    "\x02\u1F23\u0415\x03\x02\x02\x02\u1F24\u1F25\x05\u0460\u0231\x02\u1F25" +
    "\u1F29\x07\u0197\x02\x02\u1F26\u1F27\x05\u0460\u0231\x02\u1F27\u1F28\x07" +
    "\u0197\x02\x02\u1F28\u1F2A\x03\x02\x02\x02\u1F29\u1F26\x03\x02\x02\x02" +
    "\u1F29\u1F2A\x03\x02\x02\x02\u1F2A\u1F2B\x03\x02\x02\x02\u1F2B\u1F2C\x07" +
    "\u018B\x02\x02\u1F2C\u0417\x03\x02\x02\x02\u1F2D\u1F2E\x05\u0460\u0231" +
    "\x02\u1F2E\u0419\x03\x02\x02\x02\u1F2F\u1F30\x05\u0460\u0231\x02\u1F30" +
    "\u041B\x03\x02\x02\x02\u1F31\u1F32\x05\u0466\u0234\x02\u1F32\u041D\x03" +
    "\x02\x02\x02\u1F33\u1F34\x05\u0466\u0234\x02\u1F34\u041F\x03\x02\x02\x02" +
    "\u1F35\u1F36\x05\u0466\u0234\x02\u1F36\u0421\x03\x02\x02\x02\u1F37\u1F38" +
    "\x05\u0466\u0234\x02\u1F38\u0423\x03\x02\x02\x02\u1F39\u1F3A\x05\u0466" +
    "\u0234\x02\u1F3A\u0425\x03\x02\x02\x02\u1F3B\u1F3C\x05\u0466\u0234\x02" +
    "\u1F3C\u0427\x03\x02\x02\x02\u1F3D\u1F40\x05\u0466\u0234\x02\u1F3E\u1F40" +
    "\x05\u046A\u0236\x02\u1F3F\u1F3D\x03\x02\x02\x02\u1F3F\u1F3E\x03\x02\x02" +
    "\x02\u1F40\u0429\x03\x02\x02\x02\u1F41\u1F44\x05\u0466\u0234\x02\u1F42" +
    "\u1F44\x05\u046A\u0236\x02\u1F43\u1F41\x03\x02\x02\x02\u1F43\u1F42\x03" +
    "\x02\x02\x02\u1F44\u042B\x03\x02\x02\x02\u1F45\u1F46\x05\u0460\u0231\x02" +
    "\u1F46\u042D\x03\x02\x02\x02\u1F47\u1F48\x05\u0460\u0231\x02\u1F48\u042F" +
    "\x03\x02\x02\x02\u1F49\u1F4A\x05\u0460\u0231\x02\u1F4A\u0431\x03\x02\x02" +
    "\x02\u1F4B\u1F4C\x05\u0460\u0231\x02\u1F4C\u0433\x03\x02\x02\x02\u1F4D" +
    "\u1F4E\x05\u0466\u0234\x02\u1F4E\u0435\x03\x02\x02\x02\u1F4F\u1F50\x05" +
    "\u0466\u0234\x02\u1F50\u0437\x03\x02\x02\x02\u1F51\u1F52\x05\u0460\u0231" +
    "\x02\u1F52\u0439\x03\x02\x02\x02\u1F53\u1F54\x05\u0494\u024B\x02\u1F54" +
    "\u043B\x03\x02\x02\x02\u1F55\u1F56\x05\u0494\u024B\x02\u1F56\u043D\x03" +
    "\x02\x02\x02\u1F57\u1F58\x05\u0494\u024B\x02\u1F58\u043F\x03\x02\x02\x02" +
    "\u1F59\u1F5C\x05\u0466\u0234\x02\u1F5A\u1F5C\x05\u046A\u0236\x02\u1F5B" +
    "\u1F59\x03\x02\x02\x02\u1F5B\u1F5A\x03\x02\x02\x02\u1F5C\u0441\x03\x02" +
    "\x02\x02\u1F5D\u1F5E\x05\u041A\u020E\x02\u1F5E\u1F5F\x05\u046A\u0236\x02" +
    "\u1F5F\u0443\x03\x02\x02\x02\u1F60\u1F68\x05\u0460\u0231\x02\u1F61\u1F62" +
    "\x07\u0197\x02\x02\u1F62\u1F69\x07\u018B\x02\x02\u1F63\u1F66\x05\u046A" +
    "\u0236\x02\u1F64\u1F65\x07\u0197\x02\x02\u1F65\u1F67\x07\u018B\x02\x02" +
    "\u1F66\u1F64\x03\x02\x02\x02\u1F66\u1F67\x03\x02\x02\x02\u1F67\u1F69\x03" +
    "\x02\x02\x02\u1F68\u1F61\x03\x02\x02\x02\u1F68\u1F63\x03\x02\x02\x02\u1F68" +
    "\u1F69\x03\x02\x02\x02\u1F69\u0445\x03\x02\x02\x02\u1F6A\u1F6D\x05\u0466" +
    "\u0234\x02\u1F6B\u1F6D\x05\u046A\u0236\x02\u1F6C\u1F6A\x03\x02\x02\x02" +
    "\u1F6C\u1F6B\x03\x02\x02\x02\u1F6D\u0447\x03\x02\x02\x02\u1F6E\u1F73\x05" +
    "\u0446\u0224\x02\u1F6F\u1F70\x07\u0198\x02\x02\u1F70\u1F72\x05\u0446\u0224" +
    "\x02\u1F71\u1F6F\x03\x02\x02\x02\u1F72\u1F75\x03\x02\x02\x02\u1F73\u1F71" +
    "\x03\x02\x02\x02\u1F73\u1F74\x03\x02\x02\x02\u1F74\u0449\x03\x02\x02\x02" +
    "\u1F75\u1F73\x03\x02\x02\x02\u1F76\u1F7B\x05\u0444\u0223\x02\u1F77\u1F78" +
    "\x07\u0198\x02\x02\u1F78\u1F7A\x05\u0444\u0223\x02\u1F79\u1F77\x03\x02" +
    "\x02\x02";
MySQLParser._serializedATNSegment15 = "\u1F7A\u1F7D\x03\x02\x02\x02\u1F7B\u1F79\x03\x02\x02\x02\u1F7B\u1F7C\x03" +
    "\x02\x02\x02\u1F7C\u044B\x03\x02\x02\x02\u1F7D\u1F7B\x03\x02\x02\x02\u1F7E" +
    "\u1F7F\x05\u0460\u0231\x02\u1F7F\u044D\x03\x02\x02\x02\u1F80\u1F83\x05" +
    "\u045E\u0230\x02\u1F81\u1F83\x05\u04AC\u0257\x02\u1F82\u1F80\x03\x02\x02" +
    "\x02\u1F82\u1F81\x03\x02\x02\x02\u1F83\u044F\x03\x02\x02\x02\u1F84\u1F85" +
    "\x05\u044E\u0228\x02\u1F85\u0451\x03\x02\x02\x02\u1F86\u1F89\x05\u045E" +
    "\u0230\x02\u1F87\u1F89\x05\u04B2\u025A\x02\u1F88\u1F86\x03\x02\x02\x02" +
    "\u1F88\u1F87\x03\x02\x02\x02\u1F89\u0453\x03\x02\x02\x02\u1F8A\u1F8B\x05" +
    "\u0452\u022A\x02\u1F8B\u0455\x03\x02\x02\x02\u1F8C\u1F8D\x05\u0460\u0231" +
    "\x02\u1F8D\u0457\x03\x02\x02\x02\u1F8E\u1F8F\x05\u047A\u023E\x02\u1F8F" +
    "\u0459\x03\x02\x02\x02\u1F90\u1F91\x05\u0460\u0231\x02\u1F91\u045B\x03" +
    "\x02\x02\x02\u1F92\u1F93\x05\u0460\u0231\x02\u1F93\u045D\x03\x02\x02\x02" +
    "\u1F94\u1F98\t\x81\x02\x02\u1F95\u1F96\x06\u0230\xCC\x02\u1F96\u1F98\x07" +
    "\u0309\x02\x02\u1F97\u1F94\x03\x02\x02\x02\u1F97\u1F95\x03\x02\x02\x02" +
    "\u1F98\u045F\x03\x02\x02\x02\u1F99\u1F9C\x05\u045E\u0230\x02\u1F9A\u1F9C" +
    "\x05\u04A6\u0254\x02\u1F9B\u1F99\x03\x02\x02\x02\u1F9B\u1F9A\x03\x02\x02" +
    "\x02\u1F9C\u0461\x03\x02\x02\x02\u1F9D\u1FA2\x05\u0460\u0231\x02\u1F9E" +
    "\u1F9F\x07\u0198\x02\x02\u1F9F\u1FA1\x05\u0460\u0231\x02\u1FA0\u1F9E\x03" +
    "\x02\x02\x02\u1FA1\u1FA4\x03\x02\x02\x02\u1FA2\u1FA0\x03\x02\x02\x02\u1FA2" +
    "\u1FA3\x03\x02\x02\x02\u1FA3\u0463\x03\x02\x02\x02\u1FA4\u1FA2\x03\x02" +
    "\x02\x02\u1FA5\u1FA6\x07\u019B\x02\x02\u1FA6\u1FA7\x05\u0462\u0232\x02" +
    "\u1FA7\u1FA8\x07\u019C\x02\x02\u1FA8\u0465\x03\x02\x02\x02\u1FA9\u1FAB" +
    "\x05\u0460\u0231\x02\u1FAA\u1FAC\x05\u046A\u0236\x02\u1FAB\u1FAA\x03\x02" +
    "\x02\x02\u1FAB\u1FAC\x03\x02\x02\x02\u1FAC\u0467\x03\x02\x02\x02\u1FAD" +
    "\u1FB2\x05\u0460\u0231\x02\u1FAE\u1FB0\x05\u046A\u0236\x02\u1FAF\u1FB1" +
    "\x05\u046A\u0236\x02\u1FB0\u1FAF\x03\x02\x02\x02\u1FB0\u1FB1\x03\x02\x02" +
    "\x02\u1FB1\u1FB3\x03\x02\x02\x02\u1FB2\u1FAE\x03\x02\x02\x02\u1FB2\u1FB3" +
    "\x03\x02\x02\x02\u1FB3\u1FB9\x03\x02\x02\x02\u1FB4\u1FB5\x06\u0235\xCD" +
    "\x02\u1FB5\u1FB6\x05\u046A\u0236\x02\u1FB6\u1FB7\x05\u046A\u0236\x02\u1FB7" +
    "\u1FB9\x03\x02\x02\x02\u1FB8\u1FAD\x03\x02\x02\x02\u1FB8\u1FB4\x03\x02" +
    "\x02\x02\u1FB9\u0469\x03\x02\x02\x02\u1FBA\u1FBB\x07\u0197\x02\x02\u1FBB" +
    "\u1FBC\x05\u0460\u0231\x02\u1FBC\u046B\x03\x02\x02\x02\u1FBD\u1FBE\t\x82" +
    "\x02\x02\u1FBE\u046D\x03\x02\x02\x02\u1FBF\u1FC0\t\x83\x02\x02\u1FC0\u046F" +
    "\x03\x02\x02\x02\u1FC1\u1FC2\t\x84\x02\x02\u1FC2\u0471\x03\x02\x02\x02" +
    "\u1FC3\u1FC9\x07\u017E\x02\x02\u1FC4\u1FC5\x06\u023A\xCE\x02\u1FC5\u1FC9" +
    "\x07\u01A7\x02\x02\u1FC6\u1FC9\x07\u0180\x02\x02\u1FC7\u1FC9\x07\u017F" +
    "\x02\x02\u1FC8\u1FC3\x03\x02\x02\x02\u1FC8\u1FC4\x03\x02\x02\x02\u1FC8" +
    "\u1FC6\x03\x02\x02\x02\u1FC8\u1FC7\x03\x02\x02\x02\u1FC9\u0473\x03\x02" +
    "\x02\x02\u1FCA\u1FD4\x05\u0480\u0241\x02\u1FCB\u1FD4\x05\u0486\u0244\x02" +
    "\u1FCC\u1FD4\x05\u048C\u0247\x02\u1FCD\u1FD4\x05\u048A\u0246\x02\u1FCE" +
    "\u1FD4\x05\u0488\u0245\x02\u1FCF\u1FD1\x07\u0305\x02\x02\u1FD0\u1FCF\x03" +
    "\x02\x02\x02\u1FD0\u1FD1\x03\x02\x02\x02\u1FD1\u1FD2\x03\x02\x02\x02\u1FD2" +
    "\u1FD4\t\x85\x02\x02\u1FD3\u1FCA\x03\x02\x02\x02\u1FD3\u1FCB\x03\x02\x02" +
    "\x02\u1FD3\u1FCC\x03\x02\x02\x02\u1FD3\u1FCD\x03\x02\x02\x02\u1FD3\u1FCE" +
    "\x03\x02\x02\x02\u1FD3\u1FD0\x03\x02\x02\x02\u1FD4\u0475\x03\x02\x02\x02" +
    "\u1FD5\u1FDB\x05\u0474\u023B\x02\u1FD6\u1FD7\x07\u0189\x02\x02\u1FD7\u1FDB" +
    "\x05\u046C\u0237\x02\u1FD8\u1FD9\x07\u018A\x02\x02\u1FD9\u1FDB\x05\u046C" +
    "\u0237\x02\u1FDA\u1FD5\x03\x02\x02\x02\u1FDA\u1FD6\x03\x02\x02\x02\u1FDA" +
    "\u1FD8\x03\x02\x02\x02\u1FDB\u0477\x03\x02\x02\x02\u1FDC\u1FDD\x07\u019B" +
    "\x02\x02\u1FDD\u1FE2\x05\u047C\u023F\x02\u1FDE\u1FDF\x07\u0198\x02\x02" +
    "\u1FDF\u1FE1\x05\u047C\u023F\x02\u1FE0\u1FDE\x03\x02\x02\x02\u1FE1\u1FE4" +
    "\x03\x02\x02\x02\u1FE2\u1FE0\x03\x02\x02\x02\u1FE2\u1FE3\x03\x02\x02\x02" +
    "\u1FE3\u1FE5\x03\x02\x02\x02\u1FE4\u1FE2\x03\x02\x02\x02\u1FE5\u1FE6\x07" +
    "\u019C\x02\x02\u1FE6\u0479\x03\x02\x02\x02\u1FE7\u1FEB\x07\u030A\x02\x02" +
    "\u1FE8\u1FE9\x06\u023E\xCF\x02\u1FE9\u1FEB\x07\u0309\x02\x02\u1FEA\u1FE7" +
    "\x03\x02\x02\x02\u1FEA\u1FE8\x03\x02\x02\x02\u1FEB\u047B\x03\x02\x02\x02" +
    "\u1FEC\u1FF0\x05\u047A\u023E\x02\u1FED\u1FF0\x07\u01A7\x02\x02\u1FEE\u1FF0" +
    "\x07\u01A8\x02\x02\u1FEF\u1FEC\x03\x02\x02\x02\u1FEF\u1FED\x03\x02\x02" +
    "\x02\u1FEF\u1FEE\x03\x02\x02\x02\u1FF0\u047D\x03\x02\x02\x02\u1FF1\u1FF5" +
    "\x05\u047A\u023E\x02\u1FF2\u1FF3\x06\u0240\xD0\x02\u1FF3\u1FF5\x07\u01A7" +
    "\x02\x02\u1FF4\u1FF1\x03\x02\x02\x02\u1FF4\u1FF2\x03\x02\x02\x02\u1FF5" +
    "\u047F\x03\x02\x02\x02\u1FF6\u1FF8\x07\u0305\x02\x02\u1FF7\u1FF6\x03\x02" +
    "\x02\x02\u1FF7\u1FF8\x03\x02\x02\x02\u1FF8\u1FF9\x03\x02\x02\x02\u1FF9" +
    "\u1FFC\x05\u047A\u023E\x02\u1FFA\u1FFC\x07\u0307\x02\x02\u1FFB\u1FF7\x03" +
    "\x02\x02\x02\u1FFB\u1FFA\x03\x02\x02\x02\u1FFC\u2000\x03\x02\x02\x02\u1FFD" +
    "\u1FFF\x05\u047A\u023E\x02\u1FFE\u1FFD\x03\x02\x02\x02\u1FFF\u2002\x03" +
    "\x02\x02\x02\u2000\u1FFE\x03\x02\x02\x02\u2000\u2001\x03\x02\x02\x02\u2001" +
    "\u0481\x03\x02\x02\x02\u2002\u2000\x03\x02\x02\x02\u2003\u2004\x05\u047A" +
    "\u023E\x02\u2004\u0483\x03\x02\x02\x02\u2005\u200A\x05\u047A\u023E\x02" +
    "\u2006\u2007\x07\u0198\x02\x02\u2007\u2009\x05\u047A\u023E\x02\u2008\u2006" +
    "\x03\x02\x02\x02\u2009\u200C\x03\x02\x02\x02\u200A\u2008\x03\x02\x02\x02" +
    "\u200A\u200B\x03\x02\x02\x02\u200B\u0485\x03\x02\x02\x02\u200C\u200A\x03" +
    "\x02\x02\x02\u200D\u200E\t\x84\x02\x02\u200E\u0487\x03\x02\x02\x02\u200F" +
    "\u2010\t\x86\x02\x02\u2010\u0489\x03\x02\x02\x02\u2011\u2012\t\x87\x02" +
    "\x02\u2012\u048B\x03\x02\x02\x02\u2013\u2014\x07r\x02\x02\u2014\u201A" +
    "\x07\u030A\x02\x02\u2015\u2016\x07\u0162\x02\x02\u2016\u201A\x07\u030A" +
    "\x02\x02\u2017\u2018\x07\u015F\x02\x02\u2018\u201A\x07\u030A\x02\x02\u2019" +
    "\u2013\x03\x02\x02\x02\u2019\u2015\x03\x02\x02\x02\u2019\u2017\x03\x02" +
    "\x02\x02\u201A\u048D\x03\x02\x02\x02\u201B\u201E\x05\u0392\u01CA\x02\u201C" +
    "\u201E\x05\u0492\u024A\x02\u201D\u201B\x03\x02\x02\x02\u201D\u201C\x03" +
    "\x02\x02\x02\u201E\u048F\x03\x02\x02\x02\u201F\u2020\x05\u0492\u024A\x02" +
    "\u2020\u0491\x03\x02\x02\x02\u2021\u2022\x07\u019B\x02\x02\u2022\u2023" +
    "\x07\u017E\x02\x02\u2023\u2024\x07\u0198\x02\x02\u2024\u2025\x07\u017E" +
    "\x02\x02\u2025\u2026\x07\u019C\x02\x02\u2026\u0493\x03\x02\x02\x02\u2027" +
    "\u202A\x07\u030A\x02\x02\u2028\u202A\x05\u0460\u0231\x02\u2029\u2027\x03" +
    "\x02\x02\x02\u2029\u2028\x03\x02\x02\x02\u202A\u0495\x03\x02\x02\x02\u202B" +
    "\u202E\x05\u045E\u0230\x02\u202C\u202E\x05\u04B4\u025B\x02\u202D\u202B" +
    "\x03\x02\x02\x02\u202D\u202C\x03\x02\x02\x02\u202E\u0497\x03\x02\x02\x02" +
    "\u202F\u2032\x05\u0452\u022A\x02\u2030\u2032\x05\u047A\u023E\x02\u2031" +
    "\u202F\x03\x02\x02\x02\u2031\u2030\x03\x02\x02\x02\u2032\u0499\x03\x02" +
    "\x02\x02\u2033\u2036\x05\u0472\u023A\x02\u2034\u2036\x05\u045E\u0230\x02" +
    "\u2035\u2033\x03\x02\x02\x02\u2035\u2034\x03\x02\x02\x02\u2036\u049B\x03" +
    "\x02\x02\x02\u2037\u2038\x07\u019B\x02\x02\u2038\u2039\x07\u019C\x02\x02" +
    "\u2039\u049D\x03\x02\x02\x02\u203A\u203B\t\x88\x02\x02\u203B\u049F\x03" +
    "\x02\x02\x02\u203C\u203D\t\x89\x02\x02\u203D\u04A1\x03\x02\x02\x02\u203E" +
    "\u203F\x07\x9D\x02\x02\u203F\u2045\x07\u0197\x02\x02\u2040\u2041\x07\xB6" +
    "\x02\x02\u2041\u2045\x07\u0197\x02\x02\u2042\u2043\x07\u0136\x02\x02\u2043" +
    "\u2045\x07\u0197\x02\x02\u2044\u203E\x03\x02\x02\x02\u2044\u2040\x03\x02" +
    "\x02\x02\u2044\u2042\x03\x02\x02\x02\u2045\u04A3\x03\x02\x02\x02\u2046" +
    "\u2047\x07\u02B2\x02\x02\u2047\u2051\x07\u0197\x02\x02\u2048\u2049\x07" +
    "\u02C1\x02\x02\u2049\u2051\x07\u0197\x02\x02\u204A\u204B\x07\x9D\x02\x02" +
    "\u204B\u2051\x07\u0197\x02\x02\u204C\u204D\x07\xB6\x02\x02\u204D\u2051" +
    "\x07\u0197\x02\x02\u204E\u204F\x07\u0136\x02\x02\u204F\u2051\x07\u0197" +
    "\x02\x02\u2050\u2046\x03\x02\x02\x02\u2050\u2048\x03\x02\x02\x02\u2050" +
    "\u204A\x03\x02\x02\x02\u2050\u204C\x03\x02\x02\x02\u2050\u204E\x03\x02" +
    "\x02\x02\u2051\u04A5\x03\x02\x02\x02\u2052\u205A\x06\u0254\xD1\x02\u2053" +
    "\u205B\x05\u04AC\u0257\x02\u2054\u205B\x05\u04B8\u025D\x02\u2055\u205B" +
    "\x07\x13\x02\x02\u2056\u2057\x06\u0254\xD2\x02\u2057\u205B\x07:\x02\x02" +
    "\u2058\u2059\x06\u0254\xD3\x02\u2059\u205B\x07\u02EA\x02\x02\u205A\u2053" +
    "\x03\x02\x02\x02\u205A\u2054\x03\x02\x02\x02\u205A\u2055\x03\x02\x02\x02" +
    "\u205A\u2056\x03\x02\x02\x02\u205A\u2058\x03\x02\x02\x02\u205B\u2064\x03" +
    "\x02\x02\x02\u205C\u2062\x05\u04B0\u0259\x02\u205D\u2062\x05\u04A8\u0255" +
    "\x02\u205E\u2062\x05\u04AA\u0256\x02\u205F\u2062\x05\u04AE\u0258\x02\u2060" +
    "\u2062\x05\u04B6\u025C\x02\u2061\u205C\x03\x02\x02\x02\u2061\u205D\x03" +
    "\x02\x02\x02\u2061\u205E\x03\x02\x02\x02\u2061\u205F\x03\x02\x02\x02\u2061" +
    "\u2060\x03\x02\x02\x02\u2062\u2064\x03\x02\x02\x02\u2063\u2052\x03\x02" +
    "\x02\x02\u2063\u2061\x03\x02\x02\x02\u2064\u04A7\x03\x02\x02\x02\u2065" +
    "\u2066\t\x8A\x02\x02\u2066\u04A9\x03\x02\x02\x02\u2067\u2068\t\x8B\x02" +
    "\x02\u2068\u04AB\x03\x02\x02\x02\u2069\u2074\x06\u0257\xD4\x02\u206A\u2075" +
    "\x05\u04BA\u025E\x02\u206B\u2075\x07\x87\x02\x02\u206C\u2075\x07\x93\x02" +
    "\x02\u206D\u2075\x07\xF1\x02\x02\u206E\u2075\x07\u0107\x02\x02\u206F\u2075" +
    "\x07\u010B\x02\x02\u2070\u2075\x07\u011A\x02\x02\u2071\u2075\x07\u011D" +
    "\x02\x02\u2072\u2075\x07\u02E5\x02\x02\u2073\u2075\x07\u0151\x02\x02\u2074" +
    "\u206A\x03\x02\x02\x02\u2074\u206B\x03\x02\x02\x02\u2074\u206C\x03\x02" +
    "\x02\x02\u2074\u206D\x03\x02\x02\x02\u2074\u206E\x03\x02\x02\x02\u2074" +
    "\u206F\x03\x02\x02\x02\u2074\u2070\x03\x02\x02\x02\u2074\u2071\x03\x02" +
    "\x02\x02\u2074\u2072\x03\x02\x02\x02\u2074\u2073\x03\x02\x02\x02\u2075" +
    "\u207C\x03\x02\x02\x02\u2076\u207A\x05\u04B0\u0259\x02\u2077\u207A\x05" +
    "\u04AE\u0258\x02\u2078\u207A\x05\u04B6\u025C\x02\u2079\u2076\x03\x02\x02" +
    "\x02\u2079\u2077\x03\x02\x02\x02\u2079\u2078\x03\x02\x02\x02\u207A\u207C" +
    "\x03\x02\x02\x02\u207B\u2069\x03\x02\x02\x02\u207B\u2079\x03\x02\x02\x02" +
    "\u207C\u04AD\x03\x02\x02\x02\u207D\u207E\t\x8C\x02\x02\u207E\u04AF\x03" +
    "\x02\x02\x02\u207F\u2080\t\x8D\x02\x02\u2080\u04B1\x03\x02\x02\x02\u2081" +
    "\u2084\x06\u025A\xD5\x02\u2082\u2085\x05\u04BA\u025E\x02\u2083\u2085\x05" +
    "\u04B8\u025D\x02\u2084\u2082\x03\x02\x02\x02\u2084\u2083\x03\x02\x02\x02" +
    "\u2085\u208C\x03\x02\x02\x02\u2086\u208A\x05\u04B0\u0259\x02\u2087\u208A" +
    "\x05\u04AA\u0256\x02\u2088\u208A\x05\u04B6\u025C\x02\u2089\u2086\x03\x02" +
    "\x02\x02\u2089\u2087\x03\x02\x02\x02\u2089\u2088\x03\x02\x02\x02\u208A" +
    "\u208C\x03\x02\x02\x02\u208B\u2081\x03\x02\x02\x02\u208B\u2089\x03\x02" +
    "\x02\x02\u208C\u04B3\x03\x02\x02\x02\u208D\u2092\x05\u04B0\u0259\x02\u208E" +
    "\u2092\x05\u04A8\u0255\x02\u208F\u2092\x05\u04AA\u0256\x02\u2090\u2092" +
    "\x05\u04AE\u0258\x02\u2091\u208D\x03\x02\x02\x02\u2091\u208E\x03\x02\x02" +
    "\x02\u2091\u208F\x03\x02\x02\x02\u2091\u2090\x03\x02\x02\x02\u2092\u04B5" +
    "\x03\x02\x02\x02\u2093\u2094\t\x89\x02\x02\u2094\u04B7\x03\x02\x02\x02" +
    "\u2095\u209B\t\x8E\x02\x02\u2096\u2097\x06\u025D\xD6\x02\u2097\u209B\x07" +
    ":\x02\x02\u2098\u2099\x06\u025D\xD7\x02\u2099\u209B\x07\xA4\x02\x02\u209A" +
    "\u2095\x03\x02\x02\x02\u209A\u2096\x03\x02\x02\x02\u209A\u2098\x03\x02" +
    "\x02\x02\u209B\u04B9\x03\x02\x02\x02\u209C\u20A6\t\x8F\x02\x02\u209D\u209E" +
    "\x06\u025E\xD8\x02\u209E\u20A6\x07:\x02\x02\u209F\u20A0\x06\u025E\xD9" +
    "\x02\u20A0\u20A6\t\x90\x02\x02\u20A1\u20A2\x06\u025E\xDA\x02\u20A2\u20A6" +
    "\t\x91\x02\x02\u20A3\u20A4\x06\u025E\xDB\x02\u20A4\u20A6\x07\u02B4\x02" +
    "\x02\u20A5\u209C\x03\x02\x02\x02\u20A5\u209D\x03\x02\x02\x02\u20A5\u209F" +
    "\x03\x02\x02\x02\u20A5\u20A1\x03\x02\x02\x02\u20A5\u20A3\x03\x02\x02\x02" +
    "\u20A6\u04BB\x03\x02\x02\x02\u0462\u04BF\u04C3\u04C6\u04C8\u04EC\u04F4" +
    "\u04F9\u0509\u0510\u0517\u051A\u0521\u0526\u0529\u052E\u0534\u0536\u053A" +
    "\u053E\u0547\u054B\u0550\u0556\u055D\u0561\u0566\u056B\u0572\u0575\u057B" +
    "\u057E\u0585\u058F\u0594\u0599\u05A1\u05A7\u05AB\u05B0\u05B9\u05BF\u05C5" +
    "\u05CB\u05D5\u05DB\u05E4\u05F2\u05F6\u05FC\u0600\u0606\u060A\u060F\u0612" +
    "\u0618\u061E\u0624\u0628\u062D\u0631\u0635\u063D\u063F\u0646\u064E\u0656" +
    "\u065A\u0671\u0681\u0684\u068D\u0692\u0698\u069D\u06A1\u06A6\u06AA\u06AE" +
    "\u06B2\u06B6\u06BA\u06BC\u06C7\u06CC\u06D2\u06DA\u06E3\u06E8\u06EB\u06F0" +
    "\u06F7\u06FF\u0703\u0708\u070F\u0714\u0719\u0721\u0725\u072A\u072D\u0730" +
    "\u0733\u073A\u0741\u0745\u075D\u0761\u0767\u076E\u0771\u0775\u077C\u077F" +
    "\u0782\u0785\u078E\u0795\u079A\u079D\u07A0\u07A6\u07AC\u07AF\u07B4\u07BE" +
    "\u07C1\u07C7\u07CD\u07D7\u07DA\u07E2\u07E8\u07F3\u07F6\u07FB\u080E\u0811" +
    "\u0814\u081A\u081D\u081F\u0825\u082F\u0839\u083C\u083F\u0844\u084A\u0857" +
    "\u085B\u0860\u0869\u087A\u088D\u0896\u0899\u08A1\u08A6\u08AA\u08B1\u08B6" +
    "\u08C5\u08C9\u08CF\u08D5\u08DB\u08E1\u08E7\u08EC\u08F0\u08F8\u08FE\u0904" +
    "\u0909\u090C\u090F\u0918\u091B\u0926\u0932\u093B\u093F\u0948\u094B\u0951" +
    "\u0953\u0957\u095E\u096B\u0972\u0978\u097B\u098C\u09A0\u09A4\u09AA\u09B0" +
    "\u09B6\u09BB\u09C2\u09C9\u09CE\u09D1\u09D5\u09D9\u09DE\u09E2\u09E6\u09EC" +
    "\u09F1\u09F4\u09F8\u09FE\u0A02\u0A06\u0A0E\u0A16\u0A1F\u0A28\u0A35\u0A38" +
    "\u0A3C\u0A42\u0A4A\u0A4F\u0A52\u0A55\u0A58\u0A5B\u0A5D\u0A63\u0A65\u0A74" +
    "\u0A7A\u0A81\u0A84\u0A86\u0A88\u0A92\u0A94\u0A98\u0A9B\u0A9E\u0AA2\u0AA7" +
    "\u0AAD\u0AB0\u0AB3\u0AB9\u0ABC\u0AC5\u0ACE\u0AD2\u0AD6\u0ADC\u0AE1\u0AE6" +
    "\u0AEB\u0AEF\u0AF5\u0B00\u0B03\u0B08\u0B0E\u0B11\u0B14\u0B17\u0B1A\u0B28" +
    "\u0B2B\u0B2F\u0B33\u0B39\u0B3E\u0B42\u0B47\u0B4A\u0B4E\u0B54\u0B59\u0B62" +
    "\u0B66\u0B6A\u0B6D\u0B72\u0B75\u0B77\u0B7B\u0B7E\u0B84\u0B86\u0B8D\u0B91" +
    "\u0B93\u0B98\u0B9C\u0BA0\u0BA6\u0BAE\u0BB3\u0BB6\u0BB9\u0BBC\u0BBF\u0BC3" +
    "\u0BD2\u0BD6\u0BDC\u0BDF\u0BE2\u0BE8\u0BED\u0BF1\u0BF4\u0BFC\u0BFE\u0C0B" +
    "\u0C17\u0C1C\u0C1F\u0C22\u0C27\u0C2D\u0C3D\u0C51\u0C5A\u0C5E\u0C65\u0C6A" +
    "\u0C73\u0C7A\u0C85\u0C8C\u0C97\u0C9E\u0CA2\u0CA8\u0CAD\u0CB2\u0CB6\u0CBC" +
    "\u0CC2\u0CC4\u0CC7\u0CCB\u0CD5\u0CDA\u0CDF\u0CE6\u0CEF\u0CF7\u0CFC\u0D00" +
    "\u0D06\u0D09\u0D0C\u0D10\u0D14\u0D1E\u0D22\u0D25\u0D28\u0D2D\u0D33\u0D37" +
    "\u0D3D\u0D40\u0D42\u0D47\u0D53\u0D5C\u0D69\u0D6C\u0D71\u0D78\u0D7C\u0D80" +
    "\u0D82\u0D90\u0D97\u0DA0\u0DA6\u0DAF\u0DB3\u0DB7\u0DC1\u0DC3\u0DCB\u0DD2" +
    "\u0DD7\u0DDB\u0DDF\u0DE2\u0DE8\u0DEB\u0DEE\u0DF4\u0DFB\u0E00\u0E04\u0E07" +
    "\u0E0A\u0E0D\u0E0F\u0E13\u0E1B\u0E21\u0E25\u0E2A\u0E2D\u0E30\u0E33\u0E35" +
    "\u0E3A\u0E43\u0E50\u0E52\u0E56\u0E5C\u0E5F\u0E62\u0E68\u0E6F\u0E71\u0E79" +
    "\u0E7F\u0E84\u0E87\u0E8E\u0E90\u0E99\u0EA2\u0EAB\u0EB3\u0EB7\u0EBE\u0EC1" +
    "\u0EC3\u0ECB\u0ED1\u0EDB\u0EE2\u0F3A\u0F3E\u0F42\u0F50\u0F58\u0F5B\u0F67" +
    "\u0F6C\u0F72\u0F79\u0F80\u0F87\u0F8E\u0F95\u0F9C\u0F9F\u0FA6\u0FAE\u0FB6" +
    "\u0FC0\u0FC6\u0FCA\u0FCE\u0FD3\u0FD6\u0FD8\u0FE1\u0FE7\u0FEE\u0FF3\u0FF8" +
    "\u0FFD\u1000\u1007\u1014\u101A\u1020\u1027\u102F\u1035\u1041\u1043\u1049" +
    "\u104D\u104F\u1053\u1060\u1066\u106E\u1079\u107D\u108A\u1091\u1097\u1099" +
    "\u10A3\u10AB\u10AE\u10B3\u10B7\u10BD\u10C0\u10C5\u10D0\u10D2\u10DE\u10E3" +
    "\u10EB\u10F1\u10F3\u10F5\u10FB\u1107\u110C\u110E\u1112\u1118\u111B\u111E" +
    "\u1128\u112A\u1130\u1137\u113D\u1147\u114B\u1150\u1161\u1171\u1176\u117E" +
    "\u1186\u118B\u1191\u1194\u1196\u119F\u11A5\u11AB\u11AD\u11B1\u11BC\u11C6" +
    "\u11CB\u11D0\u11D5\u11DD\u11E1\u11E6\u11EF\u11FB\u1209\u1212\u1214\u121B" +
    "\u1222\u1226\u122C\u1234\u123B\u123F\u1245\u124C\u124F\u1258\u125E\u1263" +
    "\u127A\u127D\u128D\u1292\u1295\u1299\u129C\u12AA\u12B0\u12B5\u12B8\u12BA" +
    "\u12BE\u12C3\u12C5\u12D1\u12D7\u12ED\u12F1\u12F3\u12FB\u12FF\u1308\u1312" +
    "\u1319\u131C\u1320\u1323\u1326\u132A\u132D\u1331\u1334\u1339\u133C\u1341" +
    "\u1344\u134A\u134E\u1354\u1357\u1360\u1362\u1368\u136C\u136F\u1372\u1376" +
    "\u137C\u137F\u1382\u138C\u1390\u1399\u139C\u13A1\u13A4\u13A7\u13AB\u13AE" +
    "\u13B3\u13B7\u13BF\u13CC\u13DE\u13E3\u13E8\u13F0\u13F6\u13F8\u13FC\u13FF" +
    "\u140D\u1417\u141B\u1423\u1426\u142A\u1434\u1438\u143F\u1444\u144C\u1451" +
    "\u1457\u145E\u1463\u1469\u1470\u147A\u147C\u1484\u1489\u148D\u1490\u1497" +
    "\u149C\u14A0\u14AB\u14B3\u14B7\u14BA\u14BD\u14C1\u14C5\u14CA\u14D0\u14D4" +
    "\u14DF\u14E2\u14E5\u14E8\u14F0\u14F4\u14F9\u1501\u1509\u150F\u151C\u1526" +
    "\u152C\u153A\u153D\u1541\u154C\u154E\u1557\u1563\u1565\u156C\u1572\u1578" +
    "\u1580\u158B\u158F\u15AC\u15AE\u15B5\u15C6\u15CD\u15DB\u15E7\u15ED\u15F4" +
    "\u15F7\u1619\u1621\u1623\u162F\u1634\u163A\u1642\u1649\u164F\u1654\u165A" +
    "\u165F\u1664\u166A\u166F\u1675\u167D\u1685\u168D\u1695\u169A\u16A0\u16A5" +
    "\u16A9\u16AD\u16B2\u16B4\u16C7\u16CB\u16D2\u16DE\u16E1\u16E5\u16EA\u16EF" +
    "\u16F3\u16FD\u1706\u1708\u170B\u1714\u171B\u1728\u172D\u1734\u173A\u1754" +
    "\u1773\u1787\u178D\u1791\u17AC\u17B8\u17C5\u17C9\u17CD\u17E9\u1821\u182B" +
    "\u182F\u183B\u1840\u184D\u1861\u1865\u1876\u1879\u187E\u1881\u188A\u188E" +
    "\u1894\u189A\u189E\u18A9\u18AF\u18B1\u18B8\u18BF\u18C3\u18CA\u18CF\u18D4" +
    "\u18D7\u18DC\u18E0\u18E4\u18E9\u18EE\u18F0\u18F4\u1901\u1905\u1908\u190C" +
    "\u1910\u1914\u1919\u191D\u1921\u192A\u192C\u1933\u1939\u1941\u1956\u195B" +
    "\u1962\u1979\u1989\u1993\u1997\u199E\u19A1\u19AC\u19B5\u19B8\u19BF\u19C4" +
    "\u19DE\u19E4\u19EA\u19EE\u19F8\u19FC\u1A09\u1A15\u1A27\u1A2F\u1A39\u1A3C" +
    "\u1A41\u1A45\u1A4C\u1A51\u1A58\u1A60\u1A63\u1A68\u1A6B\u1A73\u1A76\u1A84" +
    "\u1A87\u1A94\u1A98\u1A9A\u1A9F\u1AA4\u1AAA\u1AB0\u1AB6\u1ABB\u1ABE\u1AC4" +
    "\u1AC9\u1ACC\u1AD2\u1AD6\u1ADC\u1ADE\u1AE1\u1AE7\u1AED\u1AF5\u1AF7\u1AF9" +
    "\u1AFD\u1B03\u1B08\u1B0C\u1B11\u1B17\u1B1E\u1B21\u1B23\u1B26\u1B30\u1B34" +
    "\u1B3A\u1B41\u1B46\u1B54\u1B59\u1B61\u1B66\u1B6A\u1B6D\u1B72\u1B76\u1B7E" +
    "\u1B86\u1B88\u1B8F\u1B97\u1B9E\u1BA1\u1BA9\u1BB1\u1BB3\u1BB9\u1BBF\u1BC3" +
    "\u1BCA\u1BD5\u1BDE\u1BE1\u1BE6\u1BE8\u1BEB\u1BEE\u1BF2\u1BF5\u1BF9\u1BFE" +
    "\u1C01\u1C05\u1C08\u1C0C\u1C11\u1C15\u1C21\u1C25\u1C2B\u1C2E\u1C33\u1C37" +
    "\u1C3B\u1C40\u1C49\u1C4C\u1C50\u1C54\u1C57\u1C5B\u1C5F\u1C64\u1C69\u1C6F" +
    "\u1C74\u1C79\u1C7B\u1C80\u1C87\u1C8F\u1C95\u1C97\u1C9B\u1C9F\u1CA3\u1CA7" +
    "\u1CB5\u1CBC\u1CC0\u1CC5\u1CCB\u1CCF\u1CD5\u1CD9\u1CDD\u1CE2\u1CE7\u1CEC" +
    "\u1CF1\u1CF7\u1CFD\u1D02\u1D07\u1D0C\u1D11\u1D16\u1D1B\u1D20\u1D2A\u1D30" +
    "\u1D36\u1D3C\u1D3F\u1D46\u1D4B\u1D4E\u1D52\u1D55\u1D59\u1D5E\u1D62\u1D67" +
    "\u1D6B\u1D74\u1D77\u1D7A\u1D7D\u1D81\u1D85\u1D89\u1D98\u1D9B\u1D9D\u1DA2" +
    "\u1DAB\u1DAE\u1DB2\u1DBF\u1DCB\u1DD0\u1DD5\u1DDE\u1DE3\u1DEC\u1DF1\u1DF5" +
    "\u1DF9\u1DFD\u1E02\u1E07\u1E0D\u1E12\u1E15\u1E1C\u1E25\u1E2C\u1E3A\u1E46" +
    "\u1E53\u1E5B\u1E62\u1E6B\u1E71\u1E79\u1E7F\u1E8A\u1E92\u1E9A\u1EA2\u1EAC" +
    "\u1EB1\u1EB6\u1EB8\u1EBE\u1EC4\u1EC7\u1ECE\u1ED0\u1ED2\u1ED5\u1ED7\u1EE8" +
    "\u1EED\u1EEF\u1EF6\u1F03\u1F05\u1F0B\u1F15\u1F1E\u1F29\u1F3F\u1F43\u1F5B" +
    "\u1F66\u1F68\u1F6C\u1F73\u1F7B\u1F82\u1F88\u1F97\u1F9B\u1FA2\u1FAB\u1FB0" +
    "\u1FB2\u1FB8\u1FC8\u1FD0\u1FD3\u1FDA\u1FE2\u1FEA\u1FEF\u1FF4\u1FF7\u1FFB" +
    "\u2000\u200A\u2019\u201D\u2029\u202D\u2031\u2035\u2044\u2050\u205A\u2061" +
    "\u2063\u2074\u2079\u207B\u2084\u2089\u208B\u2091\u209A\u20A5";
MySQLParser._serializedATN = Utils.join([
    MySQLParser._serializedATNSegment0,
    MySQLParser._serializedATNSegment1,
    MySQLParser._serializedATNSegment2,
    MySQLParser._serializedATNSegment3,
    MySQLParser._serializedATNSegment4,
    MySQLParser._serializedATNSegment5,
    MySQLParser._serializedATNSegment6,
    MySQLParser._serializedATNSegment7,
    MySQLParser._serializedATNSegment8,
    MySQLParser._serializedATNSegment9,
    MySQLParser._serializedATNSegment10,
    MySQLParser._serializedATNSegment11,
    MySQLParser._serializedATNSegment12,
    MySQLParser._serializedATNSegment13,
    MySQLParser._serializedATNSegment14,
    MySQLParser._serializedATNSegment15,
], "");
class QueryContext extends ParserRuleContext_1.ParserRuleContext {
    EOF() { return this.tryGetToken(MySQLParser.EOF, 0); }
    simpleStatement() {
        return this.tryGetRuleContext(0, SimpleStatementContext);
    }
    beginWork() {
        return this.tryGetRuleContext(0, BeginWorkContext);
    }
    SEMICOLON_SYMBOL() { return this.tryGetToken(MySQLParser.SEMICOLON_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_query; }
    // @Override
    enterRule(listener) {
        if (listener.enterQuery) {
            listener.enterQuery(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQuery) {
            listener.exitQuery(this);
        }
    }
}
exports.QueryContext = QueryContext;
class SimpleStatementContext extends ParserRuleContext_1.ParserRuleContext {
    alterStatement() {
        return this.tryGetRuleContext(0, AlterStatementContext);
    }
    createStatement() {
        return this.tryGetRuleContext(0, CreateStatementContext);
    }
    dropStatement() {
        return this.tryGetRuleContext(0, DropStatementContext);
    }
    renameTableStatement() {
        return this.tryGetRuleContext(0, RenameTableStatementContext);
    }
    truncateTableStatement() {
        return this.tryGetRuleContext(0, TruncateTableStatementContext);
    }
    importStatement() {
        return this.tryGetRuleContext(0, ImportStatementContext);
    }
    callStatement() {
        return this.tryGetRuleContext(0, CallStatementContext);
    }
    deleteStatement() {
        return this.tryGetRuleContext(0, DeleteStatementContext);
    }
    doStatement() {
        return this.tryGetRuleContext(0, DoStatementContext);
    }
    handlerStatement() {
        return this.tryGetRuleContext(0, HandlerStatementContext);
    }
    insertStatement() {
        return this.tryGetRuleContext(0, InsertStatementContext);
    }
    loadStatement() {
        return this.tryGetRuleContext(0, LoadStatementContext);
    }
    replaceStatement() {
        return this.tryGetRuleContext(0, ReplaceStatementContext);
    }
    selectStatement() {
        return this.tryGetRuleContext(0, SelectStatementContext);
    }
    updateStatement() {
        return this.tryGetRuleContext(0, UpdateStatementContext);
    }
    transactionOrLockingStatement() {
        return this.tryGetRuleContext(0, TransactionOrLockingStatementContext);
    }
    replicationStatement() {
        return this.tryGetRuleContext(0, ReplicationStatementContext);
    }
    preparedStatement() {
        return this.tryGetRuleContext(0, PreparedStatementContext);
    }
    cloneStatement() {
        return this.tryGetRuleContext(0, CloneStatementContext);
    }
    accountManagementStatement() {
        return this.tryGetRuleContext(0, AccountManagementStatementContext);
    }
    tableAdministrationStatement() {
        return this.tryGetRuleContext(0, TableAdministrationStatementContext);
    }
    installUninstallStatment() {
        return this.tryGetRuleContext(0, InstallUninstallStatmentContext);
    }
    setStatement() {
        return this.tryGetRuleContext(0, SetStatementContext);
    }
    showStatement() {
        return this.tryGetRuleContext(0, ShowStatementContext);
    }
    resourceGroupManagement() {
        return this.tryGetRuleContext(0, ResourceGroupManagementContext);
    }
    otherAdministrativeStatement() {
        return this.tryGetRuleContext(0, OtherAdministrativeStatementContext);
    }
    utilityStatement() {
        return this.tryGetRuleContext(0, UtilityStatementContext);
    }
    getDiagnostics() {
        return this.tryGetRuleContext(0, GetDiagnosticsContext);
    }
    signalStatement() {
        return this.tryGetRuleContext(0, SignalStatementContext);
    }
    resignalStatement() {
        return this.tryGetRuleContext(0, ResignalStatementContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_simpleStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleStatement) {
            listener.enterSimpleStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleStatement) {
            listener.exitSimpleStatement(this);
        }
    }
}
exports.SimpleStatementContext = SimpleStatementContext;
class AlterStatementContext extends ParserRuleContext_1.ParserRuleContext {
    ALTER_SYMBOL() { return this.getToken(MySQLParser.ALTER_SYMBOL, 0); }
    alterTable() {
        return this.tryGetRuleContext(0, AlterTableContext);
    }
    alterDatabase() {
        return this.tryGetRuleContext(0, AlterDatabaseContext);
    }
    PROCEDURE_SYMBOL() { return this.tryGetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
    procedureRef() {
        return this.tryGetRuleContext(0, ProcedureRefContext);
    }
    FUNCTION_SYMBOL() { return this.tryGetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
    functionRef() {
        return this.tryGetRuleContext(0, FunctionRefContext);
    }
    alterView() {
        return this.tryGetRuleContext(0, AlterViewContext);
    }
    alterEvent() {
        return this.tryGetRuleContext(0, AlterEventContext);
    }
    alterTablespace() {
        return this.tryGetRuleContext(0, AlterTablespaceContext);
    }
    alterUndoTablespace() {
        return this.tryGetRuleContext(0, AlterUndoTablespaceContext);
    }
    alterLogfileGroup() {
        return this.tryGetRuleContext(0, AlterLogfileGroupContext);
    }
    alterServer() {
        return this.tryGetRuleContext(0, AlterServerContext);
    }
    INSTANCE_SYMBOL() { return this.tryGetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
    ROTATE_SYMBOL() { return this.tryGetToken(MySQLParser.ROTATE_SYMBOL, 0); }
    textOrIdentifier() {
        return this.tryGetRuleContext(0, TextOrIdentifierContext);
    }
    MASTER_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SYMBOL, 0); }
    KEY_SYMBOL() { return this.tryGetToken(MySQLParser.KEY_SYMBOL, 0); }
    routineAlterOptions() {
        return this.tryGetRuleContext(0, RoutineAlterOptionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterStatement) {
            listener.enterAlterStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterStatement) {
            listener.exitAlterStatement(this);
        }
    }
}
exports.AlterStatementContext = AlterStatementContext;
class AlterDatabaseContext extends ParserRuleContext_1.ParserRuleContext {
    DATABASE_SYMBOL() { return this.getToken(MySQLParser.DATABASE_SYMBOL, 0); }
    schemaRef() {
        return this.getRuleContext(0, SchemaRefContext);
    }
    UPGRADE_SYMBOL() { return this.tryGetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
    DATA_SYMBOL() { return this.tryGetToken(MySQLParser.DATA_SYMBOL, 0); }
    DIRECTORY_SYMBOL() { return this.tryGetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
    NAME_SYMBOL() { return this.tryGetToken(MySQLParser.NAME_SYMBOL, 0); }
    createDatabaseOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(CreateDatabaseOptionContext);
        }
        else {
            return this.getRuleContext(i, CreateDatabaseOptionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterDatabase; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterDatabase) {
            listener.enterAlterDatabase(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterDatabase) {
            listener.exitAlterDatabase(this);
        }
    }
}
exports.AlterDatabaseContext = AlterDatabaseContext;
class AlterEventContext extends ParserRuleContext_1.ParserRuleContext {
    EVENT_SYMBOL() { return this.getToken(MySQLParser.EVENT_SYMBOL, 0); }
    eventRef() {
        return this.getRuleContext(0, EventRefContext);
    }
    definerClause() {
        return this.tryGetRuleContext(0, DefinerClauseContext);
    }
    ON_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.ON_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.ON_SYMBOL, i);
        }
    }
    SCHEDULE_SYMBOL() { return this.tryGetToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
    schedule() {
        return this.tryGetRuleContext(0, ScheduleContext);
    }
    COMPLETION_SYMBOL() { return this.tryGetToken(MySQLParser.COMPLETION_SYMBOL, 0); }
    PRESERVE_SYMBOL() { return this.tryGetToken(MySQLParser.PRESERVE_SYMBOL, 0); }
    RENAME_SYMBOL() { return this.tryGetToken(MySQLParser.RENAME_SYMBOL, 0); }
    TO_SYMBOL() { return this.tryGetToken(MySQLParser.TO_SYMBOL, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    ENABLE_SYMBOL() { return this.tryGetToken(MySQLParser.ENABLE_SYMBOL, 0); }
    DISABLE_SYMBOL() { return this.tryGetToken(MySQLParser.DISABLE_SYMBOL, 0); }
    COMMENT_SYMBOL() { return this.tryGetToken(MySQLParser.COMMENT_SYMBOL, 0); }
    textLiteral() {
        return this.tryGetRuleContext(0, TextLiteralContext);
    }
    DO_SYMBOL() { return this.tryGetToken(MySQLParser.DO_SYMBOL, 0); }
    compoundStatement() {
        return this.tryGetRuleContext(0, CompoundStatementContext);
    }
    NOT_SYMBOL() { return this.tryGetToken(MySQLParser.NOT_SYMBOL, 0); }
    SLAVE_SYMBOL() { return this.tryGetToken(MySQLParser.SLAVE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterEvent; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterEvent) {
            listener.enterAlterEvent(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterEvent) {
            listener.exitAlterEvent(this);
        }
    }
}
exports.AlterEventContext = AlterEventContext;
class AlterLogfileGroupContext extends ParserRuleContext_1.ParserRuleContext {
    LOGFILE_SYMBOL() { return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
    GROUP_SYMBOL() { return this.getToken(MySQLParser.GROUP_SYMBOL, 0); }
    logfileGroupRef() {
        return this.getRuleContext(0, LogfileGroupRefContext);
    }
    ADD_SYMBOL() { return this.getToken(MySQLParser.ADD_SYMBOL, 0); }
    UNDOFILE_SYMBOL() { return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
    textLiteral() {
        return this.getRuleContext(0, TextLiteralContext);
    }
    alterLogfileGroupOptions() {
        return this.tryGetRuleContext(0, AlterLogfileGroupOptionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterLogfileGroup; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterLogfileGroup) {
            listener.enterAlterLogfileGroup(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterLogfileGroup) {
            listener.exitAlterLogfileGroup(this);
        }
    }
}
exports.AlterLogfileGroupContext = AlterLogfileGroupContext;
class AlterLogfileGroupOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    alterLogfileGroupOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(AlterLogfileGroupOptionContext);
        }
        else {
            return this.getRuleContext(i, AlterLogfileGroupOptionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterLogfileGroupOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterLogfileGroupOptions) {
            listener.enterAlterLogfileGroupOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterLogfileGroupOptions) {
            listener.exitAlterLogfileGroupOptions(this);
        }
    }
}
exports.AlterLogfileGroupOptionsContext = AlterLogfileGroupOptionsContext;
class AlterLogfileGroupOptionContext extends ParserRuleContext_1.ParserRuleContext {
    tsOptionInitialSize() {
        return this.tryGetRuleContext(0, TsOptionInitialSizeContext);
    }
    tsOptionEngine() {
        return this.tryGetRuleContext(0, TsOptionEngineContext);
    }
    tsOptionWait() {
        return this.tryGetRuleContext(0, TsOptionWaitContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterLogfileGroupOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterLogfileGroupOption) {
            listener.enterAlterLogfileGroupOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterLogfileGroupOption) {
            listener.exitAlterLogfileGroupOption(this);
        }
    }
}
exports.AlterLogfileGroupOptionContext = AlterLogfileGroupOptionContext;
class AlterServerContext extends ParserRuleContext_1.ParserRuleContext {
    SERVER_SYMBOL() { return this.getToken(MySQLParser.SERVER_SYMBOL, 0); }
    serverRef() {
        return this.getRuleContext(0, ServerRefContext);
    }
    serverOptions() {
        return this.getRuleContext(0, ServerOptionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterServer; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterServer) {
            listener.enterAlterServer(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterServer) {
            listener.exitAlterServer(this);
        }
    }
}
exports.AlterServerContext = AlterServerContext;
class AlterTableContext extends ParserRuleContext_1.ParserRuleContext {
    TABLE_SYMBOL() { return this.getToken(MySQLParser.TABLE_SYMBOL, 0); }
    tableRef() {
        return this.getRuleContext(0, TableRefContext);
    }
    onlineOption() {
        return this.tryGetRuleContext(0, OnlineOptionContext);
    }
    IGNORE_SYMBOL() { return this.tryGetToken(MySQLParser.IGNORE_SYMBOL, 0); }
    alterTableActions() {
        return this.tryGetRuleContext(0, AlterTableActionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterTable; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterTable) {
            listener.enterAlterTable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterTable) {
            listener.exitAlterTable(this);
        }
    }
}
exports.AlterTableContext = AlterTableContext;
class AlterTableActionsContext extends ParserRuleContext_1.ParserRuleContext {
    alterCommandList() {
        return this.tryGetRuleContext(0, AlterCommandListContext);
    }
    partitionClause() {
        return this.tryGetRuleContext(0, PartitionClauseContext);
    }
    removePartitioning() {
        return this.tryGetRuleContext(0, RemovePartitioningContext);
    }
    standaloneAlterCommands() {
        return this.tryGetRuleContext(0, StandaloneAlterCommandsContext);
    }
    alterCommandsModifierList() {
        return this.tryGetRuleContext(0, AlterCommandsModifierListContext);
    }
    COMMA_SYMBOL() { return this.tryGetToken(MySQLParser.COMMA_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterTableActions; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterTableActions) {
            listener.enterAlterTableActions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterTableActions) {
            listener.exitAlterTableActions(this);
        }
    }
}
exports.AlterTableActionsContext = AlterTableActionsContext;
class AlterCommandListContext extends ParserRuleContext_1.ParserRuleContext {
    alterCommandsModifierList() {
        return this.tryGetRuleContext(0, AlterCommandsModifierListContext);
    }
    alterList() {
        return this.tryGetRuleContext(0, AlterListContext);
    }
    COMMA_SYMBOL() { return this.tryGetToken(MySQLParser.COMMA_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterCommandList; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterCommandList) {
            listener.enterAlterCommandList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterCommandList) {
            listener.exitAlterCommandList(this);
        }
    }
}
exports.AlterCommandListContext = AlterCommandListContext;
class AlterCommandsModifierListContext extends ParserRuleContext_1.ParserRuleContext {
    alterCommandsModifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(AlterCommandsModifierContext);
        }
        else {
            return this.getRuleContext(i, AlterCommandsModifierContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterCommandsModifierList; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterCommandsModifierList) {
            listener.enterAlterCommandsModifierList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterCommandsModifierList) {
            listener.exitAlterCommandsModifierList(this);
        }
    }
}
exports.AlterCommandsModifierListContext = AlterCommandsModifierListContext;
class StandaloneAlterCommandsContext extends ParserRuleContext_1.ParserRuleContext {
    DISCARD_SYMBOL() { return this.tryGetToken(MySQLParser.DISCARD_SYMBOL, 0); }
    TABLESPACE_SYMBOL() { return this.tryGetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
    IMPORT_SYMBOL() { return this.tryGetToken(MySQLParser.IMPORT_SYMBOL, 0); }
    alterPartition() {
        return this.tryGetRuleContext(0, AlterPartitionContext);
    }
    SECONDARY_LOAD_SYMBOL() { return this.tryGetToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
    SECONDARY_UNLOAD_SYMBOL() { return this.tryGetToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_standaloneAlterCommands; }
    // @Override
    enterRule(listener) {
        if (listener.enterStandaloneAlterCommands) {
            listener.enterStandaloneAlterCommands(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStandaloneAlterCommands) {
            listener.exitStandaloneAlterCommands(this);
        }
    }
}
exports.StandaloneAlterCommandsContext = StandaloneAlterCommandsContext;
class AlterPartitionContext extends ParserRuleContext_1.ParserRuleContext {
    ADD_SYMBOL() { return this.tryGetToken(MySQLParser.ADD_SYMBOL, 0); }
    PARTITION_SYMBOL() { return this.tryGetToken(MySQLParser.PARTITION_SYMBOL, 0); }
    partitionDefinitions() {
        return this.tryGetRuleContext(0, PartitionDefinitionsContext);
    }
    PARTITIONS_SYMBOL() { return this.tryGetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
    real_ulong_number() {
        return this.tryGetRuleContext(0, Real_ulong_numberContext);
    }
    noWriteToBinLog(i) {
        if (i === undefined) {
            return this.getRuleContexts(NoWriteToBinLogContext);
        }
        else {
            return this.getRuleContext(i, NoWriteToBinLogContext);
        }
    }
    DROP_SYMBOL() { return this.tryGetToken(MySQLParser.DROP_SYMBOL, 0); }
    identifierList() {
        return this.tryGetRuleContext(0, IdentifierListContext);
    }
    REBUILD_SYMBOL() { return this.tryGetToken(MySQLParser.REBUILD_SYMBOL, 0); }
    allOrPartitionNameList() {
        return this.tryGetRuleContext(0, AllOrPartitionNameListContext);
    }
    OPTIMIZE_SYMBOL() { return this.tryGetToken(MySQLParser.OPTIMIZE_SYMBOL, 0); }
    ANALYZE_SYMBOL() { return this.tryGetToken(MySQLParser.ANALYZE_SYMBOL, 0); }
    CHECK_SYMBOL() { return this.tryGetToken(MySQLParser.CHECK_SYMBOL, 0); }
    checkOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(CheckOptionContext);
        }
        else {
            return this.getRuleContext(i, CheckOptionContext);
        }
    }
    REPAIR_SYMBOL() { return this.tryGetToken(MySQLParser.REPAIR_SYMBOL, 0); }
    repairType(i) {
        if (i === undefined) {
            return this.getRuleContexts(RepairTypeContext);
        }
        else {
            return this.getRuleContext(i, RepairTypeContext);
        }
    }
    COALESCE_SYMBOL() { return this.tryGetToken(MySQLParser.COALESCE_SYMBOL, 0); }
    TRUNCATE_SYMBOL() { return this.tryGetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
    reorgPartitionRule() {
        return this.tryGetRuleContext(0, ReorgPartitionRuleContext);
    }
    REORGANIZE_SYMBOL() { return this.tryGetToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
    INTO_SYMBOL() { return this.tryGetToken(MySQLParser.INTO_SYMBOL, 0); }
    EXCHANGE_SYMBOL() { return this.tryGetToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    WITH_SYMBOL() { return this.tryGetToken(MySQLParser.WITH_SYMBOL, 0); }
    TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.TABLE_SYMBOL, 0); }
    tableRef() {
        return this.tryGetRuleContext(0, TableRefContext);
    }
    withValidation() {
        return this.tryGetRuleContext(0, WithValidationContext);
    }
    DISCARD_SYMBOL() { return this.tryGetToken(MySQLParser.DISCARD_SYMBOL, 0); }
    TABLESPACE_SYMBOL() { return this.tryGetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
    IMPORT_SYMBOL() { return this.tryGetToken(MySQLParser.IMPORT_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterPartition; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterPartition) {
            listener.enterAlterPartition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterPartition) {
            listener.exitAlterPartition(this);
        }
    }
}
exports.AlterPartitionContext = AlterPartitionContext;
class AlterListContext extends ParserRuleContext_1.ParserRuleContext {
    alterListItem(i) {
        if (i === undefined) {
            return this.getRuleContexts(AlterListItemContext);
        }
        else {
            return this.getRuleContext(i, AlterListItemContext);
        }
    }
    createTableOptionsSpaceSeparated(i) {
        if (i === undefined) {
            return this.getRuleContexts(CreateTableOptionsSpaceSeparatedContext);
        }
        else {
            return this.getRuleContext(i, CreateTableOptionsSpaceSeparatedContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    alterCommandsModifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(AlterCommandsModifierContext);
        }
        else {
            return this.getRuleContext(i, AlterCommandsModifierContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterList; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterList) {
            listener.enterAlterList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterList) {
            listener.exitAlterList(this);
        }
    }
}
exports.AlterListContext = AlterListContext;
class AlterCommandsModifierContext extends ParserRuleContext_1.ParserRuleContext {
    alterAlgorithmOption() {
        return this.tryGetRuleContext(0, AlterAlgorithmOptionContext);
    }
    alterLockOption() {
        return this.tryGetRuleContext(0, AlterLockOptionContext);
    }
    withValidation() {
        return this.tryGetRuleContext(0, WithValidationContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterCommandsModifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterCommandsModifier) {
            listener.enterAlterCommandsModifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterCommandsModifier) {
            listener.exitAlterCommandsModifier(this);
        }
    }
}
exports.AlterCommandsModifierContext = AlterCommandsModifierContext;
class AlterListItemContext extends ParserRuleContext_1.ParserRuleContext {
    ADD_SYMBOL() { return this.tryGetToken(MySQLParser.ADD_SYMBOL, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    fieldDefinition() {
        return this.tryGetRuleContext(0, FieldDefinitionContext);
    }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    tableElementList() {
        return this.tryGetRuleContext(0, TableElementListContext);
    }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    COLUMN_SYMBOL() { return this.tryGetToken(MySQLParser.COLUMN_SYMBOL, 0); }
    checkOrReferences() {
        return this.tryGetRuleContext(0, CheckOrReferencesContext);
    }
    place() {
        return this.tryGetRuleContext(0, PlaceContext);
    }
    tableConstraintDef() {
        return this.tryGetRuleContext(0, TableConstraintDefContext);
    }
    CHANGE_SYMBOL() { return this.tryGetToken(MySQLParser.CHANGE_SYMBOL, 0); }
    columnInternalRef() {
        return this.tryGetRuleContext(0, ColumnInternalRefContext);
    }
    MODIFY_SYMBOL() { return this.tryGetToken(MySQLParser.MODIFY_SYMBOL, 0); }
    DROP_SYMBOL() { return this.tryGetToken(MySQLParser.DROP_SYMBOL, 0); }
    FOREIGN_SYMBOL() { return this.tryGetToken(MySQLParser.FOREIGN_SYMBOL, 0); }
    KEY_SYMBOL() { return this.tryGetToken(MySQLParser.KEY_SYMBOL, 0); }
    PRIMARY_SYMBOL() { return this.tryGetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
    keyOrIndex() {
        return this.tryGetRuleContext(0, KeyOrIndexContext);
    }
    indexRef() {
        return this.tryGetRuleContext(0, IndexRefContext);
    }
    restrict() {
        return this.tryGetRuleContext(0, RestrictContext);
    }
    DISABLE_SYMBOL() { return this.tryGetToken(MySQLParser.DISABLE_SYMBOL, 0); }
    KEYS_SYMBOL() { return this.tryGetToken(MySQLParser.KEYS_SYMBOL, 0); }
    ENABLE_SYMBOL() { return this.tryGetToken(MySQLParser.ENABLE_SYMBOL, 0); }
    ALTER_SYMBOL() { return this.tryGetToken(MySQLParser.ALTER_SYMBOL, 0); }
    SET_SYMBOL() { return this.tryGetToken(MySQLParser.SET_SYMBOL, 0); }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    exprWithParentheses() {
        return this.tryGetRuleContext(0, ExprWithParenthesesContext);
    }
    signedLiteral() {
        return this.tryGetRuleContext(0, SignedLiteralContext);
    }
    INDEX_SYMBOL() { return this.tryGetToken(MySQLParser.INDEX_SYMBOL, 0); }
    visibility() {
        return this.tryGetRuleContext(0, VisibilityContext);
    }
    CHECK_SYMBOL() { return this.tryGetToken(MySQLParser.CHECK_SYMBOL, 0); }
    constraintEnforcement() {
        return this.tryGetRuleContext(0, ConstraintEnforcementContext);
    }
    RENAME_SYMBOL() { return this.tryGetToken(MySQLParser.RENAME_SYMBOL, 0); }
    TO_SYMBOL() { return this.tryGetToken(MySQLParser.TO_SYMBOL, 0); }
    tableName() {
        return this.tryGetRuleContext(0, TableNameContext);
    }
    AS_SYMBOL() { return this.tryGetToken(MySQLParser.AS_SYMBOL, 0); }
    indexName() {
        return this.tryGetRuleContext(0, IndexNameContext);
    }
    CONVERT_SYMBOL() { return this.tryGetToken(MySQLParser.CONVERT_SYMBOL, 0); }
    charset() {
        return this.tryGetRuleContext(0, CharsetContext);
    }
    charsetName() {
        return this.tryGetRuleContext(0, CharsetNameContext);
    }
    collate() {
        return this.tryGetRuleContext(0, CollateContext);
    }
    FORCE_SYMBOL() { return this.tryGetToken(MySQLParser.FORCE_SYMBOL, 0); }
    ORDER_SYMBOL() { return this.tryGetToken(MySQLParser.ORDER_SYMBOL, 0); }
    BY_SYMBOL() { return this.tryGetToken(MySQLParser.BY_SYMBOL, 0); }
    alterOrderList() {
        return this.tryGetRuleContext(0, AlterOrderListContext);
    }
    UPGRADE_SYMBOL() { return this.tryGetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
    PARTITIONING_SYMBOL() { return this.tryGetToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterListItem; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterListItem) {
            listener.enterAlterListItem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterListItem) {
            listener.exitAlterListItem(this);
        }
    }
}
exports.AlterListItemContext = AlterListItemContext;
class PlaceContext extends ParserRuleContext_1.ParserRuleContext {
    AFTER_SYMBOL() { return this.tryGetToken(MySQLParser.AFTER_SYMBOL, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    FIRST_SYMBOL() { return this.tryGetToken(MySQLParser.FIRST_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_place; }
    // @Override
    enterRule(listener) {
        if (listener.enterPlace) {
            listener.enterPlace(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPlace) {
            listener.exitPlace(this);
        }
    }
}
exports.PlaceContext = PlaceContext;
class RestrictContext extends ParserRuleContext_1.ParserRuleContext {
    RESTRICT_SYMBOL() { return this.tryGetToken(MySQLParser.RESTRICT_SYMBOL, 0); }
    CASCADE_SYMBOL() { return this.tryGetToken(MySQLParser.CASCADE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_restrict; }
    // @Override
    enterRule(listener) {
        if (listener.enterRestrict) {
            listener.enterRestrict(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRestrict) {
            listener.exitRestrict(this);
        }
    }
}
exports.RestrictContext = RestrictContext;
class AlterOrderListContext extends ParserRuleContext_1.ParserRuleContext {
    identifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    }
    direction(i) {
        if (i === undefined) {
            return this.getRuleContexts(DirectionContext);
        }
        else {
            return this.getRuleContext(i, DirectionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterOrderList; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterOrderList) {
            listener.enterAlterOrderList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterOrderList) {
            listener.exitAlterOrderList(this);
        }
    }
}
exports.AlterOrderListContext = AlterOrderListContext;
class AlterAlgorithmOptionContext extends ParserRuleContext_1.ParserRuleContext {
    ALGORITHM_SYMBOL() { return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterAlgorithmOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterAlgorithmOption) {
            listener.enterAlterAlgorithmOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterAlgorithmOption) {
            listener.exitAlterAlgorithmOption(this);
        }
    }
}
exports.AlterAlgorithmOptionContext = AlterAlgorithmOptionContext;
class AlterLockOptionContext extends ParserRuleContext_1.ParserRuleContext {
    LOCK_SYMBOL() { return this.getToken(MySQLParser.LOCK_SYMBOL, 0); }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterLockOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterLockOption) {
            listener.enterAlterLockOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterLockOption) {
            listener.exitAlterLockOption(this);
        }
    }
}
exports.AlterLockOptionContext = AlterLockOptionContext;
class IndexLockAndAlgorithmContext extends ParserRuleContext_1.ParserRuleContext {
    alterAlgorithmOption() {
        return this.tryGetRuleContext(0, AlterAlgorithmOptionContext);
    }
    alterLockOption() {
        return this.tryGetRuleContext(0, AlterLockOptionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_indexLockAndAlgorithm; }
    // @Override
    enterRule(listener) {
        if (listener.enterIndexLockAndAlgorithm) {
            listener.enterIndexLockAndAlgorithm(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIndexLockAndAlgorithm) {
            listener.exitIndexLockAndAlgorithm(this);
        }
    }
}
exports.IndexLockAndAlgorithmContext = IndexLockAndAlgorithmContext;
class WithValidationContext extends ParserRuleContext_1.ParserRuleContext {
    VALIDATION_SYMBOL() { return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0); }
    WITH_SYMBOL() { return this.tryGetToken(MySQLParser.WITH_SYMBOL, 0); }
    WITHOUT_SYMBOL() { return this.tryGetToken(MySQLParser.WITHOUT_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_withValidation; }
    // @Override
    enterRule(listener) {
        if (listener.enterWithValidation) {
            listener.enterWithValidation(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWithValidation) {
            listener.exitWithValidation(this);
        }
    }
}
exports.WithValidationContext = WithValidationContext;
class RemovePartitioningContext extends ParserRuleContext_1.ParserRuleContext {
    REMOVE_SYMBOL() { return this.getToken(MySQLParser.REMOVE_SYMBOL, 0); }
    PARTITIONING_SYMBOL() { return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_removePartitioning; }
    // @Override
    enterRule(listener) {
        if (listener.enterRemovePartitioning) {
            listener.enterRemovePartitioning(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRemovePartitioning) {
            listener.exitRemovePartitioning(this);
        }
    }
}
exports.RemovePartitioningContext = RemovePartitioningContext;
class AllOrPartitionNameListContext extends ParserRuleContext_1.ParserRuleContext {
    ALL_SYMBOL() { return this.tryGetToken(MySQLParser.ALL_SYMBOL, 0); }
    identifierList() {
        return this.tryGetRuleContext(0, IdentifierListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_allOrPartitionNameList; }
    // @Override
    enterRule(listener) {
        if (listener.enterAllOrPartitionNameList) {
            listener.enterAllOrPartitionNameList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAllOrPartitionNameList) {
            listener.exitAllOrPartitionNameList(this);
        }
    }
}
exports.AllOrPartitionNameListContext = AllOrPartitionNameListContext;
class ReorgPartitionRuleContext extends ParserRuleContext_1.ParserRuleContext {
    REORGANIZE_SYMBOL() { return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
    PARTITION_SYMBOL() { return this.getToken(MySQLParser.PARTITION_SYMBOL, 0); }
    noWriteToBinLog() {
        return this.tryGetRuleContext(0, NoWriteToBinLogContext);
    }
    identifierList() {
        return this.tryGetRuleContext(0, IdentifierListContext);
    }
    INTO_SYMBOL() { return this.tryGetToken(MySQLParser.INTO_SYMBOL, 0); }
    partitionDefinitions() {
        return this.tryGetRuleContext(0, PartitionDefinitionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_reorgPartitionRule; }
    // @Override
    enterRule(listener) {
        if (listener.enterReorgPartitionRule) {
            listener.enterReorgPartitionRule(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReorgPartitionRule) {
            listener.exitReorgPartitionRule(this);
        }
    }
}
exports.ReorgPartitionRuleContext = ReorgPartitionRuleContext;
class AlterTablespaceContext extends ParserRuleContext_1.ParserRuleContext {
    TABLESPACE_SYMBOL() { return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
    tablespaceRef() {
        return this.getRuleContext(0, TablespaceRefContext);
    }
    DATAFILE_SYMBOL() { return this.tryGetToken(MySQLParser.DATAFILE_SYMBOL, 0); }
    textLiteral() {
        return this.tryGetRuleContext(0, TextLiteralContext);
    }
    RENAME_SYMBOL() { return this.tryGetToken(MySQLParser.RENAME_SYMBOL, 0); }
    TO_SYMBOL() { return this.tryGetToken(MySQLParser.TO_SYMBOL, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    alterTablespaceOptions() {
        return this.tryGetRuleContext(0, AlterTablespaceOptionsContext);
    }
    ADD_SYMBOL() { return this.tryGetToken(MySQLParser.ADD_SYMBOL, 0); }
    DROP_SYMBOL() { return this.tryGetToken(MySQLParser.DROP_SYMBOL, 0); }
    CHANGE_SYMBOL() { return this.tryGetToken(MySQLParser.CHANGE_SYMBOL, 0); }
    NOT_SYMBOL() { return this.tryGetToken(MySQLParser.NOT_SYMBOL, 0); }
    ACCESSIBLE_SYMBOL() { return this.tryGetToken(MySQLParser.ACCESSIBLE_SYMBOL, 0); }
    READ_ONLY_SYMBOL() { return this.tryGetToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
    READ_WRITE_SYMBOL() { return this.tryGetToken(MySQLParser.READ_WRITE_SYMBOL, 0); }
    changeTablespaceOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(ChangeTablespaceOptionContext);
        }
        else {
            return this.getRuleContext(i, ChangeTablespaceOptionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterTablespace; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterTablespace) {
            listener.enterAlterTablespace(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterTablespace) {
            listener.exitAlterTablespace(this);
        }
    }
}
exports.AlterTablespaceContext = AlterTablespaceContext;
class AlterUndoTablespaceContext extends ParserRuleContext_1.ParserRuleContext {
    UNDO_SYMBOL() { return this.getToken(MySQLParser.UNDO_SYMBOL, 0); }
    TABLESPACE_SYMBOL() { return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
    tablespaceRef() {
        return this.getRuleContext(0, TablespaceRefContext);
    }
    SET_SYMBOL() { return this.getToken(MySQLParser.SET_SYMBOL, 0); }
    ACTIVE_SYMBOL() { return this.tryGetToken(MySQLParser.ACTIVE_SYMBOL, 0); }
    INACTIVE_SYMBOL() { return this.tryGetToken(MySQLParser.INACTIVE_SYMBOL, 0); }
    undoTableSpaceOptions() {
        return this.tryGetRuleContext(0, UndoTableSpaceOptionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterUndoTablespace; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterUndoTablespace) {
            listener.enterAlterUndoTablespace(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterUndoTablespace) {
            listener.exitAlterUndoTablespace(this);
        }
    }
}
exports.AlterUndoTablespaceContext = AlterUndoTablespaceContext;
class UndoTableSpaceOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    undoTableSpaceOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(UndoTableSpaceOptionContext);
        }
        else {
            return this.getRuleContext(i, UndoTableSpaceOptionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_undoTableSpaceOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterUndoTableSpaceOptions) {
            listener.enterUndoTableSpaceOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUndoTableSpaceOptions) {
            listener.exitUndoTableSpaceOptions(this);
        }
    }
}
exports.UndoTableSpaceOptionsContext = UndoTableSpaceOptionsContext;
class UndoTableSpaceOptionContext extends ParserRuleContext_1.ParserRuleContext {
    tsOptionEngine() {
        return this.getRuleContext(0, TsOptionEngineContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_undoTableSpaceOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterUndoTableSpaceOption) {
            listener.enterUndoTableSpaceOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUndoTableSpaceOption) {
            listener.exitUndoTableSpaceOption(this);
        }
    }
}
exports.UndoTableSpaceOptionContext = UndoTableSpaceOptionContext;
class AlterTablespaceOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    alterTablespaceOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(AlterTablespaceOptionContext);
        }
        else {
            return this.getRuleContext(i, AlterTablespaceOptionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterTablespaceOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterTablespaceOptions) {
            listener.enterAlterTablespaceOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterTablespaceOptions) {
            listener.exitAlterTablespaceOptions(this);
        }
    }
}
exports.AlterTablespaceOptionsContext = AlterTablespaceOptionsContext;
class AlterTablespaceOptionContext extends ParserRuleContext_1.ParserRuleContext {
    INITIAL_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
    sizeNumber() {
        return this.tryGetRuleContext(0, SizeNumberContext);
    }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    tsOptionAutoextendSize() {
        return this.tryGetRuleContext(0, TsOptionAutoextendSizeContext);
    }
    tsOptionMaxSize() {
        return this.tryGetRuleContext(0, TsOptionMaxSizeContext);
    }
    tsOptionEngine() {
        return this.tryGetRuleContext(0, TsOptionEngineContext);
    }
    tsOptionWait() {
        return this.tryGetRuleContext(0, TsOptionWaitContext);
    }
    tsOptionEncryption() {
        return this.tryGetRuleContext(0, TsOptionEncryptionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterTablespaceOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterTablespaceOption) {
            listener.enterAlterTablespaceOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterTablespaceOption) {
            listener.exitAlterTablespaceOption(this);
        }
    }
}
exports.AlterTablespaceOptionContext = AlterTablespaceOptionContext;
class ChangeTablespaceOptionContext extends ParserRuleContext_1.ParserRuleContext {
    INITIAL_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
    sizeNumber() {
        return this.tryGetRuleContext(0, SizeNumberContext);
    }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    tsOptionAutoextendSize() {
        return this.tryGetRuleContext(0, TsOptionAutoextendSizeContext);
    }
    tsOptionMaxSize() {
        return this.tryGetRuleContext(0, TsOptionMaxSizeContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_changeTablespaceOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterChangeTablespaceOption) {
            listener.enterChangeTablespaceOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChangeTablespaceOption) {
            listener.exitChangeTablespaceOption(this);
        }
    }
}
exports.ChangeTablespaceOptionContext = ChangeTablespaceOptionContext;
class AlterViewContext extends ParserRuleContext_1.ParserRuleContext {
    VIEW_SYMBOL() { return this.getToken(MySQLParser.VIEW_SYMBOL, 0); }
    viewRef() {
        return this.getRuleContext(0, ViewRefContext);
    }
    viewTail() {
        return this.getRuleContext(0, ViewTailContext);
    }
    viewAlgorithm() {
        return this.tryGetRuleContext(0, ViewAlgorithmContext);
    }
    definerClause() {
        return this.tryGetRuleContext(0, DefinerClauseContext);
    }
    viewSuid() {
        return this.tryGetRuleContext(0, ViewSuidContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterView; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterView) {
            listener.enterAlterView(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterView) {
            listener.exitAlterView(this);
        }
    }
}
exports.AlterViewContext = AlterViewContext;
class ViewTailContext extends ParserRuleContext_1.ParserRuleContext {
    AS_SYMBOL() { return this.getToken(MySQLParser.AS_SYMBOL, 0); }
    viewSelect() {
        return this.getRuleContext(0, ViewSelectContext);
    }
    columnInternalRefList() {
        return this.tryGetRuleContext(0, ColumnInternalRefListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_viewTail; }
    // @Override
    enterRule(listener) {
        if (listener.enterViewTail) {
            listener.enterViewTail(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitViewTail) {
            listener.exitViewTail(this);
        }
    }
}
exports.ViewTailContext = ViewTailContext;
class ViewSelectContext extends ParserRuleContext_1.ParserRuleContext {
    queryExpressionOrParens() {
        return this.getRuleContext(0, QueryExpressionOrParensContext);
    }
    viewCheckOption() {
        return this.tryGetRuleContext(0, ViewCheckOptionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_viewSelect; }
    // @Override
    enterRule(listener) {
        if (listener.enterViewSelect) {
            listener.enterViewSelect(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitViewSelect) {
            listener.exitViewSelect(this);
        }
    }
}
exports.ViewSelectContext = ViewSelectContext;
class ViewCheckOptionContext extends ParserRuleContext_1.ParserRuleContext {
    WITH_SYMBOL() { return this.getToken(MySQLParser.WITH_SYMBOL, 0); }
    CHECK_SYMBOL() { return this.getToken(MySQLParser.CHECK_SYMBOL, 0); }
    OPTION_SYMBOL() { return this.getToken(MySQLParser.OPTION_SYMBOL, 0); }
    CASCADED_SYMBOL() { return this.tryGetToken(MySQLParser.CASCADED_SYMBOL, 0); }
    LOCAL_SYMBOL() { return this.tryGetToken(MySQLParser.LOCAL_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_viewCheckOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterViewCheckOption) {
            listener.enterViewCheckOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitViewCheckOption) {
            listener.exitViewCheckOption(this);
        }
    }
}
exports.ViewCheckOptionContext = ViewCheckOptionContext;
class CreateStatementContext extends ParserRuleContext_1.ParserRuleContext {
    CREATE_SYMBOL() { return this.getToken(MySQLParser.CREATE_SYMBOL, 0); }
    createDatabase() {
        return this.tryGetRuleContext(0, CreateDatabaseContext);
    }
    createTable() {
        return this.tryGetRuleContext(0, CreateTableContext);
    }
    createFunction() {
        return this.tryGetRuleContext(0, CreateFunctionContext);
    }
    createProcedure() {
        return this.tryGetRuleContext(0, CreateProcedureContext);
    }
    createUdf() {
        return this.tryGetRuleContext(0, CreateUdfContext);
    }
    createLogfileGroup() {
        return this.tryGetRuleContext(0, CreateLogfileGroupContext);
    }
    createView() {
        return this.tryGetRuleContext(0, CreateViewContext);
    }
    createTrigger() {
        return this.tryGetRuleContext(0, CreateTriggerContext);
    }
    createIndex() {
        return this.tryGetRuleContext(0, CreateIndexContext);
    }
    createServer() {
        return this.tryGetRuleContext(0, CreateServerContext);
    }
    createTablespace() {
        return this.tryGetRuleContext(0, CreateTablespaceContext);
    }
    createEvent() {
        return this.tryGetRuleContext(0, CreateEventContext);
    }
    createRole() {
        return this.tryGetRuleContext(0, CreateRoleContext);
    }
    createSpatialReference() {
        return this.tryGetRuleContext(0, CreateSpatialReferenceContext);
    }
    createUndoTablespace() {
        return this.tryGetRuleContext(0, CreateUndoTablespaceContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateStatement) {
            listener.enterCreateStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateStatement) {
            listener.exitCreateStatement(this);
        }
    }
}
exports.CreateStatementContext = CreateStatementContext;
class CreateDatabaseContext extends ParserRuleContext_1.ParserRuleContext {
    DATABASE_SYMBOL() { return this.getToken(MySQLParser.DATABASE_SYMBOL, 0); }
    schemaName() {
        return this.getRuleContext(0, SchemaNameContext);
    }
    ifNotExists() {
        return this.tryGetRuleContext(0, IfNotExistsContext);
    }
    createDatabaseOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(CreateDatabaseOptionContext);
        }
        else {
            return this.getRuleContext(i, CreateDatabaseOptionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createDatabase; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateDatabase) {
            listener.enterCreateDatabase(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateDatabase) {
            listener.exitCreateDatabase(this);
        }
    }
}
exports.CreateDatabaseContext = CreateDatabaseContext;
class CreateDatabaseOptionContext extends ParserRuleContext_1.ParserRuleContext {
    defaultCharset() {
        return this.tryGetRuleContext(0, DefaultCharsetContext);
    }
    defaultCollation() {
        return this.tryGetRuleContext(0, DefaultCollationContext);
    }
    defaultEncryption() {
        return this.tryGetRuleContext(0, DefaultEncryptionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createDatabaseOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateDatabaseOption) {
            listener.enterCreateDatabaseOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateDatabaseOption) {
            listener.exitCreateDatabaseOption(this);
        }
    }
}
exports.CreateDatabaseOptionContext = CreateDatabaseOptionContext;
class CreateTableContext extends ParserRuleContext_1.ParserRuleContext {
    TABLE_SYMBOL() { return this.getToken(MySQLParser.TABLE_SYMBOL, 0); }
    tableName() {
        return this.getRuleContext(0, TableNameContext);
    }
    LIKE_SYMBOL() { return this.tryGetToken(MySQLParser.LIKE_SYMBOL, 0); }
    tableRef() {
        return this.tryGetRuleContext(0, TableRefContext);
    }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    TEMPORARY_SYMBOL() { return this.tryGetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
    ifNotExists() {
        return this.tryGetRuleContext(0, IfNotExistsContext);
    }
    tableElementList() {
        return this.tryGetRuleContext(0, TableElementListContext);
    }
    createTableOptions() {
        return this.tryGetRuleContext(0, CreateTableOptionsContext);
    }
    partitionClause() {
        return this.tryGetRuleContext(0, PartitionClauseContext);
    }
    duplicateAsQueryExpression() {
        return this.tryGetRuleContext(0, DuplicateAsQueryExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createTable; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateTable) {
            listener.enterCreateTable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateTable) {
            listener.exitCreateTable(this);
        }
    }
}
exports.CreateTableContext = CreateTableContext;
class TableElementListContext extends ParserRuleContext_1.ParserRuleContext {
    tableElement(i) {
        if (i === undefined) {
            return this.getRuleContexts(TableElementContext);
        }
        else {
            return this.getRuleContext(i, TableElementContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tableElementList; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableElementList) {
            listener.enterTableElementList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableElementList) {
            listener.exitTableElementList(this);
        }
    }
}
exports.TableElementListContext = TableElementListContext;
class TableElementContext extends ParserRuleContext_1.ParserRuleContext {
    columnDefinition() {
        return this.tryGetRuleContext(0, ColumnDefinitionContext);
    }
    tableConstraintDef() {
        return this.tryGetRuleContext(0, TableConstraintDefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tableElement; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableElement) {
            listener.enterTableElement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableElement) {
            listener.exitTableElement(this);
        }
    }
}
exports.TableElementContext = TableElementContext;
class DuplicateAsQueryExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    queryExpressionOrParens() {
        return this.getRuleContext(0, QueryExpressionOrParensContext);
    }
    AS_SYMBOL() { return this.tryGetToken(MySQLParser.AS_SYMBOL, 0); }
    REPLACE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLACE_SYMBOL, 0); }
    IGNORE_SYMBOL() { return this.tryGetToken(MySQLParser.IGNORE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_duplicateAsQueryExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterDuplicateAsQueryExpression) {
            listener.enterDuplicateAsQueryExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDuplicateAsQueryExpression) {
            listener.exitDuplicateAsQueryExpression(this);
        }
    }
}
exports.DuplicateAsQueryExpressionContext = DuplicateAsQueryExpressionContext;
class QueryExpressionOrParensContext extends ParserRuleContext_1.ParserRuleContext {
    queryExpression() {
        return this.tryGetRuleContext(0, QueryExpressionContext);
    }
    queryExpressionParens() {
        return this.tryGetRuleContext(0, QueryExpressionParensContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_queryExpressionOrParens; }
    // @Override
    enterRule(listener) {
        if (listener.enterQueryExpressionOrParens) {
            listener.enterQueryExpressionOrParens(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQueryExpressionOrParens) {
            listener.exitQueryExpressionOrParens(this);
        }
    }
}
exports.QueryExpressionOrParensContext = QueryExpressionOrParensContext;
class CreateRoutineContext extends ParserRuleContext_1.ParserRuleContext {
    CREATE_SYMBOL() { return this.getToken(MySQLParser.CREATE_SYMBOL, 0); }
    EOF() { return this.getToken(MySQLParser.EOF, 0); }
    createProcedure() {
        return this.tryGetRuleContext(0, CreateProcedureContext);
    }
    createFunction() {
        return this.tryGetRuleContext(0, CreateFunctionContext);
    }
    createUdf() {
        return this.tryGetRuleContext(0, CreateUdfContext);
    }
    SEMICOLON_SYMBOL() { return this.tryGetToken(MySQLParser.SEMICOLON_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createRoutine; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateRoutine) {
            listener.enterCreateRoutine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateRoutine) {
            listener.exitCreateRoutine(this);
        }
    }
}
exports.CreateRoutineContext = CreateRoutineContext;
class CreateProcedureContext extends ParserRuleContext_1.ParserRuleContext {
    PROCEDURE_SYMBOL() { return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
    procedureName() {
        return this.getRuleContext(0, ProcedureNameContext);
    }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    compoundStatement() {
        return this.getRuleContext(0, CompoundStatementContext);
    }
    definerClause() {
        return this.tryGetRuleContext(0, DefinerClauseContext);
    }
    procedureParameter(i) {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureParameterContext);
        }
        else {
            return this.getRuleContext(i, ProcedureParameterContext);
        }
    }
    routineCreateOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(RoutineCreateOptionContext);
        }
        else {
            return this.getRuleContext(i, RoutineCreateOptionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createProcedure; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateProcedure) {
            listener.enterCreateProcedure(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateProcedure) {
            listener.exitCreateProcedure(this);
        }
    }
}
exports.CreateProcedureContext = CreateProcedureContext;
class CreateFunctionContext extends ParserRuleContext_1.ParserRuleContext {
    FUNCTION_SYMBOL() { return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
    functionName() {
        return this.getRuleContext(0, FunctionNameContext);
    }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    RETURNS_SYMBOL() { return this.getToken(MySQLParser.RETURNS_SYMBOL, 0); }
    typeWithOptCollate() {
        return this.getRuleContext(0, TypeWithOptCollateContext);
    }
    compoundStatement() {
        return this.getRuleContext(0, CompoundStatementContext);
    }
    definerClause() {
        return this.tryGetRuleContext(0, DefinerClauseContext);
    }
    functionParameter(i) {
        if (i === undefined) {
            return this.getRuleContexts(FunctionParameterContext);
        }
        else {
            return this.getRuleContext(i, FunctionParameterContext);
        }
    }
    routineCreateOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(RoutineCreateOptionContext);
        }
        else {
            return this.getRuleContext(i, RoutineCreateOptionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createFunction; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateFunction) {
            listener.enterCreateFunction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateFunction) {
            listener.exitCreateFunction(this);
        }
    }
}
exports.CreateFunctionContext = CreateFunctionContext;
class CreateUdfContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    FUNCTION_SYMBOL() { return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
    udfName() {
        return this.getRuleContext(0, UdfNameContext);
    }
    RETURNS_SYMBOL() { return this.getToken(MySQLParser.RETURNS_SYMBOL, 0); }
    SONAME_SYMBOL() { return this.getToken(MySQLParser.SONAME_SYMBOL, 0); }
    textLiteral() {
        return this.getRuleContext(0, TextLiteralContext);
    }
    STRING_SYMBOL() { return this.tryGetToken(MySQLParser.STRING_SYMBOL, 0); }
    INT_SYMBOL() { return this.tryGetToken(MySQLParser.INT_SYMBOL, 0); }
    REAL_SYMBOL() { return this.tryGetToken(MySQLParser.REAL_SYMBOL, 0); }
    DECIMAL_SYMBOL() { return this.tryGetToken(MySQLParser.DECIMAL_SYMBOL, 0); }
    AGGREGATE_SYMBOL() { return this.tryGetToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createUdf; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateUdf) {
            listener.enterCreateUdf(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateUdf) {
            listener.exitCreateUdf(this);
        }
    }
}
exports.CreateUdfContext = CreateUdfContext;
class RoutineCreateOptionContext extends ParserRuleContext_1.ParserRuleContext {
    routineOption() {
        return this.tryGetRuleContext(0, RoutineOptionContext);
    }
    DETERMINISTIC_SYMBOL() { return this.tryGetToken(MySQLParser.DETERMINISTIC_SYMBOL, 0); }
    NOT_SYMBOL() { return this.tryGetToken(MySQLParser.NOT_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_routineCreateOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterRoutineCreateOption) {
            listener.enterRoutineCreateOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRoutineCreateOption) {
            listener.exitRoutineCreateOption(this);
        }
    }
}
exports.RoutineCreateOptionContext = RoutineCreateOptionContext;
class RoutineAlterOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    routineCreateOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(RoutineCreateOptionContext);
        }
        else {
            return this.getRuleContext(i, RoutineCreateOptionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_routineAlterOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterRoutineAlterOptions) {
            listener.enterRoutineAlterOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRoutineAlterOptions) {
            listener.exitRoutineAlterOptions(this);
        }
    }
}
exports.RoutineAlterOptionsContext = RoutineAlterOptionsContext;
class RoutineOptionContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    textLiteral() {
        return this.tryGetRuleContext(0, TextLiteralContext);
    }
    COMMENT_SYMBOL() { return this.tryGetToken(MySQLParser.COMMENT_SYMBOL, 0); }
    SQL_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_SYMBOL, 0); }
    LANGUAGE_SYMBOL() { return this.tryGetToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
    NO_SYMBOL() { return this.tryGetToken(MySQLParser.NO_SYMBOL, 0); }
    CONTAINS_SYMBOL() { return this.tryGetToken(MySQLParser.CONTAINS_SYMBOL, 0); }
    DATA_SYMBOL() { return this.tryGetToken(MySQLParser.DATA_SYMBOL, 0); }
    READS_SYMBOL() { return this.tryGetToken(MySQLParser.READS_SYMBOL, 0); }
    MODIFIES_SYMBOL() { return this.tryGetToken(MySQLParser.MODIFIES_SYMBOL, 0); }
    SECURITY_SYMBOL() { return this.tryGetToken(MySQLParser.SECURITY_SYMBOL, 0); }
    DEFINER_SYMBOL() { return this.tryGetToken(MySQLParser.DEFINER_SYMBOL, 0); }
    INVOKER_SYMBOL() { return this.tryGetToken(MySQLParser.INVOKER_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_routineOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterRoutineOption) {
            listener.enterRoutineOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRoutineOption) {
            listener.exitRoutineOption(this);
        }
    }
}
exports.RoutineOptionContext = RoutineOptionContext;
class CreateIndexContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    createIndexTarget() {
        return this.tryGetRuleContext(0, CreateIndexTargetContext);
    }
    INDEX_SYMBOL() { return this.tryGetToken(MySQLParser.INDEX_SYMBOL, 0); }
    indexName() {
        return this.tryGetRuleContext(0, IndexNameContext);
    }
    onlineOption() {
        return this.tryGetRuleContext(0, OnlineOptionContext);
    }
    FULLTEXT_SYMBOL() { return this.tryGetToken(MySQLParser.FULLTEXT_SYMBOL, 0); }
    SPATIAL_SYMBOL() { return this.tryGetToken(MySQLParser.SPATIAL_SYMBOL, 0); }
    indexLockAndAlgorithm() {
        return this.tryGetRuleContext(0, IndexLockAndAlgorithmContext);
    }
    UNIQUE_SYMBOL() { return this.tryGetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
    indexOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(IndexOptionContext);
        }
        else {
            return this.getRuleContext(i, IndexOptionContext);
        }
    }
    fulltextIndexOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(FulltextIndexOptionContext);
        }
        else {
            return this.getRuleContext(i, FulltextIndexOptionContext);
        }
    }
    spatialIndexOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(SpatialIndexOptionContext);
        }
        else {
            return this.getRuleContext(i, SpatialIndexOptionContext);
        }
    }
    indexTypeClause() {
        return this.tryGetRuleContext(0, IndexTypeClauseContext);
    }
    indexNameAndType() {
        return this.tryGetRuleContext(0, IndexNameAndTypeContext);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createIndex; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateIndex) {
            listener.enterCreateIndex(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateIndex) {
            listener.exitCreateIndex(this);
        }
    }
}
exports.CreateIndexContext = CreateIndexContext;
class IndexNameAndTypeContext extends ParserRuleContext_1.ParserRuleContext {
    indexName() {
        return this.getRuleContext(0, IndexNameContext);
    }
    USING_SYMBOL() { return this.tryGetToken(MySQLParser.USING_SYMBOL, 0); }
    indexType() {
        return this.tryGetRuleContext(0, IndexTypeContext);
    }
    TYPE_SYMBOL() { return this.tryGetToken(MySQLParser.TYPE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_indexNameAndType; }
    // @Override
    enterRule(listener) {
        if (listener.enterIndexNameAndType) {
            listener.enterIndexNameAndType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIndexNameAndType) {
            listener.exitIndexNameAndType(this);
        }
    }
}
exports.IndexNameAndTypeContext = IndexNameAndTypeContext;
class CreateIndexTargetContext extends ParserRuleContext_1.ParserRuleContext {
    ON_SYMBOL() { return this.getToken(MySQLParser.ON_SYMBOL, 0); }
    tableRef() {
        return this.getRuleContext(0, TableRefContext);
    }
    keyListVariants() {
        return this.getRuleContext(0, KeyListVariantsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createIndexTarget; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateIndexTarget) {
            listener.enterCreateIndexTarget(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateIndexTarget) {
            listener.exitCreateIndexTarget(this);
        }
    }
}
exports.CreateIndexTargetContext = CreateIndexTargetContext;
class CreateLogfileGroupContext extends ParserRuleContext_1.ParserRuleContext {
    LOGFILE_SYMBOL() { return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
    GROUP_SYMBOL() { return this.getToken(MySQLParser.GROUP_SYMBOL, 0); }
    logfileGroupName() {
        return this.getRuleContext(0, LogfileGroupNameContext);
    }
    ADD_SYMBOL() { return this.getToken(MySQLParser.ADD_SYMBOL, 0); }
    textLiteral() {
        return this.getRuleContext(0, TextLiteralContext);
    }
    UNDOFILE_SYMBOL() { return this.tryGetToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
    REDOFILE_SYMBOL() { return this.tryGetToken(MySQLParser.REDOFILE_SYMBOL, 0); }
    logfileGroupOptions() {
        return this.tryGetRuleContext(0, LogfileGroupOptionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createLogfileGroup; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateLogfileGroup) {
            listener.enterCreateLogfileGroup(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateLogfileGroup) {
            listener.exitCreateLogfileGroup(this);
        }
    }
}
exports.CreateLogfileGroupContext = CreateLogfileGroupContext;
class LogfileGroupOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    logfileGroupOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(LogfileGroupOptionContext);
        }
        else {
            return this.getRuleContext(i, LogfileGroupOptionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_logfileGroupOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterLogfileGroupOptions) {
            listener.enterLogfileGroupOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLogfileGroupOptions) {
            listener.exitLogfileGroupOptions(this);
        }
    }
}
exports.LogfileGroupOptionsContext = LogfileGroupOptionsContext;
class LogfileGroupOptionContext extends ParserRuleContext_1.ParserRuleContext {
    tsOptionInitialSize() {
        return this.tryGetRuleContext(0, TsOptionInitialSizeContext);
    }
    tsOptionUndoRedoBufferSize() {
        return this.tryGetRuleContext(0, TsOptionUndoRedoBufferSizeContext);
    }
    tsOptionNodegroup() {
        return this.tryGetRuleContext(0, TsOptionNodegroupContext);
    }
    tsOptionEngine() {
        return this.tryGetRuleContext(0, TsOptionEngineContext);
    }
    tsOptionWait() {
        return this.tryGetRuleContext(0, TsOptionWaitContext);
    }
    tsOptionComment() {
        return this.tryGetRuleContext(0, TsOptionCommentContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_logfileGroupOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterLogfileGroupOption) {
            listener.enterLogfileGroupOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLogfileGroupOption) {
            listener.exitLogfileGroupOption(this);
        }
    }
}
exports.LogfileGroupOptionContext = LogfileGroupOptionContext;
class CreateServerContext extends ParserRuleContext_1.ParserRuleContext {
    SERVER_SYMBOL() { return this.getToken(MySQLParser.SERVER_SYMBOL, 0); }
    serverName() {
        return this.getRuleContext(0, ServerNameContext);
    }
    FOREIGN_SYMBOL() { return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0); }
    DATA_SYMBOL() { return this.getToken(MySQLParser.DATA_SYMBOL, 0); }
    WRAPPER_SYMBOL() { return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0); }
    textOrIdentifier() {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    serverOptions() {
        return this.getRuleContext(0, ServerOptionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createServer; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateServer) {
            listener.enterCreateServer(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateServer) {
            listener.exitCreateServer(this);
        }
    }
}
exports.CreateServerContext = CreateServerContext;
class ServerOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    OPTIONS_SYMBOL() { return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    serverOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(ServerOptionContext);
        }
        else {
            return this.getRuleContext(i, ServerOptionContext);
        }
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_serverOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterServerOptions) {
            listener.enterServerOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitServerOptions) {
            listener.exitServerOptions(this);
        }
    }
}
exports.ServerOptionsContext = ServerOptionsContext;
class ServerOptionContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    textLiteral() {
        return this.tryGetRuleContext(0, TextLiteralContext);
    }
    HOST_SYMBOL() { return this.tryGetToken(MySQLParser.HOST_SYMBOL, 0); }
    DATABASE_SYMBOL() { return this.tryGetToken(MySQLParser.DATABASE_SYMBOL, 0); }
    USER_SYMBOL() { return this.tryGetToken(MySQLParser.USER_SYMBOL, 0); }
    PASSWORD_SYMBOL() { return this.tryGetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
    SOCKET_SYMBOL() { return this.tryGetToken(MySQLParser.SOCKET_SYMBOL, 0); }
    OWNER_SYMBOL() { return this.tryGetToken(MySQLParser.OWNER_SYMBOL, 0); }
    ulong_number() {
        return this.tryGetRuleContext(0, Ulong_numberContext);
    }
    PORT_SYMBOL() { return this.tryGetToken(MySQLParser.PORT_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_serverOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterServerOption) {
            listener.enterServerOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitServerOption) {
            listener.exitServerOption(this);
        }
    }
}
exports.ServerOptionContext = ServerOptionContext;
class CreateTablespaceContext extends ParserRuleContext_1.ParserRuleContext {
    TABLESPACE_SYMBOL() { return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
    tablespaceName() {
        return this.getRuleContext(0, TablespaceNameContext);
    }
    tsDataFileName() {
        return this.getRuleContext(0, TsDataFileNameContext);
    }
    USE_SYMBOL() { return this.tryGetToken(MySQLParser.USE_SYMBOL, 0); }
    LOGFILE_SYMBOL() { return this.tryGetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
    GROUP_SYMBOL() { return this.tryGetToken(MySQLParser.GROUP_SYMBOL, 0); }
    logfileGroupRef() {
        return this.tryGetRuleContext(0, LogfileGroupRefContext);
    }
    tablespaceOptions() {
        return this.tryGetRuleContext(0, TablespaceOptionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createTablespace; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateTablespace) {
            listener.enterCreateTablespace(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateTablespace) {
            listener.exitCreateTablespace(this);
        }
    }
}
exports.CreateTablespaceContext = CreateTablespaceContext;
class CreateUndoTablespaceContext extends ParserRuleContext_1.ParserRuleContext {
    UNDO_SYMBOL() { return this.getToken(MySQLParser.UNDO_SYMBOL, 0); }
    TABLESPACE_SYMBOL() { return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
    tablespaceName() {
        return this.getRuleContext(0, TablespaceNameContext);
    }
    ADD_SYMBOL() { return this.getToken(MySQLParser.ADD_SYMBOL, 0); }
    tsDataFile() {
        return this.getRuleContext(0, TsDataFileContext);
    }
    undoTableSpaceOptions() {
        return this.tryGetRuleContext(0, UndoTableSpaceOptionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createUndoTablespace; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateUndoTablespace) {
            listener.enterCreateUndoTablespace(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateUndoTablespace) {
            listener.exitCreateUndoTablespace(this);
        }
    }
}
exports.CreateUndoTablespaceContext = CreateUndoTablespaceContext;
class TsDataFileNameContext extends ParserRuleContext_1.ParserRuleContext {
    ADD_SYMBOL() { return this.tryGetToken(MySQLParser.ADD_SYMBOL, 0); }
    tsDataFile() {
        return this.tryGetRuleContext(0, TsDataFileContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tsDataFileName; }
    // @Override
    enterRule(listener) {
        if (listener.enterTsDataFileName) {
            listener.enterTsDataFileName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTsDataFileName) {
            listener.exitTsDataFileName(this);
        }
    }
}
exports.TsDataFileNameContext = TsDataFileNameContext;
class TsDataFileContext extends ParserRuleContext_1.ParserRuleContext {
    DATAFILE_SYMBOL() { return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0); }
    textLiteral() {
        return this.getRuleContext(0, TextLiteralContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tsDataFile; }
    // @Override
    enterRule(listener) {
        if (listener.enterTsDataFile) {
            listener.enterTsDataFile(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTsDataFile) {
            listener.exitTsDataFile(this);
        }
    }
}
exports.TsDataFileContext = TsDataFileContext;
class TablespaceOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    tablespaceOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(TablespaceOptionContext);
        }
        else {
            return this.getRuleContext(i, TablespaceOptionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tablespaceOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterTablespaceOptions) {
            listener.enterTablespaceOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTablespaceOptions) {
            listener.exitTablespaceOptions(this);
        }
    }
}
exports.TablespaceOptionsContext = TablespaceOptionsContext;
class TablespaceOptionContext extends ParserRuleContext_1.ParserRuleContext {
    tsOptionInitialSize() {
        return this.tryGetRuleContext(0, TsOptionInitialSizeContext);
    }
    tsOptionAutoextendSize() {
        return this.tryGetRuleContext(0, TsOptionAutoextendSizeContext);
    }
    tsOptionMaxSize() {
        return this.tryGetRuleContext(0, TsOptionMaxSizeContext);
    }
    tsOptionExtentSize() {
        return this.tryGetRuleContext(0, TsOptionExtentSizeContext);
    }
    tsOptionNodegroup() {
        return this.tryGetRuleContext(0, TsOptionNodegroupContext);
    }
    tsOptionEngine() {
        return this.tryGetRuleContext(0, TsOptionEngineContext);
    }
    tsOptionWait() {
        return this.tryGetRuleContext(0, TsOptionWaitContext);
    }
    tsOptionComment() {
        return this.tryGetRuleContext(0, TsOptionCommentContext);
    }
    tsOptionFileblockSize() {
        return this.tryGetRuleContext(0, TsOptionFileblockSizeContext);
    }
    tsOptionEncryption() {
        return this.tryGetRuleContext(0, TsOptionEncryptionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tablespaceOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterTablespaceOption) {
            listener.enterTablespaceOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTablespaceOption) {
            listener.exitTablespaceOption(this);
        }
    }
}
exports.TablespaceOptionContext = TablespaceOptionContext;
class TsOptionInitialSizeContext extends ParserRuleContext_1.ParserRuleContext {
    INITIAL_SIZE_SYMBOL() { return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
    sizeNumber() {
        return this.getRuleContext(0, SizeNumberContext);
    }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tsOptionInitialSize; }
    // @Override
    enterRule(listener) {
        if (listener.enterTsOptionInitialSize) {
            listener.enterTsOptionInitialSize(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTsOptionInitialSize) {
            listener.exitTsOptionInitialSize(this);
        }
    }
}
exports.TsOptionInitialSizeContext = TsOptionInitialSizeContext;
class TsOptionUndoRedoBufferSizeContext extends ParserRuleContext_1.ParserRuleContext {
    sizeNumber() {
        return this.getRuleContext(0, SizeNumberContext);
    }
    UNDO_BUFFER_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
    REDO_BUFFER_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tsOptionUndoRedoBufferSize; }
    // @Override
    enterRule(listener) {
        if (listener.enterTsOptionUndoRedoBufferSize) {
            listener.enterTsOptionUndoRedoBufferSize(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTsOptionUndoRedoBufferSize) {
            listener.exitTsOptionUndoRedoBufferSize(this);
        }
    }
}
exports.TsOptionUndoRedoBufferSizeContext = TsOptionUndoRedoBufferSizeContext;
class TsOptionAutoextendSizeContext extends ParserRuleContext_1.ParserRuleContext {
    AUTOEXTEND_SIZE_SYMBOL() { return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
    sizeNumber() {
        return this.getRuleContext(0, SizeNumberContext);
    }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tsOptionAutoextendSize; }
    // @Override
    enterRule(listener) {
        if (listener.enterTsOptionAutoextendSize) {
            listener.enterTsOptionAutoextendSize(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTsOptionAutoextendSize) {
            listener.exitTsOptionAutoextendSize(this);
        }
    }
}
exports.TsOptionAutoextendSizeContext = TsOptionAutoextendSizeContext;
class TsOptionMaxSizeContext extends ParserRuleContext_1.ParserRuleContext {
    MAX_SIZE_SYMBOL() { return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
    sizeNumber() {
        return this.getRuleContext(0, SizeNumberContext);
    }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tsOptionMaxSize; }
    // @Override
    enterRule(listener) {
        if (listener.enterTsOptionMaxSize) {
            listener.enterTsOptionMaxSize(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTsOptionMaxSize) {
            listener.exitTsOptionMaxSize(this);
        }
    }
}
exports.TsOptionMaxSizeContext = TsOptionMaxSizeContext;
class TsOptionExtentSizeContext extends ParserRuleContext_1.ParserRuleContext {
    EXTENT_SIZE_SYMBOL() { return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
    sizeNumber() {
        return this.getRuleContext(0, SizeNumberContext);
    }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tsOptionExtentSize; }
    // @Override
    enterRule(listener) {
        if (listener.enterTsOptionExtentSize) {
            listener.enterTsOptionExtentSize(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTsOptionExtentSize) {
            listener.exitTsOptionExtentSize(this);
        }
    }
}
exports.TsOptionExtentSizeContext = TsOptionExtentSizeContext;
class TsOptionNodegroupContext extends ParserRuleContext_1.ParserRuleContext {
    NODEGROUP_SYMBOL() { return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
    real_ulong_number() {
        return this.getRuleContext(0, Real_ulong_numberContext);
    }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tsOptionNodegroup; }
    // @Override
    enterRule(listener) {
        if (listener.enterTsOptionNodegroup) {
            listener.enterTsOptionNodegroup(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTsOptionNodegroup) {
            listener.exitTsOptionNodegroup(this);
        }
    }
}
exports.TsOptionNodegroupContext = TsOptionNodegroupContext;
class TsOptionEngineContext extends ParserRuleContext_1.ParserRuleContext {
    ENGINE_SYMBOL() { return this.getToken(MySQLParser.ENGINE_SYMBOL, 0); }
    engineRef() {
        return this.getRuleContext(0, EngineRefContext);
    }
    STORAGE_SYMBOL() { return this.tryGetToken(MySQLParser.STORAGE_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tsOptionEngine; }
    // @Override
    enterRule(listener) {
        if (listener.enterTsOptionEngine) {
            listener.enterTsOptionEngine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTsOptionEngine) {
            listener.exitTsOptionEngine(this);
        }
    }
}
exports.TsOptionEngineContext = TsOptionEngineContext;
class TsOptionWaitContext extends ParserRuleContext_1.ParserRuleContext {
    WAIT_SYMBOL() { return this.tryGetToken(MySQLParser.WAIT_SYMBOL, 0); }
    NO_WAIT_SYMBOL() { return this.tryGetToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tsOptionWait; }
    // @Override
    enterRule(listener) {
        if (listener.enterTsOptionWait) {
            listener.enterTsOptionWait(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTsOptionWait) {
            listener.exitTsOptionWait(this);
        }
    }
}
exports.TsOptionWaitContext = TsOptionWaitContext;
class TsOptionCommentContext extends ParserRuleContext_1.ParserRuleContext {
    COMMENT_SYMBOL() { return this.getToken(MySQLParser.COMMENT_SYMBOL, 0); }
    textLiteral() {
        return this.getRuleContext(0, TextLiteralContext);
    }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tsOptionComment; }
    // @Override
    enterRule(listener) {
        if (listener.enterTsOptionComment) {
            listener.enterTsOptionComment(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTsOptionComment) {
            listener.exitTsOptionComment(this);
        }
    }
}
exports.TsOptionCommentContext = TsOptionCommentContext;
class TsOptionFileblockSizeContext extends ParserRuleContext_1.ParserRuleContext {
    FILE_BLOCK_SIZE_SYMBOL() { return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
    sizeNumber() {
        return this.getRuleContext(0, SizeNumberContext);
    }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tsOptionFileblockSize; }
    // @Override
    enterRule(listener) {
        if (listener.enterTsOptionFileblockSize) {
            listener.enterTsOptionFileblockSize(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTsOptionFileblockSize) {
            listener.exitTsOptionFileblockSize(this);
        }
    }
}
exports.TsOptionFileblockSizeContext = TsOptionFileblockSizeContext;
class TsOptionEncryptionContext extends ParserRuleContext_1.ParserRuleContext {
    ENCRYPTION_SYMBOL() { return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
    textStringLiteral() {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tsOptionEncryption; }
    // @Override
    enterRule(listener) {
        if (listener.enterTsOptionEncryption) {
            listener.enterTsOptionEncryption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTsOptionEncryption) {
            listener.exitTsOptionEncryption(this);
        }
    }
}
exports.TsOptionEncryptionContext = TsOptionEncryptionContext;
class CreateViewContext extends ParserRuleContext_1.ParserRuleContext {
    VIEW_SYMBOL() { return this.getToken(MySQLParser.VIEW_SYMBOL, 0); }
    viewName() {
        return this.getRuleContext(0, ViewNameContext);
    }
    viewTail() {
        return this.getRuleContext(0, ViewTailContext);
    }
    viewReplaceOrAlgorithm() {
        return this.tryGetRuleContext(0, ViewReplaceOrAlgorithmContext);
    }
    definerClause() {
        return this.tryGetRuleContext(0, DefinerClauseContext);
    }
    viewSuid() {
        return this.tryGetRuleContext(0, ViewSuidContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createView; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateView) {
            listener.enterCreateView(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateView) {
            listener.exitCreateView(this);
        }
    }
}
exports.CreateViewContext = CreateViewContext;
class ViewReplaceOrAlgorithmContext extends ParserRuleContext_1.ParserRuleContext {
    OR_SYMBOL() { return this.tryGetToken(MySQLParser.OR_SYMBOL, 0); }
    REPLACE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLACE_SYMBOL, 0); }
    viewAlgorithm() {
        return this.tryGetRuleContext(0, ViewAlgorithmContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_viewReplaceOrAlgorithm; }
    // @Override
    enterRule(listener) {
        if (listener.enterViewReplaceOrAlgorithm) {
            listener.enterViewReplaceOrAlgorithm(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitViewReplaceOrAlgorithm) {
            listener.exitViewReplaceOrAlgorithm(this);
        }
    }
}
exports.ViewReplaceOrAlgorithmContext = ViewReplaceOrAlgorithmContext;
class ViewAlgorithmContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    ALGORITHM_SYMBOL() { return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.getToken(MySQLParser.EQUAL_OPERATOR, 0); }
    UNDEFINED_SYMBOL() { return this.tryGetToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
    MERGE_SYMBOL() { return this.tryGetToken(MySQLParser.MERGE_SYMBOL, 0); }
    TEMPTABLE_SYMBOL() { return this.tryGetToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_viewAlgorithm; }
    // @Override
    enterRule(listener) {
        if (listener.enterViewAlgorithm) {
            listener.enterViewAlgorithm(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitViewAlgorithm) {
            listener.exitViewAlgorithm(this);
        }
    }
}
exports.ViewAlgorithmContext = ViewAlgorithmContext;
class ViewSuidContext extends ParserRuleContext_1.ParserRuleContext {
    SQL_SYMBOL() { return this.getToken(MySQLParser.SQL_SYMBOL, 0); }
    SECURITY_SYMBOL() { return this.getToken(MySQLParser.SECURITY_SYMBOL, 0); }
    DEFINER_SYMBOL() { return this.tryGetToken(MySQLParser.DEFINER_SYMBOL, 0); }
    INVOKER_SYMBOL() { return this.tryGetToken(MySQLParser.INVOKER_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_viewSuid; }
    // @Override
    enterRule(listener) {
        if (listener.enterViewSuid) {
            listener.enterViewSuid(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitViewSuid) {
            listener.exitViewSuid(this);
        }
    }
}
exports.ViewSuidContext = ViewSuidContext;
class CreateTriggerContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    TRIGGER_SYMBOL() { return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
    triggerName() {
        return this.getRuleContext(0, TriggerNameContext);
    }
    ON_SYMBOL() { return this.getToken(MySQLParser.ON_SYMBOL, 0); }
    tableRef() {
        return this.getRuleContext(0, TableRefContext);
    }
    FOR_SYMBOL() { return this.getToken(MySQLParser.FOR_SYMBOL, 0); }
    EACH_SYMBOL() { return this.getToken(MySQLParser.EACH_SYMBOL, 0); }
    ROW_SYMBOL() { return this.getToken(MySQLParser.ROW_SYMBOL, 0); }
    compoundStatement() {
        return this.getRuleContext(0, CompoundStatementContext);
    }
    BEFORE_SYMBOL() { return this.tryGetToken(MySQLParser.BEFORE_SYMBOL, 0); }
    AFTER_SYMBOL() { return this.tryGetToken(MySQLParser.AFTER_SYMBOL, 0); }
    INSERT_SYMBOL() { return this.tryGetToken(MySQLParser.INSERT_SYMBOL, 0); }
    UPDATE_SYMBOL() { return this.tryGetToken(MySQLParser.UPDATE_SYMBOL, 0); }
    DELETE_SYMBOL() { return this.tryGetToken(MySQLParser.DELETE_SYMBOL, 0); }
    definerClause() {
        return this.tryGetRuleContext(0, DefinerClauseContext);
    }
    triggerFollowsPrecedesClause() {
        return this.tryGetRuleContext(0, TriggerFollowsPrecedesClauseContext);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createTrigger; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateTrigger) {
            listener.enterCreateTrigger(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateTrigger) {
            listener.exitCreateTrigger(this);
        }
    }
}
exports.CreateTriggerContext = CreateTriggerContext;
class TriggerFollowsPrecedesClauseContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    textOrIdentifier() {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    FOLLOWS_SYMBOL() { return this.tryGetToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
    PRECEDES_SYMBOL() { return this.tryGetToken(MySQLParser.PRECEDES_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_triggerFollowsPrecedesClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterTriggerFollowsPrecedesClause) {
            listener.enterTriggerFollowsPrecedesClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTriggerFollowsPrecedesClause) {
            listener.exitTriggerFollowsPrecedesClause(this);
        }
    }
}
exports.TriggerFollowsPrecedesClauseContext = TriggerFollowsPrecedesClauseContext;
class CreateEventContext extends ParserRuleContext_1.ParserRuleContext {
    EVENT_SYMBOL() { return this.getToken(MySQLParser.EVENT_SYMBOL, 0); }
    eventName() {
        return this.getRuleContext(0, EventNameContext);
    }
    ON_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.ON_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.ON_SYMBOL, i);
        }
    }
    SCHEDULE_SYMBOL() { return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
    schedule() {
        return this.getRuleContext(0, ScheduleContext);
    }
    DO_SYMBOL() { return this.getToken(MySQLParser.DO_SYMBOL, 0); }
    compoundStatement() {
        return this.getRuleContext(0, CompoundStatementContext);
    }
    definerClause() {
        return this.tryGetRuleContext(0, DefinerClauseContext);
    }
    ifNotExists() {
        return this.tryGetRuleContext(0, IfNotExistsContext);
    }
    COMPLETION_SYMBOL() { return this.tryGetToken(MySQLParser.COMPLETION_SYMBOL, 0); }
    PRESERVE_SYMBOL() { return this.tryGetToken(MySQLParser.PRESERVE_SYMBOL, 0); }
    ENABLE_SYMBOL() { return this.tryGetToken(MySQLParser.ENABLE_SYMBOL, 0); }
    DISABLE_SYMBOL() { return this.tryGetToken(MySQLParser.DISABLE_SYMBOL, 0); }
    COMMENT_SYMBOL() { return this.tryGetToken(MySQLParser.COMMENT_SYMBOL, 0); }
    textLiteral() {
        return this.tryGetRuleContext(0, TextLiteralContext);
    }
    NOT_SYMBOL() { return this.tryGetToken(MySQLParser.NOT_SYMBOL, 0); }
    SLAVE_SYMBOL() { return this.tryGetToken(MySQLParser.SLAVE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createEvent; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateEvent) {
            listener.enterCreateEvent(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateEvent) {
            listener.exitCreateEvent(this);
        }
    }
}
exports.CreateEventContext = CreateEventContext;
class CreateRoleContext extends ParserRuleContext_1.ParserRuleContext {
    ROLE_SYMBOL() { return this.getToken(MySQLParser.ROLE_SYMBOL, 0); }
    roleList() {
        return this.getRuleContext(0, RoleListContext);
    }
    ifNotExists() {
        return this.tryGetRuleContext(0, IfNotExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createRole; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateRole) {
            listener.enterCreateRole(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateRole) {
            listener.exitCreateRole(this);
        }
    }
}
exports.CreateRoleContext = CreateRoleContext;
class CreateSpatialReferenceContext extends ParserRuleContext_1.ParserRuleContext {
    OR_SYMBOL() { return this.tryGetToken(MySQLParser.OR_SYMBOL, 0); }
    REPLACE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLACE_SYMBOL, 0); }
    SPATIAL_SYMBOL() { return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
    REFERENCE_SYMBOL() { return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0); }
    SYSTEM_SYMBOL() { return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
    real_ulonglong_number() {
        return this.getRuleContext(0, Real_ulonglong_numberContext);
    }
    srsAttribute(i) {
        if (i === undefined) {
            return this.getRuleContexts(SrsAttributeContext);
        }
        else {
            return this.getRuleContext(i, SrsAttributeContext);
        }
    }
    ifNotExists() {
        return this.tryGetRuleContext(0, IfNotExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createSpatialReference; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateSpatialReference) {
            listener.enterCreateSpatialReference(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateSpatialReference) {
            listener.exitCreateSpatialReference(this);
        }
    }
}
exports.CreateSpatialReferenceContext = CreateSpatialReferenceContext;
class SrsAttributeContext extends ParserRuleContext_1.ParserRuleContext {
    NAME_SYMBOL() { return this.tryGetToken(MySQLParser.NAME_SYMBOL, 0); }
    TEXT_SYMBOL() { return this.tryGetToken(MySQLParser.TEXT_SYMBOL, 0); }
    textStringNoLinebreak() {
        return this.getRuleContext(0, TextStringNoLinebreakContext);
    }
    DEFINITION_SYMBOL() { return this.tryGetToken(MySQLParser.DEFINITION_SYMBOL, 0); }
    ORGANIZATION_SYMBOL() { return this.tryGetToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
    IDENTIFIED_SYMBOL() { return this.tryGetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
    BY_SYMBOL() { return this.tryGetToken(MySQLParser.BY_SYMBOL, 0); }
    real_ulonglong_number() {
        return this.tryGetRuleContext(0, Real_ulonglong_numberContext);
    }
    DESCRIPTION_SYMBOL() { return this.tryGetToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_srsAttribute; }
    // @Override
    enterRule(listener) {
        if (listener.enterSrsAttribute) {
            listener.enterSrsAttribute(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSrsAttribute) {
            listener.exitSrsAttribute(this);
        }
    }
}
exports.SrsAttributeContext = SrsAttributeContext;
class DropStatementContext extends ParserRuleContext_1.ParserRuleContext {
    DROP_SYMBOL() { return this.getToken(MySQLParser.DROP_SYMBOL, 0); }
    dropDatabase() {
        return this.tryGetRuleContext(0, DropDatabaseContext);
    }
    dropEvent() {
        return this.tryGetRuleContext(0, DropEventContext);
    }
    dropFunction() {
        return this.tryGetRuleContext(0, DropFunctionContext);
    }
    dropProcedure() {
        return this.tryGetRuleContext(0, DropProcedureContext);
    }
    dropIndex() {
        return this.tryGetRuleContext(0, DropIndexContext);
    }
    dropLogfileGroup() {
        return this.tryGetRuleContext(0, DropLogfileGroupContext);
    }
    dropServer() {
        return this.tryGetRuleContext(0, DropServerContext);
    }
    dropTable() {
        return this.tryGetRuleContext(0, DropTableContext);
    }
    dropTableSpace() {
        return this.tryGetRuleContext(0, DropTableSpaceContext);
    }
    dropTrigger() {
        return this.tryGetRuleContext(0, DropTriggerContext);
    }
    dropView() {
        return this.tryGetRuleContext(0, DropViewContext);
    }
    dropRole() {
        return this.tryGetRuleContext(0, DropRoleContext);
    }
    dropSpatialReference() {
        return this.tryGetRuleContext(0, DropSpatialReferenceContext);
    }
    dropUndoTablespace() {
        return this.tryGetRuleContext(0, DropUndoTablespaceContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropStatement) {
            listener.enterDropStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropStatement) {
            listener.exitDropStatement(this);
        }
    }
}
exports.DropStatementContext = DropStatementContext;
class DropDatabaseContext extends ParserRuleContext_1.ParserRuleContext {
    DATABASE_SYMBOL() { return this.getToken(MySQLParser.DATABASE_SYMBOL, 0); }
    schemaRef() {
        return this.getRuleContext(0, SchemaRefContext);
    }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropDatabase; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropDatabase) {
            listener.enterDropDatabase(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropDatabase) {
            listener.exitDropDatabase(this);
        }
    }
}
exports.DropDatabaseContext = DropDatabaseContext;
class DropEventContext extends ParserRuleContext_1.ParserRuleContext {
    EVENT_SYMBOL() { return this.getToken(MySQLParser.EVENT_SYMBOL, 0); }
    eventRef() {
        return this.getRuleContext(0, EventRefContext);
    }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropEvent; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropEvent) {
            listener.enterDropEvent(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropEvent) {
            listener.exitDropEvent(this);
        }
    }
}
exports.DropEventContext = DropEventContext;
class DropFunctionContext extends ParserRuleContext_1.ParserRuleContext {
    FUNCTION_SYMBOL() { return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
    functionRef() {
        return this.getRuleContext(0, FunctionRefContext);
    }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropFunction; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropFunction) {
            listener.enterDropFunction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropFunction) {
            listener.exitDropFunction(this);
        }
    }
}
exports.DropFunctionContext = DropFunctionContext;
class DropProcedureContext extends ParserRuleContext_1.ParserRuleContext {
    PROCEDURE_SYMBOL() { return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
    procedureRef() {
        return this.getRuleContext(0, ProcedureRefContext);
    }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropProcedure; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropProcedure) {
            listener.enterDropProcedure(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropProcedure) {
            listener.exitDropProcedure(this);
        }
    }
}
exports.DropProcedureContext = DropProcedureContext;
class DropIndexContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    indexRef() {
        return this.getRuleContext(0, IndexRefContext);
    }
    ON_SYMBOL() { return this.getToken(MySQLParser.ON_SYMBOL, 0); }
    tableRef() {
        return this.getRuleContext(0, TableRefContext);
    }
    INDEX_SYMBOL() { return this.getToken(MySQLParser.INDEX_SYMBOL, 0); }
    onlineOption() {
        return this.tryGetRuleContext(0, OnlineOptionContext);
    }
    indexLockAndAlgorithm() {
        return this.tryGetRuleContext(0, IndexLockAndAlgorithmContext);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropIndex; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropIndex) {
            listener.enterDropIndex(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropIndex) {
            listener.exitDropIndex(this);
        }
    }
}
exports.DropIndexContext = DropIndexContext;
class DropLogfileGroupContext extends ParserRuleContext_1.ParserRuleContext {
    LOGFILE_SYMBOL() { return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
    GROUP_SYMBOL() { return this.getToken(MySQLParser.GROUP_SYMBOL, 0); }
    logfileGroupRef() {
        return this.getRuleContext(0, LogfileGroupRefContext);
    }
    dropLogfileGroupOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(DropLogfileGroupOptionContext);
        }
        else {
            return this.getRuleContext(i, DropLogfileGroupOptionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropLogfileGroup; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropLogfileGroup) {
            listener.enterDropLogfileGroup(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropLogfileGroup) {
            listener.exitDropLogfileGroup(this);
        }
    }
}
exports.DropLogfileGroupContext = DropLogfileGroupContext;
class DropLogfileGroupOptionContext extends ParserRuleContext_1.ParserRuleContext {
    tsOptionWait() {
        return this.tryGetRuleContext(0, TsOptionWaitContext);
    }
    tsOptionEngine() {
        return this.tryGetRuleContext(0, TsOptionEngineContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropLogfileGroupOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropLogfileGroupOption) {
            listener.enterDropLogfileGroupOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropLogfileGroupOption) {
            listener.exitDropLogfileGroupOption(this);
        }
    }
}
exports.DropLogfileGroupOptionContext = DropLogfileGroupOptionContext;
class DropServerContext extends ParserRuleContext_1.ParserRuleContext {
    SERVER_SYMBOL() { return this.getToken(MySQLParser.SERVER_SYMBOL, 0); }
    serverRef() {
        return this.getRuleContext(0, ServerRefContext);
    }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropServer; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropServer) {
            listener.enterDropServer(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropServer) {
            listener.exitDropServer(this);
        }
    }
}
exports.DropServerContext = DropServerContext;
class DropTableContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    tableRefList() {
        return this.getRuleContext(0, TableRefListContext);
    }
    TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.TABLE_SYMBOL, 0); }
    TABLES_SYMBOL() { return this.tryGetToken(MySQLParser.TABLES_SYMBOL, 0); }
    TEMPORARY_SYMBOL() { return this.tryGetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    RESTRICT_SYMBOL() { return this.tryGetToken(MySQLParser.RESTRICT_SYMBOL, 0); }
    CASCADE_SYMBOL() { return this.tryGetToken(MySQLParser.CASCADE_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropTable; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropTable) {
            listener.enterDropTable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropTable) {
            listener.exitDropTable(this);
        }
    }
}
exports.DropTableContext = DropTableContext;
class DropTableSpaceContext extends ParserRuleContext_1.ParserRuleContext {
    TABLESPACE_SYMBOL() { return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
    tablespaceRef() {
        return this.getRuleContext(0, TablespaceRefContext);
    }
    dropLogfileGroupOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(DropLogfileGroupOptionContext);
        }
        else {
            return this.getRuleContext(i, DropLogfileGroupOptionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropTableSpace; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropTableSpace) {
            listener.enterDropTableSpace(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropTableSpace) {
            listener.exitDropTableSpace(this);
        }
    }
}
exports.DropTableSpaceContext = DropTableSpaceContext;
class DropTriggerContext extends ParserRuleContext_1.ParserRuleContext {
    TRIGGER_SYMBOL() { return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
    triggerRef() {
        return this.getRuleContext(0, TriggerRefContext);
    }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropTrigger; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropTrigger) {
            listener.enterDropTrigger(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropTrigger) {
            listener.exitDropTrigger(this);
        }
    }
}
exports.DropTriggerContext = DropTriggerContext;
class DropViewContext extends ParserRuleContext_1.ParserRuleContext {
    VIEW_SYMBOL() { return this.getToken(MySQLParser.VIEW_SYMBOL, 0); }
    viewRefList() {
        return this.getRuleContext(0, ViewRefListContext);
    }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    RESTRICT_SYMBOL() { return this.tryGetToken(MySQLParser.RESTRICT_SYMBOL, 0); }
    CASCADE_SYMBOL() { return this.tryGetToken(MySQLParser.CASCADE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropView; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropView) {
            listener.enterDropView(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropView) {
            listener.exitDropView(this);
        }
    }
}
exports.DropViewContext = DropViewContext;
class DropRoleContext extends ParserRuleContext_1.ParserRuleContext {
    ROLE_SYMBOL() { return this.getToken(MySQLParser.ROLE_SYMBOL, 0); }
    roleList() {
        return this.getRuleContext(0, RoleListContext);
    }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropRole; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropRole) {
            listener.enterDropRole(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropRole) {
            listener.exitDropRole(this);
        }
    }
}
exports.DropRoleContext = DropRoleContext;
class DropSpatialReferenceContext extends ParserRuleContext_1.ParserRuleContext {
    SPATIAL_SYMBOL() { return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
    REFERENCE_SYMBOL() { return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0); }
    SYSTEM_SYMBOL() { return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
    real_ulonglong_number() {
        return this.getRuleContext(0, Real_ulonglong_numberContext);
    }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropSpatialReference; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropSpatialReference) {
            listener.enterDropSpatialReference(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropSpatialReference) {
            listener.exitDropSpatialReference(this);
        }
    }
}
exports.DropSpatialReferenceContext = DropSpatialReferenceContext;
class DropUndoTablespaceContext extends ParserRuleContext_1.ParserRuleContext {
    UNDO_SYMBOL() { return this.getToken(MySQLParser.UNDO_SYMBOL, 0); }
    TABLESPACE_SYMBOL() { return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
    tablespaceRef() {
        return this.getRuleContext(0, TablespaceRefContext);
    }
    undoTableSpaceOptions() {
        return this.tryGetRuleContext(0, UndoTableSpaceOptionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropUndoTablespace; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropUndoTablespace) {
            listener.enterDropUndoTablespace(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropUndoTablespace) {
            listener.exitDropUndoTablespace(this);
        }
    }
}
exports.DropUndoTablespaceContext = DropUndoTablespaceContext;
class RenameTableStatementContext extends ParserRuleContext_1.ParserRuleContext {
    RENAME_SYMBOL() { return this.getToken(MySQLParser.RENAME_SYMBOL, 0); }
    renamePair(i) {
        if (i === undefined) {
            return this.getRuleContexts(RenamePairContext);
        }
        else {
            return this.getRuleContext(i, RenamePairContext);
        }
    }
    TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.TABLE_SYMBOL, 0); }
    TABLES_SYMBOL() { return this.tryGetToken(MySQLParser.TABLES_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_renameTableStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterRenameTableStatement) {
            listener.enterRenameTableStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRenameTableStatement) {
            listener.exitRenameTableStatement(this);
        }
    }
}
exports.RenameTableStatementContext = RenameTableStatementContext;
class RenamePairContext extends ParserRuleContext_1.ParserRuleContext {
    tableRef() {
        return this.getRuleContext(0, TableRefContext);
    }
    TO_SYMBOL() { return this.getToken(MySQLParser.TO_SYMBOL, 0); }
    tableName() {
        return this.getRuleContext(0, TableNameContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_renamePair; }
    // @Override
    enterRule(listener) {
        if (listener.enterRenamePair) {
            listener.enterRenamePair(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRenamePair) {
            listener.exitRenamePair(this);
        }
    }
}
exports.RenamePairContext = RenamePairContext;
class TruncateTableStatementContext extends ParserRuleContext_1.ParserRuleContext {
    TRUNCATE_SYMBOL() { return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
    tableRef() {
        return this.getRuleContext(0, TableRefContext);
    }
    TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.TABLE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_truncateTableStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterTruncateTableStatement) {
            listener.enterTruncateTableStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTruncateTableStatement) {
            listener.exitTruncateTableStatement(this);
        }
    }
}
exports.TruncateTableStatementContext = TruncateTableStatementContext;
class ImportStatementContext extends ParserRuleContext_1.ParserRuleContext {
    IMPORT_SYMBOL() { return this.getToken(MySQLParser.IMPORT_SYMBOL, 0); }
    TABLE_SYMBOL() { return this.getToken(MySQLParser.TABLE_SYMBOL, 0); }
    FROM_SYMBOL() { return this.getToken(MySQLParser.FROM_SYMBOL, 0); }
    textStringLiteralList() {
        return this.getRuleContext(0, TextStringLiteralListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_importStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterImportStatement) {
            listener.enterImportStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImportStatement) {
            listener.exitImportStatement(this);
        }
    }
}
exports.ImportStatementContext = ImportStatementContext;
class CallStatementContext extends ParserRuleContext_1.ParserRuleContext {
    CALL_SYMBOL() { return this.getToken(MySQLParser.CALL_SYMBOL, 0); }
    procedureRef() {
        return this.getRuleContext(0, ProcedureRefContext);
    }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    exprList() {
        return this.tryGetRuleContext(0, ExprListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_callStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterCallStatement) {
            listener.enterCallStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCallStatement) {
            listener.exitCallStatement(this);
        }
    }
}
exports.CallStatementContext = CallStatementContext;
class DeleteStatementContext extends ParserRuleContext_1.ParserRuleContext {
    DELETE_SYMBOL() { return this.getToken(MySQLParser.DELETE_SYMBOL, 0); }
    FROM_SYMBOL() { return this.tryGetToken(MySQLParser.FROM_SYMBOL, 0); }
    tableAliasRefList() {
        return this.tryGetRuleContext(0, TableAliasRefListContext);
    }
    tableReferenceList() {
        return this.tryGetRuleContext(0, TableReferenceListContext);
    }
    withClause() {
        return this.tryGetRuleContext(0, WithClauseContext);
    }
    deleteStatementOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(DeleteStatementOptionContext);
        }
        else {
            return this.getRuleContext(i, DeleteStatementOptionContext);
        }
    }
    USING_SYMBOL() { return this.tryGetToken(MySQLParser.USING_SYMBOL, 0); }
    tableRef() {
        return this.tryGetRuleContext(0, TableRefContext);
    }
    whereClause() {
        return this.tryGetRuleContext(0, WhereClauseContext);
    }
    tableAlias() {
        return this.tryGetRuleContext(0, TableAliasContext);
    }
    partitionDelete() {
        return this.tryGetRuleContext(0, PartitionDeleteContext);
    }
    orderClause() {
        return this.tryGetRuleContext(0, OrderClauseContext);
    }
    simpleLimitClause() {
        return this.tryGetRuleContext(0, SimpleLimitClauseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_deleteStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterDeleteStatement) {
            listener.enterDeleteStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDeleteStatement) {
            listener.exitDeleteStatement(this);
        }
    }
}
exports.DeleteStatementContext = DeleteStatementContext;
class PartitionDeleteContext extends ParserRuleContext_1.ParserRuleContext {
    PARTITION_SYMBOL() { return this.getToken(MySQLParser.PARTITION_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    identifierList() {
        return this.getRuleContext(0, IdentifierListContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_partitionDelete; }
    // @Override
    enterRule(listener) {
        if (listener.enterPartitionDelete) {
            listener.enterPartitionDelete(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartitionDelete) {
            listener.exitPartitionDelete(this);
        }
    }
}
exports.PartitionDeleteContext = PartitionDeleteContext;
class DeleteStatementOptionContext extends ParserRuleContext_1.ParserRuleContext {
    QUICK_SYMBOL() { return this.tryGetToken(MySQLParser.QUICK_SYMBOL, 0); }
    LOW_PRIORITY_SYMBOL() { return this.tryGetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
    IGNORE_SYMBOL() { return this.tryGetToken(MySQLParser.IGNORE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_deleteStatementOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterDeleteStatementOption) {
            listener.enterDeleteStatementOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDeleteStatementOption) {
            listener.exitDeleteStatementOption(this);
        }
    }
}
exports.DeleteStatementOptionContext = DeleteStatementOptionContext;
class DoStatementContext extends ParserRuleContext_1.ParserRuleContext {
    DO_SYMBOL() { return this.getToken(MySQLParser.DO_SYMBOL, 0); }
    exprList() {
        return this.tryGetRuleContext(0, ExprListContext);
    }
    selectItemList() {
        return this.tryGetRuleContext(0, SelectItemListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_doStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterDoStatement) {
            listener.enterDoStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDoStatement) {
            listener.exitDoStatement(this);
        }
    }
}
exports.DoStatementContext = DoStatementContext;
class HandlerStatementContext extends ParserRuleContext_1.ParserRuleContext {
    HANDLER_SYMBOL() { return this.getToken(MySQLParser.HANDLER_SYMBOL, 0); }
    tableRef() {
        return this.tryGetRuleContext(0, TableRefContext);
    }
    OPEN_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_SYMBOL, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    CLOSE_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_SYMBOL, 0); }
    READ_SYMBOL() { return this.tryGetToken(MySQLParser.READ_SYMBOL, 0); }
    handlerReadOrScan() {
        return this.tryGetRuleContext(0, HandlerReadOrScanContext);
    }
    tableAlias() {
        return this.tryGetRuleContext(0, TableAliasContext);
    }
    whereClause() {
        return this.tryGetRuleContext(0, WhereClauseContext);
    }
    limitClause() {
        return this.tryGetRuleContext(0, LimitClauseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_handlerStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterHandlerStatement) {
            listener.enterHandlerStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHandlerStatement) {
            listener.exitHandlerStatement(this);
        }
    }
}
exports.HandlerStatementContext = HandlerStatementContext;
class HandlerReadOrScanContext extends ParserRuleContext_1.ParserRuleContext {
    FIRST_SYMBOL() { return this.tryGetToken(MySQLParser.FIRST_SYMBOL, 0); }
    NEXT_SYMBOL() { return this.tryGetToken(MySQLParser.NEXT_SYMBOL, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    values() {
        return this.tryGetRuleContext(0, ValuesContext);
    }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    PREV_SYMBOL() { return this.tryGetToken(MySQLParser.PREV_SYMBOL, 0); }
    LAST_SYMBOL() { return this.tryGetToken(MySQLParser.LAST_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    LESS_THAN_OPERATOR() { return this.tryGetToken(MySQLParser.LESS_THAN_OPERATOR, 0); }
    GREATER_THAN_OPERATOR() { return this.tryGetToken(MySQLParser.GREATER_THAN_OPERATOR, 0); }
    LESS_OR_EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
    GREATER_OR_EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_handlerReadOrScan; }
    // @Override
    enterRule(listener) {
        if (listener.enterHandlerReadOrScan) {
            listener.enterHandlerReadOrScan(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHandlerReadOrScan) {
            listener.exitHandlerReadOrScan(this);
        }
    }
}
exports.HandlerReadOrScanContext = HandlerReadOrScanContext;
class InsertStatementContext extends ParserRuleContext_1.ParserRuleContext {
    INSERT_SYMBOL() { return this.getToken(MySQLParser.INSERT_SYMBOL, 0); }
    tableRef() {
        return this.getRuleContext(0, TableRefContext);
    }
    insertFromConstructor() {
        return this.tryGetRuleContext(0, InsertFromConstructorContext);
    }
    SET_SYMBOL() { return this.tryGetToken(MySQLParser.SET_SYMBOL, 0); }
    updateList() {
        return this.tryGetRuleContext(0, UpdateListContext);
    }
    insertQueryExpression() {
        return this.tryGetRuleContext(0, InsertQueryExpressionContext);
    }
    insertLockOption() {
        return this.tryGetRuleContext(0, InsertLockOptionContext);
    }
    IGNORE_SYMBOL() { return this.tryGetToken(MySQLParser.IGNORE_SYMBOL, 0); }
    INTO_SYMBOL() { return this.tryGetToken(MySQLParser.INTO_SYMBOL, 0); }
    usePartition() {
        return this.tryGetRuleContext(0, UsePartitionContext);
    }
    insertUpdateList() {
        return this.tryGetRuleContext(0, InsertUpdateListContext);
    }
    valuesReference() {
        return this.tryGetRuleContext(0, ValuesReferenceContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_insertStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterInsertStatement) {
            listener.enterInsertStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInsertStatement) {
            listener.exitInsertStatement(this);
        }
    }
}
exports.InsertStatementContext = InsertStatementContext;
class InsertLockOptionContext extends ParserRuleContext_1.ParserRuleContext {
    LOW_PRIORITY_SYMBOL() { return this.tryGetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
    DELAYED_SYMBOL() { return this.tryGetToken(MySQLParser.DELAYED_SYMBOL, 0); }
    HIGH_PRIORITY_SYMBOL() { return this.tryGetToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_insertLockOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterInsertLockOption) {
            listener.enterInsertLockOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInsertLockOption) {
            listener.exitInsertLockOption(this);
        }
    }
}
exports.InsertLockOptionContext = InsertLockOptionContext;
class InsertFromConstructorContext extends ParserRuleContext_1.ParserRuleContext {
    insertValues() {
        return this.getRuleContext(0, InsertValuesContext);
    }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    fields() {
        return this.tryGetRuleContext(0, FieldsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_insertFromConstructor; }
    // @Override
    enterRule(listener) {
        if (listener.enterInsertFromConstructor) {
            listener.enterInsertFromConstructor(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInsertFromConstructor) {
            listener.exitInsertFromConstructor(this);
        }
    }
}
exports.InsertFromConstructorContext = InsertFromConstructorContext;
class FieldsContext extends ParserRuleContext_1.ParserRuleContext {
    insertIdentifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(InsertIdentifierContext);
        }
        else {
            return this.getRuleContext(i, InsertIdentifierContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_fields; }
    // @Override
    enterRule(listener) {
        if (listener.enterFields) {
            listener.enterFields(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFields) {
            listener.exitFields(this);
        }
    }
}
exports.FieldsContext = FieldsContext;
class InsertValuesContext extends ParserRuleContext_1.ParserRuleContext {
    valueList() {
        return this.getRuleContext(0, ValueListContext);
    }
    VALUES_SYMBOL() { return this.tryGetToken(MySQLParser.VALUES_SYMBOL, 0); }
    VALUE_SYMBOL() { return this.tryGetToken(MySQLParser.VALUE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_insertValues; }
    // @Override
    enterRule(listener) {
        if (listener.enterInsertValues) {
            listener.enterInsertValues(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInsertValues) {
            listener.exitInsertValues(this);
        }
    }
}
exports.InsertValuesContext = InsertValuesContext;
class InsertQueryExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    queryExpressionOrParens() {
        return this.getRuleContext(0, QueryExpressionOrParensContext);
    }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    fields() {
        return this.tryGetRuleContext(0, FieldsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_insertQueryExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterInsertQueryExpression) {
            listener.enterInsertQueryExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInsertQueryExpression) {
            listener.exitInsertQueryExpression(this);
        }
    }
}
exports.InsertQueryExpressionContext = InsertQueryExpressionContext;
class ValueListContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.OPEN_PAR_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, i);
        }
    }
    CLOSE_PAR_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.CLOSE_PAR_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, i);
        }
    }
    values(i) {
        if (i === undefined) {
            return this.getRuleContexts(ValuesContext);
        }
        else {
            return this.getRuleContext(i, ValuesContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_valueList; }
    // @Override
    enterRule(listener) {
        if (listener.enterValueList) {
            listener.enterValueList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitValueList) {
            listener.exitValueList(this);
        }
    }
}
exports.ValueListContext = ValueListContext;
class ValuesContext extends ParserRuleContext_1.ParserRuleContext {
    expr(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }
        else {
            return this.getRuleContext(i, ExprContext);
        }
    }
    DEFAULT_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.DEFAULT_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.DEFAULT_SYMBOL, i);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_values; }
    // @Override
    enterRule(listener) {
        if (listener.enterValues) {
            listener.enterValues(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitValues) {
            listener.exitValues(this);
        }
    }
}
exports.ValuesContext = ValuesContext;
class ValuesReferenceContext extends ParserRuleContext_1.ParserRuleContext {
    AS_SYMBOL() { return this.getToken(MySQLParser.AS_SYMBOL, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    columnInternalRefList() {
        return this.tryGetRuleContext(0, ColumnInternalRefListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_valuesReference; }
    // @Override
    enterRule(listener) {
        if (listener.enterValuesReference) {
            listener.enterValuesReference(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitValuesReference) {
            listener.exitValuesReference(this);
        }
    }
}
exports.ValuesReferenceContext = ValuesReferenceContext;
class InsertUpdateListContext extends ParserRuleContext_1.ParserRuleContext {
    ON_SYMBOL() { return this.getToken(MySQLParser.ON_SYMBOL, 0); }
    DUPLICATE_SYMBOL() { return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
    KEY_SYMBOL() { return this.getToken(MySQLParser.KEY_SYMBOL, 0); }
    UPDATE_SYMBOL() { return this.getToken(MySQLParser.UPDATE_SYMBOL, 0); }
    updateList() {
        return this.getRuleContext(0, UpdateListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_insertUpdateList; }
    // @Override
    enterRule(listener) {
        if (listener.enterInsertUpdateList) {
            listener.enterInsertUpdateList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInsertUpdateList) {
            listener.exitInsertUpdateList(this);
        }
    }
}
exports.InsertUpdateListContext = InsertUpdateListContext;
class LoadStatementContext extends ParserRuleContext_1.ParserRuleContext {
    LOAD_SYMBOL() { return this.getToken(MySQLParser.LOAD_SYMBOL, 0); }
    dataOrXml() {
        return this.getRuleContext(0, DataOrXmlContext);
    }
    INFILE_SYMBOL() { return this.getToken(MySQLParser.INFILE_SYMBOL, 0); }
    textLiteral() {
        return this.getRuleContext(0, TextLiteralContext);
    }
    INTO_SYMBOL() { return this.getToken(MySQLParser.INTO_SYMBOL, 0); }
    TABLE_SYMBOL() { return this.getToken(MySQLParser.TABLE_SYMBOL, 0); }
    tableRef() {
        return this.getRuleContext(0, TableRefContext);
    }
    loadDataFileTail() {
        return this.getRuleContext(0, LoadDataFileTailContext);
    }
    LOCAL_SYMBOL() { return this.tryGetToken(MySQLParser.LOCAL_SYMBOL, 0); }
    usePartition() {
        return this.tryGetRuleContext(0, UsePartitionContext);
    }
    charsetClause() {
        return this.tryGetRuleContext(0, CharsetClauseContext);
    }
    xmlRowsIdentifiedBy() {
        return this.tryGetRuleContext(0, XmlRowsIdentifiedByContext);
    }
    fieldsClause() {
        return this.tryGetRuleContext(0, FieldsClauseContext);
    }
    linesClause() {
        return this.tryGetRuleContext(0, LinesClauseContext);
    }
    LOW_PRIORITY_SYMBOL() { return this.tryGetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
    CONCURRENT_SYMBOL() { return this.tryGetToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
    REPLACE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLACE_SYMBOL, 0); }
    IGNORE_SYMBOL() { return this.tryGetToken(MySQLParser.IGNORE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_loadStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterLoadStatement) {
            listener.enterLoadStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLoadStatement) {
            listener.exitLoadStatement(this);
        }
    }
}
exports.LoadStatementContext = LoadStatementContext;
class DataOrXmlContext extends ParserRuleContext_1.ParserRuleContext {
    DATA_SYMBOL() { return this.tryGetToken(MySQLParser.DATA_SYMBOL, 0); }
    XML_SYMBOL() { return this.tryGetToken(MySQLParser.XML_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dataOrXml; }
    // @Override
    enterRule(listener) {
        if (listener.enterDataOrXml) {
            listener.enterDataOrXml(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDataOrXml) {
            listener.exitDataOrXml(this);
        }
    }
}
exports.DataOrXmlContext = DataOrXmlContext;
class XmlRowsIdentifiedByContext extends ParserRuleContext_1.ParserRuleContext {
    ROWS_SYMBOL() { return this.getToken(MySQLParser.ROWS_SYMBOL, 0); }
    IDENTIFIED_SYMBOL() { return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
    BY_SYMBOL() { return this.getToken(MySQLParser.BY_SYMBOL, 0); }
    textString() {
        return this.getRuleContext(0, TextStringContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_xmlRowsIdentifiedBy; }
    // @Override
    enterRule(listener) {
        if (listener.enterXmlRowsIdentifiedBy) {
            listener.enterXmlRowsIdentifiedBy(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitXmlRowsIdentifiedBy) {
            listener.exitXmlRowsIdentifiedBy(this);
        }
    }
}
exports.XmlRowsIdentifiedByContext = XmlRowsIdentifiedByContext;
class LoadDataFileTailContext extends ParserRuleContext_1.ParserRuleContext {
    IGNORE_SYMBOL() { return this.tryGetToken(MySQLParser.IGNORE_SYMBOL, 0); }
    INT_NUMBER() { return this.tryGetToken(MySQLParser.INT_NUMBER, 0); }
    loadDataFileTargetList() {
        return this.tryGetRuleContext(0, LoadDataFileTargetListContext);
    }
    SET_SYMBOL() { return this.tryGetToken(MySQLParser.SET_SYMBOL, 0); }
    updateList() {
        return this.tryGetRuleContext(0, UpdateListContext);
    }
    LINES_SYMBOL() { return this.tryGetToken(MySQLParser.LINES_SYMBOL, 0); }
    ROWS_SYMBOL() { return this.tryGetToken(MySQLParser.ROWS_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_loadDataFileTail; }
    // @Override
    enterRule(listener) {
        if (listener.enterLoadDataFileTail) {
            listener.enterLoadDataFileTail(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLoadDataFileTail) {
            listener.exitLoadDataFileTail(this);
        }
    }
}
exports.LoadDataFileTailContext = LoadDataFileTailContext;
class LoadDataFileTargetListContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    fieldOrVariableList() {
        return this.tryGetRuleContext(0, FieldOrVariableListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_loadDataFileTargetList; }
    // @Override
    enterRule(listener) {
        if (listener.enterLoadDataFileTargetList) {
            listener.enterLoadDataFileTargetList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLoadDataFileTargetList) {
            listener.exitLoadDataFileTargetList(this);
        }
    }
}
exports.LoadDataFileTargetListContext = LoadDataFileTargetListContext;
class FieldOrVariableListContext extends ParserRuleContext_1.ParserRuleContext {
    columnRef(i) {
        if (i === undefined) {
            return this.getRuleContexts(ColumnRefContext);
        }
        else {
            return this.getRuleContext(i, ColumnRefContext);
        }
    }
    userVariable(i) {
        if (i === undefined) {
            return this.getRuleContexts(UserVariableContext);
        }
        else {
            return this.getRuleContext(i, UserVariableContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_fieldOrVariableList; }
    // @Override
    enterRule(listener) {
        if (listener.enterFieldOrVariableList) {
            listener.enterFieldOrVariableList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFieldOrVariableList) {
            listener.exitFieldOrVariableList(this);
        }
    }
}
exports.FieldOrVariableListContext = FieldOrVariableListContext;
class ReplaceStatementContext extends ParserRuleContext_1.ParserRuleContext {
    REPLACE_SYMBOL() { return this.getToken(MySQLParser.REPLACE_SYMBOL, 0); }
    tableRef() {
        return this.getRuleContext(0, TableRefContext);
    }
    insertFromConstructor() {
        return this.tryGetRuleContext(0, InsertFromConstructorContext);
    }
    SET_SYMBOL() { return this.tryGetToken(MySQLParser.SET_SYMBOL, 0); }
    updateList() {
        return this.tryGetRuleContext(0, UpdateListContext);
    }
    insertQueryExpression() {
        return this.tryGetRuleContext(0, InsertQueryExpressionContext);
    }
    INTO_SYMBOL() { return this.tryGetToken(MySQLParser.INTO_SYMBOL, 0); }
    usePartition() {
        return this.tryGetRuleContext(0, UsePartitionContext);
    }
    LOW_PRIORITY_SYMBOL() { return this.tryGetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
    DELAYED_SYMBOL() { return this.tryGetToken(MySQLParser.DELAYED_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_replaceStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterReplaceStatement) {
            listener.enterReplaceStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReplaceStatement) {
            listener.exitReplaceStatement(this);
        }
    }
}
exports.ReplaceStatementContext = ReplaceStatementContext;
class SelectStatementContext extends ParserRuleContext_1.ParserRuleContext {
    queryExpression() {
        return this.tryGetRuleContext(0, QueryExpressionContext);
    }
    queryExpressionParens() {
        return this.tryGetRuleContext(0, QueryExpressionParensContext);
    }
    selectStatementWithInto() {
        return this.tryGetRuleContext(0, SelectStatementWithIntoContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_selectStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelectStatement) {
            listener.enterSelectStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelectStatement) {
            listener.exitSelectStatement(this);
        }
    }
}
exports.SelectStatementContext = SelectStatementContext;
class SelectStatementWithIntoContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    selectStatementWithInto() {
        return this.tryGetRuleContext(0, SelectStatementWithIntoContext);
    }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    queryExpression() {
        return this.tryGetRuleContext(0, QueryExpressionContext);
    }
    intoClause() {
        return this.tryGetRuleContext(0, IntoClauseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_selectStatementWithInto; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelectStatementWithInto) {
            listener.enterSelectStatementWithInto(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelectStatementWithInto) {
            listener.exitSelectStatementWithInto(this);
        }
    }
}
exports.SelectStatementWithIntoContext = SelectStatementWithIntoContext;
class QueryExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    queryExpressionBody() {
        return this.tryGetRuleContext(0, QueryExpressionBodyContext);
    }
    queryExpressionParens() {
        return this.tryGetRuleContext(0, QueryExpressionParensContext);
    }
    withClause() {
        return this.tryGetRuleContext(0, WithClauseContext);
    }
    procedureAnalyseClause() {
        return this.tryGetRuleContext(0, ProcedureAnalyseClauseContext);
    }
    lockingClause() {
        return this.tryGetRuleContext(0, LockingClauseContext);
    }
    orderClause() {
        return this.tryGetRuleContext(0, OrderClauseContext);
    }
    limitClause() {
        return this.tryGetRuleContext(0, LimitClauseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_queryExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterQueryExpression) {
            listener.enterQueryExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQueryExpression) {
            listener.exitQueryExpression(this);
        }
    }
}
exports.QueryExpressionContext = QueryExpressionContext;
class QueryExpressionBodyContext extends ParserRuleContext_1.ParserRuleContext {
    querySpecification() {
        return this.tryGetRuleContext(0, QuerySpecificationContext);
    }
    queryExpressionBody() {
        return this.tryGetRuleContext(0, QueryExpressionBodyContext);
    }
    UNION_SYMBOL() { return this.tryGetToken(MySQLParser.UNION_SYMBOL, 0); }
    queryExpressionParens(i) {
        if (i === undefined) {
            return this.getRuleContexts(QueryExpressionParensContext);
        }
        else {
            return this.getRuleContext(i, QueryExpressionParensContext);
        }
    }
    unionOption() {
        return this.tryGetRuleContext(0, UnionOptionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_queryExpressionBody; }
    // @Override
    enterRule(listener) {
        if (listener.enterQueryExpressionBody) {
            listener.enterQueryExpressionBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQueryExpressionBody) {
            listener.exitQueryExpressionBody(this);
        }
    }
}
exports.QueryExpressionBodyContext = QueryExpressionBodyContext;
class QueryExpressionParensContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    queryExpressionParens() {
        return this.tryGetRuleContext(0, QueryExpressionParensContext);
    }
    queryExpression() {
        return this.tryGetRuleContext(0, QueryExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_queryExpressionParens; }
    // @Override
    enterRule(listener) {
        if (listener.enterQueryExpressionParens) {
            listener.enterQueryExpressionParens(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQueryExpressionParens) {
            listener.exitQueryExpressionParens(this);
        }
    }
}
exports.QueryExpressionParensContext = QueryExpressionParensContext;
class QuerySpecificationContext extends ParserRuleContext_1.ParserRuleContext {
    SELECT_SYMBOL() { return this.getToken(MySQLParser.SELECT_SYMBOL, 0); }
    selectItemList() {
        return this.getRuleContext(0, SelectItemListContext);
    }
    selectOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(SelectOptionContext);
        }
        else {
            return this.getRuleContext(i, SelectOptionContext);
        }
    }
    intoClause() {
        return this.tryGetRuleContext(0, IntoClauseContext);
    }
    fromClause() {
        return this.tryGetRuleContext(0, FromClauseContext);
    }
    whereClause() {
        return this.tryGetRuleContext(0, WhereClauseContext);
    }
    groupByClause() {
        return this.tryGetRuleContext(0, GroupByClauseContext);
    }
    havingClause() {
        return this.tryGetRuleContext(0, HavingClauseContext);
    }
    windowClause() {
        return this.tryGetRuleContext(0, WindowClauseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_querySpecification; }
    // @Override
    enterRule(listener) {
        if (listener.enterQuerySpecification) {
            listener.enterQuerySpecification(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQuerySpecification) {
            listener.exitQuerySpecification(this);
        }
    }
}
exports.QuerySpecificationContext = QuerySpecificationContext;
class SubqueryContext extends ParserRuleContext_1.ParserRuleContext {
    queryExpressionParens() {
        return this.getRuleContext(0, QueryExpressionParensContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_subquery; }
    // @Override
    enterRule(listener) {
        if (listener.enterSubquery) {
            listener.enterSubquery(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSubquery) {
            listener.exitSubquery(this);
        }
    }
}
exports.SubqueryContext = SubqueryContext;
class QuerySpecOptionContext extends ParserRuleContext_1.ParserRuleContext {
    ALL_SYMBOL() { return this.tryGetToken(MySQLParser.ALL_SYMBOL, 0); }
    DISTINCT_SYMBOL() { return this.tryGetToken(MySQLParser.DISTINCT_SYMBOL, 0); }
    STRAIGHT_JOIN_SYMBOL() { return this.tryGetToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
    HIGH_PRIORITY_SYMBOL() { return this.tryGetToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
    SQL_SMALL_RESULT_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0); }
    SQL_BIG_RESULT_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0); }
    SQL_BUFFER_RESULT_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
    SQL_CALC_FOUND_ROWS_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_querySpecOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterQuerySpecOption) {
            listener.enterQuerySpecOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQuerySpecOption) {
            listener.exitQuerySpecOption(this);
        }
    }
}
exports.QuerySpecOptionContext = QuerySpecOptionContext;
class LimitClauseContext extends ParserRuleContext_1.ParserRuleContext {
    LIMIT_SYMBOL() { return this.getToken(MySQLParser.LIMIT_SYMBOL, 0); }
    limitOptions() {
        return this.getRuleContext(0, LimitOptionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_limitClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterLimitClause) {
            listener.enterLimitClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLimitClause) {
            listener.exitLimitClause(this);
        }
    }
}
exports.LimitClauseContext = LimitClauseContext;
class SimpleLimitClauseContext extends ParserRuleContext_1.ParserRuleContext {
    LIMIT_SYMBOL() { return this.getToken(MySQLParser.LIMIT_SYMBOL, 0); }
    limitOption() {
        return this.getRuleContext(0, LimitOptionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_simpleLimitClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleLimitClause) {
            listener.enterSimpleLimitClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleLimitClause) {
            listener.exitSimpleLimitClause(this);
        }
    }
}
exports.SimpleLimitClauseContext = SimpleLimitClauseContext;
class LimitOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    limitOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(LimitOptionContext);
        }
        else {
            return this.getRuleContext(i, LimitOptionContext);
        }
    }
    COMMA_SYMBOL() { return this.tryGetToken(MySQLParser.COMMA_SYMBOL, 0); }
    OFFSET_SYMBOL() { return this.tryGetToken(MySQLParser.OFFSET_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_limitOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterLimitOptions) {
            listener.enterLimitOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLimitOptions) {
            listener.exitLimitOptions(this);
        }
    }
}
exports.LimitOptionsContext = LimitOptionsContext;
class LimitOptionContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    PARAM_MARKER() { return this.tryGetToken(MySQLParser.PARAM_MARKER, 0); }
    ULONGLONG_NUMBER() { return this.tryGetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
    LONG_NUMBER() { return this.tryGetToken(MySQLParser.LONG_NUMBER, 0); }
    INT_NUMBER() { return this.tryGetToken(MySQLParser.INT_NUMBER, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_limitOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterLimitOption) {
            listener.enterLimitOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLimitOption) {
            listener.exitLimitOption(this);
        }
    }
}
exports.LimitOptionContext = LimitOptionContext;
class IntoClauseContext extends ParserRuleContext_1.ParserRuleContext {
    INTO_SYMBOL() { return this.getToken(MySQLParser.INTO_SYMBOL, 0); }
    OUTFILE_SYMBOL() { return this.tryGetToken(MySQLParser.OUTFILE_SYMBOL, 0); }
    textStringLiteral() {
        return this.tryGetRuleContext(0, TextStringLiteralContext);
    }
    DUMPFILE_SYMBOL() { return this.tryGetToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
    textOrIdentifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(TextOrIdentifierContext);
        }
        else {
            return this.getRuleContext(i, TextOrIdentifierContext);
        }
    }
    userVariable(i) {
        if (i === undefined) {
            return this.getRuleContexts(UserVariableContext);
        }
        else {
            return this.getRuleContext(i, UserVariableContext);
        }
    }
    charsetClause() {
        return this.tryGetRuleContext(0, CharsetClauseContext);
    }
    fieldsClause() {
        return this.tryGetRuleContext(0, FieldsClauseContext);
    }
    linesClause() {
        return this.tryGetRuleContext(0, LinesClauseContext);
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_intoClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterIntoClause) {
            listener.enterIntoClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIntoClause) {
            listener.exitIntoClause(this);
        }
    }
}
exports.IntoClauseContext = IntoClauseContext;
class ProcedureAnalyseClauseContext extends ParserRuleContext_1.ParserRuleContext {
    PROCEDURE_SYMBOL() { return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
    ANALYSE_SYMBOL() { return this.getToken(MySQLParser.ANALYSE_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    INT_NUMBER(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.INT_NUMBER);
        }
        else {
            return this.getToken(MySQLParser.INT_NUMBER, i);
        }
    }
    COMMA_SYMBOL() { return this.tryGetToken(MySQLParser.COMMA_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_procedureAnalyseClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterProcedureAnalyseClause) {
            listener.enterProcedureAnalyseClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitProcedureAnalyseClause) {
            listener.exitProcedureAnalyseClause(this);
        }
    }
}
exports.ProcedureAnalyseClauseContext = ProcedureAnalyseClauseContext;
class HavingClauseContext extends ParserRuleContext_1.ParserRuleContext {
    HAVING_SYMBOL() { return this.getToken(MySQLParser.HAVING_SYMBOL, 0); }
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_havingClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterHavingClause) {
            listener.enterHavingClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHavingClause) {
            listener.exitHavingClause(this);
        }
    }
}
exports.HavingClauseContext = HavingClauseContext;
class WindowClauseContext extends ParserRuleContext_1.ParserRuleContext {
    WINDOW_SYMBOL() { return this.getToken(MySQLParser.WINDOW_SYMBOL, 0); }
    windowDefinition(i) {
        if (i === undefined) {
            return this.getRuleContexts(WindowDefinitionContext);
        }
        else {
            return this.getRuleContext(i, WindowDefinitionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_windowClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowClause) {
            listener.enterWindowClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowClause) {
            listener.exitWindowClause(this);
        }
    }
}
exports.WindowClauseContext = WindowClauseContext;
class WindowDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    windowName() {
        return this.getRuleContext(0, WindowNameContext);
    }
    AS_SYMBOL() { return this.getToken(MySQLParser.AS_SYMBOL, 0); }
    windowSpec() {
        return this.getRuleContext(0, WindowSpecContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_windowDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowDefinition) {
            listener.enterWindowDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowDefinition) {
            listener.exitWindowDefinition(this);
        }
    }
}
exports.WindowDefinitionContext = WindowDefinitionContext;
class WindowSpecContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    windowSpecDetails() {
        return this.getRuleContext(0, WindowSpecDetailsContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_windowSpec; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowSpec) {
            listener.enterWindowSpec(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowSpec) {
            listener.exitWindowSpec(this);
        }
    }
}
exports.WindowSpecContext = WindowSpecContext;
class WindowSpecDetailsContext extends ParserRuleContext_1.ParserRuleContext {
    windowName() {
        return this.tryGetRuleContext(0, WindowNameContext);
    }
    PARTITION_SYMBOL() { return this.tryGetToken(MySQLParser.PARTITION_SYMBOL, 0); }
    BY_SYMBOL() { return this.tryGetToken(MySQLParser.BY_SYMBOL, 0); }
    orderList() {
        return this.tryGetRuleContext(0, OrderListContext);
    }
    orderClause() {
        return this.tryGetRuleContext(0, OrderClauseContext);
    }
    windowFrameClause() {
        return this.tryGetRuleContext(0, WindowFrameClauseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_windowSpecDetails; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowSpecDetails) {
            listener.enterWindowSpecDetails(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowSpecDetails) {
            listener.exitWindowSpecDetails(this);
        }
    }
}
exports.WindowSpecDetailsContext = WindowSpecDetailsContext;
class WindowFrameClauseContext extends ParserRuleContext_1.ParserRuleContext {
    windowFrameUnits() {
        return this.getRuleContext(0, WindowFrameUnitsContext);
    }
    windowFrameExtent() {
        return this.getRuleContext(0, WindowFrameExtentContext);
    }
    windowFrameExclusion() {
        return this.tryGetRuleContext(0, WindowFrameExclusionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_windowFrameClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowFrameClause) {
            listener.enterWindowFrameClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowFrameClause) {
            listener.exitWindowFrameClause(this);
        }
    }
}
exports.WindowFrameClauseContext = WindowFrameClauseContext;
class WindowFrameUnitsContext extends ParserRuleContext_1.ParserRuleContext {
    ROWS_SYMBOL() { return this.tryGetToken(MySQLParser.ROWS_SYMBOL, 0); }
    RANGE_SYMBOL() { return this.tryGetToken(MySQLParser.RANGE_SYMBOL, 0); }
    GROUPS_SYMBOL() { return this.tryGetToken(MySQLParser.GROUPS_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_windowFrameUnits; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowFrameUnits) {
            listener.enterWindowFrameUnits(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowFrameUnits) {
            listener.exitWindowFrameUnits(this);
        }
    }
}
exports.WindowFrameUnitsContext = WindowFrameUnitsContext;
class WindowFrameExtentContext extends ParserRuleContext_1.ParserRuleContext {
    windowFrameStart() {
        return this.tryGetRuleContext(0, WindowFrameStartContext);
    }
    windowFrameBetween() {
        return this.tryGetRuleContext(0, WindowFrameBetweenContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_windowFrameExtent; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowFrameExtent) {
            listener.enterWindowFrameExtent(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowFrameExtent) {
            listener.exitWindowFrameExtent(this);
        }
    }
}
exports.WindowFrameExtentContext = WindowFrameExtentContext;
class WindowFrameStartContext extends ParserRuleContext_1.ParserRuleContext {
    UNBOUNDED_SYMBOL() { return this.tryGetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
    PRECEDING_SYMBOL() { return this.tryGetToken(MySQLParser.PRECEDING_SYMBOL, 0); }
    ulonglong_number() {
        return this.tryGetRuleContext(0, Ulonglong_numberContext);
    }
    PARAM_MARKER() { return this.tryGetToken(MySQLParser.PARAM_MARKER, 0); }
    INTERVAL_SYMBOL() { return this.tryGetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
    expr() {
        return this.tryGetRuleContext(0, ExprContext);
    }
    interval() {
        return this.tryGetRuleContext(0, IntervalContext);
    }
    CURRENT_SYMBOL() { return this.tryGetToken(MySQLParser.CURRENT_SYMBOL, 0); }
    ROW_SYMBOL() { return this.tryGetToken(MySQLParser.ROW_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_windowFrameStart; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowFrameStart) {
            listener.enterWindowFrameStart(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowFrameStart) {
            listener.exitWindowFrameStart(this);
        }
    }
}
exports.WindowFrameStartContext = WindowFrameStartContext;
class WindowFrameBetweenContext extends ParserRuleContext_1.ParserRuleContext {
    BETWEEN_SYMBOL() { return this.getToken(MySQLParser.BETWEEN_SYMBOL, 0); }
    windowFrameBound(i) {
        if (i === undefined) {
            return this.getRuleContexts(WindowFrameBoundContext);
        }
        else {
            return this.getRuleContext(i, WindowFrameBoundContext);
        }
    }
    AND_SYMBOL() { return this.getToken(MySQLParser.AND_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_windowFrameBetween; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowFrameBetween) {
            listener.enterWindowFrameBetween(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowFrameBetween) {
            listener.exitWindowFrameBetween(this);
        }
    }
}
exports.WindowFrameBetweenContext = WindowFrameBetweenContext;
class WindowFrameBoundContext extends ParserRuleContext_1.ParserRuleContext {
    windowFrameStart() {
        return this.tryGetRuleContext(0, WindowFrameStartContext);
    }
    UNBOUNDED_SYMBOL() { return this.tryGetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
    FOLLOWING_SYMBOL() { return this.tryGetToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
    ulonglong_number() {
        return this.tryGetRuleContext(0, Ulonglong_numberContext);
    }
    PARAM_MARKER() { return this.tryGetToken(MySQLParser.PARAM_MARKER, 0); }
    INTERVAL_SYMBOL() { return this.tryGetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
    expr() {
        return this.tryGetRuleContext(0, ExprContext);
    }
    interval() {
        return this.tryGetRuleContext(0, IntervalContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_windowFrameBound; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowFrameBound) {
            listener.enterWindowFrameBound(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowFrameBound) {
            listener.exitWindowFrameBound(this);
        }
    }
}
exports.WindowFrameBoundContext = WindowFrameBoundContext;
class WindowFrameExclusionContext extends ParserRuleContext_1.ParserRuleContext {
    EXCLUDE_SYMBOL() { return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
    CURRENT_SYMBOL() { return this.tryGetToken(MySQLParser.CURRENT_SYMBOL, 0); }
    ROW_SYMBOL() { return this.tryGetToken(MySQLParser.ROW_SYMBOL, 0); }
    GROUP_SYMBOL() { return this.tryGetToken(MySQLParser.GROUP_SYMBOL, 0); }
    TIES_SYMBOL() { return this.tryGetToken(MySQLParser.TIES_SYMBOL, 0); }
    NO_SYMBOL() { return this.tryGetToken(MySQLParser.NO_SYMBOL, 0); }
    OTHERS_SYMBOL() { return this.tryGetToken(MySQLParser.OTHERS_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_windowFrameExclusion; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowFrameExclusion) {
            listener.enterWindowFrameExclusion(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowFrameExclusion) {
            listener.exitWindowFrameExclusion(this);
        }
    }
}
exports.WindowFrameExclusionContext = WindowFrameExclusionContext;
class WithClauseContext extends ParserRuleContext_1.ParserRuleContext {
    WITH_SYMBOL() { return this.getToken(MySQLParser.WITH_SYMBOL, 0); }
    commonTableExpression(i) {
        if (i === undefined) {
            return this.getRuleContexts(CommonTableExpressionContext);
        }
        else {
            return this.getRuleContext(i, CommonTableExpressionContext);
        }
    }
    RECURSIVE_SYMBOL() { return this.tryGetToken(MySQLParser.RECURSIVE_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_withClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterWithClause) {
            listener.enterWithClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWithClause) {
            listener.exitWithClause(this);
        }
    }
}
exports.WithClauseContext = WithClauseContext;
class CommonTableExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    AS_SYMBOL() { return this.getToken(MySQLParser.AS_SYMBOL, 0); }
    subquery() {
        return this.getRuleContext(0, SubqueryContext);
    }
    columnInternalRefList() {
        return this.tryGetRuleContext(0, ColumnInternalRefListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_commonTableExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterCommonTableExpression) {
            listener.enterCommonTableExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCommonTableExpression) {
            listener.exitCommonTableExpression(this);
        }
    }
}
exports.CommonTableExpressionContext = CommonTableExpressionContext;
class GroupByClauseContext extends ParserRuleContext_1.ParserRuleContext {
    GROUP_SYMBOL() { return this.getToken(MySQLParser.GROUP_SYMBOL, 0); }
    BY_SYMBOL() { return this.getToken(MySQLParser.BY_SYMBOL, 0); }
    orderList() {
        return this.getRuleContext(0, OrderListContext);
    }
    olapOption() {
        return this.tryGetRuleContext(0, OlapOptionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_groupByClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroupByClause) {
            listener.enterGroupByClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroupByClause) {
            listener.exitGroupByClause(this);
        }
    }
}
exports.GroupByClauseContext = GroupByClauseContext;
class OlapOptionContext extends ParserRuleContext_1.ParserRuleContext {
    WITH_SYMBOL() { return this.getToken(MySQLParser.WITH_SYMBOL, 0); }
    ROLLUP_SYMBOL() { return this.tryGetToken(MySQLParser.ROLLUP_SYMBOL, 0); }
    CUBE_SYMBOL() { return this.tryGetToken(MySQLParser.CUBE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_olapOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterOlapOption) {
            listener.enterOlapOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOlapOption) {
            listener.exitOlapOption(this);
        }
    }
}
exports.OlapOptionContext = OlapOptionContext;
class OrderClauseContext extends ParserRuleContext_1.ParserRuleContext {
    ORDER_SYMBOL() { return this.getToken(MySQLParser.ORDER_SYMBOL, 0); }
    BY_SYMBOL() { return this.getToken(MySQLParser.BY_SYMBOL, 0); }
    orderList() {
        return this.getRuleContext(0, OrderListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_orderClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterOrderClause) {
            listener.enterOrderClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOrderClause) {
            listener.exitOrderClause(this);
        }
    }
}
exports.OrderClauseContext = OrderClauseContext;
class DirectionContext extends ParserRuleContext_1.ParserRuleContext {
    ASC_SYMBOL() { return this.tryGetToken(MySQLParser.ASC_SYMBOL, 0); }
    DESC_SYMBOL() { return this.tryGetToken(MySQLParser.DESC_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_direction; }
    // @Override
    enterRule(listener) {
        if (listener.enterDirection) {
            listener.enterDirection(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDirection) {
            listener.exitDirection(this);
        }
    }
}
exports.DirectionContext = DirectionContext;
class FromClauseContext extends ParserRuleContext_1.ParserRuleContext {
    FROM_SYMBOL() { return this.getToken(MySQLParser.FROM_SYMBOL, 0); }
    DUAL_SYMBOL() { return this.tryGetToken(MySQLParser.DUAL_SYMBOL, 0); }
    tableReferenceList() {
        return this.tryGetRuleContext(0, TableReferenceListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_fromClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterFromClause) {
            listener.enterFromClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFromClause) {
            listener.exitFromClause(this);
        }
    }
}
exports.FromClauseContext = FromClauseContext;
class TableReferenceListContext extends ParserRuleContext_1.ParserRuleContext {
    tableReference(i) {
        if (i === undefined) {
            return this.getRuleContexts(TableReferenceContext);
        }
        else {
            return this.getRuleContext(i, TableReferenceContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tableReferenceList; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableReferenceList) {
            listener.enterTableReferenceList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableReferenceList) {
            listener.exitTableReferenceList(this);
        }
    }
}
exports.TableReferenceListContext = TableReferenceListContext;
class SelectOptionContext extends ParserRuleContext_1.ParserRuleContext {
    querySpecOption() {
        return this.tryGetRuleContext(0, QuerySpecOptionContext);
    }
    SQL_NO_CACHE_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
    SQL_CACHE_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_CACHE_SYMBOL, 0); }
    MAX_STATEMENT_TIME_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    real_ulong_number() {
        return this.tryGetRuleContext(0, Real_ulong_numberContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_selectOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelectOption) {
            listener.enterSelectOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelectOption) {
            listener.exitSelectOption(this);
        }
    }
}
exports.SelectOptionContext = SelectOptionContext;
class LockingClauseContext extends ParserRuleContext_1.ParserRuleContext {
    FOR_SYMBOL() { return this.tryGetToken(MySQLParser.FOR_SYMBOL, 0); }
    lockStrengh() {
        return this.tryGetRuleContext(0, LockStrenghContext);
    }
    OF_SYMBOL() { return this.tryGetToken(MySQLParser.OF_SYMBOL, 0); }
    tableAliasRefList() {
        return this.tryGetRuleContext(0, TableAliasRefListContext);
    }
    lockedRowAction() {
        return this.tryGetRuleContext(0, LockedRowActionContext);
    }
    LOCK_SYMBOL() { return this.tryGetToken(MySQLParser.LOCK_SYMBOL, 0); }
    IN_SYMBOL() { return this.tryGetToken(MySQLParser.IN_SYMBOL, 0); }
    SHARE_SYMBOL() { return this.tryGetToken(MySQLParser.SHARE_SYMBOL, 0); }
    MODE_SYMBOL() { return this.tryGetToken(MySQLParser.MODE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_lockingClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterLockingClause) {
            listener.enterLockingClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLockingClause) {
            listener.exitLockingClause(this);
        }
    }
}
exports.LockingClauseContext = LockingClauseContext;
class LockStrenghContext extends ParserRuleContext_1.ParserRuleContext {
    UPDATE_SYMBOL() { return this.tryGetToken(MySQLParser.UPDATE_SYMBOL, 0); }
    SHARE_SYMBOL() { return this.tryGetToken(MySQLParser.SHARE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_lockStrengh; }
    // @Override
    enterRule(listener) {
        if (listener.enterLockStrengh) {
            listener.enterLockStrengh(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLockStrengh) {
            listener.exitLockStrengh(this);
        }
    }
}
exports.LockStrenghContext = LockStrenghContext;
class LockedRowActionContext extends ParserRuleContext_1.ParserRuleContext {
    SKIP_SYMBOL() { return this.tryGetToken(MySQLParser.SKIP_SYMBOL, 0); }
    LOCKED_SYMBOL() { return this.tryGetToken(MySQLParser.LOCKED_SYMBOL, 0); }
    NOWAIT_SYMBOL() { return this.tryGetToken(MySQLParser.NOWAIT_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_lockedRowAction; }
    // @Override
    enterRule(listener) {
        if (listener.enterLockedRowAction) {
            listener.enterLockedRowAction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLockedRowAction) {
            listener.exitLockedRowAction(this);
        }
    }
}
exports.LockedRowActionContext = LockedRowActionContext;
class SelectItemListContext extends ParserRuleContext_1.ParserRuleContext {
    selectItem(i) {
        if (i === undefined) {
            return this.getRuleContexts(SelectItemContext);
        }
        else {
            return this.getRuleContext(i, SelectItemContext);
        }
    }
    MULT_OPERATOR() { return this.tryGetToken(MySQLParser.MULT_OPERATOR, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_selectItemList; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelectItemList) {
            listener.enterSelectItemList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelectItemList) {
            listener.exitSelectItemList(this);
        }
    }
}
exports.SelectItemListContext = SelectItemListContext;
class SelectItemContext extends ParserRuleContext_1.ParserRuleContext {
    tableWild() {
        return this.tryGetRuleContext(0, TableWildContext);
    }
    expr() {
        return this.tryGetRuleContext(0, ExprContext);
    }
    selectAlias() {
        return this.tryGetRuleContext(0, SelectAliasContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_selectItem; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelectItem) {
            listener.enterSelectItem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelectItem) {
            listener.exitSelectItem(this);
        }
    }
}
exports.SelectItemContext = SelectItemContext;
class SelectAliasContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    textStringLiteral() {
        return this.tryGetRuleContext(0, TextStringLiteralContext);
    }
    AS_SYMBOL() { return this.tryGetToken(MySQLParser.AS_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_selectAlias; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelectAlias) {
            listener.enterSelectAlias(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelectAlias) {
            listener.exitSelectAlias(this);
        }
    }
}
exports.SelectAliasContext = SelectAliasContext;
class WhereClauseContext extends ParserRuleContext_1.ParserRuleContext {
    WHERE_SYMBOL() { return this.getToken(MySQLParser.WHERE_SYMBOL, 0); }
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_whereClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterWhereClause) {
            listener.enterWhereClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWhereClause) {
            listener.exitWhereClause(this);
        }
    }
}
exports.WhereClauseContext = WhereClauseContext;
class TableReferenceContext extends ParserRuleContext_1.ParserRuleContext {
    tableFactor() {
        return this.tryGetRuleContext(0, TableFactorContext);
    }
    OPEN_CURLY_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_CURLY_SYMBOL, 0); }
    escapedTableReference() {
        return this.tryGetRuleContext(0, EscapedTableReferenceContext);
    }
    CLOSE_CURLY_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0); }
    joinedTable(i) {
        if (i === undefined) {
            return this.getRuleContexts(JoinedTableContext);
        }
        else {
            return this.getRuleContext(i, JoinedTableContext);
        }
    }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    OJ_SYMBOL() { return this.tryGetToken(MySQLParser.OJ_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tableReference; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableReference) {
            listener.enterTableReference(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableReference) {
            listener.exitTableReference(this);
        }
    }
}
exports.TableReferenceContext = TableReferenceContext;
class EscapedTableReferenceContext extends ParserRuleContext_1.ParserRuleContext {
    tableFactor() {
        return this.getRuleContext(0, TableFactorContext);
    }
    joinedTable(i) {
        if (i === undefined) {
            return this.getRuleContexts(JoinedTableContext);
        }
        else {
            return this.getRuleContext(i, JoinedTableContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_escapedTableReference; }
    // @Override
    enterRule(listener) {
        if (listener.enterEscapedTableReference) {
            listener.enterEscapedTableReference(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEscapedTableReference) {
            listener.exitEscapedTableReference(this);
        }
    }
}
exports.EscapedTableReferenceContext = EscapedTableReferenceContext;
class JoinedTableContext extends ParserRuleContext_1.ParserRuleContext {
    innerJoinType() {
        return this.tryGetRuleContext(0, InnerJoinTypeContext);
    }
    tableReference() {
        return this.tryGetRuleContext(0, TableReferenceContext);
    }
    ON_SYMBOL() { return this.tryGetToken(MySQLParser.ON_SYMBOL, 0); }
    expr() {
        return this.tryGetRuleContext(0, ExprContext);
    }
    USING_SYMBOL() { return this.tryGetToken(MySQLParser.USING_SYMBOL, 0); }
    identifierListWithParentheses() {
        return this.tryGetRuleContext(0, IdentifierListWithParenthesesContext);
    }
    outerJoinType() {
        return this.tryGetRuleContext(0, OuterJoinTypeContext);
    }
    naturalJoinType() {
        return this.tryGetRuleContext(0, NaturalJoinTypeContext);
    }
    tableFactor() {
        return this.tryGetRuleContext(0, TableFactorContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_joinedTable; }
    // @Override
    enterRule(listener) {
        if (listener.enterJoinedTable) {
            listener.enterJoinedTable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitJoinedTable) {
            listener.exitJoinedTable(this);
        }
    }
}
exports.JoinedTableContext = JoinedTableContext;
class NaturalJoinTypeContext extends ParserRuleContext_1.ParserRuleContext {
    NATURAL_SYMBOL() { return this.getToken(MySQLParser.NATURAL_SYMBOL, 0); }
    JOIN_SYMBOL() { return this.getToken(MySQLParser.JOIN_SYMBOL, 0); }
    INNER_SYMBOL() { return this.tryGetToken(MySQLParser.INNER_SYMBOL, 0); }
    LEFT_SYMBOL() { return this.tryGetToken(MySQLParser.LEFT_SYMBOL, 0); }
    RIGHT_SYMBOL() { return this.tryGetToken(MySQLParser.RIGHT_SYMBOL, 0); }
    OUTER_SYMBOL() { return this.tryGetToken(MySQLParser.OUTER_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_naturalJoinType; }
    // @Override
    enterRule(listener) {
        if (listener.enterNaturalJoinType) {
            listener.enterNaturalJoinType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNaturalJoinType) {
            listener.exitNaturalJoinType(this);
        }
    }
}
exports.NaturalJoinTypeContext = NaturalJoinTypeContext;
class InnerJoinTypeContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    JOIN_SYMBOL() { return this.tryGetToken(MySQLParser.JOIN_SYMBOL, 0); }
    INNER_SYMBOL() { return this.tryGetToken(MySQLParser.INNER_SYMBOL, 0); }
    CROSS_SYMBOL() { return this.tryGetToken(MySQLParser.CROSS_SYMBOL, 0); }
    STRAIGHT_JOIN_SYMBOL() { return this.tryGetToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_innerJoinType; }
    // @Override
    enterRule(listener) {
        if (listener.enterInnerJoinType) {
            listener.enterInnerJoinType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInnerJoinType) {
            listener.exitInnerJoinType(this);
        }
    }
}
exports.InnerJoinTypeContext = InnerJoinTypeContext;
class OuterJoinTypeContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    JOIN_SYMBOL() { return this.getToken(MySQLParser.JOIN_SYMBOL, 0); }
    LEFT_SYMBOL() { return this.tryGetToken(MySQLParser.LEFT_SYMBOL, 0); }
    RIGHT_SYMBOL() { return this.tryGetToken(MySQLParser.RIGHT_SYMBOL, 0); }
    OUTER_SYMBOL() { return this.tryGetToken(MySQLParser.OUTER_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_outerJoinType; }
    // @Override
    enterRule(listener) {
        if (listener.enterOuterJoinType) {
            listener.enterOuterJoinType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOuterJoinType) {
            listener.exitOuterJoinType(this);
        }
    }
}
exports.OuterJoinTypeContext = OuterJoinTypeContext;
class TableFactorContext extends ParserRuleContext_1.ParserRuleContext {
    singleTable() {
        return this.tryGetRuleContext(0, SingleTableContext);
    }
    singleTableParens() {
        return this.tryGetRuleContext(0, SingleTableParensContext);
    }
    derivedTable() {
        return this.tryGetRuleContext(0, DerivedTableContext);
    }
    tableReferenceListParens() {
        return this.tryGetRuleContext(0, TableReferenceListParensContext);
    }
    tableFunction() {
        return this.tryGetRuleContext(0, TableFunctionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tableFactor; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableFactor) {
            listener.enterTableFactor(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableFactor) {
            listener.exitTableFactor(this);
        }
    }
}
exports.TableFactorContext = TableFactorContext;
class SingleTableContext extends ParserRuleContext_1.ParserRuleContext {
    tableRef() {
        return this.getRuleContext(0, TableRefContext);
    }
    usePartition() {
        return this.tryGetRuleContext(0, UsePartitionContext);
    }
    tableAlias() {
        return this.tryGetRuleContext(0, TableAliasContext);
    }
    indexHintList() {
        return this.tryGetRuleContext(0, IndexHintListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_singleTable; }
    // @Override
    enterRule(listener) {
        if (listener.enterSingleTable) {
            listener.enterSingleTable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSingleTable) {
            listener.exitSingleTable(this);
        }
    }
}
exports.SingleTableContext = SingleTableContext;
class SingleTableParensContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    singleTable() {
        return this.tryGetRuleContext(0, SingleTableContext);
    }
    singleTableParens() {
        return this.tryGetRuleContext(0, SingleTableParensContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_singleTableParens; }
    // @Override
    enterRule(listener) {
        if (listener.enterSingleTableParens) {
            listener.enterSingleTableParens(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSingleTableParens) {
            listener.exitSingleTableParens(this);
        }
    }
}
exports.SingleTableParensContext = SingleTableParensContext;
class DerivedTableContext extends ParserRuleContext_1.ParserRuleContext {
    subquery() {
        return this.getRuleContext(0, SubqueryContext);
    }
    tableAlias() {
        return this.tryGetRuleContext(0, TableAliasContext);
    }
    columnInternalRefList() {
        return this.tryGetRuleContext(0, ColumnInternalRefListContext);
    }
    LATERAL_SYMBOL() { return this.tryGetToken(MySQLParser.LATERAL_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_derivedTable; }
    // @Override
    enterRule(listener) {
        if (listener.enterDerivedTable) {
            listener.enterDerivedTable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDerivedTable) {
            listener.exitDerivedTable(this);
        }
    }
}
exports.DerivedTableContext = DerivedTableContext;
class TableReferenceListParensContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    tableReferenceList() {
        return this.tryGetRuleContext(0, TableReferenceListContext);
    }
    tableReferenceListParens() {
        return this.tryGetRuleContext(0, TableReferenceListParensContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tableReferenceListParens; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableReferenceListParens) {
            listener.enterTableReferenceListParens(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableReferenceListParens) {
            listener.exitTableReferenceListParens(this);
        }
    }
}
exports.TableReferenceListParensContext = TableReferenceListParensContext;
class TableFunctionContext extends ParserRuleContext_1.ParserRuleContext {
    JSON_TABLE_SYMBOL() { return this.getToken(MySQLParser.JSON_TABLE_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    COMMA_SYMBOL() { return this.getToken(MySQLParser.COMMA_SYMBOL, 0); }
    textStringLiteral() {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    columnsClause() {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    tableAlias() {
        return this.tryGetRuleContext(0, TableAliasContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tableFunction; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableFunction) {
            listener.enterTableFunction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableFunction) {
            listener.exitTableFunction(this);
        }
    }
}
exports.TableFunctionContext = TableFunctionContext;
class ColumnsClauseContext extends ParserRuleContext_1.ParserRuleContext {
    COLUMNS_SYMBOL() { return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    jtColumn(i) {
        if (i === undefined) {
            return this.getRuleContexts(JtColumnContext);
        }
        else {
            return this.getRuleContext(i, JtColumnContext);
        }
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_columnsClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnsClause) {
            listener.enterColumnsClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnsClause) {
            listener.exitColumnsClause(this);
        }
    }
}
exports.ColumnsClauseContext = ColumnsClauseContext;
class JtColumnContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    FOR_SYMBOL() { return this.tryGetToken(MySQLParser.FOR_SYMBOL, 0); }
    ORDINALITY_SYMBOL() { return this.tryGetToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
    dataType() {
        return this.tryGetRuleContext(0, DataTypeContext);
    }
    PATH_SYMBOL() { return this.tryGetToken(MySQLParser.PATH_SYMBOL, 0); }
    textStringLiteral() {
        return this.tryGetRuleContext(0, TextStringLiteralContext);
    }
    collate() {
        return this.tryGetRuleContext(0, CollateContext);
    }
    EXISTS_SYMBOL() { return this.tryGetToken(MySQLParser.EXISTS_SYMBOL, 0); }
    onEmptyOrError() {
        return this.tryGetRuleContext(0, OnEmptyOrErrorContext);
    }
    NESTED_SYMBOL() { return this.tryGetToken(MySQLParser.NESTED_SYMBOL, 0); }
    columnsClause() {
        return this.tryGetRuleContext(0, ColumnsClauseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_jtColumn; }
    // @Override
    enterRule(listener) {
        if (listener.enterJtColumn) {
            listener.enterJtColumn(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitJtColumn) {
            listener.exitJtColumn(this);
        }
    }
}
exports.JtColumnContext = JtColumnContext;
class OnEmptyOrErrorContext extends ParserRuleContext_1.ParserRuleContext {
    onEmpty() {
        return this.tryGetRuleContext(0, OnEmptyContext);
    }
    onError() {
        return this.tryGetRuleContext(0, OnErrorContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_onEmptyOrError; }
    // @Override
    enterRule(listener) {
        if (listener.enterOnEmptyOrError) {
            listener.enterOnEmptyOrError(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOnEmptyOrError) {
            listener.exitOnEmptyOrError(this);
        }
    }
}
exports.OnEmptyOrErrorContext = OnEmptyOrErrorContext;
class OnEmptyContext extends ParserRuleContext_1.ParserRuleContext {
    jtOnResponse() {
        return this.getRuleContext(0, JtOnResponseContext);
    }
    ON_SYMBOL() { return this.getToken(MySQLParser.ON_SYMBOL, 0); }
    EMPTY_SYMBOL() { return this.getToken(MySQLParser.EMPTY_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_onEmpty; }
    // @Override
    enterRule(listener) {
        if (listener.enterOnEmpty) {
            listener.enterOnEmpty(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOnEmpty) {
            listener.exitOnEmpty(this);
        }
    }
}
exports.OnEmptyContext = OnEmptyContext;
class OnErrorContext extends ParserRuleContext_1.ParserRuleContext {
    jtOnResponse() {
        return this.getRuleContext(0, JtOnResponseContext);
    }
    ON_SYMBOL() { return this.getToken(MySQLParser.ON_SYMBOL, 0); }
    ERROR_SYMBOL() { return this.getToken(MySQLParser.ERROR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_onError; }
    // @Override
    enterRule(listener) {
        if (listener.enterOnError) {
            listener.enterOnError(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOnError) {
            listener.exitOnError(this);
        }
    }
}
exports.OnErrorContext = OnErrorContext;
class JtOnResponseContext extends ParserRuleContext_1.ParserRuleContext {
    ERROR_SYMBOL() { return this.tryGetToken(MySQLParser.ERROR_SYMBOL, 0); }
    NULL_SYMBOL() { return this.tryGetToken(MySQLParser.NULL_SYMBOL, 0); }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    textStringLiteral() {
        return this.tryGetRuleContext(0, TextStringLiteralContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_jtOnResponse; }
    // @Override
    enterRule(listener) {
        if (listener.enterJtOnResponse) {
            listener.enterJtOnResponse(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitJtOnResponse) {
            listener.exitJtOnResponse(this);
        }
    }
}
exports.JtOnResponseContext = JtOnResponseContext;
class UnionOptionContext extends ParserRuleContext_1.ParserRuleContext {
    DISTINCT_SYMBOL() { return this.tryGetToken(MySQLParser.DISTINCT_SYMBOL, 0); }
    ALL_SYMBOL() { return this.tryGetToken(MySQLParser.ALL_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_unionOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterUnionOption) {
            listener.enterUnionOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUnionOption) {
            listener.exitUnionOption(this);
        }
    }
}
exports.UnionOptionContext = UnionOptionContext;
class TableAliasContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    AS_SYMBOL() { return this.tryGetToken(MySQLParser.AS_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tableAlias; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableAlias) {
            listener.enterTableAlias(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableAlias) {
            listener.exitTableAlias(this);
        }
    }
}
exports.TableAliasContext = TableAliasContext;
class IndexHintListContext extends ParserRuleContext_1.ParserRuleContext {
    indexHint(i) {
        if (i === undefined) {
            return this.getRuleContexts(IndexHintContext);
        }
        else {
            return this.getRuleContext(i, IndexHintContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_indexHintList; }
    // @Override
    enterRule(listener) {
        if (listener.enterIndexHintList) {
            listener.enterIndexHintList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIndexHintList) {
            listener.exitIndexHintList(this);
        }
    }
}
exports.IndexHintListContext = IndexHintListContext;
class IndexHintContext extends ParserRuleContext_1.ParserRuleContext {
    indexHintType() {
        return this.tryGetRuleContext(0, IndexHintTypeContext);
    }
    keyOrIndex() {
        return this.getRuleContext(0, KeyOrIndexContext);
    }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    indexList() {
        return this.tryGetRuleContext(0, IndexListContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    indexHintClause() {
        return this.tryGetRuleContext(0, IndexHintClauseContext);
    }
    USE_SYMBOL() { return this.tryGetToken(MySQLParser.USE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_indexHint; }
    // @Override
    enterRule(listener) {
        if (listener.enterIndexHint) {
            listener.enterIndexHint(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIndexHint) {
            listener.exitIndexHint(this);
        }
    }
}
exports.IndexHintContext = IndexHintContext;
class IndexHintTypeContext extends ParserRuleContext_1.ParserRuleContext {
    FORCE_SYMBOL() { return this.tryGetToken(MySQLParser.FORCE_SYMBOL, 0); }
    IGNORE_SYMBOL() { return this.tryGetToken(MySQLParser.IGNORE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_indexHintType; }
    // @Override
    enterRule(listener) {
        if (listener.enterIndexHintType) {
            listener.enterIndexHintType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIndexHintType) {
            listener.exitIndexHintType(this);
        }
    }
}
exports.IndexHintTypeContext = IndexHintTypeContext;
class KeyOrIndexContext extends ParserRuleContext_1.ParserRuleContext {
    KEY_SYMBOL() { return this.tryGetToken(MySQLParser.KEY_SYMBOL, 0); }
    INDEX_SYMBOL() { return this.tryGetToken(MySQLParser.INDEX_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_keyOrIndex; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyOrIndex) {
            listener.enterKeyOrIndex(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyOrIndex) {
            listener.exitKeyOrIndex(this);
        }
    }
}
exports.KeyOrIndexContext = KeyOrIndexContext;
class ConstraintKeyTypeContext extends ParserRuleContext_1.ParserRuleContext {
    PRIMARY_SYMBOL() { return this.tryGetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
    KEY_SYMBOL() { return this.tryGetToken(MySQLParser.KEY_SYMBOL, 0); }
    UNIQUE_SYMBOL() { return this.tryGetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
    keyOrIndex() {
        return this.tryGetRuleContext(0, KeyOrIndexContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_constraintKeyType; }
    // @Override
    enterRule(listener) {
        if (listener.enterConstraintKeyType) {
            listener.enterConstraintKeyType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitConstraintKeyType) {
            listener.exitConstraintKeyType(this);
        }
    }
}
exports.ConstraintKeyTypeContext = ConstraintKeyTypeContext;
class IndexHintClauseContext extends ParserRuleContext_1.ParserRuleContext {
    FOR_SYMBOL() { return this.getToken(MySQLParser.FOR_SYMBOL, 0); }
    JOIN_SYMBOL() { return this.tryGetToken(MySQLParser.JOIN_SYMBOL, 0); }
    ORDER_SYMBOL() { return this.tryGetToken(MySQLParser.ORDER_SYMBOL, 0); }
    BY_SYMBOL() { return this.tryGetToken(MySQLParser.BY_SYMBOL, 0); }
    GROUP_SYMBOL() { return this.tryGetToken(MySQLParser.GROUP_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_indexHintClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterIndexHintClause) {
            listener.enterIndexHintClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIndexHintClause) {
            listener.exitIndexHintClause(this);
        }
    }
}
exports.IndexHintClauseContext = IndexHintClauseContext;
class IndexListContext extends ParserRuleContext_1.ParserRuleContext {
    indexListElement(i) {
        if (i === undefined) {
            return this.getRuleContexts(IndexListElementContext);
        }
        else {
            return this.getRuleContext(i, IndexListElementContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_indexList; }
    // @Override
    enterRule(listener) {
        if (listener.enterIndexList) {
            listener.enterIndexList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIndexList) {
            listener.exitIndexList(this);
        }
    }
}
exports.IndexListContext = IndexListContext;
class IndexListElementContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    PRIMARY_SYMBOL() { return this.tryGetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_indexListElement; }
    // @Override
    enterRule(listener) {
        if (listener.enterIndexListElement) {
            listener.enterIndexListElement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIndexListElement) {
            listener.exitIndexListElement(this);
        }
    }
}
exports.IndexListElementContext = IndexListElementContext;
class UpdateStatementContext extends ParserRuleContext_1.ParserRuleContext {
    UPDATE_SYMBOL() { return this.getToken(MySQLParser.UPDATE_SYMBOL, 0); }
    tableReferenceList() {
        return this.getRuleContext(0, TableReferenceListContext);
    }
    SET_SYMBOL() { return this.getToken(MySQLParser.SET_SYMBOL, 0); }
    updateList() {
        return this.getRuleContext(0, UpdateListContext);
    }
    withClause() {
        return this.tryGetRuleContext(0, WithClauseContext);
    }
    LOW_PRIORITY_SYMBOL() { return this.tryGetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
    IGNORE_SYMBOL() { return this.tryGetToken(MySQLParser.IGNORE_SYMBOL, 0); }
    whereClause() {
        return this.tryGetRuleContext(0, WhereClauseContext);
    }
    orderClause() {
        return this.tryGetRuleContext(0, OrderClauseContext);
    }
    simpleLimitClause() {
        return this.tryGetRuleContext(0, SimpleLimitClauseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_updateStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterUpdateStatement) {
            listener.enterUpdateStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUpdateStatement) {
            listener.exitUpdateStatement(this);
        }
    }
}
exports.UpdateStatementContext = UpdateStatementContext;
class TransactionOrLockingStatementContext extends ParserRuleContext_1.ParserRuleContext {
    transactionStatement() {
        return this.tryGetRuleContext(0, TransactionStatementContext);
    }
    savepointStatement() {
        return this.tryGetRuleContext(0, SavepointStatementContext);
    }
    lockStatement() {
        return this.tryGetRuleContext(0, LockStatementContext);
    }
    xaStatement() {
        return this.tryGetRuleContext(0, XaStatementContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_transactionOrLockingStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterTransactionOrLockingStatement) {
            listener.enterTransactionOrLockingStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTransactionOrLockingStatement) {
            listener.exitTransactionOrLockingStatement(this);
        }
    }
}
exports.TransactionOrLockingStatementContext = TransactionOrLockingStatementContext;
class TransactionStatementContext extends ParserRuleContext_1.ParserRuleContext {
    START_SYMBOL() { return this.tryGetToken(MySQLParser.START_SYMBOL, 0); }
    TRANSACTION_SYMBOL() { return this.tryGetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
    transactionCharacteristic(i) {
        if (i === undefined) {
            return this.getRuleContexts(TransactionCharacteristicContext);
        }
        else {
            return this.getRuleContext(i, TransactionCharacteristicContext);
        }
    }
    COMMIT_SYMBOL() { return this.tryGetToken(MySQLParser.COMMIT_SYMBOL, 0); }
    WORK_SYMBOL() { return this.tryGetToken(MySQLParser.WORK_SYMBOL, 0); }
    AND_SYMBOL() { return this.tryGetToken(MySQLParser.AND_SYMBOL, 0); }
    CHAIN_SYMBOL() { return this.tryGetToken(MySQLParser.CHAIN_SYMBOL, 0); }
    RELEASE_SYMBOL() { return this.tryGetToken(MySQLParser.RELEASE_SYMBOL, 0); }
    NO_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.NO_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.NO_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_transactionStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterTransactionStatement) {
            listener.enterTransactionStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTransactionStatement) {
            listener.exitTransactionStatement(this);
        }
    }
}
exports.TransactionStatementContext = TransactionStatementContext;
class BeginWorkContext extends ParserRuleContext_1.ParserRuleContext {
    BEGIN_SYMBOL() { return this.getToken(MySQLParser.BEGIN_SYMBOL, 0); }
    WORK_SYMBOL() { return this.tryGetToken(MySQLParser.WORK_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_beginWork; }
    // @Override
    enterRule(listener) {
        if (listener.enterBeginWork) {
            listener.enterBeginWork(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBeginWork) {
            listener.exitBeginWork(this);
        }
    }
}
exports.BeginWorkContext = BeginWorkContext;
class TransactionCharacteristicContext extends ParserRuleContext_1.ParserRuleContext {
    WITH_SYMBOL() { return this.tryGetToken(MySQLParser.WITH_SYMBOL, 0); }
    CONSISTENT_SYMBOL() { return this.tryGetToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
    SNAPSHOT_SYMBOL() { return this.tryGetToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
    READ_SYMBOL() { return this.tryGetToken(MySQLParser.READ_SYMBOL, 0); }
    WRITE_SYMBOL() { return this.tryGetToken(MySQLParser.WRITE_SYMBOL, 0); }
    ONLY_SYMBOL() { return this.tryGetToken(MySQLParser.ONLY_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_transactionCharacteristic; }
    // @Override
    enterRule(listener) {
        if (listener.enterTransactionCharacteristic) {
            listener.enterTransactionCharacteristic(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTransactionCharacteristic) {
            listener.exitTransactionCharacteristic(this);
        }
    }
}
exports.TransactionCharacteristicContext = TransactionCharacteristicContext;
class SavepointStatementContext extends ParserRuleContext_1.ParserRuleContext {
    SAVEPOINT_SYMBOL() { return this.tryGetToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    ROLLBACK_SYMBOL() { return this.tryGetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
    TO_SYMBOL() { return this.tryGetToken(MySQLParser.TO_SYMBOL, 0); }
    WORK_SYMBOL() { return this.tryGetToken(MySQLParser.WORK_SYMBOL, 0); }
    AND_SYMBOL() { return this.tryGetToken(MySQLParser.AND_SYMBOL, 0); }
    CHAIN_SYMBOL() { return this.tryGetToken(MySQLParser.CHAIN_SYMBOL, 0); }
    RELEASE_SYMBOL() { return this.tryGetToken(MySQLParser.RELEASE_SYMBOL, 0); }
    NO_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.NO_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.NO_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_savepointStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterSavepointStatement) {
            listener.enterSavepointStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSavepointStatement) {
            listener.exitSavepointStatement(this);
        }
    }
}
exports.SavepointStatementContext = SavepointStatementContext;
class LockStatementContext extends ParserRuleContext_1.ParserRuleContext {
    LOCK_SYMBOL() { return this.tryGetToken(MySQLParser.LOCK_SYMBOL, 0); }
    lockItem(i) {
        if (i === undefined) {
            return this.getRuleContexts(LockItemContext);
        }
        else {
            return this.getRuleContext(i, LockItemContext);
        }
    }
    TABLES_SYMBOL() { return this.tryGetToken(MySQLParser.TABLES_SYMBOL, 0); }
    TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.TABLE_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    INSTANCE_SYMBOL() { return this.tryGetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
    FOR_SYMBOL() { return this.tryGetToken(MySQLParser.FOR_SYMBOL, 0); }
    BACKUP_SYMBOL() { return this.tryGetToken(MySQLParser.BACKUP_SYMBOL, 0); }
    UNLOCK_SYMBOL() { return this.tryGetToken(MySQLParser.UNLOCK_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_lockStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterLockStatement) {
            listener.enterLockStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLockStatement) {
            listener.exitLockStatement(this);
        }
    }
}
exports.LockStatementContext = LockStatementContext;
class LockItemContext extends ParserRuleContext_1.ParserRuleContext {
    tableRef() {
        return this.getRuleContext(0, TableRefContext);
    }
    lockOption() {
        return this.getRuleContext(0, LockOptionContext);
    }
    tableAlias() {
        return this.tryGetRuleContext(0, TableAliasContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_lockItem; }
    // @Override
    enterRule(listener) {
        if (listener.enterLockItem) {
            listener.enterLockItem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLockItem) {
            listener.exitLockItem(this);
        }
    }
}
exports.LockItemContext = LockItemContext;
class LockOptionContext extends ParserRuleContext_1.ParserRuleContext {
    READ_SYMBOL() { return this.tryGetToken(MySQLParser.READ_SYMBOL, 0); }
    LOCAL_SYMBOL() { return this.tryGetToken(MySQLParser.LOCAL_SYMBOL, 0); }
    WRITE_SYMBOL() { return this.tryGetToken(MySQLParser.WRITE_SYMBOL, 0); }
    LOW_PRIORITY_SYMBOL() { return this.tryGetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_lockOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterLockOption) {
            listener.enterLockOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLockOption) {
            listener.exitLockOption(this);
        }
    }
}
exports.LockOptionContext = LockOptionContext;
class XaStatementContext extends ParserRuleContext_1.ParserRuleContext {
    XA_SYMBOL() { return this.getToken(MySQLParser.XA_SYMBOL, 0); }
    xid() {
        return this.tryGetRuleContext(0, XidContext);
    }
    END_SYMBOL() { return this.tryGetToken(MySQLParser.END_SYMBOL, 0); }
    PREPARE_SYMBOL() { return this.tryGetToken(MySQLParser.PREPARE_SYMBOL, 0); }
    COMMIT_SYMBOL() { return this.tryGetToken(MySQLParser.COMMIT_SYMBOL, 0); }
    ROLLBACK_SYMBOL() { return this.tryGetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
    RECOVER_SYMBOL() { return this.tryGetToken(MySQLParser.RECOVER_SYMBOL, 0); }
    xaConvert() {
        return this.tryGetRuleContext(0, XaConvertContext);
    }
    START_SYMBOL() { return this.tryGetToken(MySQLParser.START_SYMBOL, 0); }
    BEGIN_SYMBOL() { return this.tryGetToken(MySQLParser.BEGIN_SYMBOL, 0); }
    SUSPEND_SYMBOL() { return this.tryGetToken(MySQLParser.SUSPEND_SYMBOL, 0); }
    ONE_SYMBOL() { return this.tryGetToken(MySQLParser.ONE_SYMBOL, 0); }
    PHASE_SYMBOL() { return this.tryGetToken(MySQLParser.PHASE_SYMBOL, 0); }
    JOIN_SYMBOL() { return this.tryGetToken(MySQLParser.JOIN_SYMBOL, 0); }
    RESUME_SYMBOL() { return this.tryGetToken(MySQLParser.RESUME_SYMBOL, 0); }
    FOR_SYMBOL() { return this.tryGetToken(MySQLParser.FOR_SYMBOL, 0); }
    MIGRATE_SYMBOL() { return this.tryGetToken(MySQLParser.MIGRATE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_xaStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterXaStatement) {
            listener.enterXaStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitXaStatement) {
            listener.exitXaStatement(this);
        }
    }
}
exports.XaStatementContext = XaStatementContext;
class XaConvertContext extends ParserRuleContext_1.ParserRuleContext {
    CONVERT_SYMBOL() { return this.tryGetToken(MySQLParser.CONVERT_SYMBOL, 0); }
    XID_SYMBOL() { return this.tryGetToken(MySQLParser.XID_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_xaConvert; }
    // @Override
    enterRule(listener) {
        if (listener.enterXaConvert) {
            listener.enterXaConvert(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitXaConvert) {
            listener.exitXaConvert(this);
        }
    }
}
exports.XaConvertContext = XaConvertContext;
class XidContext extends ParserRuleContext_1.ParserRuleContext {
    textString(i) {
        if (i === undefined) {
            return this.getRuleContexts(TextStringContext);
        }
        else {
            return this.getRuleContext(i, TextStringContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    ulong_number() {
        return this.tryGetRuleContext(0, Ulong_numberContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_xid; }
    // @Override
    enterRule(listener) {
        if (listener.enterXid) {
            listener.enterXid(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitXid) {
            listener.exitXid(this);
        }
    }
}
exports.XidContext = XidContext;
class ReplicationStatementContext extends ParserRuleContext_1.ParserRuleContext {
    PURGE_SYMBOL() { return this.tryGetToken(MySQLParser.PURGE_SYMBOL, 0); }
    LOGS_SYMBOL() { return this.tryGetToken(MySQLParser.LOGS_SYMBOL, 0); }
    BINARY_SYMBOL() { return this.tryGetToken(MySQLParser.BINARY_SYMBOL, 0); }
    MASTER_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SYMBOL, 0); }
    TO_SYMBOL() { return this.tryGetToken(MySQLParser.TO_SYMBOL, 0); }
    textLiteral() {
        return this.tryGetRuleContext(0, TextLiteralContext);
    }
    BEFORE_SYMBOL() { return this.tryGetToken(MySQLParser.BEFORE_SYMBOL, 0); }
    expr() {
        return this.tryGetRuleContext(0, ExprContext);
    }
    changeMaster() {
        return this.tryGetRuleContext(0, ChangeMasterContext);
    }
    RESET_SYMBOL() { return this.tryGetToken(MySQLParser.RESET_SYMBOL, 0); }
    resetOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(ResetOptionContext);
        }
        else {
            return this.getRuleContext(i, ResetOptionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    PERSIST_SYMBOL() { return this.tryGetToken(MySQLParser.PERSIST_SYMBOL, 0); }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    slave() {
        return this.tryGetRuleContext(0, SlaveContext);
    }
    changeReplication() {
        return this.tryGetRuleContext(0, ChangeReplicationContext);
    }
    replicationLoad() {
        return this.tryGetRuleContext(0, ReplicationLoadContext);
    }
    groupReplication() {
        return this.tryGetRuleContext(0, GroupReplicationContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_replicationStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterReplicationStatement) {
            listener.enterReplicationStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReplicationStatement) {
            listener.exitReplicationStatement(this);
        }
    }
}
exports.ReplicationStatementContext = ReplicationStatementContext;
class ResetOptionContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    MASTER_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SYMBOL, 0); }
    masterResetOptions() {
        return this.tryGetRuleContext(0, MasterResetOptionsContext);
    }
    CACHE_SYMBOL() { return this.tryGetToken(MySQLParser.CACHE_SYMBOL, 0); }
    QUERY_SYMBOL() { return this.tryGetToken(MySQLParser.QUERY_SYMBOL, 0); }
    SLAVE_SYMBOL() { return this.tryGetToken(MySQLParser.SLAVE_SYMBOL, 0); }
    ALL_SYMBOL() { return this.tryGetToken(MySQLParser.ALL_SYMBOL, 0); }
    channel() {
        return this.tryGetRuleContext(0, ChannelContext);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_resetOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterResetOption) {
            listener.enterResetOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResetOption) {
            listener.exitResetOption(this);
        }
    }
}
exports.ResetOptionContext = ResetOptionContext;
class MasterResetOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    TO_SYMBOL() { return this.getToken(MySQLParser.TO_SYMBOL, 0); }
    real_ulong_number() {
        return this.tryGetRuleContext(0, Real_ulong_numberContext);
    }
    real_ulonglong_number() {
        return this.tryGetRuleContext(0, Real_ulonglong_numberContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_masterResetOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterMasterResetOptions) {
            listener.enterMasterResetOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMasterResetOptions) {
            listener.exitMasterResetOptions(this);
        }
    }
}
exports.MasterResetOptionsContext = MasterResetOptionsContext;
class ReplicationLoadContext extends ParserRuleContext_1.ParserRuleContext {
    LOAD_SYMBOL() { return this.getToken(MySQLParser.LOAD_SYMBOL, 0); }
    FROM_SYMBOL() { return this.getToken(MySQLParser.FROM_SYMBOL, 0); }
    MASTER_SYMBOL() { return this.getToken(MySQLParser.MASTER_SYMBOL, 0); }
    DATA_SYMBOL() { return this.tryGetToken(MySQLParser.DATA_SYMBOL, 0); }
    TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.TABLE_SYMBOL, 0); }
    tableRef() {
        return this.tryGetRuleContext(0, TableRefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_replicationLoad; }
    // @Override
    enterRule(listener) {
        if (listener.enterReplicationLoad) {
            listener.enterReplicationLoad(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReplicationLoad) {
            listener.exitReplicationLoad(this);
        }
    }
}
exports.ReplicationLoadContext = ReplicationLoadContext;
class ChangeMasterContext extends ParserRuleContext_1.ParserRuleContext {
    CHANGE_SYMBOL() { return this.getToken(MySQLParser.CHANGE_SYMBOL, 0); }
    MASTER_SYMBOL() { return this.getToken(MySQLParser.MASTER_SYMBOL, 0); }
    TO_SYMBOL() { return this.getToken(MySQLParser.TO_SYMBOL, 0); }
    changeMasterOptions() {
        return this.getRuleContext(0, ChangeMasterOptionsContext);
    }
    channel() {
        return this.tryGetRuleContext(0, ChannelContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_changeMaster; }
    // @Override
    enterRule(listener) {
        if (listener.enterChangeMaster) {
            listener.enterChangeMaster(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChangeMaster) {
            listener.exitChangeMaster(this);
        }
    }
}
exports.ChangeMasterContext = ChangeMasterContext;
class ChangeMasterOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    masterOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(MasterOptionContext);
        }
        else {
            return this.getRuleContext(i, MasterOptionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_changeMasterOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterChangeMasterOptions) {
            listener.enterChangeMasterOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChangeMasterOptions) {
            listener.exitChangeMasterOptions(this);
        }
    }
}
exports.ChangeMasterOptionsContext = ChangeMasterOptionsContext;
class MasterOptionContext extends ParserRuleContext_1.ParserRuleContext {
    MASTER_HOST_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    textStringNoLinebreak() {
        return this.tryGetRuleContext(0, TextStringNoLinebreakContext);
    }
    NETWORK_NAMESPACE_SYMBOL() { return this.tryGetToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
    MASTER_BIND_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_BIND_SYMBOL, 0); }
    MASTER_USER_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
    MASTER_PASSWORD_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
    MASTER_PORT_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
    ulong_number() {
        return this.tryGetRuleContext(0, Ulong_numberContext);
    }
    MASTER_CONNECT_RETRY_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
    MASTER_RETRY_COUNT_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
    MASTER_DELAY_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
    MASTER_SSL_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
    MASTER_SSL_CA_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
    MASTER_SSL_CAPATH_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
    MASTER_TLS_VERSION_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
    MASTER_SSL_CERT_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
    MASTER_TLS_CIPHERSUITES_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
    masterTlsCiphersuitesDef() {
        return this.tryGetRuleContext(0, MasterTlsCiphersuitesDefContext);
    }
    MASTER_SSL_CIPHER_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
    MASTER_SSL_KEY_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
    MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
    MASTER_SSL_CRL_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
    textLiteral() {
        return this.tryGetRuleContext(0, TextLiteralContext);
    }
    MASTER_SSL_CRLPATH_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
    MASTER_PUBLIC_KEY_PATH_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
    GET_MASTER_PUBLIC_KEY_SYMBOL() { return this.tryGetToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
    MASTER_HEARTBEAT_PERIOD_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
    IGNORE_SERVER_IDS_SYMBOL() { return this.tryGetToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
    serverIdList() {
        return this.tryGetRuleContext(0, ServerIdListContext);
    }
    MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
    textStringLiteral() {
        return this.tryGetRuleContext(0, TextStringLiteralContext);
    }
    MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
    MASTER_AUTO_POSITION_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
    PRIVILEGE_CHECKS_USER_SYMBOL() { return this.tryGetToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
    privilegeCheckDef() {
        return this.tryGetRuleContext(0, PrivilegeCheckDefContext);
    }
    masterFileDef() {
        return this.tryGetRuleContext(0, MasterFileDefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_masterOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterMasterOption) {
            listener.enterMasterOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMasterOption) {
            listener.exitMasterOption(this);
        }
    }
}
exports.MasterOptionContext = MasterOptionContext;
class PrivilegeCheckDefContext extends ParserRuleContext_1.ParserRuleContext {
    userIdentifierOrText() {
        return this.tryGetRuleContext(0, UserIdentifierOrTextContext);
    }
    NULL_SYMBOL() { return this.tryGetToken(MySQLParser.NULL_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_privilegeCheckDef; }
    // @Override
    enterRule(listener) {
        if (listener.enterPrivilegeCheckDef) {
            listener.enterPrivilegeCheckDef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPrivilegeCheckDef) {
            listener.exitPrivilegeCheckDef(this);
        }
    }
}
exports.PrivilegeCheckDefContext = PrivilegeCheckDefContext;
class MasterTlsCiphersuitesDefContext extends ParserRuleContext_1.ParserRuleContext {
    textStringNoLinebreak() {
        return this.tryGetRuleContext(0, TextStringNoLinebreakContext);
    }
    NULL_SYMBOL() { return this.tryGetToken(MySQLParser.NULL_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_masterTlsCiphersuitesDef; }
    // @Override
    enterRule(listener) {
        if (listener.enterMasterTlsCiphersuitesDef) {
            listener.enterMasterTlsCiphersuitesDef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMasterTlsCiphersuitesDef) {
            listener.exitMasterTlsCiphersuitesDef(this);
        }
    }
}
exports.MasterTlsCiphersuitesDefContext = MasterTlsCiphersuitesDefContext;
class MasterFileDefContext extends ParserRuleContext_1.ParserRuleContext {
    MASTER_LOG_FILE_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.getToken(MySQLParser.EQUAL_OPERATOR, 0); }
    textStringNoLinebreak() {
        return this.tryGetRuleContext(0, TextStringNoLinebreakContext);
    }
    MASTER_LOG_POS_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
    ulonglong_number() {
        return this.tryGetRuleContext(0, Ulonglong_numberContext);
    }
    RELAY_LOG_FILE_SYMBOL() { return this.tryGetToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
    RELAY_LOG_POS_SYMBOL() { return this.tryGetToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
    ulong_number() {
        return this.tryGetRuleContext(0, Ulong_numberContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_masterFileDef; }
    // @Override
    enterRule(listener) {
        if (listener.enterMasterFileDef) {
            listener.enterMasterFileDef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMasterFileDef) {
            listener.exitMasterFileDef(this);
        }
    }
}
exports.MasterFileDefContext = MasterFileDefContext;
class ServerIdListContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    ulong_number(i) {
        if (i === undefined) {
            return this.getRuleContexts(Ulong_numberContext);
        }
        else {
            return this.getRuleContext(i, Ulong_numberContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_serverIdList; }
    // @Override
    enterRule(listener) {
        if (listener.enterServerIdList) {
            listener.enterServerIdList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitServerIdList) {
            listener.exitServerIdList(this);
        }
    }
}
exports.ServerIdListContext = ServerIdListContext;
class ChangeReplicationContext extends ParserRuleContext_1.ParserRuleContext {
    CHANGE_SYMBOL() { return this.getToken(MySQLParser.CHANGE_SYMBOL, 0); }
    REPLICATION_SYMBOL() { return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
    FILTER_SYMBOL() { return this.getToken(MySQLParser.FILTER_SYMBOL, 0); }
    filterDefinition(i) {
        if (i === undefined) {
            return this.getRuleContexts(FilterDefinitionContext);
        }
        else {
            return this.getRuleContext(i, FilterDefinitionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    channel() {
        return this.tryGetRuleContext(0, ChannelContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_changeReplication; }
    // @Override
    enterRule(listener) {
        if (listener.enterChangeReplication) {
            listener.enterChangeReplication(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChangeReplication) {
            listener.exitChangeReplication(this);
        }
    }
}
exports.ChangeReplicationContext = ChangeReplicationContext;
class FilterDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    REPLICATE_DO_DB_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.getToken(MySQLParser.EQUAL_OPERATOR, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    filterDbList() {
        return this.tryGetRuleContext(0, FilterDbListContext);
    }
    REPLICATE_IGNORE_DB_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
    REPLICATE_DO_TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
    filterTableList() {
        return this.tryGetRuleContext(0, FilterTableListContext);
    }
    REPLICATE_IGNORE_TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
    REPLICATE_WILD_DO_TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
    filterStringList() {
        return this.tryGetRuleContext(0, FilterStringListContext);
    }
    REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
    REPLICATE_REWRITE_DB_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
    filterDbPairList() {
        return this.tryGetRuleContext(0, FilterDbPairListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_filterDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterFilterDefinition) {
            listener.enterFilterDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFilterDefinition) {
            listener.exitFilterDefinition(this);
        }
    }
}
exports.FilterDefinitionContext = FilterDefinitionContext;
class FilterDbListContext extends ParserRuleContext_1.ParserRuleContext {
    schemaRef(i) {
        if (i === undefined) {
            return this.getRuleContexts(SchemaRefContext);
        }
        else {
            return this.getRuleContext(i, SchemaRefContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_filterDbList; }
    // @Override
    enterRule(listener) {
        if (listener.enterFilterDbList) {
            listener.enterFilterDbList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFilterDbList) {
            listener.exitFilterDbList(this);
        }
    }
}
exports.FilterDbListContext = FilterDbListContext;
class FilterTableListContext extends ParserRuleContext_1.ParserRuleContext {
    filterTableRef(i) {
        if (i === undefined) {
            return this.getRuleContexts(FilterTableRefContext);
        }
        else {
            return this.getRuleContext(i, FilterTableRefContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_filterTableList; }
    // @Override
    enterRule(listener) {
        if (listener.enterFilterTableList) {
            listener.enterFilterTableList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFilterTableList) {
            listener.exitFilterTableList(this);
        }
    }
}
exports.FilterTableListContext = FilterTableListContext;
class FilterStringListContext extends ParserRuleContext_1.ParserRuleContext {
    filterWildDbTableString(i) {
        if (i === undefined) {
            return this.getRuleContexts(FilterWildDbTableStringContext);
        }
        else {
            return this.getRuleContext(i, FilterWildDbTableStringContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_filterStringList; }
    // @Override
    enterRule(listener) {
        if (listener.enterFilterStringList) {
            listener.enterFilterStringList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFilterStringList) {
            listener.exitFilterStringList(this);
        }
    }
}
exports.FilterStringListContext = FilterStringListContext;
class FilterWildDbTableStringContext extends ParserRuleContext_1.ParserRuleContext {
    textStringNoLinebreak() {
        return this.getRuleContext(0, TextStringNoLinebreakContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_filterWildDbTableString; }
    // @Override
    enterRule(listener) {
        if (listener.enterFilterWildDbTableString) {
            listener.enterFilterWildDbTableString(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFilterWildDbTableString) {
            listener.exitFilterWildDbTableString(this);
        }
    }
}
exports.FilterWildDbTableStringContext = FilterWildDbTableStringContext;
class FilterDbPairListContext extends ParserRuleContext_1.ParserRuleContext {
    schemaIdentifierPair(i) {
        if (i === undefined) {
            return this.getRuleContexts(SchemaIdentifierPairContext);
        }
        else {
            return this.getRuleContext(i, SchemaIdentifierPairContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_filterDbPairList; }
    // @Override
    enterRule(listener) {
        if (listener.enterFilterDbPairList) {
            listener.enterFilterDbPairList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFilterDbPairList) {
            listener.exitFilterDbPairList(this);
        }
    }
}
exports.FilterDbPairListContext = FilterDbPairListContext;
class SlaveContext extends ParserRuleContext_1.ParserRuleContext {
    START_SYMBOL() { return this.tryGetToken(MySQLParser.START_SYMBOL, 0); }
    SLAVE_SYMBOL() { return this.getToken(MySQLParser.SLAVE_SYMBOL, 0); }
    slaveConnectionOptions() {
        return this.tryGetRuleContext(0, SlaveConnectionOptionsContext);
    }
    slaveThreadOptions() {
        return this.tryGetRuleContext(0, SlaveThreadOptionsContext);
    }
    UNTIL_SYMBOL() { return this.tryGetToken(MySQLParser.UNTIL_SYMBOL, 0); }
    slaveUntilOptions() {
        return this.tryGetRuleContext(0, SlaveUntilOptionsContext);
    }
    channel() {
        return this.tryGetRuleContext(0, ChannelContext);
    }
    STOP_SYMBOL() { return this.tryGetToken(MySQLParser.STOP_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_slave; }
    // @Override
    enterRule(listener) {
        if (listener.enterSlave) {
            listener.enterSlave(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSlave) {
            listener.exitSlave(this);
        }
    }
}
exports.SlaveContext = SlaveContext;
class SlaveUntilOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    masterFileDef(i) {
        if (i === undefined) {
            return this.getRuleContexts(MasterFileDefContext);
        }
        else {
            return this.getRuleContext(i, MasterFileDefContext);
        }
    }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    textString() {
        return this.tryGetRuleContext(0, TextStringContext);
    }
    SQL_AFTER_MTS_GAPS_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
    SQL_BEFORE_GTIDS_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
    SQL_AFTER_GTIDS_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_slaveUntilOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterSlaveUntilOptions) {
            listener.enterSlaveUntilOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSlaveUntilOptions) {
            listener.exitSlaveUntilOptions(this);
        }
    }
}
exports.SlaveUntilOptionsContext = SlaveUntilOptionsContext;
class SlaveConnectionOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    USER_SYMBOL() { return this.tryGetToken(MySQLParser.USER_SYMBOL, 0); }
    EQUAL_OPERATOR(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.EQUAL_OPERATOR);
        }
        else {
            return this.getToken(MySQLParser.EQUAL_OPERATOR, i);
        }
    }
    textString(i) {
        if (i === undefined) {
            return this.getRuleContexts(TextStringContext);
        }
        else {
            return this.getRuleContext(i, TextStringContext);
        }
    }
    PASSWORD_SYMBOL() { return this.tryGetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
    DEFAULT_AUTH_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
    PLUGIN_DIR_SYMBOL() { return this.tryGetToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_slaveConnectionOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterSlaveConnectionOptions) {
            listener.enterSlaveConnectionOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSlaveConnectionOptions) {
            listener.exitSlaveConnectionOptions(this);
        }
    }
}
exports.SlaveConnectionOptionsContext = SlaveConnectionOptionsContext;
class SlaveThreadOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    slaveThreadOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(SlaveThreadOptionContext);
        }
        else {
            return this.getRuleContext(i, SlaveThreadOptionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_slaveThreadOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterSlaveThreadOptions) {
            listener.enterSlaveThreadOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSlaveThreadOptions) {
            listener.exitSlaveThreadOptions(this);
        }
    }
}
exports.SlaveThreadOptionsContext = SlaveThreadOptionsContext;
class SlaveThreadOptionContext extends ParserRuleContext_1.ParserRuleContext {
    RELAY_THREAD_SYMBOL() { return this.tryGetToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
    SQL_THREAD_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_slaveThreadOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterSlaveThreadOption) {
            listener.enterSlaveThreadOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSlaveThreadOption) {
            listener.exitSlaveThreadOption(this);
        }
    }
}
exports.SlaveThreadOptionContext = SlaveThreadOptionContext;
class GroupReplicationContext extends ParserRuleContext_1.ParserRuleContext {
    GROUP_REPLICATION_SYMBOL() { return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
    START_SYMBOL() { return this.tryGetToken(MySQLParser.START_SYMBOL, 0); }
    STOP_SYMBOL() { return this.tryGetToken(MySQLParser.STOP_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_groupReplication; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroupReplication) {
            listener.enterGroupReplication(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroupReplication) {
            listener.exitGroupReplication(this);
        }
    }
}
exports.GroupReplicationContext = GroupReplicationContext;
class PreparedStatementContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    FROM_SYMBOL() { return this.tryGetToken(MySQLParser.FROM_SYMBOL, 0); }
    PREPARE_SYMBOL() { return this.tryGetToken(MySQLParser.PREPARE_SYMBOL, 0); }
    textLiteral() {
        return this.tryGetRuleContext(0, TextLiteralContext);
    }
    userVariable() {
        return this.tryGetRuleContext(0, UserVariableContext);
    }
    executeStatement() {
        return this.tryGetRuleContext(0, ExecuteStatementContext);
    }
    DEALLOCATE_SYMBOL() { return this.tryGetToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
    DROP_SYMBOL() { return this.tryGetToken(MySQLParser.DROP_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_preparedStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterPreparedStatement) {
            listener.enterPreparedStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPreparedStatement) {
            listener.exitPreparedStatement(this);
        }
    }
}
exports.PreparedStatementContext = PreparedStatementContext;
class ExecuteStatementContext extends ParserRuleContext_1.ParserRuleContext {
    EXECUTE_SYMBOL() { return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    USING_SYMBOL() { return this.tryGetToken(MySQLParser.USING_SYMBOL, 0); }
    executeVarList() {
        return this.tryGetRuleContext(0, ExecuteVarListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_executeStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterExecuteStatement) {
            listener.enterExecuteStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExecuteStatement) {
            listener.exitExecuteStatement(this);
        }
    }
}
exports.ExecuteStatementContext = ExecuteStatementContext;
class ExecuteVarListContext extends ParserRuleContext_1.ParserRuleContext {
    userVariable(i) {
        if (i === undefined) {
            return this.getRuleContexts(UserVariableContext);
        }
        else {
            return this.getRuleContext(i, UserVariableContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_executeVarList; }
    // @Override
    enterRule(listener) {
        if (listener.enterExecuteVarList) {
            listener.enterExecuteVarList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExecuteVarList) {
            listener.exitExecuteVarList(this);
        }
    }
}
exports.ExecuteVarListContext = ExecuteVarListContext;
class CloneStatementContext extends ParserRuleContext_1.ParserRuleContext {
    CLONE_SYMBOL() { return this.getToken(MySQLParser.CLONE_SYMBOL, 0); }
    LOCAL_SYMBOL() { return this.tryGetToken(MySQLParser.LOCAL_SYMBOL, 0); }
    DATA_SYMBOL() { return this.tryGetToken(MySQLParser.DATA_SYMBOL, 0); }
    DIRECTORY_SYMBOL() { return this.tryGetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
    textStringLiteral() {
        return this.tryGetRuleContext(0, TextStringLiteralContext);
    }
    REMOTE_SYMBOL() { return this.tryGetToken(MySQLParser.REMOTE_SYMBOL, 0); }
    INSTANCE_SYMBOL() { return this.tryGetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
    FROM_SYMBOL() { return this.tryGetToken(MySQLParser.FROM_SYMBOL, 0); }
    user() {
        return this.tryGetRuleContext(0, UserContext);
    }
    COLON_SYMBOL() { return this.tryGetToken(MySQLParser.COLON_SYMBOL, 0); }
    ulong_number() {
        return this.tryGetRuleContext(0, Ulong_numberContext);
    }
    IDENTIFIED_SYMBOL() { return this.tryGetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
    BY_SYMBOL() { return this.tryGetToken(MySQLParser.BY_SYMBOL, 0); }
    equal() {
        return this.tryGetRuleContext(0, EqualContext);
    }
    FOR_SYMBOL() { return this.tryGetToken(MySQLParser.FOR_SYMBOL, 0); }
    REPLICATION_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
    dataDirSSL() {
        return this.tryGetRuleContext(0, DataDirSSLContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_cloneStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterCloneStatement) {
            listener.enterCloneStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCloneStatement) {
            listener.exitCloneStatement(this);
        }
    }
}
exports.CloneStatementContext = CloneStatementContext;
class DataDirSSLContext extends ParserRuleContext_1.ParserRuleContext {
    ssl() {
        return this.tryGetRuleContext(0, SslContext);
    }
    DATA_SYMBOL() { return this.tryGetToken(MySQLParser.DATA_SYMBOL, 0); }
    DIRECTORY_SYMBOL() { return this.tryGetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
    textStringLiteral() {
        return this.tryGetRuleContext(0, TextStringLiteralContext);
    }
    equal() {
        return this.tryGetRuleContext(0, EqualContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dataDirSSL; }
    // @Override
    enterRule(listener) {
        if (listener.enterDataDirSSL) {
            listener.enterDataDirSSL(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDataDirSSL) {
            listener.exitDataDirSSL(this);
        }
    }
}
exports.DataDirSSLContext = DataDirSSLContext;
class SslContext extends ParserRuleContext_1.ParserRuleContext {
    REQUIRE_SYMBOL() { return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0); }
    SSL_SYMBOL() { return this.getToken(MySQLParser.SSL_SYMBOL, 0); }
    NO_SYMBOL() { return this.tryGetToken(MySQLParser.NO_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_ssl; }
    // @Override
    enterRule(listener) {
        if (listener.enterSsl) {
            listener.enterSsl(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSsl) {
            listener.exitSsl(this);
        }
    }
}
exports.SslContext = SslContext;
class AccountManagementStatementContext extends ParserRuleContext_1.ParserRuleContext {
    alterUser() {
        return this.tryGetRuleContext(0, AlterUserContext);
    }
    createUser() {
        return this.tryGetRuleContext(0, CreateUserContext);
    }
    dropUser() {
        return this.tryGetRuleContext(0, DropUserContext);
    }
    grant() {
        return this.tryGetRuleContext(0, GrantContext);
    }
    renameUser() {
        return this.tryGetRuleContext(0, RenameUserContext);
    }
    revoke() {
        return this.tryGetRuleContext(0, RevokeContext);
    }
    setRole() {
        return this.tryGetRuleContext(0, SetRoleContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_accountManagementStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterAccountManagementStatement) {
            listener.enterAccountManagementStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAccountManagementStatement) {
            listener.exitAccountManagementStatement(this);
        }
    }
}
exports.AccountManagementStatementContext = AccountManagementStatementContext;
class AlterUserContext extends ParserRuleContext_1.ParserRuleContext {
    ALTER_SYMBOL() { return this.getToken(MySQLParser.ALTER_SYMBOL, 0); }
    USER_SYMBOL() { return this.getToken(MySQLParser.USER_SYMBOL, 0); }
    alterUserTail() {
        return this.getRuleContext(0, AlterUserTailContext);
    }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterUser; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterUser) {
            listener.enterAlterUser(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterUser) {
            listener.exitAlterUser(this);
        }
    }
}
exports.AlterUserContext = AlterUserContext;
class AlterUserTailContext extends ParserRuleContext_1.ParserRuleContext {
    createUserTail() {
        return this.tryGetRuleContext(0, CreateUserTailContext);
    }
    createUserList() {
        return this.tryGetRuleContext(0, CreateUserListContext);
    }
    alterUserList() {
        return this.tryGetRuleContext(0, AlterUserListContext);
    }
    user() {
        return this.tryGetRuleContext(0, UserContext);
    }
    IDENTIFIED_SYMBOL() { return this.tryGetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
    BY_SYMBOL() { return this.tryGetToken(MySQLParser.BY_SYMBOL, 0); }
    textString() {
        return this.tryGetRuleContext(0, TextStringContext);
    }
    replacePassword() {
        return this.tryGetRuleContext(0, ReplacePasswordContext);
    }
    retainCurrentPassword() {
        return this.tryGetRuleContext(0, RetainCurrentPasswordContext);
    }
    discardOldPassword() {
        return this.tryGetRuleContext(0, DiscardOldPasswordContext);
    }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    ROLE_SYMBOL() { return this.tryGetToken(MySQLParser.ROLE_SYMBOL, 0); }
    ALL_SYMBOL() { return this.tryGetToken(MySQLParser.ALL_SYMBOL, 0); }
    NONE_SYMBOL() { return this.tryGetToken(MySQLParser.NONE_SYMBOL, 0); }
    roleList() {
        return this.tryGetRuleContext(0, RoleListContext);
    }
    RANDOM_SYMBOL() { return this.tryGetToken(MySQLParser.RANDOM_SYMBOL, 0); }
    PASSWORD_SYMBOL() { return this.tryGetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
    WITH_SYMBOL() { return this.tryGetToken(MySQLParser.WITH_SYMBOL, 0); }
    textOrIdentifier() {
        return this.tryGetRuleContext(0, TextOrIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterUserTail; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterUserTail) {
            listener.enterAlterUserTail(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterUserTail) {
            listener.exitAlterUserTail(this);
        }
    }
}
exports.AlterUserTailContext = AlterUserTailContext;
class UserFunctionContext extends ParserRuleContext_1.ParserRuleContext {
    USER_SYMBOL() { return this.getToken(MySQLParser.USER_SYMBOL, 0); }
    parentheses() {
        return this.getRuleContext(0, ParenthesesContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_userFunction; }
    // @Override
    enterRule(listener) {
        if (listener.enterUserFunction) {
            listener.enterUserFunction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUserFunction) {
            listener.exitUserFunction(this);
        }
    }
}
exports.UserFunctionContext = UserFunctionContext;
class CreateUserContext extends ParserRuleContext_1.ParserRuleContext {
    CREATE_SYMBOL() { return this.getToken(MySQLParser.CREATE_SYMBOL, 0); }
    USER_SYMBOL() { return this.getToken(MySQLParser.USER_SYMBOL, 0); }
    createUserList() {
        return this.getRuleContext(0, CreateUserListContext);
    }
    defaultRoleClause() {
        return this.getRuleContext(0, DefaultRoleClauseContext);
    }
    createUserTail() {
        return this.getRuleContext(0, CreateUserTailContext);
    }
    ifNotExists() {
        return this.tryGetRuleContext(0, IfNotExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createUser; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateUser) {
            listener.enterCreateUser(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateUser) {
            listener.exitCreateUser(this);
        }
    }
}
exports.CreateUserContext = CreateUserContext;
class CreateUserTailContext extends ParserRuleContext_1.ParserRuleContext {
    requireClause() {
        return this.tryGetRuleContext(0, RequireClauseContext);
    }
    connectOptions() {
        return this.tryGetRuleContext(0, ConnectOptionsContext);
    }
    accountLockPasswordExpireOptions(i) {
        if (i === undefined) {
            return this.getRuleContexts(AccountLockPasswordExpireOptionsContext);
        }
        else {
            return this.getRuleContext(i, AccountLockPasswordExpireOptionsContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createUserTail; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateUserTail) {
            listener.enterCreateUserTail(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateUserTail) {
            listener.exitCreateUserTail(this);
        }
    }
}
exports.CreateUserTailContext = CreateUserTailContext;
class DefaultRoleClauseContext extends ParserRuleContext_1.ParserRuleContext {
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    ROLE_SYMBOL() { return this.tryGetToken(MySQLParser.ROLE_SYMBOL, 0); }
    roleList() {
        return this.tryGetRuleContext(0, RoleListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_defaultRoleClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterDefaultRoleClause) {
            listener.enterDefaultRoleClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDefaultRoleClause) {
            listener.exitDefaultRoleClause(this);
        }
    }
}
exports.DefaultRoleClauseContext = DefaultRoleClauseContext;
class RequireClauseContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    REQUIRE_SYMBOL() { return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0); }
    requireList() {
        return this.tryGetRuleContext(0, RequireListContext);
    }
    SSL_SYMBOL() { return this.tryGetToken(MySQLParser.SSL_SYMBOL, 0); }
    X509_SYMBOL() { return this.tryGetToken(MySQLParser.X509_SYMBOL, 0); }
    NONE_SYMBOL() { return this.tryGetToken(MySQLParser.NONE_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_requireClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterRequireClause) {
            listener.enterRequireClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRequireClause) {
            listener.exitRequireClause(this);
        }
    }
}
exports.RequireClauseContext = RequireClauseContext;
class ConnectOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    WITH_SYMBOL() { return this.getToken(MySQLParser.WITH_SYMBOL, 0); }
    MAX_QUERIES_PER_HOUR_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
        }
    }
    ulong_number(i) {
        if (i === undefined) {
            return this.getRuleContexts(Ulong_numberContext);
        }
        else {
            return this.getRuleContext(i, Ulong_numberContext);
        }
    }
    MAX_UPDATES_PER_HOUR_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
        }
    }
    MAX_CONNECTIONS_PER_HOUR_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
        }
    }
    MAX_USER_CONNECTIONS_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_connectOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterConnectOptions) {
            listener.enterConnectOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitConnectOptions) {
            listener.exitConnectOptions(this);
        }
    }
}
exports.ConnectOptionsContext = ConnectOptionsContext;
class AccountLockPasswordExpireOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    ACCOUNT_SYMBOL() { return this.tryGetToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
    LOCK_SYMBOL() { return this.tryGetToken(MySQLParser.LOCK_SYMBOL, 0); }
    UNLOCK_SYMBOL() { return this.tryGetToken(MySQLParser.UNLOCK_SYMBOL, 0); }
    PASSWORD_SYMBOL() { return this.tryGetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
    EXPIRE_SYMBOL() { return this.tryGetToken(MySQLParser.EXPIRE_SYMBOL, 0); }
    HISTORY_SYMBOL() { return this.tryGetToken(MySQLParser.HISTORY_SYMBOL, 0); }
    REUSE_SYMBOL() { return this.tryGetToken(MySQLParser.REUSE_SYMBOL, 0); }
    INTERVAL_SYMBOL() { return this.tryGetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
    REQUIRE_SYMBOL() { return this.tryGetToken(MySQLParser.REQUIRE_SYMBOL, 0); }
    CURRENT_SYMBOL() { return this.tryGetToken(MySQLParser.CURRENT_SYMBOL, 0); }
    real_ulong_number() {
        return this.tryGetRuleContext(0, Real_ulong_numberContext);
    }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    DAY_SYMBOL() { return this.tryGetToken(MySQLParser.DAY_SYMBOL, 0); }
    NEVER_SYMBOL() { return this.tryGetToken(MySQLParser.NEVER_SYMBOL, 0); }
    OPTIONAL_SYMBOL() { return this.tryGetToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_accountLockPasswordExpireOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterAccountLockPasswordExpireOptions) {
            listener.enterAccountLockPasswordExpireOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAccountLockPasswordExpireOptions) {
            listener.exitAccountLockPasswordExpireOptions(this);
        }
    }
}
exports.AccountLockPasswordExpireOptionsContext = AccountLockPasswordExpireOptionsContext;
class DropUserContext extends ParserRuleContext_1.ParserRuleContext {
    DROP_SYMBOL() { return this.getToken(MySQLParser.DROP_SYMBOL, 0); }
    USER_SYMBOL() { return this.getToken(MySQLParser.USER_SYMBOL, 0); }
    userList() {
        return this.getRuleContext(0, UserListContext);
    }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropUser; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropUser) {
            listener.enterDropUser(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropUser) {
            listener.exitDropUser(this);
        }
    }
}
exports.DropUserContext = DropUserContext;
class GrantContext extends ParserRuleContext_1.ParserRuleContext {
    GRANT_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.GRANT_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.GRANT_SYMBOL, i);
        }
    }
    roleOrPrivilegesList() {
        return this.tryGetRuleContext(0, RoleOrPrivilegesListContext);
    }
    TO_SYMBOL() { return this.tryGetToken(MySQLParser.TO_SYMBOL, 0); }
    userList() {
        return this.tryGetRuleContext(0, UserListContext);
    }
    ON_SYMBOL() { return this.tryGetToken(MySQLParser.ON_SYMBOL, 0); }
    grantIdentifier() {
        return this.tryGetRuleContext(0, GrantIdentifierContext);
    }
    grantTargetList() {
        return this.tryGetRuleContext(0, GrantTargetListContext);
    }
    PROXY_SYMBOL() { return this.tryGetToken(MySQLParser.PROXY_SYMBOL, 0); }
    user() {
        return this.tryGetRuleContext(0, UserContext);
    }
    ALL_SYMBOL() { return this.tryGetToken(MySQLParser.ALL_SYMBOL, 0); }
    WITH_SYMBOL() { return this.tryGetToken(MySQLParser.WITH_SYMBOL, 0); }
    ADMIN_SYMBOL() { return this.tryGetToken(MySQLParser.ADMIN_SYMBOL, 0); }
    OPTION_SYMBOL() { return this.tryGetToken(MySQLParser.OPTION_SYMBOL, 0); }
    aclType() {
        return this.tryGetRuleContext(0, AclTypeContext);
    }
    versionedRequireClause() {
        return this.tryGetRuleContext(0, VersionedRequireClauseContext);
    }
    grantOptions() {
        return this.tryGetRuleContext(0, GrantOptionsContext);
    }
    grantAs() {
        return this.tryGetRuleContext(0, GrantAsContext);
    }
    PRIVILEGES_SYMBOL() { return this.tryGetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_grant; }
    // @Override
    enterRule(listener) {
        if (listener.enterGrant) {
            listener.enterGrant(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGrant) {
            listener.exitGrant(this);
        }
    }
}
exports.GrantContext = GrantContext;
class GrantTargetListContext extends ParserRuleContext_1.ParserRuleContext {
    createUserList() {
        return this.tryGetRuleContext(0, CreateUserListContext);
    }
    userList() {
        return this.tryGetRuleContext(0, UserListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_grantTargetList; }
    // @Override
    enterRule(listener) {
        if (listener.enterGrantTargetList) {
            listener.enterGrantTargetList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGrantTargetList) {
            listener.exitGrantTargetList(this);
        }
    }
}
exports.GrantTargetListContext = GrantTargetListContext;
class GrantOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    WITH_SYMBOL() { return this.getToken(MySQLParser.WITH_SYMBOL, 0); }
    grantOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(GrantOptionContext);
        }
        else {
            return this.getRuleContext(i, GrantOptionContext);
        }
    }
    GRANT_SYMBOL() { return this.tryGetToken(MySQLParser.GRANT_SYMBOL, 0); }
    OPTION_SYMBOL() { return this.tryGetToken(MySQLParser.OPTION_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_grantOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterGrantOptions) {
            listener.enterGrantOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGrantOptions) {
            listener.exitGrantOptions(this);
        }
    }
}
exports.GrantOptionsContext = GrantOptionsContext;
class ExceptRoleListContext extends ParserRuleContext_1.ParserRuleContext {
    EXCEPT_SYMBOL() { return this.getToken(MySQLParser.EXCEPT_SYMBOL, 0); }
    roleList() {
        return this.getRuleContext(0, RoleListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_exceptRoleList; }
    // @Override
    enterRule(listener) {
        if (listener.enterExceptRoleList) {
            listener.enterExceptRoleList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExceptRoleList) {
            listener.exitExceptRoleList(this);
        }
    }
}
exports.ExceptRoleListContext = ExceptRoleListContext;
class WithRolesContext extends ParserRuleContext_1.ParserRuleContext {
    WITH_SYMBOL() { return this.getToken(MySQLParser.WITH_SYMBOL, 0); }
    ROLE_SYMBOL() { return this.getToken(MySQLParser.ROLE_SYMBOL, 0); }
    roleList() {
        return this.tryGetRuleContext(0, RoleListContext);
    }
    ALL_SYMBOL() { return this.tryGetToken(MySQLParser.ALL_SYMBOL, 0); }
    NONE_SYMBOL() { return this.tryGetToken(MySQLParser.NONE_SYMBOL, 0); }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    exceptRoleList() {
        return this.tryGetRuleContext(0, ExceptRoleListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_withRoles; }
    // @Override
    enterRule(listener) {
        if (listener.enterWithRoles) {
            listener.enterWithRoles(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWithRoles) {
            listener.exitWithRoles(this);
        }
    }
}
exports.WithRolesContext = WithRolesContext;
class GrantAsContext extends ParserRuleContext_1.ParserRuleContext {
    AS_SYMBOL() { return this.getToken(MySQLParser.AS_SYMBOL, 0); }
    USER_SYMBOL() { return this.getToken(MySQLParser.USER_SYMBOL, 0); }
    withRoles() {
        return this.tryGetRuleContext(0, WithRolesContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_grantAs; }
    // @Override
    enterRule(listener) {
        if (listener.enterGrantAs) {
            listener.enterGrantAs(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGrantAs) {
            listener.exitGrantAs(this);
        }
    }
}
exports.GrantAsContext = GrantAsContext;
class VersionedRequireClauseContext extends ParserRuleContext_1.ParserRuleContext {
    requireClause() {
        return this.getRuleContext(0, RequireClauseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_versionedRequireClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterVersionedRequireClause) {
            listener.enterVersionedRequireClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVersionedRequireClause) {
            listener.exitVersionedRequireClause(this);
        }
    }
}
exports.VersionedRequireClauseContext = VersionedRequireClauseContext;
class RenameUserContext extends ParserRuleContext_1.ParserRuleContext {
    RENAME_SYMBOL() { return this.getToken(MySQLParser.RENAME_SYMBOL, 0); }
    USER_SYMBOL() { return this.getToken(MySQLParser.USER_SYMBOL, 0); }
    user(i) {
        if (i === undefined) {
            return this.getRuleContexts(UserContext);
        }
        else {
            return this.getRuleContext(i, UserContext);
        }
    }
    TO_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.TO_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.TO_SYMBOL, i);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_renameUser; }
    // @Override
    enterRule(listener) {
        if (listener.enterRenameUser) {
            listener.enterRenameUser(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRenameUser) {
            listener.exitRenameUser(this);
        }
    }
}
exports.RenameUserContext = RenameUserContext;
class RevokeContext extends ParserRuleContext_1.ParserRuleContext {
    REVOKE_SYMBOL() { return this.getToken(MySQLParser.REVOKE_SYMBOL, 0); }
    roleOrPrivilegesList() {
        return this.tryGetRuleContext(0, RoleOrPrivilegesListContext);
    }
    FROM_SYMBOL() { return this.tryGetToken(MySQLParser.FROM_SYMBOL, 0); }
    userList() {
        return this.tryGetRuleContext(0, UserListContext);
    }
    onTypeTo() {
        return this.tryGetRuleContext(0, OnTypeToContext);
    }
    ALL_SYMBOL() { return this.tryGetToken(MySQLParser.ALL_SYMBOL, 0); }
    PROXY_SYMBOL() { return this.tryGetToken(MySQLParser.PROXY_SYMBOL, 0); }
    ON_SYMBOL() { return this.tryGetToken(MySQLParser.ON_SYMBOL, 0); }
    user() {
        return this.tryGetRuleContext(0, UserContext);
    }
    grantIdentifier() {
        return this.tryGetRuleContext(0, GrantIdentifierContext);
    }
    COMMA_SYMBOL() { return this.tryGetToken(MySQLParser.COMMA_SYMBOL, 0); }
    GRANT_SYMBOL() { return this.tryGetToken(MySQLParser.GRANT_SYMBOL, 0); }
    OPTION_SYMBOL() { return this.tryGetToken(MySQLParser.OPTION_SYMBOL, 0); }
    PRIVILEGES_SYMBOL() { return this.tryGetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
    aclType() {
        return this.tryGetRuleContext(0, AclTypeContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_revoke; }
    // @Override
    enterRule(listener) {
        if (listener.enterRevoke) {
            listener.enterRevoke(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRevoke) {
            listener.exitRevoke(this);
        }
    }
}
exports.RevokeContext = RevokeContext;
class OnTypeToContext extends ParserRuleContext_1.ParserRuleContext {
    ON_SYMBOL() { return this.tryGetToken(MySQLParser.ON_SYMBOL, 0); }
    grantIdentifier() {
        return this.tryGetRuleContext(0, GrantIdentifierContext);
    }
    aclType() {
        return this.tryGetRuleContext(0, AclTypeContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_onTypeTo; }
    // @Override
    enterRule(listener) {
        if (listener.enterOnTypeTo) {
            listener.enterOnTypeTo(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOnTypeTo) {
            listener.exitOnTypeTo(this);
        }
    }
}
exports.OnTypeToContext = OnTypeToContext;
class AclTypeContext extends ParserRuleContext_1.ParserRuleContext {
    TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.TABLE_SYMBOL, 0); }
    FUNCTION_SYMBOL() { return this.tryGetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
    PROCEDURE_SYMBOL() { return this.tryGetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_aclType; }
    // @Override
    enterRule(listener) {
        if (listener.enterAclType) {
            listener.enterAclType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAclType) {
            listener.exitAclType(this);
        }
    }
}
exports.AclTypeContext = AclTypeContext;
class RoleOrPrivilegesListContext extends ParserRuleContext_1.ParserRuleContext {
    roleOrPrivilege(i) {
        if (i === undefined) {
            return this.getRuleContexts(RoleOrPrivilegeContext);
        }
        else {
            return this.getRuleContext(i, RoleOrPrivilegeContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_roleOrPrivilegesList; }
    // @Override
    enterRule(listener) {
        if (listener.enterRoleOrPrivilegesList) {
            listener.enterRoleOrPrivilegesList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRoleOrPrivilegesList) {
            listener.exitRoleOrPrivilegesList(this);
        }
    }
}
exports.RoleOrPrivilegesListContext = RoleOrPrivilegesListContext;
class RoleOrPrivilegeContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    roleIdentifierOrText() {
        return this.tryGetRuleContext(0, RoleIdentifierOrTextContext);
    }
    AT_TEXT_SUFFIX() { return this.tryGetToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
    AT_SIGN_SYMBOL() { return this.tryGetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
    textOrIdentifier() {
        return this.tryGetRuleContext(0, TextOrIdentifierContext);
    }
    columnInternalRefList() {
        return this.tryGetRuleContext(0, ColumnInternalRefListContext);
    }
    SELECT_SYMBOL() { return this.tryGetToken(MySQLParser.SELECT_SYMBOL, 0); }
    INSERT_SYMBOL() { return this.tryGetToken(MySQLParser.INSERT_SYMBOL, 0); }
    UPDATE_SYMBOL() { return this.tryGetToken(MySQLParser.UPDATE_SYMBOL, 0); }
    REFERENCES_SYMBOL() { return this.tryGetToken(MySQLParser.REFERENCES_SYMBOL, 0); }
    DELETE_SYMBOL() { return this.tryGetToken(MySQLParser.DELETE_SYMBOL, 0); }
    USAGE_SYMBOL() { return this.tryGetToken(MySQLParser.USAGE_SYMBOL, 0); }
    INDEX_SYMBOL() { return this.tryGetToken(MySQLParser.INDEX_SYMBOL, 0); }
    DROP_SYMBOL() { return this.tryGetToken(MySQLParser.DROP_SYMBOL, 0); }
    EXECUTE_SYMBOL() { return this.tryGetToken(MySQLParser.EXECUTE_SYMBOL, 0); }
    RELOAD_SYMBOL() { return this.tryGetToken(MySQLParser.RELOAD_SYMBOL, 0); }
    SHUTDOWN_SYMBOL() { return this.tryGetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
    PROCESS_SYMBOL() { return this.tryGetToken(MySQLParser.PROCESS_SYMBOL, 0); }
    FILE_SYMBOL() { return this.tryGetToken(MySQLParser.FILE_SYMBOL, 0); }
    PROXY_SYMBOL() { return this.tryGetToken(MySQLParser.PROXY_SYMBOL, 0); }
    SUPER_SYMBOL() { return this.tryGetToken(MySQLParser.SUPER_SYMBOL, 0); }
    EVENT_SYMBOL() { return this.tryGetToken(MySQLParser.EVENT_SYMBOL, 0); }
    TRIGGER_SYMBOL() { return this.tryGetToken(MySQLParser.TRIGGER_SYMBOL, 0); }
    GRANT_SYMBOL() { return this.tryGetToken(MySQLParser.GRANT_SYMBOL, 0); }
    OPTION_SYMBOL() { return this.tryGetToken(MySQLParser.OPTION_SYMBOL, 0); }
    SHOW_SYMBOL() { return this.tryGetToken(MySQLParser.SHOW_SYMBOL, 0); }
    DATABASES_SYMBOL() { return this.tryGetToken(MySQLParser.DATABASES_SYMBOL, 0); }
    CREATE_SYMBOL() { return this.tryGetToken(MySQLParser.CREATE_SYMBOL, 0); }
    TEMPORARY_SYMBOL() { return this.tryGetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
    TABLES_SYMBOL() { return this.tryGetToken(MySQLParser.TABLES_SYMBOL, 0); }
    ROUTINE_SYMBOL() { return this.tryGetToken(MySQLParser.ROUTINE_SYMBOL, 0); }
    TABLESPACE_SYMBOL() { return this.tryGetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
    USER_SYMBOL() { return this.tryGetToken(MySQLParser.USER_SYMBOL, 0); }
    VIEW_SYMBOL() { return this.tryGetToken(MySQLParser.VIEW_SYMBOL, 0); }
    LOCK_SYMBOL() { return this.tryGetToken(MySQLParser.LOCK_SYMBOL, 0); }
    REPLICATION_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
    CLIENT_SYMBOL() { return this.tryGetToken(MySQLParser.CLIENT_SYMBOL, 0); }
    SLAVE_SYMBOL() { return this.tryGetToken(MySQLParser.SLAVE_SYMBOL, 0); }
    ALTER_SYMBOL() { return this.tryGetToken(MySQLParser.ALTER_SYMBOL, 0); }
    ROLE_SYMBOL() { return this.tryGetToken(MySQLParser.ROLE_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_roleOrPrivilege; }
    // @Override
    enterRule(listener) {
        if (listener.enterRoleOrPrivilege) {
            listener.enterRoleOrPrivilege(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRoleOrPrivilege) {
            listener.exitRoleOrPrivilege(this);
        }
    }
}
exports.RoleOrPrivilegeContext = RoleOrPrivilegeContext;
class GrantIdentifierContext extends ParserRuleContext_1.ParserRuleContext {
    MULT_OPERATOR(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.MULT_OPERATOR);
        }
        else {
            return this.getToken(MySQLParser.MULT_OPERATOR, i);
        }
    }
    DOT_SYMBOL() { return this.tryGetToken(MySQLParser.DOT_SYMBOL, 0); }
    schemaRef() {
        return this.tryGetRuleContext(0, SchemaRefContext);
    }
    tableRef() {
        return this.tryGetRuleContext(0, TableRefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_grantIdentifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterGrantIdentifier) {
            listener.enterGrantIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGrantIdentifier) {
            listener.exitGrantIdentifier(this);
        }
    }
}
exports.GrantIdentifierContext = GrantIdentifierContext;
class RequireListContext extends ParserRuleContext_1.ParserRuleContext {
    requireListElement(i) {
        if (i === undefined) {
            return this.getRuleContexts(RequireListElementContext);
        }
        else {
            return this.getRuleContext(i, RequireListElementContext);
        }
    }
    AND_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.AND_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.AND_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_requireList; }
    // @Override
    enterRule(listener) {
        if (listener.enterRequireList) {
            listener.enterRequireList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRequireList) {
            listener.exitRequireList(this);
        }
    }
}
exports.RequireListContext = RequireListContext;
class RequireListElementContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    textString() {
        return this.getRuleContext(0, TextStringContext);
    }
    CIPHER_SYMBOL() { return this.tryGetToken(MySQLParser.CIPHER_SYMBOL, 0); }
    ISSUER_SYMBOL() { return this.tryGetToken(MySQLParser.ISSUER_SYMBOL, 0); }
    SUBJECT_SYMBOL() { return this.tryGetToken(MySQLParser.SUBJECT_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_requireListElement; }
    // @Override
    enterRule(listener) {
        if (listener.enterRequireListElement) {
            listener.enterRequireListElement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRequireListElement) {
            listener.exitRequireListElement(this);
        }
    }
}
exports.RequireListElementContext = RequireListElementContext;
class GrantOptionContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    OPTION_SYMBOL() { return this.tryGetToken(MySQLParser.OPTION_SYMBOL, 0); }
    GRANT_SYMBOL() { return this.tryGetToken(MySQLParser.GRANT_SYMBOL, 0); }
    ulong_number() {
        return this.tryGetRuleContext(0, Ulong_numberContext);
    }
    MAX_QUERIES_PER_HOUR_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
    MAX_UPDATES_PER_HOUR_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
    MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
    MAX_USER_CONNECTIONS_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_grantOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterGrantOption) {
            listener.enterGrantOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGrantOption) {
            listener.exitGrantOption(this);
        }
    }
}
exports.GrantOptionContext = GrantOptionContext;
class SetRoleContext extends ParserRuleContext_1.ParserRuleContext {
    SET_SYMBOL() { return this.getToken(MySQLParser.SET_SYMBOL, 0); }
    ROLE_SYMBOL() { return this.getToken(MySQLParser.ROLE_SYMBOL, 0); }
    roleList(i) {
        if (i === undefined) {
            return this.getRuleContexts(RoleListContext);
        }
        else {
            return this.getRuleContext(i, RoleListContext);
        }
    }
    NONE_SYMBOL() { return this.tryGetToken(MySQLParser.NONE_SYMBOL, 0); }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    TO_SYMBOL() { return this.tryGetToken(MySQLParser.TO_SYMBOL, 0); }
    ALL_SYMBOL() { return this.tryGetToken(MySQLParser.ALL_SYMBOL, 0); }
    EXCEPT_SYMBOL() { return this.tryGetToken(MySQLParser.EXCEPT_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_setRole; }
    // @Override
    enterRule(listener) {
        if (listener.enterSetRole) {
            listener.enterSetRole(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSetRole) {
            listener.exitSetRole(this);
        }
    }
}
exports.SetRoleContext = SetRoleContext;
class RoleListContext extends ParserRuleContext_1.ParserRuleContext {
    role(i) {
        if (i === undefined) {
            return this.getRuleContexts(RoleContext);
        }
        else {
            return this.getRuleContext(i, RoleContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_roleList; }
    // @Override
    enterRule(listener) {
        if (listener.enterRoleList) {
            listener.enterRoleList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRoleList) {
            listener.exitRoleList(this);
        }
    }
}
exports.RoleListContext = RoleListContext;
class RoleContext extends ParserRuleContext_1.ParserRuleContext {
    roleIdentifierOrText() {
        return this.getRuleContext(0, RoleIdentifierOrTextContext);
    }
    AT_SIGN_SYMBOL() { return this.tryGetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
    textOrIdentifier() {
        return this.tryGetRuleContext(0, TextOrIdentifierContext);
    }
    AT_TEXT_SUFFIX() { return this.tryGetToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_role; }
    // @Override
    enterRule(listener) {
        if (listener.enterRole) {
            listener.enterRole(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRole) {
            listener.exitRole(this);
        }
    }
}
exports.RoleContext = RoleContext;
class TableAdministrationStatementContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    TABLE_SYMBOL() { return this.getToken(MySQLParser.TABLE_SYMBOL, 0); }
    tableRefList() {
        return this.getRuleContext(0, TableRefListContext);
    }
    ANALYZE_SYMBOL() { return this.tryGetToken(MySQLParser.ANALYZE_SYMBOL, 0); }
    noWriteToBinLog() {
        return this.tryGetRuleContext(0, NoWriteToBinLogContext);
    }
    histogram() {
        return this.tryGetRuleContext(0, HistogramContext);
    }
    CHECK_SYMBOL() { return this.tryGetToken(MySQLParser.CHECK_SYMBOL, 0); }
    checkOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(CheckOptionContext);
        }
        else {
            return this.getRuleContext(i, CheckOptionContext);
        }
    }
    CHECKSUM_SYMBOL() { return this.tryGetToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
    QUICK_SYMBOL() { return this.tryGetToken(MySQLParser.QUICK_SYMBOL, 0); }
    EXTENDED_SYMBOL() { return this.tryGetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
    OPTIMIZE_SYMBOL() { return this.tryGetToken(MySQLParser.OPTIMIZE_SYMBOL, 0); }
    REPAIR_SYMBOL() { return this.tryGetToken(MySQLParser.REPAIR_SYMBOL, 0); }
    repairType(i) {
        if (i === undefined) {
            return this.getRuleContexts(RepairTypeContext);
        }
        else {
            return this.getRuleContext(i, RepairTypeContext);
        }
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tableAdministrationStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableAdministrationStatement) {
            listener.enterTableAdministrationStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableAdministrationStatement) {
            listener.exitTableAdministrationStatement(this);
        }
    }
}
exports.TableAdministrationStatementContext = TableAdministrationStatementContext;
class HistogramContext extends ParserRuleContext_1.ParserRuleContext {
    UPDATE_SYMBOL() { return this.tryGetToken(MySQLParser.UPDATE_SYMBOL, 0); }
    HISTOGRAM_SYMBOL() { return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
    ON_SYMBOL() { return this.getToken(MySQLParser.ON_SYMBOL, 0); }
    identifierList() {
        return this.getRuleContext(0, IdentifierListContext);
    }
    WITH_SYMBOL() { return this.tryGetToken(MySQLParser.WITH_SYMBOL, 0); }
    INT_NUMBER() { return this.tryGetToken(MySQLParser.INT_NUMBER, 0); }
    BUCKETS_SYMBOL() { return this.tryGetToken(MySQLParser.BUCKETS_SYMBOL, 0); }
    DROP_SYMBOL() { return this.tryGetToken(MySQLParser.DROP_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_histogram; }
    // @Override
    enterRule(listener) {
        if (listener.enterHistogram) {
            listener.enterHistogram(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHistogram) {
            listener.exitHistogram(this);
        }
    }
}
exports.HistogramContext = HistogramContext;
class CheckOptionContext extends ParserRuleContext_1.ParserRuleContext {
    FOR_SYMBOL() { return this.tryGetToken(MySQLParser.FOR_SYMBOL, 0); }
    UPGRADE_SYMBOL() { return this.tryGetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
    QUICK_SYMBOL() { return this.tryGetToken(MySQLParser.QUICK_SYMBOL, 0); }
    FAST_SYMBOL() { return this.tryGetToken(MySQLParser.FAST_SYMBOL, 0); }
    MEDIUM_SYMBOL() { return this.tryGetToken(MySQLParser.MEDIUM_SYMBOL, 0); }
    EXTENDED_SYMBOL() { return this.tryGetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
    CHANGED_SYMBOL() { return this.tryGetToken(MySQLParser.CHANGED_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_checkOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterCheckOption) {
            listener.enterCheckOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCheckOption) {
            listener.exitCheckOption(this);
        }
    }
}
exports.CheckOptionContext = CheckOptionContext;
class RepairTypeContext extends ParserRuleContext_1.ParserRuleContext {
    QUICK_SYMBOL() { return this.tryGetToken(MySQLParser.QUICK_SYMBOL, 0); }
    EXTENDED_SYMBOL() { return this.tryGetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
    USE_FRM_SYMBOL() { return this.tryGetToken(MySQLParser.USE_FRM_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_repairType; }
    // @Override
    enterRule(listener) {
        if (listener.enterRepairType) {
            listener.enterRepairType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRepairType) {
            listener.exitRepairType(this);
        }
    }
}
exports.RepairTypeContext = RepairTypeContext;
class InstallUninstallStatmentContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    SONAME_SYMBOL() { return this.tryGetToken(MySQLParser.SONAME_SYMBOL, 0); }
    textStringLiteral() {
        return this.tryGetRuleContext(0, TextStringLiteralContext);
    }
    INSTALL_SYMBOL() { return this.tryGetToken(MySQLParser.INSTALL_SYMBOL, 0); }
    PLUGIN_SYMBOL() { return this.tryGetToken(MySQLParser.PLUGIN_SYMBOL, 0); }
    textStringLiteralList() {
        return this.tryGetRuleContext(0, TextStringLiteralListContext);
    }
    COMPONENT_SYMBOL() { return this.tryGetToken(MySQLParser.COMPONENT_SYMBOL, 0); }
    pluginRef() {
        return this.tryGetRuleContext(0, PluginRefContext);
    }
    UNINSTALL_SYMBOL() { return this.tryGetToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
    componentRef(i) {
        if (i === undefined) {
            return this.getRuleContexts(ComponentRefContext);
        }
        else {
            return this.getRuleContext(i, ComponentRefContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_installUninstallStatment; }
    // @Override
    enterRule(listener) {
        if (listener.enterInstallUninstallStatment) {
            listener.enterInstallUninstallStatment(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInstallUninstallStatment) {
            listener.exitInstallUninstallStatment(this);
        }
    }
}
exports.InstallUninstallStatmentContext = InstallUninstallStatmentContext;
class SetStatementContext extends ParserRuleContext_1.ParserRuleContext {
    SET_SYMBOL() { return this.getToken(MySQLParser.SET_SYMBOL, 0); }
    startOptionValueList() {
        return this.getRuleContext(0, StartOptionValueListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_setStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterSetStatement) {
            listener.enterSetStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSetStatement) {
            listener.exitSetStatement(this);
        }
    }
}
exports.SetStatementContext = SetStatementContext;
class StartOptionValueListContext extends ParserRuleContext_1.ParserRuleContext {
    optionValueNoOptionType() {
        return this.tryGetRuleContext(0, OptionValueNoOptionTypeContext);
    }
    optionValueListContinued() {
        return this.tryGetRuleContext(0, OptionValueListContinuedContext);
    }
    TRANSACTION_SYMBOL() { return this.tryGetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
    transactionCharacteristics() {
        return this.tryGetRuleContext(0, TransactionCharacteristicsContext);
    }
    optionType() {
        return this.tryGetRuleContext(0, OptionTypeContext);
    }
    startOptionValueListFollowingOptionType() {
        return this.tryGetRuleContext(0, StartOptionValueListFollowingOptionTypeContext);
    }
    PASSWORD_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.PASSWORD_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.PASSWORD_SYMBOL, i);
        }
    }
    equal() {
        return this.tryGetRuleContext(0, EqualContext);
    }
    textString() {
        return this.tryGetRuleContext(0, TextStringContext);
    }
    OLD_PASSWORD_SYMBOL() { return this.tryGetToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    FOR_SYMBOL() { return this.tryGetToken(MySQLParser.FOR_SYMBOL, 0); }
    user() {
        return this.tryGetRuleContext(0, UserContext);
    }
    replacePassword() {
        return this.tryGetRuleContext(0, ReplacePasswordContext);
    }
    retainCurrentPassword() {
        return this.tryGetRuleContext(0, RetainCurrentPasswordContext);
    }
    TO_SYMBOL() { return this.tryGetToken(MySQLParser.TO_SYMBOL, 0); }
    RANDOM_SYMBOL() { return this.tryGetToken(MySQLParser.RANDOM_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_startOptionValueList; }
    // @Override
    enterRule(listener) {
        if (listener.enterStartOptionValueList) {
            listener.enterStartOptionValueList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStartOptionValueList) {
            listener.exitStartOptionValueList(this);
        }
    }
}
exports.StartOptionValueListContext = StartOptionValueListContext;
class TransactionCharacteristicsContext extends ParserRuleContext_1.ParserRuleContext {
    transactionAccessMode() {
        return this.tryGetRuleContext(0, TransactionAccessModeContext);
    }
    isolationLevel() {
        return this.tryGetRuleContext(0, IsolationLevelContext);
    }
    COMMA_SYMBOL() { return this.tryGetToken(MySQLParser.COMMA_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_transactionCharacteristics; }
    // @Override
    enterRule(listener) {
        if (listener.enterTransactionCharacteristics) {
            listener.enterTransactionCharacteristics(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTransactionCharacteristics) {
            listener.exitTransactionCharacteristics(this);
        }
    }
}
exports.TransactionCharacteristicsContext = TransactionCharacteristicsContext;
class TransactionAccessModeContext extends ParserRuleContext_1.ParserRuleContext {
    READ_SYMBOL() { return this.getToken(MySQLParser.READ_SYMBOL, 0); }
    WRITE_SYMBOL() { return this.tryGetToken(MySQLParser.WRITE_SYMBOL, 0); }
    ONLY_SYMBOL() { return this.tryGetToken(MySQLParser.ONLY_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_transactionAccessMode; }
    // @Override
    enterRule(listener) {
        if (listener.enterTransactionAccessMode) {
            listener.enterTransactionAccessMode(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTransactionAccessMode) {
            listener.exitTransactionAccessMode(this);
        }
    }
}
exports.TransactionAccessModeContext = TransactionAccessModeContext;
class IsolationLevelContext extends ParserRuleContext_1.ParserRuleContext {
    ISOLATION_SYMBOL() { return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0); }
    LEVEL_SYMBOL() { return this.getToken(MySQLParser.LEVEL_SYMBOL, 0); }
    REPEATABLE_SYMBOL() { return this.tryGetToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
    READ_SYMBOL() { return this.tryGetToken(MySQLParser.READ_SYMBOL, 0); }
    SERIALIZABLE_SYMBOL() { return this.tryGetToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
    COMMITTED_SYMBOL() { return this.tryGetToken(MySQLParser.COMMITTED_SYMBOL, 0); }
    UNCOMMITTED_SYMBOL() { return this.tryGetToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_isolationLevel; }
    // @Override
    enterRule(listener) {
        if (listener.enterIsolationLevel) {
            listener.enterIsolationLevel(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIsolationLevel) {
            listener.exitIsolationLevel(this);
        }
    }
}
exports.IsolationLevelContext = IsolationLevelContext;
class OptionValueListContinuedContext extends ParserRuleContext_1.ParserRuleContext {
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    optionValue(i) {
        if (i === undefined) {
            return this.getRuleContexts(OptionValueContext);
        }
        else {
            return this.getRuleContext(i, OptionValueContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_optionValueListContinued; }
    // @Override
    enterRule(listener) {
        if (listener.enterOptionValueListContinued) {
            listener.enterOptionValueListContinued(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOptionValueListContinued) {
            listener.exitOptionValueListContinued(this);
        }
    }
}
exports.OptionValueListContinuedContext = OptionValueListContinuedContext;
class OptionValueNoOptionTypeContext extends ParserRuleContext_1.ParserRuleContext {
    internalVariableName() {
        return this.tryGetRuleContext(0, InternalVariableNameContext);
    }
    equal() {
        return this.tryGetRuleContext(0, EqualContext);
    }
    setExprOrDefault() {
        return this.tryGetRuleContext(0, SetExprOrDefaultContext);
    }
    charsetClause() {
        return this.tryGetRuleContext(0, CharsetClauseContext);
    }
    userVariable() {
        return this.tryGetRuleContext(0, UserVariableContext);
    }
    expr() {
        return this.tryGetRuleContext(0, ExprContext);
    }
    setSystemVariable() {
        return this.tryGetRuleContext(0, SetSystemVariableContext);
    }
    NAMES_SYMBOL() { return this.tryGetToken(MySQLParser.NAMES_SYMBOL, 0); }
    charsetName() {
        return this.tryGetRuleContext(0, CharsetNameContext);
    }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    collate() {
        return this.tryGetRuleContext(0, CollateContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_optionValueNoOptionType; }
    // @Override
    enterRule(listener) {
        if (listener.enterOptionValueNoOptionType) {
            listener.enterOptionValueNoOptionType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOptionValueNoOptionType) {
            listener.exitOptionValueNoOptionType(this);
        }
    }
}
exports.OptionValueNoOptionTypeContext = OptionValueNoOptionTypeContext;
class OptionValueContext extends ParserRuleContext_1.ParserRuleContext {
    optionType() {
        return this.tryGetRuleContext(0, OptionTypeContext);
    }
    internalVariableName() {
        return this.tryGetRuleContext(0, InternalVariableNameContext);
    }
    equal() {
        return this.tryGetRuleContext(0, EqualContext);
    }
    setExprOrDefault() {
        return this.tryGetRuleContext(0, SetExprOrDefaultContext);
    }
    optionValueNoOptionType() {
        return this.tryGetRuleContext(0, OptionValueNoOptionTypeContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_optionValue; }
    // @Override
    enterRule(listener) {
        if (listener.enterOptionValue) {
            listener.enterOptionValue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOptionValue) {
            listener.exitOptionValue(this);
        }
    }
}
exports.OptionValueContext = OptionValueContext;
class SetSystemVariableContext extends ParserRuleContext_1.ParserRuleContext {
    AT_AT_SIGN_SYMBOL() { return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
    internalVariableName() {
        return this.getRuleContext(0, InternalVariableNameContext);
    }
    setVarIdentType() {
        return this.tryGetRuleContext(0, SetVarIdentTypeContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_setSystemVariable; }
    // @Override
    enterRule(listener) {
        if (listener.enterSetSystemVariable) {
            listener.enterSetSystemVariable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSetSystemVariable) {
            listener.exitSetSystemVariable(this);
        }
    }
}
exports.SetSystemVariableContext = SetSystemVariableContext;
class StartOptionValueListFollowingOptionTypeContext extends ParserRuleContext_1.ParserRuleContext {
    optionValueFollowingOptionType() {
        return this.tryGetRuleContext(0, OptionValueFollowingOptionTypeContext);
    }
    optionValueListContinued() {
        return this.tryGetRuleContext(0, OptionValueListContinuedContext);
    }
    TRANSACTION_SYMBOL() { return this.tryGetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
    transactionCharacteristics() {
        return this.tryGetRuleContext(0, TransactionCharacteristicsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_startOptionValueListFollowingOptionType; }
    // @Override
    enterRule(listener) {
        if (listener.enterStartOptionValueListFollowingOptionType) {
            listener.enterStartOptionValueListFollowingOptionType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStartOptionValueListFollowingOptionType) {
            listener.exitStartOptionValueListFollowingOptionType(this);
        }
    }
}
exports.StartOptionValueListFollowingOptionTypeContext = StartOptionValueListFollowingOptionTypeContext;
class OptionValueFollowingOptionTypeContext extends ParserRuleContext_1.ParserRuleContext {
    internalVariableName() {
        return this.getRuleContext(0, InternalVariableNameContext);
    }
    equal() {
        return this.getRuleContext(0, EqualContext);
    }
    setExprOrDefault() {
        return this.getRuleContext(0, SetExprOrDefaultContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_optionValueFollowingOptionType; }
    // @Override
    enterRule(listener) {
        if (listener.enterOptionValueFollowingOptionType) {
            listener.enterOptionValueFollowingOptionType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOptionValueFollowingOptionType) {
            listener.exitOptionValueFollowingOptionType(this);
        }
    }
}
exports.OptionValueFollowingOptionTypeContext = OptionValueFollowingOptionTypeContext;
class SetExprOrDefaultContext extends ParserRuleContext_1.ParserRuleContext {
    expr() {
        return this.tryGetRuleContext(0, ExprContext);
    }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    ON_SYMBOL() { return this.tryGetToken(MySQLParser.ON_SYMBOL, 0); }
    ALL_SYMBOL() { return this.tryGetToken(MySQLParser.ALL_SYMBOL, 0); }
    BINARY_SYMBOL() { return this.tryGetToken(MySQLParser.BINARY_SYMBOL, 0); }
    ROW_SYMBOL() { return this.tryGetToken(MySQLParser.ROW_SYMBOL, 0); }
    SYSTEM_SYMBOL() { return this.tryGetToken(MySQLParser.SYSTEM_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_setExprOrDefault; }
    // @Override
    enterRule(listener) {
        if (listener.enterSetExprOrDefault) {
            listener.enterSetExprOrDefault(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSetExprOrDefault) {
            listener.exitSetExprOrDefault(this);
        }
    }
}
exports.SetExprOrDefaultContext = SetExprOrDefaultContext;
class ShowStatementContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    SHOW_SYMBOL() { return this.getToken(MySQLParser.SHOW_SYMBOL, 0); }
    STATUS_SYMBOL() { return this.tryGetToken(MySQLParser.STATUS_SYMBOL, 0); }
    TABLES_SYMBOL() { return this.tryGetToken(MySQLParser.TABLES_SYMBOL, 0); }
    tableRef() {
        return this.tryGetRuleContext(0, TableRefContext);
    }
    EVENTS_SYMBOL() { return this.tryGetToken(MySQLParser.EVENTS_SYMBOL, 0); }
    fromOrIn() {
        return this.tryGetRuleContext(0, FromOrInContext);
    }
    COUNT_SYMBOL() { return this.tryGetToken(MySQLParser.COUNT_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    MULT_OPERATOR() { return this.tryGetToken(MySQLParser.MULT_OPERATOR, 0); }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    charset() {
        return this.tryGetRuleContext(0, CharsetContext);
    }
    FOR_SYMBOL() { return this.tryGetToken(MySQLParser.FOR_SYMBOL, 0); }
    user() {
        return this.tryGetRuleContext(0, UserContext);
    }
    USING_SYMBOL() { return this.tryGetToken(MySQLParser.USING_SYMBOL, 0); }
    userList() {
        return this.tryGetRuleContext(0, UserListContext);
    }
    CODE_SYMBOL() { return this.tryGetToken(MySQLParser.CODE_SYMBOL, 0); }
    procedureRef() {
        return this.tryGetRuleContext(0, ProcedureRefContext);
    }
    functionRef() {
        return this.tryGetRuleContext(0, FunctionRefContext);
    }
    AUTHORS_SYMBOL() { return this.tryGetToken(MySQLParser.AUTHORS_SYMBOL, 0); }
    DATABASES_SYMBOL() { return this.tryGetToken(MySQLParser.DATABASES_SYMBOL, 0); }
    TRIGGERS_SYMBOL() { return this.tryGetToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
    TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.TABLE_SYMBOL, 0); }
    OPEN_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_SYMBOL, 0); }
    PLUGINS_SYMBOL() { return this.tryGetToken(MySQLParser.PLUGINS_SYMBOL, 0); }
    ENGINE_SYMBOL() { return this.tryGetToken(MySQLParser.ENGINE_SYMBOL, 0); }
    MUTEX_SYMBOL() { return this.tryGetToken(MySQLParser.MUTEX_SYMBOL, 0); }
    LOGS_SYMBOL() { return this.tryGetToken(MySQLParser.LOGS_SYMBOL, 0); }
    COLUMNS_SYMBOL() { return this.tryGetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
    FROM_SYMBOL() { return this.tryGetToken(MySQLParser.FROM_SYMBOL, 0); }
    IN_SYMBOL() { return this.tryGetToken(MySQLParser.IN_SYMBOL, 0); }
    BINARY_SYMBOL() { return this.tryGetToken(MySQLParser.BINARY_SYMBOL, 0); }
    MASTER_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SYMBOL, 0); }
    SLAVE_SYMBOL() { return this.tryGetToken(MySQLParser.SLAVE_SYMBOL, 0); }
    ENGINES_SYMBOL() { return this.tryGetToken(MySQLParser.ENGINES_SYMBOL, 0); }
    WARNINGS_SYMBOL() { return this.tryGetToken(MySQLParser.WARNINGS_SYMBOL, 0); }
    ERRORS_SYMBOL() { return this.tryGetToken(MySQLParser.ERRORS_SYMBOL, 0); }
    PROFILES_SYMBOL() { return this.tryGetToken(MySQLParser.PROFILES_SYMBOL, 0); }
    PROFILE_SYMBOL() { return this.tryGetToken(MySQLParser.PROFILE_SYMBOL, 0); }
    PROCESSLIST_SYMBOL() { return this.tryGetToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
    COLLATION_SYMBOL() { return this.tryGetToken(MySQLParser.COLLATION_SYMBOL, 0); }
    CONTRIBUTORS_SYMBOL() { return this.tryGetToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0); }
    PRIVILEGES_SYMBOL() { return this.tryGetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
    GRANTS_SYMBOL() { return this.tryGetToken(MySQLParser.GRANTS_SYMBOL, 0); }
    CREATE_SYMBOL() { return this.tryGetToken(MySQLParser.CREATE_SYMBOL, 0); }
    PROCEDURE_SYMBOL() { return this.tryGetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
    FUNCTION_SYMBOL() { return this.tryGetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
    engineRef() {
        return this.tryGetRuleContext(0, EngineRefContext);
    }
    ALL_SYMBOL() { return this.tryGetToken(MySQLParser.ALL_SYMBOL, 0); }
    HOSTS_SYMBOL() { return this.tryGetToken(MySQLParser.HOSTS_SYMBOL, 0); }
    nonBlocking() {
        return this.tryGetRuleContext(0, NonBlockingContext);
    }
    BINLOG_SYMBOL() { return this.tryGetToken(MySQLParser.BINLOG_SYMBOL, 0); }
    RELAYLOG_SYMBOL() { return this.tryGetToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
    INDEX_SYMBOL() { return this.tryGetToken(MySQLParser.INDEX_SYMBOL, 0); }
    INDEXES_SYMBOL() { return this.tryGetToken(MySQLParser.INDEXES_SYMBOL, 0); }
    KEYS_SYMBOL() { return this.tryGetToken(MySQLParser.KEYS_SYMBOL, 0); }
    VARIABLES_SYMBOL() { return this.tryGetToken(MySQLParser.VARIABLES_SYMBOL, 0); }
    schemaRef() {
        return this.tryGetRuleContext(0, SchemaRefContext);
    }
    eventRef() {
        return this.tryGetRuleContext(0, EventRefContext);
    }
    triggerRef() {
        return this.tryGetRuleContext(0, TriggerRefContext);
    }
    viewRef() {
        return this.tryGetRuleContext(0, ViewRefContext);
    }
    likeOrWhere() {
        return this.tryGetRuleContext(0, LikeOrWhereContext);
    }
    showCommandType() {
        return this.tryGetRuleContext(0, ShowCommandTypeContext);
    }
    inDb() {
        return this.tryGetRuleContext(0, InDbContext);
    }
    FULL_SYMBOL() { return this.tryGetToken(MySQLParser.FULL_SYMBOL, 0); }
    textString() {
        return this.tryGetRuleContext(0, TextStringContext);
    }
    ulonglong_number() {
        return this.tryGetRuleContext(0, Ulonglong_numberContext);
    }
    limitClause() {
        return this.tryGetRuleContext(0, LimitClauseContext);
    }
    channel() {
        return this.tryGetRuleContext(0, ChannelContext);
    }
    EXTENDED_SYMBOL() { return this.tryGetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
    whereClause() {
        return this.tryGetRuleContext(0, WhereClauseContext);
    }
    STORAGE_SYMBOL() { return this.tryGetToken(MySQLParser.STORAGE_SYMBOL, 0); }
    profileType(i) {
        if (i === undefined) {
            return this.getRuleContexts(ProfileTypeContext);
        }
        else {
            return this.getRuleContext(i, ProfileTypeContext);
        }
    }
    QUERY_SYMBOL() { return this.tryGetToken(MySQLParser.QUERY_SYMBOL, 0); }
    INT_NUMBER() { return this.tryGetToken(MySQLParser.INT_NUMBER, 0); }
    optionType() {
        return this.tryGetRuleContext(0, OptionTypeContext);
    }
    DATABASE_SYMBOL() { return this.tryGetToken(MySQLParser.DATABASE_SYMBOL, 0); }
    EVENT_SYMBOL() { return this.tryGetToken(MySQLParser.EVENT_SYMBOL, 0); }
    TRIGGER_SYMBOL() { return this.tryGetToken(MySQLParser.TRIGGER_SYMBOL, 0); }
    VIEW_SYMBOL() { return this.tryGetToken(MySQLParser.VIEW_SYMBOL, 0); }
    USER_SYMBOL() { return this.tryGetToken(MySQLParser.USER_SYMBOL, 0); }
    ifNotExists() {
        return this.tryGetRuleContext(0, IfNotExistsContext);
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_showStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterShowStatement) {
            listener.enterShowStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitShowStatement) {
            listener.exitShowStatement(this);
        }
    }
}
exports.ShowStatementContext = ShowStatementContext;
class ShowCommandTypeContext extends ParserRuleContext_1.ParserRuleContext {
    FULL_SYMBOL() { return this.tryGetToken(MySQLParser.FULL_SYMBOL, 0); }
    EXTENDED_SYMBOL() { return this.tryGetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_showCommandType; }
    // @Override
    enterRule(listener) {
        if (listener.enterShowCommandType) {
            listener.enterShowCommandType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitShowCommandType) {
            listener.exitShowCommandType(this);
        }
    }
}
exports.ShowCommandTypeContext = ShowCommandTypeContext;
class NonBlockingContext extends ParserRuleContext_1.ParserRuleContext {
    NONBLOCKING_SYMBOL() { return this.tryGetToken(MySQLParser.NONBLOCKING_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_nonBlocking; }
    // @Override
    enterRule(listener) {
        if (listener.enterNonBlocking) {
            listener.enterNonBlocking(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNonBlocking) {
            listener.exitNonBlocking(this);
        }
    }
}
exports.NonBlockingContext = NonBlockingContext;
class FromOrInContext extends ParserRuleContext_1.ParserRuleContext {
    FROM_SYMBOL() { return this.tryGetToken(MySQLParser.FROM_SYMBOL, 0); }
    IN_SYMBOL() { return this.tryGetToken(MySQLParser.IN_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_fromOrIn; }
    // @Override
    enterRule(listener) {
        if (listener.enterFromOrIn) {
            listener.enterFromOrIn(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFromOrIn) {
            listener.exitFromOrIn(this);
        }
    }
}
exports.FromOrInContext = FromOrInContext;
class InDbContext extends ParserRuleContext_1.ParserRuleContext {
    fromOrIn() {
        return this.getRuleContext(0, FromOrInContext);
    }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_inDb; }
    // @Override
    enterRule(listener) {
        if (listener.enterInDb) {
            listener.enterInDb(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInDb) {
            listener.exitInDb(this);
        }
    }
}
exports.InDbContext = InDbContext;
class ProfileTypeContext extends ParserRuleContext_1.ParserRuleContext {
    BLOCK_SYMBOL() { return this.tryGetToken(MySQLParser.BLOCK_SYMBOL, 0); }
    IO_SYMBOL() { return this.tryGetToken(MySQLParser.IO_SYMBOL, 0); }
    CONTEXT_SYMBOL() { return this.tryGetToken(MySQLParser.CONTEXT_SYMBOL, 0); }
    SWITCHES_SYMBOL() { return this.tryGetToken(MySQLParser.SWITCHES_SYMBOL, 0); }
    PAGE_SYMBOL() { return this.tryGetToken(MySQLParser.PAGE_SYMBOL, 0); }
    FAULTS_SYMBOL() { return this.tryGetToken(MySQLParser.FAULTS_SYMBOL, 0); }
    ALL_SYMBOL() { return this.tryGetToken(MySQLParser.ALL_SYMBOL, 0); }
    CPU_SYMBOL() { return this.tryGetToken(MySQLParser.CPU_SYMBOL, 0); }
    IPC_SYMBOL() { return this.tryGetToken(MySQLParser.IPC_SYMBOL, 0); }
    MEMORY_SYMBOL() { return this.tryGetToken(MySQLParser.MEMORY_SYMBOL, 0); }
    SOURCE_SYMBOL() { return this.tryGetToken(MySQLParser.SOURCE_SYMBOL, 0); }
    SWAPS_SYMBOL() { return this.tryGetToken(MySQLParser.SWAPS_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_profileType; }
    // @Override
    enterRule(listener) {
        if (listener.enterProfileType) {
            listener.enterProfileType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitProfileType) {
            listener.exitProfileType(this);
        }
    }
}
exports.ProfileTypeContext = ProfileTypeContext;
class OtherAdministrativeStatementContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    textLiteral() {
        return this.tryGetRuleContext(0, TextLiteralContext);
    }
    BINLOG_SYMBOL() { return this.tryGetToken(MySQLParser.BINLOG_SYMBOL, 0); }
    INDEX_SYMBOL() { return this.tryGetToken(MySQLParser.INDEX_SYMBOL, 0); }
    keyCacheListOrParts() {
        return this.tryGetRuleContext(0, KeyCacheListOrPartsContext);
    }
    IN_SYMBOL() { return this.tryGetToken(MySQLParser.IN_SYMBOL, 0); }
    CACHE_SYMBOL() { return this.tryGetToken(MySQLParser.CACHE_SYMBOL, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    FLUSH_SYMBOL() { return this.tryGetToken(MySQLParser.FLUSH_SYMBOL, 0); }
    flushTables() {
        return this.tryGetRuleContext(0, FlushTablesContext);
    }
    flushOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(FlushOptionContext);
        }
        else {
            return this.getRuleContext(i, FlushOptionContext);
        }
    }
    noWriteToBinLog() {
        return this.tryGetRuleContext(0, NoWriteToBinLogContext);
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    expr() {
        return this.tryGetRuleContext(0, ExprContext);
    }
    KILL_SYMBOL() { return this.tryGetToken(MySQLParser.KILL_SYMBOL, 0); }
    CONNECTION_SYMBOL() { return this.tryGetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
    QUERY_SYMBOL() { return this.tryGetToken(MySQLParser.QUERY_SYMBOL, 0); }
    INTO_SYMBOL() { return this.tryGetToken(MySQLParser.INTO_SYMBOL, 0); }
    preloadTail() {
        return this.tryGetRuleContext(0, PreloadTailContext);
    }
    LOAD_SYMBOL() { return this.tryGetToken(MySQLParser.LOAD_SYMBOL, 0); }
    SHUTDOWN_SYMBOL() { return this.tryGetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_otherAdministrativeStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterOtherAdministrativeStatement) {
            listener.enterOtherAdministrativeStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOtherAdministrativeStatement) {
            listener.exitOtherAdministrativeStatement(this);
        }
    }
}
exports.OtherAdministrativeStatementContext = OtherAdministrativeStatementContext;
class KeyCacheListOrPartsContext extends ParserRuleContext_1.ParserRuleContext {
    keyCacheList() {
        return this.tryGetRuleContext(0, KeyCacheListContext);
    }
    assignToKeycachePartition() {
        return this.tryGetRuleContext(0, AssignToKeycachePartitionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_keyCacheListOrParts; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyCacheListOrParts) {
            listener.enterKeyCacheListOrParts(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyCacheListOrParts) {
            listener.exitKeyCacheListOrParts(this);
        }
    }
}
exports.KeyCacheListOrPartsContext = KeyCacheListOrPartsContext;
class KeyCacheListContext extends ParserRuleContext_1.ParserRuleContext {
    assignToKeycache(i) {
        if (i === undefined) {
            return this.getRuleContexts(AssignToKeycacheContext);
        }
        else {
            return this.getRuleContext(i, AssignToKeycacheContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_keyCacheList; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyCacheList) {
            listener.enterKeyCacheList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyCacheList) {
            listener.exitKeyCacheList(this);
        }
    }
}
exports.KeyCacheListContext = KeyCacheListContext;
class AssignToKeycacheContext extends ParserRuleContext_1.ParserRuleContext {
    tableRef() {
        return this.getRuleContext(0, TableRefContext);
    }
    cacheKeyList() {
        return this.tryGetRuleContext(0, CacheKeyListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_assignToKeycache; }
    // @Override
    enterRule(listener) {
        if (listener.enterAssignToKeycache) {
            listener.enterAssignToKeycache(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAssignToKeycache) {
            listener.exitAssignToKeycache(this);
        }
    }
}
exports.AssignToKeycacheContext = AssignToKeycacheContext;
class AssignToKeycachePartitionContext extends ParserRuleContext_1.ParserRuleContext {
    tableRef() {
        return this.getRuleContext(0, TableRefContext);
    }
    PARTITION_SYMBOL() { return this.getToken(MySQLParser.PARTITION_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    allOrPartitionNameList() {
        return this.getRuleContext(0, AllOrPartitionNameListContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    cacheKeyList() {
        return this.tryGetRuleContext(0, CacheKeyListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_assignToKeycachePartition; }
    // @Override
    enterRule(listener) {
        if (listener.enterAssignToKeycachePartition) {
            listener.enterAssignToKeycachePartition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAssignToKeycachePartition) {
            listener.exitAssignToKeycachePartition(this);
        }
    }
}
exports.AssignToKeycachePartitionContext = AssignToKeycachePartitionContext;
class CacheKeyListContext extends ParserRuleContext_1.ParserRuleContext {
    keyOrIndex() {
        return this.getRuleContext(0, KeyOrIndexContext);
    }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    keyUsageList() {
        return this.tryGetRuleContext(0, KeyUsageListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_cacheKeyList; }
    // @Override
    enterRule(listener) {
        if (listener.enterCacheKeyList) {
            listener.enterCacheKeyList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCacheKeyList) {
            listener.exitCacheKeyList(this);
        }
    }
}
exports.CacheKeyListContext = CacheKeyListContext;
class KeyUsageElementContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    PRIMARY_SYMBOL() { return this.tryGetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_keyUsageElement; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyUsageElement) {
            listener.enterKeyUsageElement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyUsageElement) {
            listener.exitKeyUsageElement(this);
        }
    }
}
exports.KeyUsageElementContext = KeyUsageElementContext;
class KeyUsageListContext extends ParserRuleContext_1.ParserRuleContext {
    keyUsageElement(i) {
        if (i === undefined) {
            return this.getRuleContexts(KeyUsageElementContext);
        }
        else {
            return this.getRuleContext(i, KeyUsageElementContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_keyUsageList; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyUsageList) {
            listener.enterKeyUsageList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyUsageList) {
            listener.exitKeyUsageList(this);
        }
    }
}
exports.KeyUsageListContext = KeyUsageListContext;
class FlushOptionContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    DES_KEY_FILE_SYMBOL() { return this.tryGetToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0); }
    HOSTS_SYMBOL() { return this.tryGetToken(MySQLParser.HOSTS_SYMBOL, 0); }
    PRIVILEGES_SYMBOL() { return this.tryGetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
    STATUS_SYMBOL() { return this.tryGetToken(MySQLParser.STATUS_SYMBOL, 0); }
    USER_RESOURCES_SYMBOL() { return this.tryGetToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
    LOGS_SYMBOL() { return this.tryGetToken(MySQLParser.LOGS_SYMBOL, 0); }
    logType() {
        return this.tryGetRuleContext(0, LogTypeContext);
    }
    RELAY_SYMBOL() { return this.tryGetToken(MySQLParser.RELAY_SYMBOL, 0); }
    channel() {
        return this.tryGetRuleContext(0, ChannelContext);
    }
    CACHE_SYMBOL() { return this.tryGetToken(MySQLParser.CACHE_SYMBOL, 0); }
    QUERY_SYMBOL() { return this.tryGetToken(MySQLParser.QUERY_SYMBOL, 0); }
    OPTIMIZER_COSTS_SYMBOL() { return this.tryGetToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_flushOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterFlushOption) {
            listener.enterFlushOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFlushOption) {
            listener.exitFlushOption(this);
        }
    }
}
exports.FlushOptionContext = FlushOptionContext;
class LogTypeContext extends ParserRuleContext_1.ParserRuleContext {
    BINARY_SYMBOL() { return this.tryGetToken(MySQLParser.BINARY_SYMBOL, 0); }
    ENGINE_SYMBOL() { return this.tryGetToken(MySQLParser.ENGINE_SYMBOL, 0); }
    ERROR_SYMBOL() { return this.tryGetToken(MySQLParser.ERROR_SYMBOL, 0); }
    GENERAL_SYMBOL() { return this.tryGetToken(MySQLParser.GENERAL_SYMBOL, 0); }
    SLOW_SYMBOL() { return this.tryGetToken(MySQLParser.SLOW_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_logType; }
    // @Override
    enterRule(listener) {
        if (listener.enterLogType) {
            listener.enterLogType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLogType) {
            listener.exitLogType(this);
        }
    }
}
exports.LogTypeContext = LogTypeContext;
class FlushTablesContext extends ParserRuleContext_1.ParserRuleContext {
    TABLES_SYMBOL() { return this.tryGetToken(MySQLParser.TABLES_SYMBOL, 0); }
    TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.TABLE_SYMBOL, 0); }
    WITH_SYMBOL() { return this.tryGetToken(MySQLParser.WITH_SYMBOL, 0); }
    READ_SYMBOL() { return this.tryGetToken(MySQLParser.READ_SYMBOL, 0); }
    LOCK_SYMBOL() { return this.tryGetToken(MySQLParser.LOCK_SYMBOL, 0); }
    identifierList() {
        return this.tryGetRuleContext(0, IdentifierListContext);
    }
    flushTablesOptions() {
        return this.tryGetRuleContext(0, FlushTablesOptionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_flushTables; }
    // @Override
    enterRule(listener) {
        if (listener.enterFlushTables) {
            listener.enterFlushTables(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFlushTables) {
            listener.exitFlushTables(this);
        }
    }
}
exports.FlushTablesContext = FlushTablesContext;
class FlushTablesOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    FOR_SYMBOL() { return this.tryGetToken(MySQLParser.FOR_SYMBOL, 0); }
    EXPORT_SYMBOL() { return this.tryGetToken(MySQLParser.EXPORT_SYMBOL, 0); }
    WITH_SYMBOL() { return this.tryGetToken(MySQLParser.WITH_SYMBOL, 0); }
    READ_SYMBOL() { return this.tryGetToken(MySQLParser.READ_SYMBOL, 0); }
    LOCK_SYMBOL() { return this.tryGetToken(MySQLParser.LOCK_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_flushTablesOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterFlushTablesOptions) {
            listener.enterFlushTablesOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFlushTablesOptions) {
            listener.exitFlushTablesOptions(this);
        }
    }
}
exports.FlushTablesOptionsContext = FlushTablesOptionsContext;
class PreloadTailContext extends ParserRuleContext_1.ParserRuleContext {
    tableRef() {
        return this.tryGetRuleContext(0, TableRefContext);
    }
    adminPartition() {
        return this.tryGetRuleContext(0, AdminPartitionContext);
    }
    cacheKeyList() {
        return this.tryGetRuleContext(0, CacheKeyListContext);
    }
    IGNORE_SYMBOL() { return this.tryGetToken(MySQLParser.IGNORE_SYMBOL, 0); }
    LEAVES_SYMBOL() { return this.tryGetToken(MySQLParser.LEAVES_SYMBOL, 0); }
    preloadList() {
        return this.tryGetRuleContext(0, PreloadListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_preloadTail; }
    // @Override
    enterRule(listener) {
        if (listener.enterPreloadTail) {
            listener.enterPreloadTail(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPreloadTail) {
            listener.exitPreloadTail(this);
        }
    }
}
exports.PreloadTailContext = PreloadTailContext;
class PreloadListContext extends ParserRuleContext_1.ParserRuleContext {
    preloadKeys(i) {
        if (i === undefined) {
            return this.getRuleContexts(PreloadKeysContext);
        }
        else {
            return this.getRuleContext(i, PreloadKeysContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_preloadList; }
    // @Override
    enterRule(listener) {
        if (listener.enterPreloadList) {
            listener.enterPreloadList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPreloadList) {
            listener.exitPreloadList(this);
        }
    }
}
exports.PreloadListContext = PreloadListContext;
class PreloadKeysContext extends ParserRuleContext_1.ParserRuleContext {
    tableRef() {
        return this.getRuleContext(0, TableRefContext);
    }
    cacheKeyList() {
        return this.tryGetRuleContext(0, CacheKeyListContext);
    }
    IGNORE_SYMBOL() { return this.tryGetToken(MySQLParser.IGNORE_SYMBOL, 0); }
    LEAVES_SYMBOL() { return this.tryGetToken(MySQLParser.LEAVES_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_preloadKeys; }
    // @Override
    enterRule(listener) {
        if (listener.enterPreloadKeys) {
            listener.enterPreloadKeys(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPreloadKeys) {
            listener.exitPreloadKeys(this);
        }
    }
}
exports.PreloadKeysContext = PreloadKeysContext;
class AdminPartitionContext extends ParserRuleContext_1.ParserRuleContext {
    PARTITION_SYMBOL() { return this.getToken(MySQLParser.PARTITION_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    allOrPartitionNameList() {
        return this.getRuleContext(0, AllOrPartitionNameListContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_adminPartition; }
    // @Override
    enterRule(listener) {
        if (listener.enterAdminPartition) {
            listener.enterAdminPartition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAdminPartition) {
            listener.exitAdminPartition(this);
        }
    }
}
exports.AdminPartitionContext = AdminPartitionContext;
class ResourceGroupManagementContext extends ParserRuleContext_1.ParserRuleContext {
    createResourceGroup() {
        return this.tryGetRuleContext(0, CreateResourceGroupContext);
    }
    alterResourceGroup() {
        return this.tryGetRuleContext(0, AlterResourceGroupContext);
    }
    setResourceGroup() {
        return this.tryGetRuleContext(0, SetResourceGroupContext);
    }
    dropResourceGroup() {
        return this.tryGetRuleContext(0, DropResourceGroupContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_resourceGroupManagement; }
    // @Override
    enterRule(listener) {
        if (listener.enterResourceGroupManagement) {
            listener.enterResourceGroupManagement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResourceGroupManagement) {
            listener.exitResourceGroupManagement(this);
        }
    }
}
exports.ResourceGroupManagementContext = ResourceGroupManagementContext;
class CreateResourceGroupContext extends ParserRuleContext_1.ParserRuleContext {
    CREATE_SYMBOL() { return this.getToken(MySQLParser.CREATE_SYMBOL, 0); }
    RESOURCE_SYMBOL() { return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
    GROUP_SYMBOL() { return this.getToken(MySQLParser.GROUP_SYMBOL, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    TYPE_SYMBOL() { return this.getToken(MySQLParser.TYPE_SYMBOL, 0); }
    USER_SYMBOL() { return this.tryGetToken(MySQLParser.USER_SYMBOL, 0); }
    SYSTEM_SYMBOL() { return this.tryGetToken(MySQLParser.SYSTEM_SYMBOL, 0); }
    equal() {
        return this.tryGetRuleContext(0, EqualContext);
    }
    resourceGroupVcpuList() {
        return this.tryGetRuleContext(0, ResourceGroupVcpuListContext);
    }
    resourceGroupPriority() {
        return this.tryGetRuleContext(0, ResourceGroupPriorityContext);
    }
    resourceGroupEnableDisable() {
        return this.tryGetRuleContext(0, ResourceGroupEnableDisableContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createResourceGroup; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateResourceGroup) {
            listener.enterCreateResourceGroup(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateResourceGroup) {
            listener.exitCreateResourceGroup(this);
        }
    }
}
exports.CreateResourceGroupContext = CreateResourceGroupContext;
class ResourceGroupVcpuListContext extends ParserRuleContext_1.ParserRuleContext {
    VCPU_SYMBOL() { return this.getToken(MySQLParser.VCPU_SYMBOL, 0); }
    vcpuNumOrRange(i) {
        if (i === undefined) {
            return this.getRuleContexts(VcpuNumOrRangeContext);
        }
        else {
            return this.getRuleContext(i, VcpuNumOrRangeContext);
        }
    }
    equal() {
        return this.tryGetRuleContext(0, EqualContext);
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_resourceGroupVcpuList; }
    // @Override
    enterRule(listener) {
        if (listener.enterResourceGroupVcpuList) {
            listener.enterResourceGroupVcpuList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResourceGroupVcpuList) {
            listener.exitResourceGroupVcpuList(this);
        }
    }
}
exports.ResourceGroupVcpuListContext = ResourceGroupVcpuListContext;
class VcpuNumOrRangeContext extends ParserRuleContext_1.ParserRuleContext {
    INT_NUMBER(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.INT_NUMBER);
        }
        else {
            return this.getToken(MySQLParser.INT_NUMBER, i);
        }
    }
    MINUS_OPERATOR() { return this.tryGetToken(MySQLParser.MINUS_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_vcpuNumOrRange; }
    // @Override
    enterRule(listener) {
        if (listener.enterVcpuNumOrRange) {
            listener.enterVcpuNumOrRange(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVcpuNumOrRange) {
            listener.exitVcpuNumOrRange(this);
        }
    }
}
exports.VcpuNumOrRangeContext = VcpuNumOrRangeContext;
class ResourceGroupPriorityContext extends ParserRuleContext_1.ParserRuleContext {
    THREAD_PRIORITY_SYMBOL() { return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
    INT_NUMBER() { return this.getToken(MySQLParser.INT_NUMBER, 0); }
    equal() {
        return this.tryGetRuleContext(0, EqualContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_resourceGroupPriority; }
    // @Override
    enterRule(listener) {
        if (listener.enterResourceGroupPriority) {
            listener.enterResourceGroupPriority(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResourceGroupPriority) {
            listener.exitResourceGroupPriority(this);
        }
    }
}
exports.ResourceGroupPriorityContext = ResourceGroupPriorityContext;
class ResourceGroupEnableDisableContext extends ParserRuleContext_1.ParserRuleContext {
    ENABLE_SYMBOL() { return this.tryGetToken(MySQLParser.ENABLE_SYMBOL, 0); }
    DISABLE_SYMBOL() { return this.tryGetToken(MySQLParser.DISABLE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_resourceGroupEnableDisable; }
    // @Override
    enterRule(listener) {
        if (listener.enterResourceGroupEnableDisable) {
            listener.enterResourceGroupEnableDisable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResourceGroupEnableDisable) {
            listener.exitResourceGroupEnableDisable(this);
        }
    }
}
exports.ResourceGroupEnableDisableContext = ResourceGroupEnableDisableContext;
class AlterResourceGroupContext extends ParserRuleContext_1.ParserRuleContext {
    ALTER_SYMBOL() { return this.getToken(MySQLParser.ALTER_SYMBOL, 0); }
    RESOURCE_SYMBOL() { return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
    GROUP_SYMBOL() { return this.getToken(MySQLParser.GROUP_SYMBOL, 0); }
    resourceGroupRef() {
        return this.getRuleContext(0, ResourceGroupRefContext);
    }
    resourceGroupVcpuList() {
        return this.tryGetRuleContext(0, ResourceGroupVcpuListContext);
    }
    resourceGroupPriority() {
        return this.tryGetRuleContext(0, ResourceGroupPriorityContext);
    }
    resourceGroupEnableDisable() {
        return this.tryGetRuleContext(0, ResourceGroupEnableDisableContext);
    }
    FORCE_SYMBOL() { return this.tryGetToken(MySQLParser.FORCE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterResourceGroup; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterResourceGroup) {
            listener.enterAlterResourceGroup(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterResourceGroup) {
            listener.exitAlterResourceGroup(this);
        }
    }
}
exports.AlterResourceGroupContext = AlterResourceGroupContext;
class SetResourceGroupContext extends ParserRuleContext_1.ParserRuleContext {
    SET_SYMBOL() { return this.getToken(MySQLParser.SET_SYMBOL, 0); }
    RESOURCE_SYMBOL() { return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
    GROUP_SYMBOL() { return this.getToken(MySQLParser.GROUP_SYMBOL, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    FOR_SYMBOL() { return this.tryGetToken(MySQLParser.FOR_SYMBOL, 0); }
    threadIdList() {
        return this.tryGetRuleContext(0, ThreadIdListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_setResourceGroup; }
    // @Override
    enterRule(listener) {
        if (listener.enterSetResourceGroup) {
            listener.enterSetResourceGroup(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSetResourceGroup) {
            listener.exitSetResourceGroup(this);
        }
    }
}
exports.SetResourceGroupContext = SetResourceGroupContext;
class ThreadIdListContext extends ParserRuleContext_1.ParserRuleContext {
    real_ulong_number(i) {
        if (i === undefined) {
            return this.getRuleContexts(Real_ulong_numberContext);
        }
        else {
            return this.getRuleContext(i, Real_ulong_numberContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_threadIdList; }
    // @Override
    enterRule(listener) {
        if (listener.enterThreadIdList) {
            listener.enterThreadIdList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitThreadIdList) {
            listener.exitThreadIdList(this);
        }
    }
}
exports.ThreadIdListContext = ThreadIdListContext;
class DropResourceGroupContext extends ParserRuleContext_1.ParserRuleContext {
    DROP_SYMBOL() { return this.getToken(MySQLParser.DROP_SYMBOL, 0); }
    RESOURCE_SYMBOL() { return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
    GROUP_SYMBOL() { return this.getToken(MySQLParser.GROUP_SYMBOL, 0); }
    resourceGroupRef() {
        return this.getRuleContext(0, ResourceGroupRefContext);
    }
    FORCE_SYMBOL() { return this.tryGetToken(MySQLParser.FORCE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dropResourceGroup; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropResourceGroup) {
            listener.enterDropResourceGroup(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropResourceGroup) {
            listener.exitDropResourceGroup(this);
        }
    }
}
exports.DropResourceGroupContext = DropResourceGroupContext;
class UtilityStatementContext extends ParserRuleContext_1.ParserRuleContext {
    describeCommand() {
        return this.tryGetRuleContext(0, DescribeCommandContext);
    }
    explainCommand() {
        return this.tryGetRuleContext(0, ExplainCommandContext);
    }
    helpCommand() {
        return this.tryGetRuleContext(0, HelpCommandContext);
    }
    useCommand() {
        return this.tryGetRuleContext(0, UseCommandContext);
    }
    restartServer() {
        return this.tryGetRuleContext(0, RestartServerContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_utilityStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterUtilityStatement) {
            listener.enterUtilityStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUtilityStatement) {
            listener.exitUtilityStatement(this);
        }
    }
}
exports.UtilityStatementContext = UtilityStatementContext;
class DescribeCommandContext extends ParserRuleContext_1.ParserRuleContext {
    tableRef() {
        return this.getRuleContext(0, TableRefContext);
    }
    EXPLAIN_SYMBOL() { return this.tryGetToken(MySQLParser.EXPLAIN_SYMBOL, 0); }
    DESCRIBE_SYMBOL() { return this.tryGetToken(MySQLParser.DESCRIBE_SYMBOL, 0); }
    DESC_SYMBOL() { return this.tryGetToken(MySQLParser.DESC_SYMBOL, 0); }
    textString() {
        return this.tryGetRuleContext(0, TextStringContext);
    }
    columnRef() {
        return this.tryGetRuleContext(0, ColumnRefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_describeCommand; }
    // @Override
    enterRule(listener) {
        if (listener.enterDescribeCommand) {
            listener.enterDescribeCommand(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDescribeCommand) {
            listener.exitDescribeCommand(this);
        }
    }
}
exports.DescribeCommandContext = DescribeCommandContext;
class ExplainCommandContext extends ParserRuleContext_1.ParserRuleContext {
    explainableStatement() {
        return this.getRuleContext(0, ExplainableStatementContext);
    }
    EXPLAIN_SYMBOL() { return this.tryGetToken(MySQLParser.EXPLAIN_SYMBOL, 0); }
    DESCRIBE_SYMBOL() { return this.tryGetToken(MySQLParser.DESCRIBE_SYMBOL, 0); }
    DESC_SYMBOL() { return this.tryGetToken(MySQLParser.DESC_SYMBOL, 0); }
    EXTENDED_SYMBOL() { return this.tryGetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
    PARTITIONS_SYMBOL() { return this.tryGetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
    FORMAT_SYMBOL() { return this.tryGetToken(MySQLParser.FORMAT_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    textOrIdentifier() {
        return this.tryGetRuleContext(0, TextOrIdentifierContext);
    }
    ANALYZE_SYMBOL() { return this.tryGetToken(MySQLParser.ANALYZE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_explainCommand; }
    // @Override
    enterRule(listener) {
        if (listener.enterExplainCommand) {
            listener.enterExplainCommand(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExplainCommand) {
            listener.exitExplainCommand(this);
        }
    }
}
exports.ExplainCommandContext = ExplainCommandContext;
class ExplainableStatementContext extends ParserRuleContext_1.ParserRuleContext {
    selectStatement() {
        return this.tryGetRuleContext(0, SelectStatementContext);
    }
    deleteStatement() {
        return this.tryGetRuleContext(0, DeleteStatementContext);
    }
    insertStatement() {
        return this.tryGetRuleContext(0, InsertStatementContext);
    }
    replaceStatement() {
        return this.tryGetRuleContext(0, ReplaceStatementContext);
    }
    updateStatement() {
        return this.tryGetRuleContext(0, UpdateStatementContext);
    }
    FOR_SYMBOL() { return this.tryGetToken(MySQLParser.FOR_SYMBOL, 0); }
    CONNECTION_SYMBOL() { return this.tryGetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
    real_ulong_number() {
        return this.tryGetRuleContext(0, Real_ulong_numberContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_explainableStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterExplainableStatement) {
            listener.enterExplainableStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExplainableStatement) {
            listener.exitExplainableStatement(this);
        }
    }
}
exports.ExplainableStatementContext = ExplainableStatementContext;
class HelpCommandContext extends ParserRuleContext_1.ParserRuleContext {
    HELP_SYMBOL() { return this.getToken(MySQLParser.HELP_SYMBOL, 0); }
    textOrIdentifier() {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_helpCommand; }
    // @Override
    enterRule(listener) {
        if (listener.enterHelpCommand) {
            listener.enterHelpCommand(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHelpCommand) {
            listener.exitHelpCommand(this);
        }
    }
}
exports.HelpCommandContext = HelpCommandContext;
class UseCommandContext extends ParserRuleContext_1.ParserRuleContext {
    USE_SYMBOL() { return this.getToken(MySQLParser.USE_SYMBOL, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_useCommand; }
    // @Override
    enterRule(listener) {
        if (listener.enterUseCommand) {
            listener.enterUseCommand(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUseCommand) {
            listener.exitUseCommand(this);
        }
    }
}
exports.UseCommandContext = UseCommandContext;
class RestartServerContext extends ParserRuleContext_1.ParserRuleContext {
    RESTART_SYMBOL() { return this.getToken(MySQLParser.RESTART_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_restartServer; }
    // @Override
    enterRule(listener) {
        if (listener.enterRestartServer) {
            listener.enterRestartServer(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRestartServer) {
            listener.exitRestartServer(this);
        }
    }
}
exports.RestartServerContext = RestartServerContext;
class ExprContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_expr; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
exports.ExprContext = ExprContext;
class ExprIsContext extends ExprContext {
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    boolPri() {
        return this.getRuleContext(0, BoolPriContext);
    }
    IS_SYMBOL() { return this.tryGetToken(MySQLParser.IS_SYMBOL, 0); }
    TRUE_SYMBOL() { return this.tryGetToken(MySQLParser.TRUE_SYMBOL, 0); }
    FALSE_SYMBOL() { return this.tryGetToken(MySQLParser.FALSE_SYMBOL, 0); }
    UNKNOWN_SYMBOL() { return this.tryGetToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
    notRule() {
        return this.tryGetRuleContext(0, NotRuleContext);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterExprIs) {
            listener.enterExprIs(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExprIs) {
            listener.exitExprIs(this);
        }
    }
}
exports.ExprIsContext = ExprIsContext;
class ExprNotContext extends ExprContext {
    NOT_SYMBOL() { return this.getToken(MySQLParser.NOT_SYMBOL, 0); }
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterExprNot) {
            listener.enterExprNot(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExprNot) {
            listener.exitExprNot(this);
        }
    }
}
exports.ExprNotContext = ExprNotContext;
class ExprAndContext extends ExprContext {
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    expr(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }
        else {
            return this.getRuleContext(i, ExprContext);
        }
    }
    AND_SYMBOL() { return this.tryGetToken(MySQLParser.AND_SYMBOL, 0); }
    LOGICAL_AND_OPERATOR() { return this.tryGetToken(MySQLParser.LOGICAL_AND_OPERATOR, 0); }
    // @Override
    enterRule(listener) {
        if (listener.enterExprAnd) {
            listener.enterExprAnd(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExprAnd) {
            listener.exitExprAnd(this);
        }
    }
}
exports.ExprAndContext = ExprAndContext;
class ExprXorContext extends ExprContext {
    expr(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }
        else {
            return this.getRuleContext(i, ExprContext);
        }
    }
    XOR_SYMBOL() { return this.getToken(MySQLParser.XOR_SYMBOL, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterExprXor) {
            listener.enterExprXor(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExprXor) {
            listener.exitExprXor(this);
        }
    }
}
exports.ExprXorContext = ExprXorContext;
class ExprOrContext extends ExprContext {
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    expr(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }
        else {
            return this.getRuleContext(i, ExprContext);
        }
    }
    OR_SYMBOL() { return this.tryGetToken(MySQLParser.OR_SYMBOL, 0); }
    LOGICAL_OR_OPERATOR() { return this.tryGetToken(MySQLParser.LOGICAL_OR_OPERATOR, 0); }
    // @Override
    enterRule(listener) {
        if (listener.enterExprOr) {
            listener.enterExprOr(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExprOr) {
            listener.exitExprOr(this);
        }
    }
}
exports.ExprOrContext = ExprOrContext;
class BoolPriContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_boolPri; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
exports.BoolPriContext = BoolPriContext;
class PrimaryExprPredicateContext extends BoolPriContext {
    predicate() {
        return this.getRuleContext(0, PredicateContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPrimaryExprPredicate) {
            listener.enterPrimaryExprPredicate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPrimaryExprPredicate) {
            listener.exitPrimaryExprPredicate(this);
        }
    }
}
exports.PrimaryExprPredicateContext = PrimaryExprPredicateContext;
class PrimaryExprIsNullContext extends BoolPriContext {
    boolPri() {
        return this.getRuleContext(0, BoolPriContext);
    }
    IS_SYMBOL() { return this.getToken(MySQLParser.IS_SYMBOL, 0); }
    NULL_SYMBOL() { return this.getToken(MySQLParser.NULL_SYMBOL, 0); }
    notRule() {
        return this.tryGetRuleContext(0, NotRuleContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPrimaryExprIsNull) {
            listener.enterPrimaryExprIsNull(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPrimaryExprIsNull) {
            listener.exitPrimaryExprIsNull(this);
        }
    }
}
exports.PrimaryExprIsNullContext = PrimaryExprIsNullContext;
class PrimaryExprCompareContext extends BoolPriContext {
    boolPri() {
        return this.getRuleContext(0, BoolPriContext);
    }
    compOp() {
        return this.getRuleContext(0, CompOpContext);
    }
    predicate() {
        return this.getRuleContext(0, PredicateContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPrimaryExprCompare) {
            listener.enterPrimaryExprCompare(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPrimaryExprCompare) {
            listener.exitPrimaryExprCompare(this);
        }
    }
}
exports.PrimaryExprCompareContext = PrimaryExprCompareContext;
class PrimaryExprAllAnyContext extends BoolPriContext {
    boolPri() {
        return this.getRuleContext(0, BoolPriContext);
    }
    compOp() {
        return this.getRuleContext(0, CompOpContext);
    }
    subquery() {
        return this.getRuleContext(0, SubqueryContext);
    }
    ALL_SYMBOL() { return this.tryGetToken(MySQLParser.ALL_SYMBOL, 0); }
    ANY_SYMBOL() { return this.tryGetToken(MySQLParser.ANY_SYMBOL, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPrimaryExprAllAny) {
            listener.enterPrimaryExprAllAny(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPrimaryExprAllAny) {
            listener.exitPrimaryExprAllAny(this);
        }
    }
}
exports.PrimaryExprAllAnyContext = PrimaryExprAllAnyContext;
class CompOpContext extends ParserRuleContext_1.ParserRuleContext {
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    NULL_SAFE_EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0); }
    GREATER_OR_EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
    GREATER_THAN_OPERATOR() { return this.tryGetToken(MySQLParser.GREATER_THAN_OPERATOR, 0); }
    LESS_OR_EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
    LESS_THAN_OPERATOR() { return this.tryGetToken(MySQLParser.LESS_THAN_OPERATOR, 0); }
    NOT_EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.NOT_EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_compOp; }
    // @Override
    enterRule(listener) {
        if (listener.enterCompOp) {
            listener.enterCompOp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCompOp) {
            listener.exitCompOp(this);
        }
    }
}
exports.CompOpContext = CompOpContext;
class PredicateContext extends ParserRuleContext_1.ParserRuleContext {
    bitExpr(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitExprContext);
        }
        else {
            return this.getRuleContext(i, BitExprContext);
        }
    }
    predicateOperations() {
        return this.tryGetRuleContext(0, PredicateOperationsContext);
    }
    MEMBER_SYMBOL() { return this.tryGetToken(MySQLParser.MEMBER_SYMBOL, 0); }
    simpleExprWithParentheses() {
        return this.tryGetRuleContext(0, SimpleExprWithParenthesesContext);
    }
    SOUNDS_SYMBOL() { return this.tryGetToken(MySQLParser.SOUNDS_SYMBOL, 0); }
    LIKE_SYMBOL() { return this.tryGetToken(MySQLParser.LIKE_SYMBOL, 0); }
    notRule() {
        return this.tryGetRuleContext(0, NotRuleContext);
    }
    OF_SYMBOL() { return this.tryGetToken(MySQLParser.OF_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_predicate; }
    // @Override
    enterRule(listener) {
        if (listener.enterPredicate) {
            listener.enterPredicate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPredicate) {
            listener.exitPredicate(this);
        }
    }
}
exports.PredicateContext = PredicateContext;
class PredicateOperationsContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_predicateOperations; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
exports.PredicateOperationsContext = PredicateOperationsContext;
class PredicateExprInContext extends PredicateOperationsContext {
    IN_SYMBOL() { return this.getToken(MySQLParser.IN_SYMBOL, 0); }
    subquery() {
        return this.tryGetRuleContext(0, SubqueryContext);
    }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    exprList() {
        return this.tryGetRuleContext(0, ExprListContext);
    }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPredicateExprIn) {
            listener.enterPredicateExprIn(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPredicateExprIn) {
            listener.exitPredicateExprIn(this);
        }
    }
}
exports.PredicateExprInContext = PredicateExprInContext;
class PredicateExprBetweenContext extends PredicateOperationsContext {
    BETWEEN_SYMBOL() { return this.getToken(MySQLParser.BETWEEN_SYMBOL, 0); }
    bitExpr() {
        return this.getRuleContext(0, BitExprContext);
    }
    AND_SYMBOL() { return this.getToken(MySQLParser.AND_SYMBOL, 0); }
    predicate() {
        return this.getRuleContext(0, PredicateContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPredicateExprBetween) {
            listener.enterPredicateExprBetween(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPredicateExprBetween) {
            listener.exitPredicateExprBetween(this);
        }
    }
}
exports.PredicateExprBetweenContext = PredicateExprBetweenContext;
class PredicateExprLikeContext extends PredicateOperationsContext {
    LIKE_SYMBOL() { return this.getToken(MySQLParser.LIKE_SYMBOL, 0); }
    simpleExpr(i) {
        if (i === undefined) {
            return this.getRuleContexts(SimpleExprContext);
        }
        else {
            return this.getRuleContext(i, SimpleExprContext);
        }
    }
    ESCAPE_SYMBOL() { return this.tryGetToken(MySQLParser.ESCAPE_SYMBOL, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPredicateExprLike) {
            listener.enterPredicateExprLike(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPredicateExprLike) {
            listener.exitPredicateExprLike(this);
        }
    }
}
exports.PredicateExprLikeContext = PredicateExprLikeContext;
class PredicateExprRegexContext extends PredicateOperationsContext {
    REGEXP_SYMBOL() { return this.getToken(MySQLParser.REGEXP_SYMBOL, 0); }
    bitExpr() {
        return this.getRuleContext(0, BitExprContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPredicateExprRegex) {
            listener.enterPredicateExprRegex(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPredicateExprRegex) {
            listener.exitPredicateExprRegex(this);
        }
    }
}
exports.PredicateExprRegexContext = PredicateExprRegexContext;
class BitExprContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    simpleExpr() {
        return this.tryGetRuleContext(0, SimpleExprContext);
    }
    bitExpr(i) {
        if (i === undefined) {
            return this.getRuleContexts(BitExprContext);
        }
        else {
            return this.getRuleContext(i, BitExprContext);
        }
    }
    BITWISE_XOR_OPERATOR() { return this.tryGetToken(MySQLParser.BITWISE_XOR_OPERATOR, 0); }
    MULT_OPERATOR() { return this.tryGetToken(MySQLParser.MULT_OPERATOR, 0); }
    DIV_OPERATOR() { return this.tryGetToken(MySQLParser.DIV_OPERATOR, 0); }
    MOD_OPERATOR() { return this.tryGetToken(MySQLParser.MOD_OPERATOR, 0); }
    DIV_SYMBOL() { return this.tryGetToken(MySQLParser.DIV_SYMBOL, 0); }
    MOD_SYMBOL() { return this.tryGetToken(MySQLParser.MOD_SYMBOL, 0); }
    PLUS_OPERATOR() { return this.tryGetToken(MySQLParser.PLUS_OPERATOR, 0); }
    MINUS_OPERATOR() { return this.tryGetToken(MySQLParser.MINUS_OPERATOR, 0); }
    INTERVAL_SYMBOL() { return this.tryGetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
    expr() {
        return this.tryGetRuleContext(0, ExprContext);
    }
    interval() {
        return this.tryGetRuleContext(0, IntervalContext);
    }
    SHIFT_LEFT_OPERATOR() { return this.tryGetToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0); }
    SHIFT_RIGHT_OPERATOR() { return this.tryGetToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0); }
    BITWISE_AND_OPERATOR() { return this.tryGetToken(MySQLParser.BITWISE_AND_OPERATOR, 0); }
    BITWISE_OR_OPERATOR() { return this.tryGetToken(MySQLParser.BITWISE_OR_OPERATOR, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_bitExpr; }
    // @Override
    enterRule(listener) {
        if (listener.enterBitExpr) {
            listener.enterBitExpr(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitExpr) {
            listener.exitBitExpr(this);
        }
    }
}
exports.BitExprContext = BitExprContext;
class SimpleExprContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_simpleExpr; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
exports.SimpleExprContext = SimpleExprContext;
class SimpleExprVariableContext extends SimpleExprContext {
    variable() {
        return this.getRuleContext(0, VariableContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprVariable) {
            listener.enterSimpleExprVariable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprVariable) {
            listener.exitSimpleExprVariable(this);
        }
    }
}
exports.SimpleExprVariableContext = SimpleExprVariableContext;
class SimpleExprColumnRefContext extends SimpleExprContext {
    columnRef() {
        return this.getRuleContext(0, ColumnRefContext);
    }
    jsonOperator() {
        return this.tryGetRuleContext(0, JsonOperatorContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprColumnRef) {
            listener.enterSimpleExprColumnRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprColumnRef) {
            listener.exitSimpleExprColumnRef(this);
        }
    }
}
exports.SimpleExprColumnRefContext = SimpleExprColumnRefContext;
class SimpleExprRuntimeFunctionContext extends SimpleExprContext {
    runtimeFunctionCall() {
        return this.getRuleContext(0, RuntimeFunctionCallContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprRuntimeFunction) {
            listener.enterSimpleExprRuntimeFunction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprRuntimeFunction) {
            listener.exitSimpleExprRuntimeFunction(this);
        }
    }
}
exports.SimpleExprRuntimeFunctionContext = SimpleExprRuntimeFunctionContext;
class SimpleExprFunctionContext extends SimpleExprContext {
    functionCall() {
        return this.getRuleContext(0, FunctionCallContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprFunction) {
            listener.enterSimpleExprFunction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprFunction) {
            listener.exitSimpleExprFunction(this);
        }
    }
}
exports.SimpleExprFunctionContext = SimpleExprFunctionContext;
class SimpleExprCollateContext extends SimpleExprContext {
    simpleExpr() {
        return this.getRuleContext(0, SimpleExprContext);
    }
    COLLATE_SYMBOL() { return this.getToken(MySQLParser.COLLATE_SYMBOL, 0); }
    textOrIdentifier() {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprCollate) {
            listener.enterSimpleExprCollate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprCollate) {
            listener.exitSimpleExprCollate(this);
        }
    }
}
exports.SimpleExprCollateContext = SimpleExprCollateContext;
class SimpleExprLiteralContext extends SimpleExprContext {
    literal() {
        return this.getRuleContext(0, LiteralContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprLiteral) {
            listener.enterSimpleExprLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprLiteral) {
            listener.exitSimpleExprLiteral(this);
        }
    }
}
exports.SimpleExprLiteralContext = SimpleExprLiteralContext;
class SimpleExprParamMarkerContext extends SimpleExprContext {
    PARAM_MARKER() { return this.getToken(MySQLParser.PARAM_MARKER, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprParamMarker) {
            listener.enterSimpleExprParamMarker(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprParamMarker) {
            listener.exitSimpleExprParamMarker(this);
        }
    }
}
exports.SimpleExprParamMarkerContext = SimpleExprParamMarkerContext;
class SimpleExprSumContext extends SimpleExprContext {
    sumExpr() {
        return this.getRuleContext(0, SumExprContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprSum) {
            listener.enterSimpleExprSum(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprSum) {
            listener.exitSimpleExprSum(this);
        }
    }
}
exports.SimpleExprSumContext = SimpleExprSumContext;
class SimpleExprGroupingOperationContext extends SimpleExprContext {
    groupingOperation() {
        return this.getRuleContext(0, GroupingOperationContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprGroupingOperation) {
            listener.enterSimpleExprGroupingOperation(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprGroupingOperation) {
            listener.exitSimpleExprGroupingOperation(this);
        }
    }
}
exports.SimpleExprGroupingOperationContext = SimpleExprGroupingOperationContext;
class SimpleExprWindowingFunctionContext extends SimpleExprContext {
    windowFunctionCall() {
        return this.getRuleContext(0, WindowFunctionCallContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprWindowingFunction) {
            listener.enterSimpleExprWindowingFunction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprWindowingFunction) {
            listener.exitSimpleExprWindowingFunction(this);
        }
    }
}
exports.SimpleExprWindowingFunctionContext = SimpleExprWindowingFunctionContext;
class SimpleExprConcatContext extends SimpleExprContext {
    simpleExpr(i) {
        if (i === undefined) {
            return this.getRuleContexts(SimpleExprContext);
        }
        else {
            return this.getRuleContext(i, SimpleExprContext);
        }
    }
    CONCAT_PIPES_SYMBOL() { return this.getToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprConcat) {
            listener.enterSimpleExprConcat(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprConcat) {
            listener.exitSimpleExprConcat(this);
        }
    }
}
exports.SimpleExprConcatContext = SimpleExprConcatContext;
class SimpleExprUnaryContext extends SimpleExprContext {
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    simpleExpr() {
        return this.getRuleContext(0, SimpleExprContext);
    }
    PLUS_OPERATOR() { return this.tryGetToken(MySQLParser.PLUS_OPERATOR, 0); }
    MINUS_OPERATOR() { return this.tryGetToken(MySQLParser.MINUS_OPERATOR, 0); }
    BITWISE_NOT_OPERATOR() { return this.tryGetToken(MySQLParser.BITWISE_NOT_OPERATOR, 0); }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprUnary) {
            listener.enterSimpleExprUnary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprUnary) {
            listener.exitSimpleExprUnary(this);
        }
    }
}
exports.SimpleExprUnaryContext = SimpleExprUnaryContext;
class SimpleExprNotContext extends SimpleExprContext {
    not2Rule() {
        return this.getRuleContext(0, Not2RuleContext);
    }
    simpleExpr() {
        return this.getRuleContext(0, SimpleExprContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprNot) {
            listener.enterSimpleExprNot(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprNot) {
            listener.exitSimpleExprNot(this);
        }
    }
}
exports.SimpleExprNotContext = SimpleExprNotContext;
class SimpleExprListContext extends SimpleExprContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    exprList() {
        return this.getRuleContext(0, ExprListContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    ROW_SYMBOL() { return this.tryGetToken(MySQLParser.ROW_SYMBOL, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprList) {
            listener.enterSimpleExprList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprList) {
            listener.exitSimpleExprList(this);
        }
    }
}
exports.SimpleExprListContext = SimpleExprListContext;
class SimpleExprSubQueryContext extends SimpleExprContext {
    subquery() {
        return this.getRuleContext(0, SubqueryContext);
    }
    EXISTS_SYMBOL() { return this.tryGetToken(MySQLParser.EXISTS_SYMBOL, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprSubQuery) {
            listener.enterSimpleExprSubQuery(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprSubQuery) {
            listener.exitSimpleExprSubQuery(this);
        }
    }
}
exports.SimpleExprSubQueryContext = SimpleExprSubQueryContext;
class SimpleExprOdbcContext extends SimpleExprContext {
    OPEN_CURLY_SYMBOL() { return this.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    CLOSE_CURLY_SYMBOL() { return this.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprOdbc) {
            listener.enterSimpleExprOdbc(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprOdbc) {
            listener.exitSimpleExprOdbc(this);
        }
    }
}
exports.SimpleExprOdbcContext = SimpleExprOdbcContext;
class SimpleExprMatchContext extends SimpleExprContext {
    MATCH_SYMBOL() { return this.getToken(MySQLParser.MATCH_SYMBOL, 0); }
    identListArg() {
        return this.getRuleContext(0, IdentListArgContext);
    }
    AGAINST_SYMBOL() { return this.getToken(MySQLParser.AGAINST_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    bitExpr() {
        return this.getRuleContext(0, BitExprContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    fulltextOptions() {
        return this.tryGetRuleContext(0, FulltextOptionsContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprMatch) {
            listener.enterSimpleExprMatch(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprMatch) {
            listener.exitSimpleExprMatch(this);
        }
    }
}
exports.SimpleExprMatchContext = SimpleExprMatchContext;
class SimpleExprBinaryContext extends SimpleExprContext {
    BINARY_SYMBOL() { return this.getToken(MySQLParser.BINARY_SYMBOL, 0); }
    simpleExpr() {
        return this.getRuleContext(0, SimpleExprContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprBinary) {
            listener.enterSimpleExprBinary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprBinary) {
            listener.exitSimpleExprBinary(this);
        }
    }
}
exports.SimpleExprBinaryContext = SimpleExprBinaryContext;
class SimpleExprCastContext extends SimpleExprContext {
    CAST_SYMBOL() { return this.getToken(MySQLParser.CAST_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    AS_SYMBOL() { return this.getToken(MySQLParser.AS_SYMBOL, 0); }
    castType() {
        return this.getRuleContext(0, CastTypeContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    arrayCast() {
        return this.tryGetRuleContext(0, ArrayCastContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprCast) {
            listener.enterSimpleExprCast(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprCast) {
            listener.exitSimpleExprCast(this);
        }
    }
}
exports.SimpleExprCastContext = SimpleExprCastContext;
class SimpleExprCaseContext extends SimpleExprContext {
    CASE_SYMBOL() { return this.getToken(MySQLParser.CASE_SYMBOL, 0); }
    END_SYMBOL() { return this.getToken(MySQLParser.END_SYMBOL, 0); }
    expr() {
        return this.tryGetRuleContext(0, ExprContext);
    }
    whenExpression(i) {
        if (i === undefined) {
            return this.getRuleContexts(WhenExpressionContext);
        }
        else {
            return this.getRuleContext(i, WhenExpressionContext);
        }
    }
    thenExpression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ThenExpressionContext);
        }
        else {
            return this.getRuleContext(i, ThenExpressionContext);
        }
    }
    elseExpression() {
        return this.tryGetRuleContext(0, ElseExpressionContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprCase) {
            listener.enterSimpleExprCase(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprCase) {
            listener.exitSimpleExprCase(this);
        }
    }
}
exports.SimpleExprCaseContext = SimpleExprCaseContext;
class SimpleExprConvertContext extends SimpleExprContext {
    CONVERT_SYMBOL() { return this.getToken(MySQLParser.CONVERT_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    COMMA_SYMBOL() { return this.getToken(MySQLParser.COMMA_SYMBOL, 0); }
    castType() {
        return this.getRuleContext(0, CastTypeContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprConvert) {
            listener.enterSimpleExprConvert(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprConvert) {
            listener.exitSimpleExprConvert(this);
        }
    }
}
exports.SimpleExprConvertContext = SimpleExprConvertContext;
class SimpleExprConvertUsingContext extends SimpleExprContext {
    CONVERT_SYMBOL() { return this.getToken(MySQLParser.CONVERT_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    USING_SYMBOL() { return this.getToken(MySQLParser.USING_SYMBOL, 0); }
    charsetName() {
        return this.getRuleContext(0, CharsetNameContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprConvertUsing) {
            listener.enterSimpleExprConvertUsing(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprConvertUsing) {
            listener.exitSimpleExprConvertUsing(this);
        }
    }
}
exports.SimpleExprConvertUsingContext = SimpleExprConvertUsingContext;
class SimpleExprDefaultContext extends SimpleExprContext {
    DEFAULT_SYMBOL() { return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    simpleIdentifier() {
        return this.getRuleContext(0, SimpleIdentifierContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprDefault) {
            listener.enterSimpleExprDefault(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprDefault) {
            listener.exitSimpleExprDefault(this);
        }
    }
}
exports.SimpleExprDefaultContext = SimpleExprDefaultContext;
class SimpleExprValuesContext extends SimpleExprContext {
    VALUES_SYMBOL() { return this.getToken(MySQLParser.VALUES_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    simpleIdentifier() {
        return this.getRuleContext(0, SimpleIdentifierContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprValues) {
            listener.enterSimpleExprValues(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprValues) {
            listener.exitSimpleExprValues(this);
        }
    }
}
exports.SimpleExprValuesContext = SimpleExprValuesContext;
class SimpleExprIntervalContext extends SimpleExprContext {
    INTERVAL_SYMBOL() { return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
    expr(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }
        else {
            return this.getRuleContext(i, ExprContext);
        }
    }
    interval() {
        return this.getRuleContext(0, IntervalContext);
    }
    PLUS_OPERATOR() { return this.getToken(MySQLParser.PLUS_OPERATOR, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprInterval) {
            listener.enterSimpleExprInterval(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprInterval) {
            listener.exitSimpleExprInterval(this);
        }
    }
}
exports.SimpleExprIntervalContext = SimpleExprIntervalContext;
class ArrayCastContext extends ParserRuleContext_1.ParserRuleContext {
    ARRAY_SYMBOL() { return this.getToken(MySQLParser.ARRAY_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_arrayCast; }
    // @Override
    enterRule(listener) {
        if (listener.enterArrayCast) {
            listener.enterArrayCast(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArrayCast) {
            listener.exitArrayCast(this);
        }
    }
}
exports.ArrayCastContext = ArrayCastContext;
class JsonOperatorContext extends ParserRuleContext_1.ParserRuleContext {
    JSON_SEPARATOR_SYMBOL() { return this.tryGetToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0); }
    textStringLiteral() {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    JSON_UNQUOTED_SEPARATOR_SYMBOL() { return this.tryGetToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_jsonOperator; }
    // @Override
    enterRule(listener) {
        if (listener.enterJsonOperator) {
            listener.enterJsonOperator(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitJsonOperator) {
            listener.exitJsonOperator(this);
        }
    }
}
exports.JsonOperatorContext = JsonOperatorContext;
class SumExprContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    inSumExpr() {
        return this.tryGetRuleContext(0, InSumExprContext);
    }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    AVG_SYMBOL() { return this.tryGetToken(MySQLParser.AVG_SYMBOL, 0); }
    DISTINCT_SYMBOL() { return this.tryGetToken(MySQLParser.DISTINCT_SYMBOL, 0); }
    windowingClause() {
        return this.tryGetRuleContext(0, WindowingClauseContext);
    }
    BIT_AND_SYMBOL() { return this.tryGetToken(MySQLParser.BIT_AND_SYMBOL, 0); }
    BIT_OR_SYMBOL() { return this.tryGetToken(MySQLParser.BIT_OR_SYMBOL, 0); }
    BIT_XOR_SYMBOL() { return this.tryGetToken(MySQLParser.BIT_XOR_SYMBOL, 0); }
    jsonFunction() {
        return this.tryGetRuleContext(0, JsonFunctionContext);
    }
    MULT_OPERATOR() { return this.tryGetToken(MySQLParser.MULT_OPERATOR, 0); }
    COUNT_SYMBOL() { return this.tryGetToken(MySQLParser.COUNT_SYMBOL, 0); }
    ALL_SYMBOL() { return this.tryGetToken(MySQLParser.ALL_SYMBOL, 0); }
    exprList() {
        return this.tryGetRuleContext(0, ExprListContext);
    }
    MIN_SYMBOL() { return this.tryGetToken(MySQLParser.MIN_SYMBOL, 0); }
    MAX_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_SYMBOL, 0); }
    STD_SYMBOL() { return this.tryGetToken(MySQLParser.STD_SYMBOL, 0); }
    VARIANCE_SYMBOL() { return this.tryGetToken(MySQLParser.VARIANCE_SYMBOL, 0); }
    STDDEV_SAMP_SYMBOL() { return this.tryGetToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0); }
    VAR_SAMP_SYMBOL() { return this.tryGetToken(MySQLParser.VAR_SAMP_SYMBOL, 0); }
    SUM_SYMBOL() { return this.tryGetToken(MySQLParser.SUM_SYMBOL, 0); }
    GROUP_CONCAT_SYMBOL() { return this.tryGetToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0); }
    orderClause() {
        return this.tryGetRuleContext(0, OrderClauseContext);
    }
    SEPARATOR_SYMBOL() { return this.tryGetToken(MySQLParser.SEPARATOR_SYMBOL, 0); }
    textString() {
        return this.tryGetRuleContext(0, TextStringContext);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_sumExpr; }
    // @Override
    enterRule(listener) {
        if (listener.enterSumExpr) {
            listener.enterSumExpr(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSumExpr) {
            listener.exitSumExpr(this);
        }
    }
}
exports.SumExprContext = SumExprContext;
class GroupingOperationContext extends ParserRuleContext_1.ParserRuleContext {
    GROUPING_SYMBOL() { return this.getToken(MySQLParser.GROUPING_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    exprList() {
        return this.getRuleContext(0, ExprListContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_groupingOperation; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroupingOperation) {
            listener.enterGroupingOperation(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroupingOperation) {
            listener.exitGroupingOperation(this);
        }
    }
}
exports.GroupingOperationContext = GroupingOperationContext;
class WindowFunctionCallContext extends ParserRuleContext_1.ParserRuleContext {
    parentheses() {
        return this.tryGetRuleContext(0, ParenthesesContext);
    }
    windowingClause() {
        return this.getRuleContext(0, WindowingClauseContext);
    }
    ROW_NUMBER_SYMBOL() { return this.tryGetToken(MySQLParser.ROW_NUMBER_SYMBOL, 0); }
    RANK_SYMBOL() { return this.tryGetToken(MySQLParser.RANK_SYMBOL, 0); }
    DENSE_RANK_SYMBOL() { return this.tryGetToken(MySQLParser.DENSE_RANK_SYMBOL, 0); }
    CUME_DIST_SYMBOL() { return this.tryGetToken(MySQLParser.CUME_DIST_SYMBOL, 0); }
    PERCENT_RANK_SYMBOL() { return this.tryGetToken(MySQLParser.PERCENT_RANK_SYMBOL, 0); }
    NTILE_SYMBOL() { return this.tryGetToken(MySQLParser.NTILE_SYMBOL, 0); }
    simpleExprWithParentheses() {
        return this.tryGetRuleContext(0, SimpleExprWithParenthesesContext);
    }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    expr() {
        return this.tryGetRuleContext(0, ExprContext);
    }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    LEAD_SYMBOL() { return this.tryGetToken(MySQLParser.LEAD_SYMBOL, 0); }
    LAG_SYMBOL() { return this.tryGetToken(MySQLParser.LAG_SYMBOL, 0); }
    leadLagInfo() {
        return this.tryGetRuleContext(0, LeadLagInfoContext);
    }
    nullTreatment() {
        return this.tryGetRuleContext(0, NullTreatmentContext);
    }
    exprWithParentheses() {
        return this.tryGetRuleContext(0, ExprWithParenthesesContext);
    }
    FIRST_VALUE_SYMBOL() { return this.tryGetToken(MySQLParser.FIRST_VALUE_SYMBOL, 0); }
    LAST_VALUE_SYMBOL() { return this.tryGetToken(MySQLParser.LAST_VALUE_SYMBOL, 0); }
    NTH_VALUE_SYMBOL() { return this.tryGetToken(MySQLParser.NTH_VALUE_SYMBOL, 0); }
    COMMA_SYMBOL() { return this.tryGetToken(MySQLParser.COMMA_SYMBOL, 0); }
    simpleExpr() {
        return this.tryGetRuleContext(0, SimpleExprContext);
    }
    FROM_SYMBOL() { return this.tryGetToken(MySQLParser.FROM_SYMBOL, 0); }
    FIRST_SYMBOL() { return this.tryGetToken(MySQLParser.FIRST_SYMBOL, 0); }
    LAST_SYMBOL() { return this.tryGetToken(MySQLParser.LAST_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_windowFunctionCall; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowFunctionCall) {
            listener.enterWindowFunctionCall(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowFunctionCall) {
            listener.exitWindowFunctionCall(this);
        }
    }
}
exports.WindowFunctionCallContext = WindowFunctionCallContext;
class WindowingClauseContext extends ParserRuleContext_1.ParserRuleContext {
    OVER_SYMBOL() { return this.getToken(MySQLParser.OVER_SYMBOL, 0); }
    windowName() {
        return this.tryGetRuleContext(0, WindowNameContext);
    }
    windowSpec() {
        return this.tryGetRuleContext(0, WindowSpecContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_windowingClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowingClause) {
            listener.enterWindowingClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowingClause) {
            listener.exitWindowingClause(this);
        }
    }
}
exports.WindowingClauseContext = WindowingClauseContext;
class LeadLagInfoContext extends ParserRuleContext_1.ParserRuleContext {
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    ulonglong_number() {
        return this.tryGetRuleContext(0, Ulonglong_numberContext);
    }
    PARAM_MARKER() { return this.tryGetToken(MySQLParser.PARAM_MARKER, 0); }
    expr() {
        return this.tryGetRuleContext(0, ExprContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_leadLagInfo; }
    // @Override
    enterRule(listener) {
        if (listener.enterLeadLagInfo) {
            listener.enterLeadLagInfo(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLeadLagInfo) {
            listener.exitLeadLagInfo(this);
        }
    }
}
exports.LeadLagInfoContext = LeadLagInfoContext;
class NullTreatmentContext extends ParserRuleContext_1.ParserRuleContext {
    NULLS_SYMBOL() { return this.getToken(MySQLParser.NULLS_SYMBOL, 0); }
    RESPECT_SYMBOL() { return this.tryGetToken(MySQLParser.RESPECT_SYMBOL, 0); }
    IGNORE_SYMBOL() { return this.tryGetToken(MySQLParser.IGNORE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_nullTreatment; }
    // @Override
    enterRule(listener) {
        if (listener.enterNullTreatment) {
            listener.enterNullTreatment(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNullTreatment) {
            listener.exitNullTreatment(this);
        }
    }
}
exports.NullTreatmentContext = NullTreatmentContext;
class JsonFunctionContext extends ParserRuleContext_1.ParserRuleContext {
    JSON_ARRAYAGG_SYMBOL() { return this.tryGetToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    inSumExpr(i) {
        if (i === undefined) {
            return this.getRuleContexts(InSumExprContext);
        }
        else {
            return this.getRuleContext(i, InSumExprContext);
        }
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    windowingClause() {
        return this.tryGetRuleContext(0, WindowingClauseContext);
    }
    JSON_OBJECTAGG_SYMBOL() { return this.tryGetToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0); }
    COMMA_SYMBOL() { return this.tryGetToken(MySQLParser.COMMA_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_jsonFunction; }
    // @Override
    enterRule(listener) {
        if (listener.enterJsonFunction) {
            listener.enterJsonFunction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitJsonFunction) {
            listener.exitJsonFunction(this);
        }
    }
}
exports.JsonFunctionContext = JsonFunctionContext;
class InSumExprContext extends ParserRuleContext_1.ParserRuleContext {
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    ALL_SYMBOL() { return this.tryGetToken(MySQLParser.ALL_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_inSumExpr; }
    // @Override
    enterRule(listener) {
        if (listener.enterInSumExpr) {
            listener.enterInSumExpr(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInSumExpr) {
            listener.exitInSumExpr(this);
        }
    }
}
exports.InSumExprContext = InSumExprContext;
class IdentListArgContext extends ParserRuleContext_1.ParserRuleContext {
    identList() {
        return this.getRuleContext(0, IdentListContext);
    }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_identListArg; }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentListArg) {
            listener.enterIdentListArg(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentListArg) {
            listener.exitIdentListArg(this);
        }
    }
}
exports.IdentListArgContext = IdentListArgContext;
class IdentListContext extends ParserRuleContext_1.ParserRuleContext {
    simpleIdentifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(SimpleIdentifierContext);
        }
        else {
            return this.getRuleContext(i, SimpleIdentifierContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_identList; }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentList) {
            listener.enterIdentList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentList) {
            listener.exitIdentList(this);
        }
    }
}
exports.IdentListContext = IdentListContext;
class FulltextOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    IN_SYMBOL() { return this.tryGetToken(MySQLParser.IN_SYMBOL, 0); }
    BOOLEAN_SYMBOL() { return this.tryGetToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
    MODE_SYMBOL() { return this.tryGetToken(MySQLParser.MODE_SYMBOL, 0); }
    NATURAL_SYMBOL() { return this.tryGetToken(MySQLParser.NATURAL_SYMBOL, 0); }
    LANGUAGE_SYMBOL() { return this.tryGetToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
    WITH_SYMBOL() { return this.tryGetToken(MySQLParser.WITH_SYMBOL, 0); }
    QUERY_SYMBOL() { return this.tryGetToken(MySQLParser.QUERY_SYMBOL, 0); }
    EXPANSION_SYMBOL() { return this.tryGetToken(MySQLParser.EXPANSION_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_fulltextOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterFulltextOptions) {
            listener.enterFulltextOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFulltextOptions) {
            listener.exitFulltextOptions(this);
        }
    }
}
exports.FulltextOptionsContext = FulltextOptionsContext;
class RuntimeFunctionCallContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    exprList() {
        return this.tryGetRuleContext(0, ExprListContext);
    }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    CHAR_SYMBOL() { return this.tryGetToken(MySQLParser.CHAR_SYMBOL, 0); }
    USING_SYMBOL() { return this.tryGetToken(MySQLParser.USING_SYMBOL, 0); }
    charsetName() {
        return this.tryGetRuleContext(0, CharsetNameContext);
    }
    CURRENT_USER_SYMBOL() { return this.tryGetToken(MySQLParser.CURRENT_USER_SYMBOL, 0); }
    parentheses() {
        return this.tryGetRuleContext(0, ParenthesesContext);
    }
    exprWithParentheses() {
        return this.tryGetRuleContext(0, ExprWithParenthesesContext);
    }
    DATE_SYMBOL() { return this.tryGetToken(MySQLParser.DATE_SYMBOL, 0); }
    DAY_SYMBOL() { return this.tryGetToken(MySQLParser.DAY_SYMBOL, 0); }
    HOUR_SYMBOL() { return this.tryGetToken(MySQLParser.HOUR_SYMBOL, 0); }
    expr(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }
        else {
            return this.getRuleContext(i, ExprContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    INSERT_SYMBOL() { return this.tryGetToken(MySQLParser.INSERT_SYMBOL, 0); }
    INTERVAL_SYMBOL() { return this.tryGetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
    LEFT_SYMBOL() { return this.tryGetToken(MySQLParser.LEFT_SYMBOL, 0); }
    MINUTE_SYMBOL() { return this.tryGetToken(MySQLParser.MINUTE_SYMBOL, 0); }
    MONTH_SYMBOL() { return this.tryGetToken(MySQLParser.MONTH_SYMBOL, 0); }
    RIGHT_SYMBOL() { return this.tryGetToken(MySQLParser.RIGHT_SYMBOL, 0); }
    SECOND_SYMBOL() { return this.tryGetToken(MySQLParser.SECOND_SYMBOL, 0); }
    TIME_SYMBOL() { return this.tryGetToken(MySQLParser.TIME_SYMBOL, 0); }
    TIMESTAMP_SYMBOL() { return this.tryGetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
    trimFunction() {
        return this.tryGetRuleContext(0, TrimFunctionContext);
    }
    USER_SYMBOL() { return this.tryGetToken(MySQLParser.USER_SYMBOL, 0); }
    VALUES_SYMBOL() { return this.tryGetToken(MySQLParser.VALUES_SYMBOL, 0); }
    YEAR_SYMBOL() { return this.tryGetToken(MySQLParser.YEAR_SYMBOL, 0); }
    ADDDATE_SYMBOL() { return this.tryGetToken(MySQLParser.ADDDATE_SYMBOL, 0); }
    SUBDATE_SYMBOL() { return this.tryGetToken(MySQLParser.SUBDATE_SYMBOL, 0); }
    interval() {
        return this.tryGetRuleContext(0, IntervalContext);
    }
    CURDATE_SYMBOL() { return this.tryGetToken(MySQLParser.CURDATE_SYMBOL, 0); }
    CURTIME_SYMBOL() { return this.tryGetToken(MySQLParser.CURTIME_SYMBOL, 0); }
    timeFunctionParameters() {
        return this.tryGetRuleContext(0, TimeFunctionParametersContext);
    }
    DATE_ADD_SYMBOL() { return this.tryGetToken(MySQLParser.DATE_ADD_SYMBOL, 0); }
    DATE_SUB_SYMBOL() { return this.tryGetToken(MySQLParser.DATE_SUB_SYMBOL, 0); }
    FROM_SYMBOL() { return this.tryGetToken(MySQLParser.FROM_SYMBOL, 0); }
    EXTRACT_SYMBOL() { return this.tryGetToken(MySQLParser.EXTRACT_SYMBOL, 0); }
    dateTimeTtype() {
        return this.tryGetRuleContext(0, DateTimeTtypeContext);
    }
    GET_FORMAT_SYMBOL() { return this.tryGetToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
    NOW_SYMBOL() { return this.tryGetToken(MySQLParser.NOW_SYMBOL, 0); }
    bitExpr() {
        return this.tryGetRuleContext(0, BitExprContext);
    }
    IN_SYMBOL() { return this.tryGetToken(MySQLParser.IN_SYMBOL, 0); }
    POSITION_SYMBOL() { return this.tryGetToken(MySQLParser.POSITION_SYMBOL, 0); }
    substringFunction() {
        return this.tryGetRuleContext(0, SubstringFunctionContext);
    }
    SYSDATE_SYMBOL() { return this.tryGetToken(MySQLParser.SYSDATE_SYMBOL, 0); }
    intervalTimeStamp() {
        return this.tryGetRuleContext(0, IntervalTimeStampContext);
    }
    TIMESTAMP_ADD_SYMBOL() { return this.tryGetToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
    TIMESTAMP_DIFF_SYMBOL() { return this.tryGetToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
    UTC_DATE_SYMBOL() { return this.tryGetToken(MySQLParser.UTC_DATE_SYMBOL, 0); }
    UTC_TIME_SYMBOL() { return this.tryGetToken(MySQLParser.UTC_TIME_SYMBOL, 0); }
    UTC_TIMESTAMP_SYMBOL() { return this.tryGetToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0); }
    ASCII_SYMBOL() { return this.tryGetToken(MySQLParser.ASCII_SYMBOL, 0); }
    CHARSET_SYMBOL() { return this.tryGetToken(MySQLParser.CHARSET_SYMBOL, 0); }
    exprListWithParentheses() {
        return this.tryGetRuleContext(0, ExprListWithParenthesesContext);
    }
    COALESCE_SYMBOL() { return this.tryGetToken(MySQLParser.COALESCE_SYMBOL, 0); }
    COLLATION_SYMBOL() { return this.tryGetToken(MySQLParser.COLLATION_SYMBOL, 0); }
    DATABASE_SYMBOL() { return this.tryGetToken(MySQLParser.DATABASE_SYMBOL, 0); }
    IF_SYMBOL() { return this.tryGetToken(MySQLParser.IF_SYMBOL, 0); }
    FORMAT_SYMBOL() { return this.tryGetToken(MySQLParser.FORMAT_SYMBOL, 0); }
    MICROSECOND_SYMBOL() { return this.tryGetToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
    MOD_SYMBOL() { return this.tryGetToken(MySQLParser.MOD_SYMBOL, 0); }
    textLiteral() {
        return this.tryGetRuleContext(0, TextLiteralContext);
    }
    OLD_PASSWORD_SYMBOL() { return this.tryGetToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
    PASSWORD_SYMBOL() { return this.tryGetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
    QUARTER_SYMBOL() { return this.tryGetToken(MySQLParser.QUARTER_SYMBOL, 0); }
    REPEAT_SYMBOL() { return this.tryGetToken(MySQLParser.REPEAT_SYMBOL, 0); }
    REPLACE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLACE_SYMBOL, 0); }
    REVERSE_SYMBOL() { return this.tryGetToken(MySQLParser.REVERSE_SYMBOL, 0); }
    ROW_COUNT_SYMBOL() { return this.tryGetToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
    TRUNCATE_SYMBOL() { return this.tryGetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
    WEEK_SYMBOL() { return this.tryGetToken(MySQLParser.WEEK_SYMBOL, 0); }
    WEIGHT_STRING_SYMBOL() { return this.tryGetToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
    AS_SYMBOL() { return this.tryGetToken(MySQLParser.AS_SYMBOL, 0); }
    BINARY_SYMBOL() { return this.tryGetToken(MySQLParser.BINARY_SYMBOL, 0); }
    wsNumCodepoints() {
        return this.tryGetRuleContext(0, WsNumCodepointsContext);
    }
    ulong_number(i) {
        if (i === undefined) {
            return this.getRuleContexts(Ulong_numberContext);
        }
        else {
            return this.getRuleContext(i, Ulong_numberContext);
        }
    }
    weightStringLevels() {
        return this.tryGetRuleContext(0, WeightStringLevelsContext);
    }
    geometryFunction() {
        return this.tryGetRuleContext(0, GeometryFunctionContext);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_runtimeFunctionCall; }
    // @Override
    enterRule(listener) {
        if (listener.enterRuntimeFunctionCall) {
            listener.enterRuntimeFunctionCall(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRuntimeFunctionCall) {
            listener.exitRuntimeFunctionCall(this);
        }
    }
}
exports.RuntimeFunctionCallContext = RuntimeFunctionCallContext;
class GeometryFunctionContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    expr(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }
        else {
            return this.getRuleContext(i, ExprContext);
        }
    }
    COMMA_SYMBOL() { return this.tryGetToken(MySQLParser.COMMA_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    CONTAINS_SYMBOL() { return this.tryGetToken(MySQLParser.CONTAINS_SYMBOL, 0); }
    GEOMETRYCOLLECTION_SYMBOL() { return this.tryGetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
    exprList() {
        return this.tryGetRuleContext(0, ExprListContext);
    }
    exprListWithParentheses() {
        return this.tryGetRuleContext(0, ExprListWithParenthesesContext);
    }
    LINESTRING_SYMBOL() { return this.tryGetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
    MULTILINESTRING_SYMBOL() { return this.tryGetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
    MULTIPOINT_SYMBOL() { return this.tryGetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
    MULTIPOLYGON_SYMBOL() { return this.tryGetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
    POINT_SYMBOL() { return this.tryGetToken(MySQLParser.POINT_SYMBOL, 0); }
    POLYGON_SYMBOL() { return this.tryGetToken(MySQLParser.POLYGON_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_geometryFunction; }
    // @Override
    enterRule(listener) {
        if (listener.enterGeometryFunction) {
            listener.enterGeometryFunction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGeometryFunction) {
            listener.exitGeometryFunction(this);
        }
    }
}
exports.GeometryFunctionContext = GeometryFunctionContext;
class TimeFunctionParametersContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    fractionalPrecision() {
        return this.tryGetRuleContext(0, FractionalPrecisionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_timeFunctionParameters; }
    // @Override
    enterRule(listener) {
        if (listener.enterTimeFunctionParameters) {
            listener.enterTimeFunctionParameters(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTimeFunctionParameters) {
            listener.exitTimeFunctionParameters(this);
        }
    }
}
exports.TimeFunctionParametersContext = TimeFunctionParametersContext;
class FractionalPrecisionContext extends ParserRuleContext_1.ParserRuleContext {
    INT_NUMBER() { return this.getToken(MySQLParser.INT_NUMBER, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_fractionalPrecision; }
    // @Override
    enterRule(listener) {
        if (listener.enterFractionalPrecision) {
            listener.enterFractionalPrecision(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFractionalPrecision) {
            listener.exitFractionalPrecision(this);
        }
    }
}
exports.FractionalPrecisionContext = FractionalPrecisionContext;
class WeightStringLevelsContext extends ParserRuleContext_1.ParserRuleContext {
    LEVEL_SYMBOL() { return this.getToken(MySQLParser.LEVEL_SYMBOL, 0); }
    real_ulong_number(i) {
        if (i === undefined) {
            return this.getRuleContexts(Real_ulong_numberContext);
        }
        else {
            return this.getRuleContext(i, Real_ulong_numberContext);
        }
    }
    MINUS_OPERATOR() { return this.tryGetToken(MySQLParser.MINUS_OPERATOR, 0); }
    weightStringLevelListItem(i) {
        if (i === undefined) {
            return this.getRuleContexts(WeightStringLevelListItemContext);
        }
        else {
            return this.getRuleContext(i, WeightStringLevelListItemContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_weightStringLevels; }
    // @Override
    enterRule(listener) {
        if (listener.enterWeightStringLevels) {
            listener.enterWeightStringLevels(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWeightStringLevels) {
            listener.exitWeightStringLevels(this);
        }
    }
}
exports.WeightStringLevelsContext = WeightStringLevelsContext;
class WeightStringLevelListItemContext extends ParserRuleContext_1.ParserRuleContext {
    real_ulong_number() {
        return this.getRuleContext(0, Real_ulong_numberContext);
    }
    REVERSE_SYMBOL() { return this.tryGetToken(MySQLParser.REVERSE_SYMBOL, 0); }
    ASC_SYMBOL() { return this.tryGetToken(MySQLParser.ASC_SYMBOL, 0); }
    DESC_SYMBOL() { return this.tryGetToken(MySQLParser.DESC_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_weightStringLevelListItem; }
    // @Override
    enterRule(listener) {
        if (listener.enterWeightStringLevelListItem) {
            listener.enterWeightStringLevelListItem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWeightStringLevelListItem) {
            listener.exitWeightStringLevelListItem(this);
        }
    }
}
exports.WeightStringLevelListItemContext = WeightStringLevelListItemContext;
class DateTimeTtypeContext extends ParserRuleContext_1.ParserRuleContext {
    DATE_SYMBOL() { return this.tryGetToken(MySQLParser.DATE_SYMBOL, 0); }
    TIME_SYMBOL() { return this.tryGetToken(MySQLParser.TIME_SYMBOL, 0); }
    DATETIME_SYMBOL() { return this.tryGetToken(MySQLParser.DATETIME_SYMBOL, 0); }
    TIMESTAMP_SYMBOL() { return this.tryGetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dateTimeTtype; }
    // @Override
    enterRule(listener) {
        if (listener.enterDateTimeTtype) {
            listener.enterDateTimeTtype(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDateTimeTtype) {
            listener.exitDateTimeTtype(this);
        }
    }
}
exports.DateTimeTtypeContext = DateTimeTtypeContext;
class TrimFunctionContext extends ParserRuleContext_1.ParserRuleContext {
    TRIM_SYMBOL() { return this.getToken(MySQLParser.TRIM_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    expr(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }
        else {
            return this.getRuleContext(i, ExprContext);
        }
    }
    LEADING_SYMBOL() { return this.tryGetToken(MySQLParser.LEADING_SYMBOL, 0); }
    FROM_SYMBOL() { return this.tryGetToken(MySQLParser.FROM_SYMBOL, 0); }
    TRAILING_SYMBOL() { return this.tryGetToken(MySQLParser.TRAILING_SYMBOL, 0); }
    BOTH_SYMBOL() { return this.tryGetToken(MySQLParser.BOTH_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_trimFunction; }
    // @Override
    enterRule(listener) {
        if (listener.enterTrimFunction) {
            listener.enterTrimFunction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTrimFunction) {
            listener.exitTrimFunction(this);
        }
    }
}
exports.TrimFunctionContext = TrimFunctionContext;
class SubstringFunctionContext extends ParserRuleContext_1.ParserRuleContext {
    SUBSTRING_SYMBOL() { return this.getToken(MySQLParser.SUBSTRING_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    expr(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }
        else {
            return this.getRuleContext(i, ExprContext);
        }
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    FROM_SYMBOL() { return this.tryGetToken(MySQLParser.FROM_SYMBOL, 0); }
    FOR_SYMBOL() { return this.tryGetToken(MySQLParser.FOR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_substringFunction; }
    // @Override
    enterRule(listener) {
        if (listener.enterSubstringFunction) {
            listener.enterSubstringFunction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSubstringFunction) {
            listener.exitSubstringFunction(this);
        }
    }
}
exports.SubstringFunctionContext = SubstringFunctionContext;
class FunctionCallContext extends ParserRuleContext_1.ParserRuleContext {
    pureIdentifier() {
        return this.tryGetRuleContext(0, PureIdentifierContext);
    }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    udfExprList() {
        return this.tryGetRuleContext(0, UdfExprListContext);
    }
    qualifiedIdentifier() {
        return this.tryGetRuleContext(0, QualifiedIdentifierContext);
    }
    exprList() {
        return this.tryGetRuleContext(0, ExprListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_functionCall; }
    // @Override
    enterRule(listener) {
        if (listener.enterFunctionCall) {
            listener.enterFunctionCall(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFunctionCall) {
            listener.exitFunctionCall(this);
        }
    }
}
exports.FunctionCallContext = FunctionCallContext;
class UdfExprListContext extends ParserRuleContext_1.ParserRuleContext {
    udfExpr(i) {
        if (i === undefined) {
            return this.getRuleContexts(UdfExprContext);
        }
        else {
            return this.getRuleContext(i, UdfExprContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_udfExprList; }
    // @Override
    enterRule(listener) {
        if (listener.enterUdfExprList) {
            listener.enterUdfExprList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUdfExprList) {
            listener.exitUdfExprList(this);
        }
    }
}
exports.UdfExprListContext = UdfExprListContext;
class UdfExprContext extends ParserRuleContext_1.ParserRuleContext {
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    selectAlias() {
        return this.tryGetRuleContext(0, SelectAliasContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_udfExpr; }
    // @Override
    enterRule(listener) {
        if (listener.enterUdfExpr) {
            listener.enterUdfExpr(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUdfExpr) {
            listener.exitUdfExpr(this);
        }
    }
}
exports.UdfExprContext = UdfExprContext;
class VariableContext extends ParserRuleContext_1.ParserRuleContext {
    userVariable() {
        return this.tryGetRuleContext(0, UserVariableContext);
    }
    ASSIGN_OPERATOR() { return this.tryGetToken(MySQLParser.ASSIGN_OPERATOR, 0); }
    expr() {
        return this.tryGetRuleContext(0, ExprContext);
    }
    systemVariable() {
        return this.tryGetRuleContext(0, SystemVariableContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_variable; }
    // @Override
    enterRule(listener) {
        if (listener.enterVariable) {
            listener.enterVariable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVariable) {
            listener.exitVariable(this);
        }
    }
}
exports.VariableContext = VariableContext;
class UserVariableContext extends ParserRuleContext_1.ParserRuleContext {
    AT_SIGN_SYMBOL() { return this.tryGetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
    textOrIdentifier() {
        return this.tryGetRuleContext(0, TextOrIdentifierContext);
    }
    AT_TEXT_SUFFIX() { return this.tryGetToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_userVariable; }
    // @Override
    enterRule(listener) {
        if (listener.enterUserVariable) {
            listener.enterUserVariable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUserVariable) {
            listener.exitUserVariable(this);
        }
    }
}
exports.UserVariableContext = UserVariableContext;
class SystemVariableContext extends ParserRuleContext_1.ParserRuleContext {
    AT_AT_SIGN_SYMBOL() { return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
    textOrIdentifier() {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    varIdentType() {
        return this.tryGetRuleContext(0, VarIdentTypeContext);
    }
    dotIdentifier() {
        return this.tryGetRuleContext(0, DotIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_systemVariable; }
    // @Override
    enterRule(listener) {
        if (listener.enterSystemVariable) {
            listener.enterSystemVariable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSystemVariable) {
            listener.exitSystemVariable(this);
        }
    }
}
exports.SystemVariableContext = SystemVariableContext;
class InternalVariableNameContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    lValueIdentifier() {
        return this.tryGetRuleContext(0, LValueIdentifierContext);
    }
    dotIdentifier() {
        return this.tryGetRuleContext(0, DotIdentifierContext);
    }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_internalVariableName; }
    // @Override
    enterRule(listener) {
        if (listener.enterInternalVariableName) {
            listener.enterInternalVariableName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInternalVariableName) {
            listener.exitInternalVariableName(this);
        }
    }
}
exports.InternalVariableNameContext = InternalVariableNameContext;
class WhenExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    WHEN_SYMBOL() { return this.getToken(MySQLParser.WHEN_SYMBOL, 0); }
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_whenExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterWhenExpression) {
            listener.enterWhenExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWhenExpression) {
            listener.exitWhenExpression(this);
        }
    }
}
exports.WhenExpressionContext = WhenExpressionContext;
class ThenExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    THEN_SYMBOL() { return this.getToken(MySQLParser.THEN_SYMBOL, 0); }
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_thenExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterThenExpression) {
            listener.enterThenExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitThenExpression) {
            listener.exitThenExpression(this);
        }
    }
}
exports.ThenExpressionContext = ThenExpressionContext;
class ElseExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    ELSE_SYMBOL() { return this.getToken(MySQLParser.ELSE_SYMBOL, 0); }
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_elseExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterElseExpression) {
            listener.enterElseExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitElseExpression) {
            listener.exitElseExpression(this);
        }
    }
}
exports.ElseExpressionContext = ElseExpressionContext;
class CastTypeContext extends ParserRuleContext_1.ParserRuleContext {
    BINARY_SYMBOL() { return this.tryGetToken(MySQLParser.BINARY_SYMBOL, 0); }
    fieldLength() {
        return this.tryGetRuleContext(0, FieldLengthContext);
    }
    CHAR_SYMBOL() { return this.tryGetToken(MySQLParser.CHAR_SYMBOL, 0); }
    charsetWithOptBinary() {
        return this.tryGetRuleContext(0, CharsetWithOptBinaryContext);
    }
    nchar() {
        return this.tryGetRuleContext(0, NcharContext);
    }
    SIGNED_SYMBOL() { return this.tryGetToken(MySQLParser.SIGNED_SYMBOL, 0); }
    INT_SYMBOL() { return this.tryGetToken(MySQLParser.INT_SYMBOL, 0); }
    UNSIGNED_SYMBOL() { return this.tryGetToken(MySQLParser.UNSIGNED_SYMBOL, 0); }
    DATE_SYMBOL() { return this.tryGetToken(MySQLParser.DATE_SYMBOL, 0); }
    TIME_SYMBOL() { return this.tryGetToken(MySQLParser.TIME_SYMBOL, 0); }
    typeDatetimePrecision() {
        return this.tryGetRuleContext(0, TypeDatetimePrecisionContext);
    }
    DATETIME_SYMBOL() { return this.tryGetToken(MySQLParser.DATETIME_SYMBOL, 0); }
    DECIMAL_SYMBOL() { return this.tryGetToken(MySQLParser.DECIMAL_SYMBOL, 0); }
    floatOptions() {
        return this.tryGetRuleContext(0, FloatOptionsContext);
    }
    JSON_SYMBOL() { return this.tryGetToken(MySQLParser.JSON_SYMBOL, 0); }
    realType() {
        return this.tryGetRuleContext(0, RealTypeContext);
    }
    FLOAT_SYMBOL() { return this.tryGetToken(MySQLParser.FLOAT_SYMBOL, 0); }
    standardFloatOptions() {
        return this.tryGetRuleContext(0, StandardFloatOptionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_castType; }
    // @Override
    enterRule(listener) {
        if (listener.enterCastType) {
            listener.enterCastType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCastType) {
            listener.exitCastType(this);
        }
    }
}
exports.CastTypeContext = CastTypeContext;
class ExprListContext extends ParserRuleContext_1.ParserRuleContext {
    expr(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }
        else {
            return this.getRuleContext(i, ExprContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_exprList; }
    // @Override
    enterRule(listener) {
        if (listener.enterExprList) {
            listener.enterExprList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExprList) {
            listener.exitExprList(this);
        }
    }
}
exports.ExprListContext = ExprListContext;
class CharsetContext extends ParserRuleContext_1.ParserRuleContext {
    CHAR_SYMBOL() { return this.tryGetToken(MySQLParser.CHAR_SYMBOL, 0); }
    SET_SYMBOL() { return this.tryGetToken(MySQLParser.SET_SYMBOL, 0); }
    CHARSET_SYMBOL() { return this.tryGetToken(MySQLParser.CHARSET_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_charset; }
    // @Override
    enterRule(listener) {
        if (listener.enterCharset) {
            listener.enterCharset(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCharset) {
            listener.exitCharset(this);
        }
    }
}
exports.CharsetContext = CharsetContext;
class NotRuleContext extends ParserRuleContext_1.ParserRuleContext {
    NOT_SYMBOL() { return this.tryGetToken(MySQLParser.NOT_SYMBOL, 0); }
    NOT2_SYMBOL() { return this.tryGetToken(MySQLParser.NOT2_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_notRule; }
    // @Override
    enterRule(listener) {
        if (listener.enterNotRule) {
            listener.enterNotRule(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNotRule) {
            listener.exitNotRule(this);
        }
    }
}
exports.NotRuleContext = NotRuleContext;
class Not2RuleContext extends ParserRuleContext_1.ParserRuleContext {
    LOGICAL_NOT_OPERATOR() { return this.tryGetToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0); }
    NOT2_SYMBOL() { return this.tryGetToken(MySQLParser.NOT2_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_not2Rule; }
    // @Override
    enterRule(listener) {
        if (listener.enterNot2Rule) {
            listener.enterNot2Rule(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNot2Rule) {
            listener.exitNot2Rule(this);
        }
    }
}
exports.Not2RuleContext = Not2RuleContext;
class IntervalContext extends ParserRuleContext_1.ParserRuleContext {
    intervalTimeStamp() {
        return this.tryGetRuleContext(0, IntervalTimeStampContext);
    }
    SECOND_MICROSECOND_SYMBOL() { return this.tryGetToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0); }
    MINUTE_MICROSECOND_SYMBOL() { return this.tryGetToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0); }
    MINUTE_SECOND_SYMBOL() { return this.tryGetToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0); }
    HOUR_MICROSECOND_SYMBOL() { return this.tryGetToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0); }
    HOUR_SECOND_SYMBOL() { return this.tryGetToken(MySQLParser.HOUR_SECOND_SYMBOL, 0); }
    HOUR_MINUTE_SYMBOL() { return this.tryGetToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0); }
    DAY_MICROSECOND_SYMBOL() { return this.tryGetToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0); }
    DAY_SECOND_SYMBOL() { return this.tryGetToken(MySQLParser.DAY_SECOND_SYMBOL, 0); }
    DAY_MINUTE_SYMBOL() { return this.tryGetToken(MySQLParser.DAY_MINUTE_SYMBOL, 0); }
    DAY_HOUR_SYMBOL() { return this.tryGetToken(MySQLParser.DAY_HOUR_SYMBOL, 0); }
    YEAR_MONTH_SYMBOL() { return this.tryGetToken(MySQLParser.YEAR_MONTH_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_interval; }
    // @Override
    enterRule(listener) {
        if (listener.enterInterval) {
            listener.enterInterval(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInterval) {
            listener.exitInterval(this);
        }
    }
}
exports.IntervalContext = IntervalContext;
class IntervalTimeStampContext extends ParserRuleContext_1.ParserRuleContext {
    MICROSECOND_SYMBOL() { return this.tryGetToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
    SECOND_SYMBOL() { return this.tryGetToken(MySQLParser.SECOND_SYMBOL, 0); }
    MINUTE_SYMBOL() { return this.tryGetToken(MySQLParser.MINUTE_SYMBOL, 0); }
    HOUR_SYMBOL() { return this.tryGetToken(MySQLParser.HOUR_SYMBOL, 0); }
    DAY_SYMBOL() { return this.tryGetToken(MySQLParser.DAY_SYMBOL, 0); }
    WEEK_SYMBOL() { return this.tryGetToken(MySQLParser.WEEK_SYMBOL, 0); }
    MONTH_SYMBOL() { return this.tryGetToken(MySQLParser.MONTH_SYMBOL, 0); }
    QUARTER_SYMBOL() { return this.tryGetToken(MySQLParser.QUARTER_SYMBOL, 0); }
    YEAR_SYMBOL() { return this.tryGetToken(MySQLParser.YEAR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_intervalTimeStamp; }
    // @Override
    enterRule(listener) {
        if (listener.enterIntervalTimeStamp) {
            listener.enterIntervalTimeStamp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIntervalTimeStamp) {
            listener.exitIntervalTimeStamp(this);
        }
    }
}
exports.IntervalTimeStampContext = IntervalTimeStampContext;
class ExprListWithParenthesesContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    exprList() {
        return this.getRuleContext(0, ExprListContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_exprListWithParentheses; }
    // @Override
    enterRule(listener) {
        if (listener.enterExprListWithParentheses) {
            listener.enterExprListWithParentheses(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExprListWithParentheses) {
            listener.exitExprListWithParentheses(this);
        }
    }
}
exports.ExprListWithParenthesesContext = ExprListWithParenthesesContext;
class ExprWithParenthesesContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_exprWithParentheses; }
    // @Override
    enterRule(listener) {
        if (listener.enterExprWithParentheses) {
            listener.enterExprWithParentheses(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExprWithParentheses) {
            listener.exitExprWithParentheses(this);
        }
    }
}
exports.ExprWithParenthesesContext = ExprWithParenthesesContext;
class SimpleExprWithParenthesesContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    simpleExpr() {
        return this.getRuleContext(0, SimpleExprContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_simpleExprWithParentheses; }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleExprWithParentheses) {
            listener.enterSimpleExprWithParentheses(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleExprWithParentheses) {
            listener.exitSimpleExprWithParentheses(this);
        }
    }
}
exports.SimpleExprWithParenthesesContext = SimpleExprWithParenthesesContext;
class OrderListContext extends ParserRuleContext_1.ParserRuleContext {
    orderExpression(i) {
        if (i === undefined) {
            return this.getRuleContexts(OrderExpressionContext);
        }
        else {
            return this.getRuleContext(i, OrderExpressionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_orderList; }
    // @Override
    enterRule(listener) {
        if (listener.enterOrderList) {
            listener.enterOrderList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOrderList) {
            listener.exitOrderList(this);
        }
    }
}
exports.OrderListContext = OrderListContext;
class OrderExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    direction() {
        return this.tryGetRuleContext(0, DirectionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_orderExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterOrderExpression) {
            listener.enterOrderExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOrderExpression) {
            listener.exitOrderExpression(this);
        }
    }
}
exports.OrderExpressionContext = OrderExpressionContext;
class GroupListContext extends ParserRuleContext_1.ParserRuleContext {
    groupingExpression(i) {
        if (i === undefined) {
            return this.getRuleContexts(GroupingExpressionContext);
        }
        else {
            return this.getRuleContext(i, GroupingExpressionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_groupList; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroupList) {
            listener.enterGroupList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroupList) {
            listener.exitGroupList(this);
        }
    }
}
exports.GroupListContext = GroupListContext;
class GroupingExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_groupingExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroupingExpression) {
            listener.enterGroupingExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroupingExpression) {
            listener.exitGroupingExpression(this);
        }
    }
}
exports.GroupingExpressionContext = GroupingExpressionContext;
class ChannelContext extends ParserRuleContext_1.ParserRuleContext {
    FOR_SYMBOL() { return this.getToken(MySQLParser.FOR_SYMBOL, 0); }
    CHANNEL_SYMBOL() { return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0); }
    textStringNoLinebreak() {
        return this.getRuleContext(0, TextStringNoLinebreakContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_channel; }
    // @Override
    enterRule(listener) {
        if (listener.enterChannel) {
            listener.enterChannel(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitChannel) {
            listener.exitChannel(this);
        }
    }
}
exports.ChannelContext = ChannelContext;
class CompoundStatementContext extends ParserRuleContext_1.ParserRuleContext {
    simpleStatement() {
        return this.tryGetRuleContext(0, SimpleStatementContext);
    }
    returnStatement() {
        return this.tryGetRuleContext(0, ReturnStatementContext);
    }
    ifStatement() {
        return this.tryGetRuleContext(0, IfStatementContext);
    }
    caseStatement() {
        return this.tryGetRuleContext(0, CaseStatementContext);
    }
    labeledBlock() {
        return this.tryGetRuleContext(0, LabeledBlockContext);
    }
    unlabeledBlock() {
        return this.tryGetRuleContext(0, UnlabeledBlockContext);
    }
    labeledControl() {
        return this.tryGetRuleContext(0, LabeledControlContext);
    }
    unlabeledControl() {
        return this.tryGetRuleContext(0, UnlabeledControlContext);
    }
    leaveStatement() {
        return this.tryGetRuleContext(0, LeaveStatementContext);
    }
    iterateStatement() {
        return this.tryGetRuleContext(0, IterateStatementContext);
    }
    cursorOpen() {
        return this.tryGetRuleContext(0, CursorOpenContext);
    }
    cursorFetch() {
        return this.tryGetRuleContext(0, CursorFetchContext);
    }
    cursorClose() {
        return this.tryGetRuleContext(0, CursorCloseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_compoundStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterCompoundStatement) {
            listener.enterCompoundStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCompoundStatement) {
            listener.exitCompoundStatement(this);
        }
    }
}
exports.CompoundStatementContext = CompoundStatementContext;
class ReturnStatementContext extends ParserRuleContext_1.ParserRuleContext {
    RETURN_SYMBOL() { return this.getToken(MySQLParser.RETURN_SYMBOL, 0); }
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_returnStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterReturnStatement) {
            listener.enterReturnStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReturnStatement) {
            listener.exitReturnStatement(this);
        }
    }
}
exports.ReturnStatementContext = ReturnStatementContext;
class IfStatementContext extends ParserRuleContext_1.ParserRuleContext {
    IF_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.IF_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.IF_SYMBOL, i);
        }
    }
    ifBody() {
        return this.getRuleContext(0, IfBodyContext);
    }
    END_SYMBOL() { return this.getToken(MySQLParser.END_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_ifStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterIfStatement) {
            listener.enterIfStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIfStatement) {
            listener.exitIfStatement(this);
        }
    }
}
exports.IfStatementContext = IfStatementContext;
class IfBodyContext extends ParserRuleContext_1.ParserRuleContext {
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    thenStatement() {
        return this.getRuleContext(0, ThenStatementContext);
    }
    ELSEIF_SYMBOL() { return this.tryGetToken(MySQLParser.ELSEIF_SYMBOL, 0); }
    ifBody() {
        return this.tryGetRuleContext(0, IfBodyContext);
    }
    ELSE_SYMBOL() { return this.tryGetToken(MySQLParser.ELSE_SYMBOL, 0); }
    compoundStatementList() {
        return this.tryGetRuleContext(0, CompoundStatementListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_ifBody; }
    // @Override
    enterRule(listener) {
        if (listener.enterIfBody) {
            listener.enterIfBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIfBody) {
            listener.exitIfBody(this);
        }
    }
}
exports.IfBodyContext = IfBodyContext;
class ThenStatementContext extends ParserRuleContext_1.ParserRuleContext {
    THEN_SYMBOL() { return this.getToken(MySQLParser.THEN_SYMBOL, 0); }
    compoundStatementList() {
        return this.getRuleContext(0, CompoundStatementListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_thenStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterThenStatement) {
            listener.enterThenStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitThenStatement) {
            listener.exitThenStatement(this);
        }
    }
}
exports.ThenStatementContext = ThenStatementContext;
class CompoundStatementListContext extends ParserRuleContext_1.ParserRuleContext {
    compoundStatement(i) {
        if (i === undefined) {
            return this.getRuleContexts(CompoundStatementContext);
        }
        else {
            return this.getRuleContext(i, CompoundStatementContext);
        }
    }
    SEMICOLON_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.SEMICOLON_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.SEMICOLON_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_compoundStatementList; }
    // @Override
    enterRule(listener) {
        if (listener.enterCompoundStatementList) {
            listener.enterCompoundStatementList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCompoundStatementList) {
            listener.exitCompoundStatementList(this);
        }
    }
}
exports.CompoundStatementListContext = CompoundStatementListContext;
class CaseStatementContext extends ParserRuleContext_1.ParserRuleContext {
    CASE_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.CASE_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.CASE_SYMBOL, i);
        }
    }
    END_SYMBOL() { return this.getToken(MySQLParser.END_SYMBOL, 0); }
    expr() {
        return this.tryGetRuleContext(0, ExprContext);
    }
    whenExpression(i) {
        if (i === undefined) {
            return this.getRuleContexts(WhenExpressionContext);
        }
        else {
            return this.getRuleContext(i, WhenExpressionContext);
        }
    }
    thenStatement(i) {
        if (i === undefined) {
            return this.getRuleContexts(ThenStatementContext);
        }
        else {
            return this.getRuleContext(i, ThenStatementContext);
        }
    }
    elseStatement() {
        return this.tryGetRuleContext(0, ElseStatementContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_caseStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterCaseStatement) {
            listener.enterCaseStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCaseStatement) {
            listener.exitCaseStatement(this);
        }
    }
}
exports.CaseStatementContext = CaseStatementContext;
class ElseStatementContext extends ParserRuleContext_1.ParserRuleContext {
    ELSE_SYMBOL() { return this.getToken(MySQLParser.ELSE_SYMBOL, 0); }
    compoundStatementList() {
        return this.getRuleContext(0, CompoundStatementListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_elseStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterElseStatement) {
            listener.enterElseStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitElseStatement) {
            listener.exitElseStatement(this);
        }
    }
}
exports.ElseStatementContext = ElseStatementContext;
class LabeledBlockContext extends ParserRuleContext_1.ParserRuleContext {
    label() {
        return this.getRuleContext(0, LabelContext);
    }
    beginEndBlock() {
        return this.getRuleContext(0, BeginEndBlockContext);
    }
    labelRef() {
        return this.tryGetRuleContext(0, LabelRefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_labeledBlock; }
    // @Override
    enterRule(listener) {
        if (listener.enterLabeledBlock) {
            listener.enterLabeledBlock(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLabeledBlock) {
            listener.exitLabeledBlock(this);
        }
    }
}
exports.LabeledBlockContext = LabeledBlockContext;
class UnlabeledBlockContext extends ParserRuleContext_1.ParserRuleContext {
    beginEndBlock() {
        return this.getRuleContext(0, BeginEndBlockContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_unlabeledBlock; }
    // @Override
    enterRule(listener) {
        if (listener.enterUnlabeledBlock) {
            listener.enterUnlabeledBlock(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUnlabeledBlock) {
            listener.exitUnlabeledBlock(this);
        }
    }
}
exports.UnlabeledBlockContext = UnlabeledBlockContext;
class LabelContext extends ParserRuleContext_1.ParserRuleContext {
    labelIdentifier() {
        return this.getRuleContext(0, LabelIdentifierContext);
    }
    COLON_SYMBOL() { return this.getToken(MySQLParser.COLON_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_label; }
    // @Override
    enterRule(listener) {
        if (listener.enterLabel) {
            listener.enterLabel(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLabel) {
            listener.exitLabel(this);
        }
    }
}
exports.LabelContext = LabelContext;
class BeginEndBlockContext extends ParserRuleContext_1.ParserRuleContext {
    BEGIN_SYMBOL() { return this.getToken(MySQLParser.BEGIN_SYMBOL, 0); }
    END_SYMBOL() { return this.getToken(MySQLParser.END_SYMBOL, 0); }
    spDeclarations() {
        return this.tryGetRuleContext(0, SpDeclarationsContext);
    }
    compoundStatementList() {
        return this.tryGetRuleContext(0, CompoundStatementListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_beginEndBlock; }
    // @Override
    enterRule(listener) {
        if (listener.enterBeginEndBlock) {
            listener.enterBeginEndBlock(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBeginEndBlock) {
            listener.exitBeginEndBlock(this);
        }
    }
}
exports.BeginEndBlockContext = BeginEndBlockContext;
class LabeledControlContext extends ParserRuleContext_1.ParserRuleContext {
    label() {
        return this.getRuleContext(0, LabelContext);
    }
    unlabeledControl() {
        return this.getRuleContext(0, UnlabeledControlContext);
    }
    labelRef() {
        return this.tryGetRuleContext(0, LabelRefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_labeledControl; }
    // @Override
    enterRule(listener) {
        if (listener.enterLabeledControl) {
            listener.enterLabeledControl(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLabeledControl) {
            listener.exitLabeledControl(this);
        }
    }
}
exports.LabeledControlContext = LabeledControlContext;
class UnlabeledControlContext extends ParserRuleContext_1.ParserRuleContext {
    loopBlock() {
        return this.tryGetRuleContext(0, LoopBlockContext);
    }
    whileDoBlock() {
        return this.tryGetRuleContext(0, WhileDoBlockContext);
    }
    repeatUntilBlock() {
        return this.tryGetRuleContext(0, RepeatUntilBlockContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_unlabeledControl; }
    // @Override
    enterRule(listener) {
        if (listener.enterUnlabeledControl) {
            listener.enterUnlabeledControl(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUnlabeledControl) {
            listener.exitUnlabeledControl(this);
        }
    }
}
exports.UnlabeledControlContext = UnlabeledControlContext;
class LoopBlockContext extends ParserRuleContext_1.ParserRuleContext {
    LOOP_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.LOOP_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.LOOP_SYMBOL, i);
        }
    }
    compoundStatementList() {
        return this.getRuleContext(0, CompoundStatementListContext);
    }
    END_SYMBOL() { return this.getToken(MySQLParser.END_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_loopBlock; }
    // @Override
    enterRule(listener) {
        if (listener.enterLoopBlock) {
            listener.enterLoopBlock(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLoopBlock) {
            listener.exitLoopBlock(this);
        }
    }
}
exports.LoopBlockContext = LoopBlockContext;
class WhileDoBlockContext extends ParserRuleContext_1.ParserRuleContext {
    WHILE_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.WHILE_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.WHILE_SYMBOL, i);
        }
    }
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    DO_SYMBOL() { return this.getToken(MySQLParser.DO_SYMBOL, 0); }
    compoundStatementList() {
        return this.getRuleContext(0, CompoundStatementListContext);
    }
    END_SYMBOL() { return this.getToken(MySQLParser.END_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_whileDoBlock; }
    // @Override
    enterRule(listener) {
        if (listener.enterWhileDoBlock) {
            listener.enterWhileDoBlock(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWhileDoBlock) {
            listener.exitWhileDoBlock(this);
        }
    }
}
exports.WhileDoBlockContext = WhileDoBlockContext;
class RepeatUntilBlockContext extends ParserRuleContext_1.ParserRuleContext {
    REPEAT_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.REPEAT_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.REPEAT_SYMBOL, i);
        }
    }
    compoundStatementList() {
        return this.getRuleContext(0, CompoundStatementListContext);
    }
    UNTIL_SYMBOL() { return this.getToken(MySQLParser.UNTIL_SYMBOL, 0); }
    expr() {
        return this.getRuleContext(0, ExprContext);
    }
    END_SYMBOL() { return this.getToken(MySQLParser.END_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_repeatUntilBlock; }
    // @Override
    enterRule(listener) {
        if (listener.enterRepeatUntilBlock) {
            listener.enterRepeatUntilBlock(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRepeatUntilBlock) {
            listener.exitRepeatUntilBlock(this);
        }
    }
}
exports.RepeatUntilBlockContext = RepeatUntilBlockContext;
class SpDeclarationsContext extends ParserRuleContext_1.ParserRuleContext {
    spDeclaration(i) {
        if (i === undefined) {
            return this.getRuleContexts(SpDeclarationContext);
        }
        else {
            return this.getRuleContext(i, SpDeclarationContext);
        }
    }
    SEMICOLON_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.SEMICOLON_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.SEMICOLON_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_spDeclarations; }
    // @Override
    enterRule(listener) {
        if (listener.enterSpDeclarations) {
            listener.enterSpDeclarations(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSpDeclarations) {
            listener.exitSpDeclarations(this);
        }
    }
}
exports.SpDeclarationsContext = SpDeclarationsContext;
class SpDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    variableDeclaration() {
        return this.tryGetRuleContext(0, VariableDeclarationContext);
    }
    conditionDeclaration() {
        return this.tryGetRuleContext(0, ConditionDeclarationContext);
    }
    handlerDeclaration() {
        return this.tryGetRuleContext(0, HandlerDeclarationContext);
    }
    cursorDeclaration() {
        return this.tryGetRuleContext(0, CursorDeclarationContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_spDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterSpDeclaration) {
            listener.enterSpDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSpDeclaration) {
            listener.exitSpDeclaration(this);
        }
    }
}
exports.SpDeclarationContext = SpDeclarationContext;
class VariableDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    DECLARE_SYMBOL() { return this.getToken(MySQLParser.DECLARE_SYMBOL, 0); }
    identifierList() {
        return this.getRuleContext(0, IdentifierListContext);
    }
    dataType() {
        return this.getRuleContext(0, DataTypeContext);
    }
    collate() {
        return this.tryGetRuleContext(0, CollateContext);
    }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    expr() {
        return this.tryGetRuleContext(0, ExprContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_variableDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterVariableDeclaration) {
            listener.enterVariableDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVariableDeclaration) {
            listener.exitVariableDeclaration(this);
        }
    }
}
exports.VariableDeclarationContext = VariableDeclarationContext;
class ConditionDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    DECLARE_SYMBOL() { return this.getToken(MySQLParser.DECLARE_SYMBOL, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    CONDITION_SYMBOL() { return this.getToken(MySQLParser.CONDITION_SYMBOL, 0); }
    FOR_SYMBOL() { return this.getToken(MySQLParser.FOR_SYMBOL, 0); }
    spCondition() {
        return this.getRuleContext(0, SpConditionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_conditionDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterConditionDeclaration) {
            listener.enterConditionDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitConditionDeclaration) {
            listener.exitConditionDeclaration(this);
        }
    }
}
exports.ConditionDeclarationContext = ConditionDeclarationContext;
class SpConditionContext extends ParserRuleContext_1.ParserRuleContext {
    ulong_number() {
        return this.tryGetRuleContext(0, Ulong_numberContext);
    }
    sqlstate() {
        return this.tryGetRuleContext(0, SqlstateContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_spCondition; }
    // @Override
    enterRule(listener) {
        if (listener.enterSpCondition) {
            listener.enterSpCondition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSpCondition) {
            listener.exitSpCondition(this);
        }
    }
}
exports.SpConditionContext = SpConditionContext;
class SqlstateContext extends ParserRuleContext_1.ParserRuleContext {
    SQLSTATE_SYMBOL() { return this.getToken(MySQLParser.SQLSTATE_SYMBOL, 0); }
    textLiteral() {
        return this.getRuleContext(0, TextLiteralContext);
    }
    VALUE_SYMBOL() { return this.tryGetToken(MySQLParser.VALUE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_sqlstate; }
    // @Override
    enterRule(listener) {
        if (listener.enterSqlstate) {
            listener.enterSqlstate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSqlstate) {
            listener.exitSqlstate(this);
        }
    }
}
exports.SqlstateContext = SqlstateContext;
class HandlerDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    DECLARE_SYMBOL() { return this.getToken(MySQLParser.DECLARE_SYMBOL, 0); }
    HANDLER_SYMBOL() { return this.getToken(MySQLParser.HANDLER_SYMBOL, 0); }
    FOR_SYMBOL() { return this.getToken(MySQLParser.FOR_SYMBOL, 0); }
    handlerCondition(i) {
        if (i === undefined) {
            return this.getRuleContexts(HandlerConditionContext);
        }
        else {
            return this.getRuleContext(i, HandlerConditionContext);
        }
    }
    compoundStatement() {
        return this.getRuleContext(0, CompoundStatementContext);
    }
    CONTINUE_SYMBOL() { return this.tryGetToken(MySQLParser.CONTINUE_SYMBOL, 0); }
    EXIT_SYMBOL() { return this.tryGetToken(MySQLParser.EXIT_SYMBOL, 0); }
    UNDO_SYMBOL() { return this.tryGetToken(MySQLParser.UNDO_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_handlerDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterHandlerDeclaration) {
            listener.enterHandlerDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHandlerDeclaration) {
            listener.exitHandlerDeclaration(this);
        }
    }
}
exports.HandlerDeclarationContext = HandlerDeclarationContext;
class HandlerConditionContext extends ParserRuleContext_1.ParserRuleContext {
    spCondition() {
        return this.tryGetRuleContext(0, SpConditionContext);
    }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    SQLWARNING_SYMBOL() { return this.tryGetToken(MySQLParser.SQLWARNING_SYMBOL, 0); }
    notRule() {
        return this.tryGetRuleContext(0, NotRuleContext);
    }
    FOUND_SYMBOL() { return this.tryGetToken(MySQLParser.FOUND_SYMBOL, 0); }
    SQLEXCEPTION_SYMBOL() { return this.tryGetToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_handlerCondition; }
    // @Override
    enterRule(listener) {
        if (listener.enterHandlerCondition) {
            listener.enterHandlerCondition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHandlerCondition) {
            listener.exitHandlerCondition(this);
        }
    }
}
exports.HandlerConditionContext = HandlerConditionContext;
class CursorDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    DECLARE_SYMBOL() { return this.getToken(MySQLParser.DECLARE_SYMBOL, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    CURSOR_SYMBOL() { return this.getToken(MySQLParser.CURSOR_SYMBOL, 0); }
    FOR_SYMBOL() { return this.getToken(MySQLParser.FOR_SYMBOL, 0); }
    selectStatement() {
        return this.getRuleContext(0, SelectStatementContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_cursorDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterCursorDeclaration) {
            listener.enterCursorDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCursorDeclaration) {
            listener.exitCursorDeclaration(this);
        }
    }
}
exports.CursorDeclarationContext = CursorDeclarationContext;
class IterateStatementContext extends ParserRuleContext_1.ParserRuleContext {
    ITERATE_SYMBOL() { return this.getToken(MySQLParser.ITERATE_SYMBOL, 0); }
    labelRef() {
        return this.getRuleContext(0, LabelRefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_iterateStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterIterateStatement) {
            listener.enterIterateStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIterateStatement) {
            listener.exitIterateStatement(this);
        }
    }
}
exports.IterateStatementContext = IterateStatementContext;
class LeaveStatementContext extends ParserRuleContext_1.ParserRuleContext {
    LEAVE_SYMBOL() { return this.getToken(MySQLParser.LEAVE_SYMBOL, 0); }
    labelRef() {
        return this.getRuleContext(0, LabelRefContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_leaveStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterLeaveStatement) {
            listener.enterLeaveStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLeaveStatement) {
            listener.exitLeaveStatement(this);
        }
    }
}
exports.LeaveStatementContext = LeaveStatementContext;
class GetDiagnosticsContext extends ParserRuleContext_1.ParserRuleContext {
    GET_SYMBOL() { return this.getToken(MySQLParser.GET_SYMBOL, 0); }
    DIAGNOSTICS_SYMBOL() { return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
    statementInformationItem(i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementInformationItemContext);
        }
        else {
            return this.getRuleContext(i, StatementInformationItemContext);
        }
    }
    CONDITION_SYMBOL() { return this.tryGetToken(MySQLParser.CONDITION_SYMBOL, 0); }
    signalAllowedExpr() {
        return this.tryGetRuleContext(0, SignalAllowedExprContext);
    }
    conditionInformationItem(i) {
        if (i === undefined) {
            return this.getRuleContexts(ConditionInformationItemContext);
        }
        else {
            return this.getRuleContext(i, ConditionInformationItemContext);
        }
    }
    CURRENT_SYMBOL() { return this.tryGetToken(MySQLParser.CURRENT_SYMBOL, 0); }
    STACKED_SYMBOL() { return this.tryGetToken(MySQLParser.STACKED_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_getDiagnostics; }
    // @Override
    enterRule(listener) {
        if (listener.enterGetDiagnostics) {
            listener.enterGetDiagnostics(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGetDiagnostics) {
            listener.exitGetDiagnostics(this);
        }
    }
}
exports.GetDiagnosticsContext = GetDiagnosticsContext;
class SignalAllowedExprContext extends ParserRuleContext_1.ParserRuleContext {
    literal() {
        return this.tryGetRuleContext(0, LiteralContext);
    }
    variable() {
        return this.tryGetRuleContext(0, VariableContext);
    }
    qualifiedIdentifier() {
        return this.tryGetRuleContext(0, QualifiedIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_signalAllowedExpr; }
    // @Override
    enterRule(listener) {
        if (listener.enterSignalAllowedExpr) {
            listener.enterSignalAllowedExpr(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSignalAllowedExpr) {
            listener.exitSignalAllowedExpr(this);
        }
    }
}
exports.SignalAllowedExprContext = SignalAllowedExprContext;
class StatementInformationItemContext extends ParserRuleContext_1.ParserRuleContext {
    EQUAL_OPERATOR() { return this.getToken(MySQLParser.EQUAL_OPERATOR, 0); }
    NUMBER_SYMBOL() { return this.tryGetToken(MySQLParser.NUMBER_SYMBOL, 0); }
    ROW_COUNT_SYMBOL() { return this.tryGetToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
    variable() {
        return this.tryGetRuleContext(0, VariableContext);
    }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_statementInformationItem; }
    // @Override
    enterRule(listener) {
        if (listener.enterStatementInformationItem) {
            listener.enterStatementInformationItem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStatementInformationItem) {
            listener.exitStatementInformationItem(this);
        }
    }
}
exports.StatementInformationItemContext = StatementInformationItemContext;
class ConditionInformationItemContext extends ParserRuleContext_1.ParserRuleContext {
    EQUAL_OPERATOR() { return this.getToken(MySQLParser.EQUAL_OPERATOR, 0); }
    variable() {
        return this.tryGetRuleContext(0, VariableContext);
    }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    signalInformationItemName() {
        return this.tryGetRuleContext(0, SignalInformationItemNameContext);
    }
    RETURNED_SQLSTATE_SYMBOL() { return this.tryGetToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_conditionInformationItem; }
    // @Override
    enterRule(listener) {
        if (listener.enterConditionInformationItem) {
            listener.enterConditionInformationItem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitConditionInformationItem) {
            listener.exitConditionInformationItem(this);
        }
    }
}
exports.ConditionInformationItemContext = ConditionInformationItemContext;
class SignalInformationItemNameContext extends ParserRuleContext_1.ParserRuleContext {
    CLASS_ORIGIN_SYMBOL() { return this.tryGetToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
    SUBCLASS_ORIGIN_SYMBOL() { return this.tryGetToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
    CONSTRAINT_CATALOG_SYMBOL() { return this.tryGetToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
    CONSTRAINT_SCHEMA_SYMBOL() { return this.tryGetToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
    CONSTRAINT_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
    CATALOG_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
    SCHEMA_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
    TABLE_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
    COLUMN_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
    CURSOR_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
    MESSAGE_TEXT_SYMBOL() { return this.tryGetToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
    MYSQL_ERRNO_SYMBOL() { return this.tryGetToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_signalInformationItemName; }
    // @Override
    enterRule(listener) {
        if (listener.enterSignalInformationItemName) {
            listener.enterSignalInformationItemName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSignalInformationItemName) {
            listener.exitSignalInformationItemName(this);
        }
    }
}
exports.SignalInformationItemNameContext = SignalInformationItemNameContext;
class SignalStatementContext extends ParserRuleContext_1.ParserRuleContext {
    SIGNAL_SYMBOL() { return this.getToken(MySQLParser.SIGNAL_SYMBOL, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    sqlstate() {
        return this.tryGetRuleContext(0, SqlstateContext);
    }
    SET_SYMBOL() { return this.tryGetToken(MySQLParser.SET_SYMBOL, 0); }
    signalInformationItem(i) {
        if (i === undefined) {
            return this.getRuleContexts(SignalInformationItemContext);
        }
        else {
            return this.getRuleContext(i, SignalInformationItemContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_signalStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterSignalStatement) {
            listener.enterSignalStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSignalStatement) {
            listener.exitSignalStatement(this);
        }
    }
}
exports.SignalStatementContext = SignalStatementContext;
class ResignalStatementContext extends ParserRuleContext_1.ParserRuleContext {
    RESIGNAL_SYMBOL() { return this.getToken(MySQLParser.RESIGNAL_SYMBOL, 0); }
    SQLSTATE_SYMBOL() { return this.tryGetToken(MySQLParser.SQLSTATE_SYMBOL, 0); }
    textOrIdentifier() {
        return this.tryGetRuleContext(0, TextOrIdentifierContext);
    }
    SET_SYMBOL() { return this.tryGetToken(MySQLParser.SET_SYMBOL, 0); }
    signalInformationItem(i) {
        if (i === undefined) {
            return this.getRuleContexts(SignalInformationItemContext);
        }
        else {
            return this.getRuleContext(i, SignalInformationItemContext);
        }
    }
    VALUE_SYMBOL() { return this.tryGetToken(MySQLParser.VALUE_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_resignalStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterResignalStatement) {
            listener.enterResignalStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResignalStatement) {
            listener.exitResignalStatement(this);
        }
    }
}
exports.ResignalStatementContext = ResignalStatementContext;
class SignalInformationItemContext extends ParserRuleContext_1.ParserRuleContext {
    signalInformationItemName() {
        return this.getRuleContext(0, SignalInformationItemNameContext);
    }
    EQUAL_OPERATOR() { return this.getToken(MySQLParser.EQUAL_OPERATOR, 0); }
    signalAllowedExpr() {
        return this.getRuleContext(0, SignalAllowedExprContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_signalInformationItem; }
    // @Override
    enterRule(listener) {
        if (listener.enterSignalInformationItem) {
            listener.enterSignalInformationItem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSignalInformationItem) {
            listener.exitSignalInformationItem(this);
        }
    }
}
exports.SignalInformationItemContext = SignalInformationItemContext;
class CursorOpenContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_SYMBOL() { return this.getToken(MySQLParser.OPEN_SYMBOL, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_cursorOpen; }
    // @Override
    enterRule(listener) {
        if (listener.enterCursorOpen) {
            listener.enterCursorOpen(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCursorOpen) {
            listener.exitCursorOpen(this);
        }
    }
}
exports.CursorOpenContext = CursorOpenContext;
class CursorCloseContext extends ParserRuleContext_1.ParserRuleContext {
    CLOSE_SYMBOL() { return this.getToken(MySQLParser.CLOSE_SYMBOL, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_cursorClose; }
    // @Override
    enterRule(listener) {
        if (listener.enterCursorClose) {
            listener.enterCursorClose(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCursorClose) {
            listener.exitCursorClose(this);
        }
    }
}
exports.CursorCloseContext = CursorCloseContext;
class CursorFetchContext extends ParserRuleContext_1.ParserRuleContext {
    FETCH_SYMBOL() { return this.getToken(MySQLParser.FETCH_SYMBOL, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    INTO_SYMBOL() { return this.getToken(MySQLParser.INTO_SYMBOL, 0); }
    identifierList() {
        return this.getRuleContext(0, IdentifierListContext);
    }
    FROM_SYMBOL() { return this.tryGetToken(MySQLParser.FROM_SYMBOL, 0); }
    NEXT_SYMBOL() { return this.tryGetToken(MySQLParser.NEXT_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_cursorFetch; }
    // @Override
    enterRule(listener) {
        if (listener.enterCursorFetch) {
            listener.enterCursorFetch(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCursorFetch) {
            listener.exitCursorFetch(this);
        }
    }
}
exports.CursorFetchContext = CursorFetchContext;
class ScheduleContext extends ParserRuleContext_1.ParserRuleContext {
    AT_SYMBOL() { return this.tryGetToken(MySQLParser.AT_SYMBOL, 0); }
    expr(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }
        else {
            return this.getRuleContext(i, ExprContext);
        }
    }
    EVERY_SYMBOL() { return this.tryGetToken(MySQLParser.EVERY_SYMBOL, 0); }
    interval() {
        return this.tryGetRuleContext(0, IntervalContext);
    }
    STARTS_SYMBOL() { return this.tryGetToken(MySQLParser.STARTS_SYMBOL, 0); }
    ENDS_SYMBOL() { return this.tryGetToken(MySQLParser.ENDS_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_schedule; }
    // @Override
    enterRule(listener) {
        if (listener.enterSchedule) {
            listener.enterSchedule(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSchedule) {
            listener.exitSchedule(this);
        }
    }
}
exports.ScheduleContext = ScheduleContext;
class ColumnDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    columnName() {
        return this.getRuleContext(0, ColumnNameContext);
    }
    fieldDefinition() {
        return this.getRuleContext(0, FieldDefinitionContext);
    }
    checkOrReferences() {
        return this.tryGetRuleContext(0, CheckOrReferencesContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_columnDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnDefinition) {
            listener.enterColumnDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnDefinition) {
            listener.exitColumnDefinition(this);
        }
    }
}
exports.ColumnDefinitionContext = ColumnDefinitionContext;
class CheckOrReferencesContext extends ParserRuleContext_1.ParserRuleContext {
    checkConstraint() {
        return this.tryGetRuleContext(0, CheckConstraintContext);
    }
    references() {
        return this.tryGetRuleContext(0, ReferencesContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_checkOrReferences; }
    // @Override
    enterRule(listener) {
        if (listener.enterCheckOrReferences) {
            listener.enterCheckOrReferences(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCheckOrReferences) {
            listener.exitCheckOrReferences(this);
        }
    }
}
exports.CheckOrReferencesContext = CheckOrReferencesContext;
class CheckConstraintContext extends ParserRuleContext_1.ParserRuleContext {
    CHECK_SYMBOL() { return this.getToken(MySQLParser.CHECK_SYMBOL, 0); }
    exprWithParentheses() {
        return this.getRuleContext(0, ExprWithParenthesesContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_checkConstraint; }
    // @Override
    enterRule(listener) {
        if (listener.enterCheckConstraint) {
            listener.enterCheckConstraint(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCheckConstraint) {
            listener.exitCheckConstraint(this);
        }
    }
}
exports.CheckConstraintContext = CheckConstraintContext;
class ConstraintEnforcementContext extends ParserRuleContext_1.ParserRuleContext {
    ENFORCED_SYMBOL() { return this.getToken(MySQLParser.ENFORCED_SYMBOL, 0); }
    NOT_SYMBOL() { return this.tryGetToken(MySQLParser.NOT_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_constraintEnforcement; }
    // @Override
    enterRule(listener) {
        if (listener.enterConstraintEnforcement) {
            listener.enterConstraintEnforcement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitConstraintEnforcement) {
            listener.exitConstraintEnforcement(this);
        }
    }
}
exports.ConstraintEnforcementContext = ConstraintEnforcementContext;
class TableConstraintDefContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    keyListVariants() {
        return this.tryGetRuleContext(0, KeyListVariantsContext);
    }
    KEY_SYMBOL() { return this.tryGetToken(MySQLParser.KEY_SYMBOL, 0); }
    INDEX_SYMBOL() { return this.tryGetToken(MySQLParser.INDEX_SYMBOL, 0); }
    indexNameAndType() {
        return this.tryGetRuleContext(0, IndexNameAndTypeContext);
    }
    indexOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(IndexOptionContext);
        }
        else {
            return this.getRuleContext(i, IndexOptionContext);
        }
    }
    FULLTEXT_SYMBOL() { return this.tryGetToken(MySQLParser.FULLTEXT_SYMBOL, 0); }
    keyOrIndex() {
        return this.tryGetRuleContext(0, KeyOrIndexContext);
    }
    indexName() {
        return this.tryGetRuleContext(0, IndexNameContext);
    }
    fulltextIndexOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(FulltextIndexOptionContext);
        }
        else {
            return this.getRuleContext(i, FulltextIndexOptionContext);
        }
    }
    SPATIAL_SYMBOL() { return this.tryGetToken(MySQLParser.SPATIAL_SYMBOL, 0); }
    spatialIndexOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(SpatialIndexOptionContext);
        }
        else {
            return this.getRuleContext(i, SpatialIndexOptionContext);
        }
    }
    keyList() {
        return this.tryGetRuleContext(0, KeyListContext);
    }
    references() {
        return this.tryGetRuleContext(0, ReferencesContext);
    }
    checkConstraint() {
        return this.tryGetRuleContext(0, CheckConstraintContext);
    }
    constraintName() {
        return this.tryGetRuleContext(0, ConstraintNameContext);
    }
    FOREIGN_SYMBOL() { return this.tryGetToken(MySQLParser.FOREIGN_SYMBOL, 0); }
    PRIMARY_SYMBOL() { return this.tryGetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
    UNIQUE_SYMBOL() { return this.tryGetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
    constraintEnforcement() {
        return this.tryGetRuleContext(0, ConstraintEnforcementContext);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tableConstraintDef; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableConstraintDef) {
            listener.enterTableConstraintDef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableConstraintDef) {
            listener.exitTableConstraintDef(this);
        }
    }
}
exports.TableConstraintDefContext = TableConstraintDefContext;
class ConstraintNameContext extends ParserRuleContext_1.ParserRuleContext {
    CONSTRAINT_SYMBOL() { return this.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_constraintName; }
    // @Override
    enterRule(listener) {
        if (listener.enterConstraintName) {
            listener.enterConstraintName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitConstraintName) {
            listener.exitConstraintName(this);
        }
    }
}
exports.ConstraintNameContext = ConstraintNameContext;
class FieldDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    dataType() {
        return this.getRuleContext(0, DataTypeContext);
    }
    AS_SYMBOL() { return this.tryGetToken(MySQLParser.AS_SYMBOL, 0); }
    exprWithParentheses() {
        return this.tryGetRuleContext(0, ExprWithParenthesesContext);
    }
    columnAttribute(i) {
        if (i === undefined) {
            return this.getRuleContexts(ColumnAttributeContext);
        }
        else {
            return this.getRuleContext(i, ColumnAttributeContext);
        }
    }
    collate() {
        return this.tryGetRuleContext(0, CollateContext);
    }
    GENERATED_SYMBOL() { return this.tryGetToken(MySQLParser.GENERATED_SYMBOL, 0); }
    ALWAYS_SYMBOL() { return this.tryGetToken(MySQLParser.ALWAYS_SYMBOL, 0); }
    VIRTUAL_SYMBOL() { return this.tryGetToken(MySQLParser.VIRTUAL_SYMBOL, 0); }
    STORED_SYMBOL() { return this.tryGetToken(MySQLParser.STORED_SYMBOL, 0); }
    gcolAttribute(i) {
        if (i === undefined) {
            return this.getRuleContexts(GcolAttributeContext);
        }
        else {
            return this.getRuleContext(i, GcolAttributeContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_fieldDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterFieldDefinition) {
            listener.enterFieldDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFieldDefinition) {
            listener.exitFieldDefinition(this);
        }
    }
}
exports.FieldDefinitionContext = FieldDefinitionContext;
class ColumnAttributeContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    nullLiteral() {
        return this.tryGetRuleContext(0, NullLiteralContext);
    }
    NOT_SYMBOL() { return this.tryGetToken(MySQLParser.NOT_SYMBOL, 0); }
    SECONDARY_SYMBOL() { return this.tryGetToken(MySQLParser.SECONDARY_SYMBOL, 0); }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    signedLiteral() {
        return this.tryGetRuleContext(0, SignedLiteralContext);
    }
    NOW_SYMBOL() { return this.tryGetToken(MySQLParser.NOW_SYMBOL, 0); }
    exprWithParentheses() {
        return this.tryGetRuleContext(0, ExprWithParenthesesContext);
    }
    timeFunctionParameters() {
        return this.tryGetRuleContext(0, TimeFunctionParametersContext);
    }
    UPDATE_SYMBOL() { return this.tryGetToken(MySQLParser.UPDATE_SYMBOL, 0); }
    ON_SYMBOL() { return this.tryGetToken(MySQLParser.ON_SYMBOL, 0); }
    AUTO_INCREMENT_SYMBOL() { return this.tryGetToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
    VALUE_SYMBOL() { return this.tryGetToken(MySQLParser.VALUE_SYMBOL, 0); }
    SERIAL_SYMBOL() { return this.tryGetToken(MySQLParser.SERIAL_SYMBOL, 0); }
    KEY_SYMBOL() { return this.tryGetToken(MySQLParser.KEY_SYMBOL, 0); }
    PRIMARY_SYMBOL() { return this.tryGetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
    UNIQUE_SYMBOL() { return this.tryGetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
    textLiteral() {
        return this.tryGetRuleContext(0, TextLiteralContext);
    }
    COMMENT_SYMBOL() { return this.tryGetToken(MySQLParser.COMMENT_SYMBOL, 0); }
    collate() {
        return this.tryGetRuleContext(0, CollateContext);
    }
    columnFormat() {
        return this.tryGetRuleContext(0, ColumnFormatContext);
    }
    COLUMN_FORMAT_SYMBOL() { return this.tryGetToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
    storageMedia() {
        return this.tryGetRuleContext(0, StorageMediaContext);
    }
    STORAGE_SYMBOL() { return this.tryGetToken(MySQLParser.STORAGE_SYMBOL, 0); }
    real_ulonglong_number() {
        return this.tryGetRuleContext(0, Real_ulonglong_numberContext);
    }
    SRID_SYMBOL() { return this.tryGetToken(MySQLParser.SRID_SYMBOL, 0); }
    checkConstraint() {
        return this.tryGetRuleContext(0, CheckConstraintContext);
    }
    constraintName() {
        return this.tryGetRuleContext(0, ConstraintNameContext);
    }
    constraintEnforcement() {
        return this.tryGetRuleContext(0, ConstraintEnforcementContext);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_columnAttribute; }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnAttribute) {
            listener.enterColumnAttribute(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnAttribute) {
            listener.exitColumnAttribute(this);
        }
    }
}
exports.ColumnAttributeContext = ColumnAttributeContext;
class ColumnFormatContext extends ParserRuleContext_1.ParserRuleContext {
    FIXED_SYMBOL() { return this.tryGetToken(MySQLParser.FIXED_SYMBOL, 0); }
    DYNAMIC_SYMBOL() { return this.tryGetToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_columnFormat; }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnFormat) {
            listener.enterColumnFormat(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnFormat) {
            listener.exitColumnFormat(this);
        }
    }
}
exports.ColumnFormatContext = ColumnFormatContext;
class StorageMediaContext extends ParserRuleContext_1.ParserRuleContext {
    DISK_SYMBOL() { return this.tryGetToken(MySQLParser.DISK_SYMBOL, 0); }
    MEMORY_SYMBOL() { return this.tryGetToken(MySQLParser.MEMORY_SYMBOL, 0); }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_storageMedia; }
    // @Override
    enterRule(listener) {
        if (listener.enterStorageMedia) {
            listener.enterStorageMedia(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStorageMedia) {
            listener.exitStorageMedia(this);
        }
    }
}
exports.StorageMediaContext = StorageMediaContext;
class GcolAttributeContext extends ParserRuleContext_1.ParserRuleContext {
    UNIQUE_SYMBOL() { return this.tryGetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
    KEY_SYMBOL() { return this.tryGetToken(MySQLParser.KEY_SYMBOL, 0); }
    COMMENT_SYMBOL() { return this.tryGetToken(MySQLParser.COMMENT_SYMBOL, 0); }
    textString() {
        return this.tryGetRuleContext(0, TextStringContext);
    }
    NULL_SYMBOL() { return this.tryGetToken(MySQLParser.NULL_SYMBOL, 0); }
    notRule() {
        return this.tryGetRuleContext(0, NotRuleContext);
    }
    PRIMARY_SYMBOL() { return this.tryGetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_gcolAttribute; }
    // @Override
    enterRule(listener) {
        if (listener.enterGcolAttribute) {
            listener.enterGcolAttribute(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGcolAttribute) {
            listener.exitGcolAttribute(this);
        }
    }
}
exports.GcolAttributeContext = GcolAttributeContext;
class ReferencesContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    REFERENCES_SYMBOL() { return this.getToken(MySQLParser.REFERENCES_SYMBOL, 0); }
    tableRef() {
        return this.getRuleContext(0, TableRefContext);
    }
    identifierListWithParentheses() {
        return this.tryGetRuleContext(0, IdentifierListWithParenthesesContext);
    }
    MATCH_SYMBOL() { return this.tryGetToken(MySQLParser.MATCH_SYMBOL, 0); }
    ON_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.ON_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.ON_SYMBOL, i);
        }
    }
    deleteOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(DeleteOptionContext);
        }
        else {
            return this.getRuleContext(i, DeleteOptionContext);
        }
    }
    UPDATE_SYMBOL() { return this.tryGetToken(MySQLParser.UPDATE_SYMBOL, 0); }
    DELETE_SYMBOL() { return this.tryGetToken(MySQLParser.DELETE_SYMBOL, 0); }
    FULL_SYMBOL() { return this.tryGetToken(MySQLParser.FULL_SYMBOL, 0); }
    PARTIAL_SYMBOL() { return this.tryGetToken(MySQLParser.PARTIAL_SYMBOL, 0); }
    SIMPLE_SYMBOL() { return this.tryGetToken(MySQLParser.SIMPLE_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_references; }
    // @Override
    enterRule(listener) {
        if (listener.enterReferences) {
            listener.enterReferences(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReferences) {
            listener.exitReferences(this);
        }
    }
}
exports.ReferencesContext = ReferencesContext;
class DeleteOptionContext extends ParserRuleContext_1.ParserRuleContext {
    RESTRICT_SYMBOL() { return this.tryGetToken(MySQLParser.RESTRICT_SYMBOL, 0); }
    CASCADE_SYMBOL() { return this.tryGetToken(MySQLParser.CASCADE_SYMBOL, 0); }
    SET_SYMBOL() { return this.tryGetToken(MySQLParser.SET_SYMBOL, 0); }
    nullLiteral() {
        return this.tryGetRuleContext(0, NullLiteralContext);
    }
    NO_SYMBOL() { return this.tryGetToken(MySQLParser.NO_SYMBOL, 0); }
    ACTION_SYMBOL() { return this.tryGetToken(MySQLParser.ACTION_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_deleteOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterDeleteOption) {
            listener.enterDeleteOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDeleteOption) {
            listener.exitDeleteOption(this);
        }
    }
}
exports.DeleteOptionContext = DeleteOptionContext;
class KeyListContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    keyPart(i) {
        if (i === undefined) {
            return this.getRuleContexts(KeyPartContext);
        }
        else {
            return this.getRuleContext(i, KeyPartContext);
        }
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_keyList; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyList) {
            listener.enterKeyList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyList) {
            listener.exitKeyList(this);
        }
    }
}
exports.KeyListContext = KeyListContext;
class KeyPartContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    fieldLength() {
        return this.tryGetRuleContext(0, FieldLengthContext);
    }
    direction() {
        return this.tryGetRuleContext(0, DirectionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_keyPart; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyPart) {
            listener.enterKeyPart(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyPart) {
            listener.exitKeyPart(this);
        }
    }
}
exports.KeyPartContext = KeyPartContext;
class KeyListWithExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    keyPartOrExpression(i) {
        if (i === undefined) {
            return this.getRuleContexts(KeyPartOrExpressionContext);
        }
        else {
            return this.getRuleContext(i, KeyPartOrExpressionContext);
        }
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_keyListWithExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyListWithExpression) {
            listener.enterKeyListWithExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyListWithExpression) {
            listener.exitKeyListWithExpression(this);
        }
    }
}
exports.KeyListWithExpressionContext = KeyListWithExpressionContext;
class KeyPartOrExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    keyPart() {
        return this.tryGetRuleContext(0, KeyPartContext);
    }
    exprWithParentheses() {
        return this.tryGetRuleContext(0, ExprWithParenthesesContext);
    }
    direction() {
        return this.tryGetRuleContext(0, DirectionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_keyPartOrExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyPartOrExpression) {
            listener.enterKeyPartOrExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyPartOrExpression) {
            listener.exitKeyPartOrExpression(this);
        }
    }
}
exports.KeyPartOrExpressionContext = KeyPartOrExpressionContext;
class KeyListVariantsContext extends ParserRuleContext_1.ParserRuleContext {
    keyListWithExpression() {
        return this.tryGetRuleContext(0, KeyListWithExpressionContext);
    }
    keyList() {
        return this.tryGetRuleContext(0, KeyListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_keyListVariants; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyListVariants) {
            listener.enterKeyListVariants(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyListVariants) {
            listener.exitKeyListVariants(this);
        }
    }
}
exports.KeyListVariantsContext = KeyListVariantsContext;
class IndexTypeContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    BTREE_SYMBOL() { return this.tryGetToken(MySQLParser.BTREE_SYMBOL, 0); }
    RTREE_SYMBOL() { return this.tryGetToken(MySQLParser.RTREE_SYMBOL, 0); }
    HASH_SYMBOL() { return this.tryGetToken(MySQLParser.HASH_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_indexType; }
    // @Override
    enterRule(listener) {
        if (listener.enterIndexType) {
            listener.enterIndexType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIndexType) {
            listener.exitIndexType(this);
        }
    }
}
exports.IndexTypeContext = IndexTypeContext;
class IndexOptionContext extends ParserRuleContext_1.ParserRuleContext {
    commonIndexOption() {
        return this.tryGetRuleContext(0, CommonIndexOptionContext);
    }
    indexTypeClause() {
        return this.tryGetRuleContext(0, IndexTypeClauseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_indexOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterIndexOption) {
            listener.enterIndexOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIndexOption) {
            listener.exitIndexOption(this);
        }
    }
}
exports.IndexOptionContext = IndexOptionContext;
class CommonIndexOptionContext extends ParserRuleContext_1.ParserRuleContext {
    KEY_BLOCK_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
    ulong_number() {
        return this.tryGetRuleContext(0, Ulong_numberContext);
    }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    COMMENT_SYMBOL() { return this.tryGetToken(MySQLParser.COMMENT_SYMBOL, 0); }
    textLiteral() {
        return this.tryGetRuleContext(0, TextLiteralContext);
    }
    visibility() {
        return this.tryGetRuleContext(0, VisibilityContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_commonIndexOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterCommonIndexOption) {
            listener.enterCommonIndexOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCommonIndexOption) {
            listener.exitCommonIndexOption(this);
        }
    }
}
exports.CommonIndexOptionContext = CommonIndexOptionContext;
class VisibilityContext extends ParserRuleContext_1.ParserRuleContext {
    VISIBLE_SYMBOL() { return this.tryGetToken(MySQLParser.VISIBLE_SYMBOL, 0); }
    INVISIBLE_SYMBOL() { return this.tryGetToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_visibility; }
    // @Override
    enterRule(listener) {
        if (listener.enterVisibility) {
            listener.enterVisibility(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVisibility) {
            listener.exitVisibility(this);
        }
    }
}
exports.VisibilityContext = VisibilityContext;
class IndexTypeClauseContext extends ParserRuleContext_1.ParserRuleContext {
    indexType() {
        return this.getRuleContext(0, IndexTypeContext);
    }
    USING_SYMBOL() { return this.tryGetToken(MySQLParser.USING_SYMBOL, 0); }
    TYPE_SYMBOL() { return this.tryGetToken(MySQLParser.TYPE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_indexTypeClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterIndexTypeClause) {
            listener.enterIndexTypeClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIndexTypeClause) {
            listener.exitIndexTypeClause(this);
        }
    }
}
exports.IndexTypeClauseContext = IndexTypeClauseContext;
class FulltextIndexOptionContext extends ParserRuleContext_1.ParserRuleContext {
    commonIndexOption() {
        return this.tryGetRuleContext(0, CommonIndexOptionContext);
    }
    WITH_SYMBOL() { return this.tryGetToken(MySQLParser.WITH_SYMBOL, 0); }
    PARSER_SYMBOL() { return this.tryGetToken(MySQLParser.PARSER_SYMBOL, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_fulltextIndexOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterFulltextIndexOption) {
            listener.enterFulltextIndexOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFulltextIndexOption) {
            listener.exitFulltextIndexOption(this);
        }
    }
}
exports.FulltextIndexOptionContext = FulltextIndexOptionContext;
class SpatialIndexOptionContext extends ParserRuleContext_1.ParserRuleContext {
    commonIndexOption() {
        return this.getRuleContext(0, CommonIndexOptionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_spatialIndexOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterSpatialIndexOption) {
            listener.enterSpatialIndexOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSpatialIndexOption) {
            listener.exitSpatialIndexOption(this);
        }
    }
}
exports.SpatialIndexOptionContext = SpatialIndexOptionContext;
class DataTypeDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    dataType() {
        return this.getRuleContext(0, DataTypeContext);
    }
    EOF() { return this.getToken(MySQLParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dataTypeDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterDataTypeDefinition) {
            listener.enterDataTypeDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDataTypeDefinition) {
            listener.exitDataTypeDefinition(this);
        }
    }
}
exports.DataTypeDefinitionContext = DataTypeDefinitionContext;
class DataTypeContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    INT_SYMBOL() { return this.tryGetToken(MySQLParser.INT_SYMBOL, 0); }
    TINYINT_SYMBOL() { return this.tryGetToken(MySQLParser.TINYINT_SYMBOL, 0); }
    SMALLINT_SYMBOL() { return this.tryGetToken(MySQLParser.SMALLINT_SYMBOL, 0); }
    MEDIUMINT_SYMBOL() { return this.tryGetToken(MySQLParser.MEDIUMINT_SYMBOL, 0); }
    BIGINT_SYMBOL() { return this.tryGetToken(MySQLParser.BIGINT_SYMBOL, 0); }
    fieldLength() {
        return this.tryGetRuleContext(0, FieldLengthContext);
    }
    fieldOptions() {
        return this.tryGetRuleContext(0, FieldOptionsContext);
    }
    REAL_SYMBOL() { return this.tryGetToken(MySQLParser.REAL_SYMBOL, 0); }
    DOUBLE_SYMBOL() { return this.tryGetToken(MySQLParser.DOUBLE_SYMBOL, 0); }
    precision() {
        return this.tryGetRuleContext(0, PrecisionContext);
    }
    PRECISION_SYMBOL() { return this.tryGetToken(MySQLParser.PRECISION_SYMBOL, 0); }
    FLOAT_SYMBOL() { return this.tryGetToken(MySQLParser.FLOAT_SYMBOL, 0); }
    DECIMAL_SYMBOL() { return this.tryGetToken(MySQLParser.DECIMAL_SYMBOL, 0); }
    NUMERIC_SYMBOL() { return this.tryGetToken(MySQLParser.NUMERIC_SYMBOL, 0); }
    FIXED_SYMBOL() { return this.tryGetToken(MySQLParser.FIXED_SYMBOL, 0); }
    floatOptions() {
        return this.tryGetRuleContext(0, FloatOptionsContext);
    }
    BIT_SYMBOL() { return this.tryGetToken(MySQLParser.BIT_SYMBOL, 0); }
    BOOL_SYMBOL() { return this.tryGetToken(MySQLParser.BOOL_SYMBOL, 0); }
    BOOLEAN_SYMBOL() { return this.tryGetToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
    CHAR_SYMBOL() { return this.tryGetToken(MySQLParser.CHAR_SYMBOL, 0); }
    charsetWithOptBinary() {
        return this.tryGetRuleContext(0, CharsetWithOptBinaryContext);
    }
    nchar() {
        return this.tryGetRuleContext(0, NcharContext);
    }
    BINARY_SYMBOL() { return this.tryGetToken(MySQLParser.BINARY_SYMBOL, 0); }
    VARYING_SYMBOL() { return this.tryGetToken(MySQLParser.VARYING_SYMBOL, 0); }
    VARCHAR_SYMBOL() { return this.tryGetToken(MySQLParser.VARCHAR_SYMBOL, 0); }
    NATIONAL_SYMBOL() { return this.tryGetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
    NVARCHAR_SYMBOL() { return this.tryGetToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
    NCHAR_SYMBOL() { return this.tryGetToken(MySQLParser.NCHAR_SYMBOL, 0); }
    VARBINARY_SYMBOL() { return this.tryGetToken(MySQLParser.VARBINARY_SYMBOL, 0); }
    YEAR_SYMBOL() { return this.tryGetToken(MySQLParser.YEAR_SYMBOL, 0); }
    DATE_SYMBOL() { return this.tryGetToken(MySQLParser.DATE_SYMBOL, 0); }
    TIME_SYMBOL() { return this.tryGetToken(MySQLParser.TIME_SYMBOL, 0); }
    typeDatetimePrecision() {
        return this.tryGetRuleContext(0, TypeDatetimePrecisionContext);
    }
    TIMESTAMP_SYMBOL() { return this.tryGetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
    DATETIME_SYMBOL() { return this.tryGetToken(MySQLParser.DATETIME_SYMBOL, 0); }
    TINYBLOB_SYMBOL() { return this.tryGetToken(MySQLParser.TINYBLOB_SYMBOL, 0); }
    BLOB_SYMBOL() { return this.tryGetToken(MySQLParser.BLOB_SYMBOL, 0); }
    MEDIUMBLOB_SYMBOL() { return this.tryGetToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0); }
    LONGBLOB_SYMBOL() { return this.tryGetToken(MySQLParser.LONGBLOB_SYMBOL, 0); }
    LONG_SYMBOL() { return this.tryGetToken(MySQLParser.LONG_SYMBOL, 0); }
    TINYTEXT_SYMBOL() { return this.tryGetToken(MySQLParser.TINYTEXT_SYMBOL, 0); }
    TEXT_SYMBOL() { return this.tryGetToken(MySQLParser.TEXT_SYMBOL, 0); }
    MEDIUMTEXT_SYMBOL() { return this.tryGetToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0); }
    LONGTEXT_SYMBOL() { return this.tryGetToken(MySQLParser.LONGTEXT_SYMBOL, 0); }
    stringList() {
        return this.tryGetRuleContext(0, StringListContext);
    }
    ENUM_SYMBOL() { return this.tryGetToken(MySQLParser.ENUM_SYMBOL, 0); }
    SET_SYMBOL() { return this.tryGetToken(MySQLParser.SET_SYMBOL, 0); }
    SERIAL_SYMBOL() { return this.tryGetToken(MySQLParser.SERIAL_SYMBOL, 0); }
    JSON_SYMBOL() { return this.tryGetToken(MySQLParser.JSON_SYMBOL, 0); }
    GEOMETRY_SYMBOL() { return this.tryGetToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
    GEOMETRYCOLLECTION_SYMBOL() { return this.tryGetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
    POINT_SYMBOL() { return this.tryGetToken(MySQLParser.POINT_SYMBOL, 0); }
    MULTIPOINT_SYMBOL() { return this.tryGetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
    LINESTRING_SYMBOL() { return this.tryGetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
    MULTILINESTRING_SYMBOL() { return this.tryGetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
    POLYGON_SYMBOL() { return this.tryGetToken(MySQLParser.POLYGON_SYMBOL, 0); }
    MULTIPOLYGON_SYMBOL() { return this.tryGetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dataType; }
    // @Override
    enterRule(listener) {
        if (listener.enterDataType) {
            listener.enterDataType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDataType) {
            listener.exitDataType(this);
        }
    }
}
exports.DataTypeContext = DataTypeContext;
class NcharContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    NCHAR_SYMBOL() { return this.tryGetToken(MySQLParser.NCHAR_SYMBOL, 0); }
    CHAR_SYMBOL() { return this.tryGetToken(MySQLParser.CHAR_SYMBOL, 0); }
    NATIONAL_SYMBOL() { return this.tryGetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_nchar; }
    // @Override
    enterRule(listener) {
        if (listener.enterNchar) {
            listener.enterNchar(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNchar) {
            listener.exitNchar(this);
        }
    }
}
exports.NcharContext = NcharContext;
class RealTypeContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    REAL_SYMBOL() { return this.tryGetToken(MySQLParser.REAL_SYMBOL, 0); }
    DOUBLE_SYMBOL() { return this.tryGetToken(MySQLParser.DOUBLE_SYMBOL, 0); }
    PRECISION_SYMBOL() { return this.tryGetToken(MySQLParser.PRECISION_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_realType; }
    // @Override
    enterRule(listener) {
        if (listener.enterRealType) {
            listener.enterRealType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRealType) {
            listener.exitRealType(this);
        }
    }
}
exports.RealTypeContext = RealTypeContext;
class FieldLengthContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    real_ulonglong_number() {
        return this.tryGetRuleContext(0, Real_ulonglong_numberContext);
    }
    DECIMAL_NUMBER() { return this.tryGetToken(MySQLParser.DECIMAL_NUMBER, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_fieldLength; }
    // @Override
    enterRule(listener) {
        if (listener.enterFieldLength) {
            listener.enterFieldLength(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFieldLength) {
            listener.exitFieldLength(this);
        }
    }
}
exports.FieldLengthContext = FieldLengthContext;
class FieldOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    SIGNED_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.SIGNED_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.SIGNED_SYMBOL, i);
        }
    }
    UNSIGNED_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.UNSIGNED_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.UNSIGNED_SYMBOL, i);
        }
    }
    ZEROFILL_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.ZEROFILL_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.ZEROFILL_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_fieldOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterFieldOptions) {
            listener.enterFieldOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFieldOptions) {
            listener.exitFieldOptions(this);
        }
    }
}
exports.FieldOptionsContext = FieldOptionsContext;
class CharsetWithOptBinaryContext extends ParserRuleContext_1.ParserRuleContext {
    ascii() {
        return this.tryGetRuleContext(0, AsciiContext);
    }
    unicode() {
        return this.tryGetRuleContext(0, UnicodeContext);
    }
    BYTE_SYMBOL() { return this.tryGetToken(MySQLParser.BYTE_SYMBOL, 0); }
    charset() {
        return this.tryGetRuleContext(0, CharsetContext);
    }
    charsetName() {
        return this.tryGetRuleContext(0, CharsetNameContext);
    }
    BINARY_SYMBOL() { return this.tryGetToken(MySQLParser.BINARY_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_charsetWithOptBinary; }
    // @Override
    enterRule(listener) {
        if (listener.enterCharsetWithOptBinary) {
            listener.enterCharsetWithOptBinary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCharsetWithOptBinary) {
            listener.exitCharsetWithOptBinary(this);
        }
    }
}
exports.CharsetWithOptBinaryContext = CharsetWithOptBinaryContext;
class AsciiContext extends ParserRuleContext_1.ParserRuleContext {
    ASCII_SYMBOL() { return this.getToken(MySQLParser.ASCII_SYMBOL, 0); }
    BINARY_SYMBOL() { return this.tryGetToken(MySQLParser.BINARY_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_ascii; }
    // @Override
    enterRule(listener) {
        if (listener.enterAscii) {
            listener.enterAscii(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAscii) {
            listener.exitAscii(this);
        }
    }
}
exports.AsciiContext = AsciiContext;
class UnicodeContext extends ParserRuleContext_1.ParserRuleContext {
    UNICODE_SYMBOL() { return this.getToken(MySQLParser.UNICODE_SYMBOL, 0); }
    BINARY_SYMBOL() { return this.tryGetToken(MySQLParser.BINARY_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_unicode; }
    // @Override
    enterRule(listener) {
        if (listener.enterUnicode) {
            listener.enterUnicode(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUnicode) {
            listener.exitUnicode(this);
        }
    }
}
exports.UnicodeContext = UnicodeContext;
class WsNumCodepointsContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    real_ulong_number() {
        return this.getRuleContext(0, Real_ulong_numberContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_wsNumCodepoints; }
    // @Override
    enterRule(listener) {
        if (listener.enterWsNumCodepoints) {
            listener.enterWsNumCodepoints(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWsNumCodepoints) {
            listener.exitWsNumCodepoints(this);
        }
    }
}
exports.WsNumCodepointsContext = WsNumCodepointsContext;
class TypeDatetimePrecisionContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    INT_NUMBER() { return this.getToken(MySQLParser.INT_NUMBER, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_typeDatetimePrecision; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeDatetimePrecision) {
            listener.enterTypeDatetimePrecision(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeDatetimePrecision) {
            listener.exitTypeDatetimePrecision(this);
        }
    }
}
exports.TypeDatetimePrecisionContext = TypeDatetimePrecisionContext;
class CharsetNameContext extends ParserRuleContext_1.ParserRuleContext {
    textOrIdentifier() {
        return this.tryGetRuleContext(0, TextOrIdentifierContext);
    }
    BINARY_SYMBOL() { return this.tryGetToken(MySQLParser.BINARY_SYMBOL, 0); }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_charsetName; }
    // @Override
    enterRule(listener) {
        if (listener.enterCharsetName) {
            listener.enterCharsetName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCharsetName) {
            listener.exitCharsetName(this);
        }
    }
}
exports.CharsetNameContext = CharsetNameContext;
class CollationNameContext extends ParserRuleContext_1.ParserRuleContext {
    textOrIdentifier() {
        return this.tryGetRuleContext(0, TextOrIdentifierContext);
    }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    BINARY_SYMBOL() { return this.tryGetToken(MySQLParser.BINARY_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_collationName; }
    // @Override
    enterRule(listener) {
        if (listener.enterCollationName) {
            listener.enterCollationName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCollationName) {
            listener.exitCollationName(this);
        }
    }
}
exports.CollationNameContext = CollationNameContext;
class CreateTableOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    createTableOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(CreateTableOptionContext);
        }
        else {
            return this.getRuleContext(i, CreateTableOptionContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createTableOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateTableOptions) {
            listener.enterCreateTableOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateTableOptions) {
            listener.exitCreateTableOptions(this);
        }
    }
}
exports.CreateTableOptionsContext = CreateTableOptionsContext;
class CreateTableOptionsSpaceSeparatedContext extends ParserRuleContext_1.ParserRuleContext {
    createTableOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(CreateTableOptionContext);
        }
        else {
            return this.getRuleContext(i, CreateTableOptionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createTableOptionsSpaceSeparated; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateTableOptionsSpaceSeparated) {
            listener.enterCreateTableOptionsSpaceSeparated(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateTableOptionsSpaceSeparated) {
            listener.exitCreateTableOptionsSpaceSeparated(this);
        }
    }
}
exports.CreateTableOptionsSpaceSeparatedContext = CreateTableOptionsSpaceSeparatedContext;
class CreateTableOptionContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    engineRef() {
        return this.tryGetRuleContext(0, EngineRefContext);
    }
    ENGINE_SYMBOL() { return this.tryGetToken(MySQLParser.ENGINE_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    SECONDARY_ENGINE_SYMBOL() { return this.tryGetToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
    NULL_SYMBOL() { return this.tryGetToken(MySQLParser.NULL_SYMBOL, 0); }
    textOrIdentifier() {
        return this.tryGetRuleContext(0, TextOrIdentifierContext);
    }
    equal() {
        return this.tryGetRuleContext(0, EqualContext);
    }
    ulonglong_number() {
        return this.tryGetRuleContext(0, Ulonglong_numberContext);
    }
    MAX_ROWS_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
    MIN_ROWS_SYMBOL() { return this.tryGetToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
    ulong_number() {
        return this.tryGetRuleContext(0, Ulong_numberContext);
    }
    AVG_ROW_LENGTH_SYMBOL() { return this.tryGetToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
    textStringLiteral() {
        return this.tryGetRuleContext(0, TextStringLiteralContext);
    }
    PASSWORD_SYMBOL() { return this.tryGetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
    COMMENT_SYMBOL() { return this.tryGetToken(MySQLParser.COMMENT_SYMBOL, 0); }
    textString() {
        return this.tryGetRuleContext(0, TextStringContext);
    }
    COMPRESSION_SYMBOL() { return this.tryGetToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
    ENCRYPTION_SYMBOL() { return this.tryGetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
    AUTO_INCREMENT_SYMBOL() { return this.tryGetToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
    ternaryOption() {
        return this.tryGetRuleContext(0, TernaryOptionContext);
    }
    PACK_KEYS_SYMBOL() { return this.tryGetToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
    STATS_AUTO_RECALC_SYMBOL() { return this.tryGetToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
    STATS_PERSISTENT_SYMBOL() { return this.tryGetToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
    STATS_SAMPLE_PAGES_SYMBOL() { return this.tryGetToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
    CHECKSUM_SYMBOL() { return this.tryGetToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
    TABLE_CHECKSUM_SYMBOL() { return this.tryGetToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
    DELAY_KEY_WRITE_SYMBOL() { return this.tryGetToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
    ROW_FORMAT_SYMBOL() { return this.tryGetToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    DYNAMIC_SYMBOL() { return this.tryGetToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
    FIXED_SYMBOL() { return this.tryGetToken(MySQLParser.FIXED_SYMBOL, 0); }
    COMPRESSED_SYMBOL() { return this.tryGetToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
    REDUNDANT_SYMBOL() { return this.tryGetToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
    COMPACT_SYMBOL() { return this.tryGetToken(MySQLParser.COMPACT_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    tableRefList() {
        return this.tryGetRuleContext(0, TableRefListContext);
    }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    UNION_SYMBOL() { return this.tryGetToken(MySQLParser.UNION_SYMBOL, 0); }
    defaultCharset() {
        return this.tryGetRuleContext(0, DefaultCharsetContext);
    }
    defaultCollation() {
        return this.tryGetRuleContext(0, DefaultCollationContext);
    }
    INSERT_METHOD_SYMBOL() { return this.tryGetToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
    NO_SYMBOL() { return this.tryGetToken(MySQLParser.NO_SYMBOL, 0); }
    FIRST_SYMBOL() { return this.tryGetToken(MySQLParser.FIRST_SYMBOL, 0); }
    LAST_SYMBOL() { return this.tryGetToken(MySQLParser.LAST_SYMBOL, 0); }
    DIRECTORY_SYMBOL() { return this.tryGetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
    DATA_SYMBOL() { return this.tryGetToken(MySQLParser.DATA_SYMBOL, 0); }
    INDEX_SYMBOL() { return this.tryGetToken(MySQLParser.INDEX_SYMBOL, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    TABLESPACE_SYMBOL() { return this.tryGetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
    STORAGE_SYMBOL() { return this.tryGetToken(MySQLParser.STORAGE_SYMBOL, 0); }
    DISK_SYMBOL() { return this.tryGetToken(MySQLParser.DISK_SYMBOL, 0); }
    MEMORY_SYMBOL() { return this.tryGetToken(MySQLParser.MEMORY_SYMBOL, 0); }
    CONNECTION_SYMBOL() { return this.tryGetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
    KEY_BLOCK_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createTableOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateTableOption) {
            listener.enterCreateTableOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateTableOption) {
            listener.exitCreateTableOption(this);
        }
    }
}
exports.CreateTableOptionContext = CreateTableOptionContext;
class TernaryOptionContext extends ParserRuleContext_1.ParserRuleContext {
    ulong_number() {
        return this.tryGetRuleContext(0, Ulong_numberContext);
    }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_ternaryOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterTernaryOption) {
            listener.enterTernaryOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTernaryOption) {
            listener.exitTernaryOption(this);
        }
    }
}
exports.TernaryOptionContext = TernaryOptionContext;
class DefaultCollationContext extends ParserRuleContext_1.ParserRuleContext {
    COLLATE_SYMBOL() { return this.getToken(MySQLParser.COLLATE_SYMBOL, 0); }
    collationName() {
        return this.getRuleContext(0, CollationNameContext);
    }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_defaultCollation; }
    // @Override
    enterRule(listener) {
        if (listener.enterDefaultCollation) {
            listener.enterDefaultCollation(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDefaultCollation) {
            listener.exitDefaultCollation(this);
        }
    }
}
exports.DefaultCollationContext = DefaultCollationContext;
class DefaultEncryptionContext extends ParserRuleContext_1.ParserRuleContext {
    ENCRYPTION_SYMBOL() { return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
    textStringLiteral() {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_defaultEncryption; }
    // @Override
    enterRule(listener) {
        if (listener.enterDefaultEncryption) {
            listener.enterDefaultEncryption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDefaultEncryption) {
            listener.exitDefaultEncryption(this);
        }
    }
}
exports.DefaultEncryptionContext = DefaultEncryptionContext;
class DefaultCharsetContext extends ParserRuleContext_1.ParserRuleContext {
    charset() {
        return this.getRuleContext(0, CharsetContext);
    }
    charsetName() {
        return this.getRuleContext(0, CharsetNameContext);
    }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_defaultCharset; }
    // @Override
    enterRule(listener) {
        if (listener.enterDefaultCharset) {
            listener.enterDefaultCharset(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDefaultCharset) {
            listener.exitDefaultCharset(this);
        }
    }
}
exports.DefaultCharsetContext = DefaultCharsetContext;
class PartitionClauseContext extends ParserRuleContext_1.ParserRuleContext {
    PARTITION_SYMBOL() { return this.getToken(MySQLParser.PARTITION_SYMBOL, 0); }
    BY_SYMBOL() { return this.getToken(MySQLParser.BY_SYMBOL, 0); }
    partitionTypeDef() {
        return this.getRuleContext(0, PartitionTypeDefContext);
    }
    PARTITIONS_SYMBOL() { return this.tryGetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
    real_ulong_number() {
        return this.tryGetRuleContext(0, Real_ulong_numberContext);
    }
    subPartitions() {
        return this.tryGetRuleContext(0, SubPartitionsContext);
    }
    partitionDefinitions() {
        return this.tryGetRuleContext(0, PartitionDefinitionsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_partitionClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterPartitionClause) {
            listener.enterPartitionClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartitionClause) {
            listener.exitPartitionClause(this);
        }
    }
}
exports.PartitionClauseContext = PartitionClauseContext;
class PartitionTypeDefContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_partitionTypeDef; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
exports.PartitionTypeDefContext = PartitionTypeDefContext;
class PartitionDefKeyContext extends PartitionTypeDefContext {
    KEY_SYMBOL() { return this.getToken(MySQLParser.KEY_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    LINEAR_SYMBOL() { return this.tryGetToken(MySQLParser.LINEAR_SYMBOL, 0); }
    partitionKeyAlgorithm() {
        return this.tryGetRuleContext(0, PartitionKeyAlgorithmContext);
    }
    identifierList() {
        return this.tryGetRuleContext(0, IdentifierListContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPartitionDefKey) {
            listener.enterPartitionDefKey(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartitionDefKey) {
            listener.exitPartitionDefKey(this);
        }
    }
}
exports.PartitionDefKeyContext = PartitionDefKeyContext;
class PartitionDefHashContext extends PartitionTypeDefContext {
    HASH_SYMBOL() { return this.getToken(MySQLParser.HASH_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    bitExpr() {
        return this.getRuleContext(0, BitExprContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    LINEAR_SYMBOL() { return this.tryGetToken(MySQLParser.LINEAR_SYMBOL, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPartitionDefHash) {
            listener.enterPartitionDefHash(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartitionDefHash) {
            listener.exitPartitionDefHash(this);
        }
    }
}
exports.PartitionDefHashContext = PartitionDefHashContext;
class PartitionDefRangeListContext extends PartitionTypeDefContext {
    RANGE_SYMBOL() { return this.tryGetToken(MySQLParser.RANGE_SYMBOL, 0); }
    LIST_SYMBOL() { return this.tryGetToken(MySQLParser.LIST_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    bitExpr() {
        return this.tryGetRuleContext(0, BitExprContext);
    }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    COLUMNS_SYMBOL() { return this.tryGetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
    identifierList() {
        return this.tryGetRuleContext(0, IdentifierListContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPartitionDefRangeList) {
            listener.enterPartitionDefRangeList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartitionDefRangeList) {
            listener.exitPartitionDefRangeList(this);
        }
    }
}
exports.PartitionDefRangeListContext = PartitionDefRangeListContext;
class SubPartitionsContext extends ParserRuleContext_1.ParserRuleContext {
    SUBPARTITION_SYMBOL() { return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
    BY_SYMBOL() { return this.getToken(MySQLParser.BY_SYMBOL, 0); }
    HASH_SYMBOL() { return this.tryGetToken(MySQLParser.HASH_SYMBOL, 0); }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    bitExpr() {
        return this.tryGetRuleContext(0, BitExprContext);
    }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    KEY_SYMBOL() { return this.tryGetToken(MySQLParser.KEY_SYMBOL, 0); }
    identifierListWithParentheses() {
        return this.tryGetRuleContext(0, IdentifierListWithParenthesesContext);
    }
    LINEAR_SYMBOL() { return this.tryGetToken(MySQLParser.LINEAR_SYMBOL, 0); }
    SUBPARTITIONS_SYMBOL() { return this.tryGetToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
    real_ulong_number() {
        return this.tryGetRuleContext(0, Real_ulong_numberContext);
    }
    partitionKeyAlgorithm() {
        return this.tryGetRuleContext(0, PartitionKeyAlgorithmContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_subPartitions; }
    // @Override
    enterRule(listener) {
        if (listener.enterSubPartitions) {
            listener.enterSubPartitions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSubPartitions) {
            listener.exitSubPartitions(this);
        }
    }
}
exports.SubPartitionsContext = SubPartitionsContext;
class PartitionKeyAlgorithmContext extends ParserRuleContext_1.ParserRuleContext {
    ALGORITHM_SYMBOL() { return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.getToken(MySQLParser.EQUAL_OPERATOR, 0); }
    real_ulong_number() {
        return this.getRuleContext(0, Real_ulong_numberContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_partitionKeyAlgorithm; }
    // @Override
    enterRule(listener) {
        if (listener.enterPartitionKeyAlgorithm) {
            listener.enterPartitionKeyAlgorithm(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartitionKeyAlgorithm) {
            listener.exitPartitionKeyAlgorithm(this);
        }
    }
}
exports.PartitionKeyAlgorithmContext = PartitionKeyAlgorithmContext;
class PartitionDefinitionsContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    partitionDefinition(i) {
        if (i === undefined) {
            return this.getRuleContexts(PartitionDefinitionContext);
        }
        else {
            return this.getRuleContext(i, PartitionDefinitionContext);
        }
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_partitionDefinitions; }
    // @Override
    enterRule(listener) {
        if (listener.enterPartitionDefinitions) {
            listener.enterPartitionDefinitions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartitionDefinitions) {
            listener.exitPartitionDefinitions(this);
        }
    }
}
exports.PartitionDefinitionsContext = PartitionDefinitionsContext;
class PartitionDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    PARTITION_SYMBOL() { return this.getToken(MySQLParser.PARTITION_SYMBOL, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    VALUES_SYMBOL() { return this.tryGetToken(MySQLParser.VALUES_SYMBOL, 0); }
    LESS_SYMBOL() { return this.tryGetToken(MySQLParser.LESS_SYMBOL, 0); }
    THAN_SYMBOL() { return this.tryGetToken(MySQLParser.THAN_SYMBOL, 0); }
    IN_SYMBOL() { return this.tryGetToken(MySQLParser.IN_SYMBOL, 0); }
    partitionValuesIn() {
        return this.tryGetRuleContext(0, PartitionValuesInContext);
    }
    partitionOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(PartitionOptionContext);
        }
        else {
            return this.getRuleContext(i, PartitionOptionContext);
        }
    }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    subpartitionDefinition(i) {
        if (i === undefined) {
            return this.getRuleContexts(SubpartitionDefinitionContext);
        }
        else {
            return this.getRuleContext(i, SubpartitionDefinitionContext);
        }
    }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    partitionValueItemListParen() {
        return this.tryGetRuleContext(0, PartitionValueItemListParenContext);
    }
    MAXVALUE_SYMBOL() { return this.tryGetToken(MySQLParser.MAXVALUE_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_partitionDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterPartitionDefinition) {
            listener.enterPartitionDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartitionDefinition) {
            listener.exitPartitionDefinition(this);
        }
    }
}
exports.PartitionDefinitionContext = PartitionDefinitionContext;
class PartitionValuesInContext extends ParserRuleContext_1.ParserRuleContext {
    partitionValueItemListParen(i) {
        if (i === undefined) {
            return this.getRuleContexts(PartitionValueItemListParenContext);
        }
        else {
            return this.getRuleContext(i, PartitionValueItemListParenContext);
        }
    }
    OPEN_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_partitionValuesIn; }
    // @Override
    enterRule(listener) {
        if (listener.enterPartitionValuesIn) {
            listener.enterPartitionValuesIn(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartitionValuesIn) {
            listener.exitPartitionValuesIn(this);
        }
    }
}
exports.PartitionValuesInContext = PartitionValuesInContext;
class PartitionOptionContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    TABLESPACE_SYMBOL() { return this.tryGetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    engineRef() {
        return this.tryGetRuleContext(0, EngineRefContext);
    }
    ENGINE_SYMBOL() { return this.tryGetToken(MySQLParser.ENGINE_SYMBOL, 0); }
    STORAGE_SYMBOL() { return this.tryGetToken(MySQLParser.STORAGE_SYMBOL, 0); }
    real_ulong_number() {
        return this.tryGetRuleContext(0, Real_ulong_numberContext);
    }
    NODEGROUP_SYMBOL() { return this.tryGetToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
    MAX_ROWS_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
    MIN_ROWS_SYMBOL() { return this.tryGetToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
    DIRECTORY_SYMBOL() { return this.tryGetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
    textLiteral() {
        return this.tryGetRuleContext(0, TextLiteralContext);
    }
    DATA_SYMBOL() { return this.tryGetToken(MySQLParser.DATA_SYMBOL, 0); }
    INDEX_SYMBOL() { return this.tryGetToken(MySQLParser.INDEX_SYMBOL, 0); }
    COMMENT_SYMBOL() { return this.tryGetToken(MySQLParser.COMMENT_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_partitionOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterPartitionOption) {
            listener.enterPartitionOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartitionOption) {
            listener.exitPartitionOption(this);
        }
    }
}
exports.PartitionOptionContext = PartitionOptionContext;
class SubpartitionDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    SUBPARTITION_SYMBOL() { return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
    textOrIdentifier() {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    partitionOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(PartitionOptionContext);
        }
        else {
            return this.getRuleContext(i, PartitionOptionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_subpartitionDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterSubpartitionDefinition) {
            listener.enterSubpartitionDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSubpartitionDefinition) {
            listener.exitSubpartitionDefinition(this);
        }
    }
}
exports.SubpartitionDefinitionContext = SubpartitionDefinitionContext;
class PartitionValueItemListParenContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    partitionValueItem(i) {
        if (i === undefined) {
            return this.getRuleContexts(PartitionValueItemContext);
        }
        else {
            return this.getRuleContext(i, PartitionValueItemContext);
        }
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_partitionValueItemListParen; }
    // @Override
    enterRule(listener) {
        if (listener.enterPartitionValueItemListParen) {
            listener.enterPartitionValueItemListParen(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartitionValueItemListParen) {
            listener.exitPartitionValueItemListParen(this);
        }
    }
}
exports.PartitionValueItemListParenContext = PartitionValueItemListParenContext;
class PartitionValueItemContext extends ParserRuleContext_1.ParserRuleContext {
    bitExpr() {
        return this.tryGetRuleContext(0, BitExprContext);
    }
    MAXVALUE_SYMBOL() { return this.tryGetToken(MySQLParser.MAXVALUE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_partitionValueItem; }
    // @Override
    enterRule(listener) {
        if (listener.enterPartitionValueItem) {
            listener.enterPartitionValueItem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartitionValueItem) {
            listener.exitPartitionValueItem(this);
        }
    }
}
exports.PartitionValueItemContext = PartitionValueItemContext;
class DefinerClauseContext extends ParserRuleContext_1.ParserRuleContext {
    DEFINER_SYMBOL() { return this.getToken(MySQLParser.DEFINER_SYMBOL, 0); }
    EQUAL_OPERATOR() { return this.getToken(MySQLParser.EQUAL_OPERATOR, 0); }
    user() {
        return this.getRuleContext(0, UserContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_definerClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterDefinerClause) {
            listener.enterDefinerClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDefinerClause) {
            listener.exitDefinerClause(this);
        }
    }
}
exports.DefinerClauseContext = DefinerClauseContext;
class IfExistsContext extends ParserRuleContext_1.ParserRuleContext {
    IF_SYMBOL() { return this.getToken(MySQLParser.IF_SYMBOL, 0); }
    EXISTS_SYMBOL() { return this.getToken(MySQLParser.EXISTS_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_ifExists; }
    // @Override
    enterRule(listener) {
        if (listener.enterIfExists) {
            listener.enterIfExists(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIfExists) {
            listener.exitIfExists(this);
        }
    }
}
exports.IfExistsContext = IfExistsContext;
class IfNotExistsContext extends ParserRuleContext_1.ParserRuleContext {
    IF_SYMBOL() { return this.getToken(MySQLParser.IF_SYMBOL, 0); }
    notRule() {
        return this.getRuleContext(0, NotRuleContext);
    }
    EXISTS_SYMBOL() { return this.getToken(MySQLParser.EXISTS_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_ifNotExists; }
    // @Override
    enterRule(listener) {
        if (listener.enterIfNotExists) {
            listener.enterIfNotExists(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIfNotExists) {
            listener.exitIfNotExists(this);
        }
    }
}
exports.IfNotExistsContext = IfNotExistsContext;
class ProcedureParameterContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    functionParameter() {
        return this.getRuleContext(0, FunctionParameterContext);
    }
    IN_SYMBOL() { return this.tryGetToken(MySQLParser.IN_SYMBOL, 0); }
    OUT_SYMBOL() { return this.tryGetToken(MySQLParser.OUT_SYMBOL, 0); }
    INOUT_SYMBOL() { return this.tryGetToken(MySQLParser.INOUT_SYMBOL, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_procedureParameter; }
    // @Override
    enterRule(listener) {
        if (listener.enterProcedureParameter) {
            listener.enterProcedureParameter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitProcedureParameter) {
            listener.exitProcedureParameter(this);
        }
    }
}
exports.ProcedureParameterContext = ProcedureParameterContext;
class FunctionParameterContext extends ParserRuleContext_1.ParserRuleContext {
    parameterName() {
        return this.getRuleContext(0, ParameterNameContext);
    }
    typeWithOptCollate() {
        return this.getRuleContext(0, TypeWithOptCollateContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_functionParameter; }
    // @Override
    enterRule(listener) {
        if (listener.enterFunctionParameter) {
            listener.enterFunctionParameter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFunctionParameter) {
            listener.exitFunctionParameter(this);
        }
    }
}
exports.FunctionParameterContext = FunctionParameterContext;
class CollateContext extends ParserRuleContext_1.ParserRuleContext {
    COLLATE_SYMBOL() { return this.getToken(MySQLParser.COLLATE_SYMBOL, 0); }
    collationName() {
        return this.getRuleContext(0, CollationNameContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_collate; }
    // @Override
    enterRule(listener) {
        if (listener.enterCollate) {
            listener.enterCollate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCollate) {
            listener.exitCollate(this);
        }
    }
}
exports.CollateContext = CollateContext;
class TypeWithOptCollateContext extends ParserRuleContext_1.ParserRuleContext {
    dataType() {
        return this.getRuleContext(0, DataTypeContext);
    }
    collate() {
        return this.tryGetRuleContext(0, CollateContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_typeWithOptCollate; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeWithOptCollate) {
            listener.enterTypeWithOptCollate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeWithOptCollate) {
            listener.exitTypeWithOptCollate(this);
        }
    }
}
exports.TypeWithOptCollateContext = TypeWithOptCollateContext;
class SchemaIdentifierPairContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    schemaRef(i) {
        if (i === undefined) {
            return this.getRuleContexts(SchemaRefContext);
        }
        else {
            return this.getRuleContext(i, SchemaRefContext);
        }
    }
    COMMA_SYMBOL() { return this.getToken(MySQLParser.COMMA_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_schemaIdentifierPair; }
    // @Override
    enterRule(listener) {
        if (listener.enterSchemaIdentifierPair) {
            listener.enterSchemaIdentifierPair(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSchemaIdentifierPair) {
            listener.exitSchemaIdentifierPair(this);
        }
    }
}
exports.SchemaIdentifierPairContext = SchemaIdentifierPairContext;
class ViewRefListContext extends ParserRuleContext_1.ParserRuleContext {
    viewRef(i) {
        if (i === undefined) {
            return this.getRuleContexts(ViewRefContext);
        }
        else {
            return this.getRuleContext(i, ViewRefContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_viewRefList; }
    // @Override
    enterRule(listener) {
        if (listener.enterViewRefList) {
            listener.enterViewRefList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitViewRefList) {
            listener.exitViewRefList(this);
        }
    }
}
exports.ViewRefListContext = ViewRefListContext;
class UpdateListContext extends ParserRuleContext_1.ParserRuleContext {
    updateElement(i) {
        if (i === undefined) {
            return this.getRuleContexts(UpdateElementContext);
        }
        else {
            return this.getRuleContext(i, UpdateElementContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_updateList; }
    // @Override
    enterRule(listener) {
        if (listener.enterUpdateList) {
            listener.enterUpdateList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUpdateList) {
            listener.exitUpdateList(this);
        }
    }
}
exports.UpdateListContext = UpdateListContext;
class UpdateElementContext extends ParserRuleContext_1.ParserRuleContext {
    columnRef() {
        return this.getRuleContext(0, ColumnRefContext);
    }
    EQUAL_OPERATOR() { return this.getToken(MySQLParser.EQUAL_OPERATOR, 0); }
    expr() {
        return this.tryGetRuleContext(0, ExprContext);
    }
    DEFAULT_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_updateElement; }
    // @Override
    enterRule(listener) {
        if (listener.enterUpdateElement) {
            listener.enterUpdateElement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUpdateElement) {
            listener.exitUpdateElement(this);
        }
    }
}
exports.UpdateElementContext = UpdateElementContext;
class CharsetClauseContext extends ParserRuleContext_1.ParserRuleContext {
    charset() {
        return this.getRuleContext(0, CharsetContext);
    }
    charsetName() {
        return this.getRuleContext(0, CharsetNameContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_charsetClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterCharsetClause) {
            listener.enterCharsetClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCharsetClause) {
            listener.exitCharsetClause(this);
        }
    }
}
exports.CharsetClauseContext = CharsetClauseContext;
class FieldsClauseContext extends ParserRuleContext_1.ParserRuleContext {
    COLUMNS_SYMBOL() { return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
    fieldTerm(i) {
        if (i === undefined) {
            return this.getRuleContexts(FieldTermContext);
        }
        else {
            return this.getRuleContext(i, FieldTermContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_fieldsClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterFieldsClause) {
            listener.enterFieldsClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFieldsClause) {
            listener.exitFieldsClause(this);
        }
    }
}
exports.FieldsClauseContext = FieldsClauseContext;
class FieldTermContext extends ParserRuleContext_1.ParserRuleContext {
    TERMINATED_SYMBOL() { return this.tryGetToken(MySQLParser.TERMINATED_SYMBOL, 0); }
    BY_SYMBOL() { return this.getToken(MySQLParser.BY_SYMBOL, 0); }
    textString() {
        return this.getRuleContext(0, TextStringContext);
    }
    ENCLOSED_SYMBOL() { return this.tryGetToken(MySQLParser.ENCLOSED_SYMBOL, 0); }
    OPTIONALLY_SYMBOL() { return this.tryGetToken(MySQLParser.OPTIONALLY_SYMBOL, 0); }
    ESCAPED_SYMBOL() { return this.tryGetToken(MySQLParser.ESCAPED_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_fieldTerm; }
    // @Override
    enterRule(listener) {
        if (listener.enterFieldTerm) {
            listener.enterFieldTerm(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFieldTerm) {
            listener.exitFieldTerm(this);
        }
    }
}
exports.FieldTermContext = FieldTermContext;
class LinesClauseContext extends ParserRuleContext_1.ParserRuleContext {
    LINES_SYMBOL() { return this.getToken(MySQLParser.LINES_SYMBOL, 0); }
    lineTerm(i) {
        if (i === undefined) {
            return this.getRuleContexts(LineTermContext);
        }
        else {
            return this.getRuleContext(i, LineTermContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_linesClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterLinesClause) {
            listener.enterLinesClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLinesClause) {
            listener.exitLinesClause(this);
        }
    }
}
exports.LinesClauseContext = LinesClauseContext;
class LineTermContext extends ParserRuleContext_1.ParserRuleContext {
    BY_SYMBOL() { return this.getToken(MySQLParser.BY_SYMBOL, 0); }
    textString() {
        return this.getRuleContext(0, TextStringContext);
    }
    TERMINATED_SYMBOL() { return this.tryGetToken(MySQLParser.TERMINATED_SYMBOL, 0); }
    STARTING_SYMBOL() { return this.tryGetToken(MySQLParser.STARTING_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_lineTerm; }
    // @Override
    enterRule(listener) {
        if (listener.enterLineTerm) {
            listener.enterLineTerm(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLineTerm) {
            listener.exitLineTerm(this);
        }
    }
}
exports.LineTermContext = LineTermContext;
class UserListContext extends ParserRuleContext_1.ParserRuleContext {
    user(i) {
        if (i === undefined) {
            return this.getRuleContexts(UserContext);
        }
        else {
            return this.getRuleContext(i, UserContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_userList; }
    // @Override
    enterRule(listener) {
        if (listener.enterUserList) {
            listener.enterUserList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUserList) {
            listener.exitUserList(this);
        }
    }
}
exports.UserListContext = UserListContext;
class CreateUserListContext extends ParserRuleContext_1.ParserRuleContext {
    createUserEntry(i) {
        if (i === undefined) {
            return this.getRuleContexts(CreateUserEntryContext);
        }
        else {
            return this.getRuleContext(i, CreateUserEntryContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createUserList; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateUserList) {
            listener.enterCreateUserList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateUserList) {
            listener.exitCreateUserList(this);
        }
    }
}
exports.CreateUserListContext = CreateUserListContext;
class AlterUserListContext extends ParserRuleContext_1.ParserRuleContext {
    alterUserEntry(i) {
        if (i === undefined) {
            return this.getRuleContexts(AlterUserEntryContext);
        }
        else {
            return this.getRuleContext(i, AlterUserEntryContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterUserList; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterUserList) {
            listener.enterAlterUserList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterUserList) {
            listener.exitAlterUserList(this);
        }
    }
}
exports.AlterUserListContext = AlterUserListContext;
class CreateUserEntryContext extends ParserRuleContext_1.ParserRuleContext {
    user() {
        return this.getRuleContext(0, UserContext);
    }
    IDENTIFIED_SYMBOL() { return this.tryGetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
    BY_SYMBOL() { return this.tryGetToken(MySQLParser.BY_SYMBOL, 0); }
    textString() {
        return this.tryGetRuleContext(0, TextStringContext);
    }
    WITH_SYMBOL() { return this.tryGetToken(MySQLParser.WITH_SYMBOL, 0); }
    textOrIdentifier() {
        return this.tryGetRuleContext(0, TextOrIdentifierContext);
    }
    RANDOM_SYMBOL() { return this.tryGetToken(MySQLParser.RANDOM_SYMBOL, 0); }
    PASSWORD_SYMBOL() { return this.tryGetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
    AS_SYMBOL() { return this.tryGetToken(MySQLParser.AS_SYMBOL, 0); }
    textStringHash() {
        return this.tryGetRuleContext(0, TextStringHashContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_createUserEntry; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateUserEntry) {
            listener.enterCreateUserEntry(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateUserEntry) {
            listener.exitCreateUserEntry(this);
        }
    }
}
exports.CreateUserEntryContext = CreateUserEntryContext;
class AlterUserEntryContext extends ParserRuleContext_1.ParserRuleContext {
    user() {
        return this.getRuleContext(0, UserContext);
    }
    IDENTIFIED_SYMBOL() { return this.tryGetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
    BY_SYMBOL() { return this.tryGetToken(MySQLParser.BY_SYMBOL, 0); }
    textString(i) {
        if (i === undefined) {
            return this.getRuleContexts(TextStringContext);
        }
        else {
            return this.getRuleContext(i, TextStringContext);
        }
    }
    WITH_SYMBOL() { return this.tryGetToken(MySQLParser.WITH_SYMBOL, 0); }
    textOrIdentifier() {
        return this.tryGetRuleContext(0, TextOrIdentifierContext);
    }
    discardOldPassword() {
        return this.tryGetRuleContext(0, DiscardOldPasswordContext);
    }
    REPLACE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLACE_SYMBOL, 0); }
    retainCurrentPassword() {
        return this.tryGetRuleContext(0, RetainCurrentPasswordContext);
    }
    AS_SYMBOL() { return this.tryGetToken(MySQLParser.AS_SYMBOL, 0); }
    textStringHash() {
        return this.tryGetRuleContext(0, TextStringHashContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_alterUserEntry; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterUserEntry) {
            listener.enterAlterUserEntry(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterUserEntry) {
            listener.exitAlterUserEntry(this);
        }
    }
}
exports.AlterUserEntryContext = AlterUserEntryContext;
class RetainCurrentPasswordContext extends ParserRuleContext_1.ParserRuleContext {
    RETAIN_SYMBOL() { return this.getToken(MySQLParser.RETAIN_SYMBOL, 0); }
    CURRENT_SYMBOL() { return this.getToken(MySQLParser.CURRENT_SYMBOL, 0); }
    PASSWORD_SYMBOL() { return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_retainCurrentPassword; }
    // @Override
    enterRule(listener) {
        if (listener.enterRetainCurrentPassword) {
            listener.enterRetainCurrentPassword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRetainCurrentPassword) {
            listener.exitRetainCurrentPassword(this);
        }
    }
}
exports.RetainCurrentPasswordContext = RetainCurrentPasswordContext;
class DiscardOldPasswordContext extends ParserRuleContext_1.ParserRuleContext {
    DISCARD_SYMBOL() { return this.getToken(MySQLParser.DISCARD_SYMBOL, 0); }
    OLD_SYMBOL() { return this.getToken(MySQLParser.OLD_SYMBOL, 0); }
    PASSWORD_SYMBOL() { return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_discardOldPassword; }
    // @Override
    enterRule(listener) {
        if (listener.enterDiscardOldPassword) {
            listener.enterDiscardOldPassword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDiscardOldPassword) {
            listener.exitDiscardOldPassword(this);
        }
    }
}
exports.DiscardOldPasswordContext = DiscardOldPasswordContext;
class ReplacePasswordContext extends ParserRuleContext_1.ParserRuleContext {
    REPLACE_SYMBOL() { return this.getToken(MySQLParser.REPLACE_SYMBOL, 0); }
    textString() {
        return this.getRuleContext(0, TextStringContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_replacePassword; }
    // @Override
    enterRule(listener) {
        if (listener.enterReplacePassword) {
            listener.enterReplacePassword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReplacePassword) {
            listener.exitReplacePassword(this);
        }
    }
}
exports.ReplacePasswordContext = ReplacePasswordContext;
class UserIdentifierOrTextContext extends ParserRuleContext_1.ParserRuleContext {
    textOrIdentifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(TextOrIdentifierContext);
        }
        else {
            return this.getRuleContext(i, TextOrIdentifierContext);
        }
    }
    AT_SIGN_SYMBOL() { return this.tryGetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
    AT_TEXT_SUFFIX() { return this.tryGetToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_userIdentifierOrText; }
    // @Override
    enterRule(listener) {
        if (listener.enterUserIdentifierOrText) {
            listener.enterUserIdentifierOrText(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUserIdentifierOrText) {
            listener.exitUserIdentifierOrText(this);
        }
    }
}
exports.UserIdentifierOrTextContext = UserIdentifierOrTextContext;
class UserContext extends ParserRuleContext_1.ParserRuleContext {
    userIdentifierOrText() {
        return this.tryGetRuleContext(0, UserIdentifierOrTextContext);
    }
    CURRENT_USER_SYMBOL() { return this.tryGetToken(MySQLParser.CURRENT_USER_SYMBOL, 0); }
    parentheses() {
        return this.tryGetRuleContext(0, ParenthesesContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_user; }
    // @Override
    enterRule(listener) {
        if (listener.enterUser) {
            listener.enterUser(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUser) {
            listener.exitUser(this);
        }
    }
}
exports.UserContext = UserContext;
class LikeClauseContext extends ParserRuleContext_1.ParserRuleContext {
    LIKE_SYMBOL() { return this.getToken(MySQLParser.LIKE_SYMBOL, 0); }
    textStringLiteral() {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_likeClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterLikeClause) {
            listener.enterLikeClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLikeClause) {
            listener.exitLikeClause(this);
        }
    }
}
exports.LikeClauseContext = LikeClauseContext;
class LikeOrWhereContext extends ParserRuleContext_1.ParserRuleContext {
    likeClause() {
        return this.tryGetRuleContext(0, LikeClauseContext);
    }
    whereClause() {
        return this.tryGetRuleContext(0, WhereClauseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_likeOrWhere; }
    // @Override
    enterRule(listener) {
        if (listener.enterLikeOrWhere) {
            listener.enterLikeOrWhere(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLikeOrWhere) {
            listener.exitLikeOrWhere(this);
        }
    }
}
exports.LikeOrWhereContext = LikeOrWhereContext;
class OnlineOptionContext extends ParserRuleContext_1.ParserRuleContext {
    ONLINE_SYMBOL() { return this.tryGetToken(MySQLParser.ONLINE_SYMBOL, 0); }
    OFFLINE_SYMBOL() { return this.tryGetToken(MySQLParser.OFFLINE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_onlineOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterOnlineOption) {
            listener.enterOnlineOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOnlineOption) {
            listener.exitOnlineOption(this);
        }
    }
}
exports.OnlineOptionContext = OnlineOptionContext;
class NoWriteToBinLogContext extends ParserRuleContext_1.ParserRuleContext {
    LOCAL_SYMBOL() { return this.tryGetToken(MySQLParser.LOCAL_SYMBOL, 0); }
    NO_WRITE_TO_BINLOG_SYMBOL() { return this.tryGetToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_noWriteToBinLog; }
    // @Override
    enterRule(listener) {
        if (listener.enterNoWriteToBinLog) {
            listener.enterNoWriteToBinLog(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNoWriteToBinLog) {
            listener.exitNoWriteToBinLog(this);
        }
    }
}
exports.NoWriteToBinLogContext = NoWriteToBinLogContext;
class UsePartitionContext extends ParserRuleContext_1.ParserRuleContext {
    PARTITION_SYMBOL() { return this.getToken(MySQLParser.PARTITION_SYMBOL, 0); }
    identifierListWithParentheses() {
        return this.getRuleContext(0, IdentifierListWithParenthesesContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_usePartition; }
    // @Override
    enterRule(listener) {
        if (listener.enterUsePartition) {
            listener.enterUsePartition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUsePartition) {
            listener.exitUsePartition(this);
        }
    }
}
exports.UsePartitionContext = UsePartitionContext;
class FieldIdentifierContext extends ParserRuleContext_1.ParserRuleContext {
    dotIdentifier() {
        return this.tryGetRuleContext(0, DotIdentifierContext);
    }
    qualifiedIdentifier() {
        return this.tryGetRuleContext(0, QualifiedIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_fieldIdentifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterFieldIdentifier) {
            listener.enterFieldIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFieldIdentifier) {
            listener.exitFieldIdentifier(this);
        }
    }
}
exports.FieldIdentifierContext = FieldIdentifierContext;
class ColumnNameContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    fieldIdentifier() {
        return this.tryGetRuleContext(0, FieldIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_columnName; }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnName) {
            listener.enterColumnName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnName) {
            listener.exitColumnName(this);
        }
    }
}
exports.ColumnNameContext = ColumnNameContext;
class ColumnInternalRefContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_columnInternalRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnInternalRef) {
            listener.enterColumnInternalRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnInternalRef) {
            listener.exitColumnInternalRef(this);
        }
    }
}
exports.ColumnInternalRefContext = ColumnInternalRefContext;
class ColumnInternalRefListContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    columnInternalRef(i) {
        if (i === undefined) {
            return this.getRuleContexts(ColumnInternalRefContext);
        }
        else {
            return this.getRuleContext(i, ColumnInternalRefContext);
        }
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_columnInternalRefList; }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnInternalRefList) {
            listener.enterColumnInternalRefList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnInternalRefList) {
            listener.exitColumnInternalRefList(this);
        }
    }
}
exports.ColumnInternalRefListContext = ColumnInternalRefListContext;
class ColumnRefContext extends ParserRuleContext_1.ParserRuleContext {
    fieldIdentifier() {
        return this.getRuleContext(0, FieldIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_columnRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnRef) {
            listener.enterColumnRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnRef) {
            listener.exitColumnRef(this);
        }
    }
}
exports.ColumnRefContext = ColumnRefContext;
class InsertIdentifierContext extends ParserRuleContext_1.ParserRuleContext {
    columnRef() {
        return this.tryGetRuleContext(0, ColumnRefContext);
    }
    tableWild() {
        return this.tryGetRuleContext(0, TableWildContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_insertIdentifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterInsertIdentifier) {
            listener.enterInsertIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInsertIdentifier) {
            listener.exitInsertIdentifier(this);
        }
    }
}
exports.InsertIdentifierContext = InsertIdentifierContext;
class IndexNameContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_indexName; }
    // @Override
    enterRule(listener) {
        if (listener.enterIndexName) {
            listener.enterIndexName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIndexName) {
            listener.exitIndexName(this);
        }
    }
}
exports.IndexNameContext = IndexNameContext;
class IndexRefContext extends ParserRuleContext_1.ParserRuleContext {
    fieldIdentifier() {
        return this.getRuleContext(0, FieldIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_indexRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterIndexRef) {
            listener.enterIndexRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIndexRef) {
            listener.exitIndexRef(this);
        }
    }
}
exports.IndexRefContext = IndexRefContext;
class TableWildContext extends ParserRuleContext_1.ParserRuleContext {
    identifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    }
    DOT_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.DOT_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.DOT_SYMBOL, i);
        }
    }
    MULT_OPERATOR() { return this.getToken(MySQLParser.MULT_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tableWild; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableWild) {
            listener.enterTableWild(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableWild) {
            listener.exitTableWild(this);
        }
    }
}
exports.TableWildContext = TableWildContext;
class SchemaNameContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_schemaName; }
    // @Override
    enterRule(listener) {
        if (listener.enterSchemaName) {
            listener.enterSchemaName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSchemaName) {
            listener.exitSchemaName(this);
        }
    }
}
exports.SchemaNameContext = SchemaNameContext;
class SchemaRefContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_schemaRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterSchemaRef) {
            listener.enterSchemaRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSchemaRef) {
            listener.exitSchemaRef(this);
        }
    }
}
exports.SchemaRefContext = SchemaRefContext;
class ProcedureNameContext extends ParserRuleContext_1.ParserRuleContext {
    qualifiedIdentifier() {
        return this.getRuleContext(0, QualifiedIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_procedureName; }
    // @Override
    enterRule(listener) {
        if (listener.enterProcedureName) {
            listener.enterProcedureName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitProcedureName) {
            listener.exitProcedureName(this);
        }
    }
}
exports.ProcedureNameContext = ProcedureNameContext;
class ProcedureRefContext extends ParserRuleContext_1.ParserRuleContext {
    qualifiedIdentifier() {
        return this.getRuleContext(0, QualifiedIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_procedureRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterProcedureRef) {
            listener.enterProcedureRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitProcedureRef) {
            listener.exitProcedureRef(this);
        }
    }
}
exports.ProcedureRefContext = ProcedureRefContext;
class FunctionNameContext extends ParserRuleContext_1.ParserRuleContext {
    qualifiedIdentifier() {
        return this.getRuleContext(0, QualifiedIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_functionName; }
    // @Override
    enterRule(listener) {
        if (listener.enterFunctionName) {
            listener.enterFunctionName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFunctionName) {
            listener.exitFunctionName(this);
        }
    }
}
exports.FunctionNameContext = FunctionNameContext;
class FunctionRefContext extends ParserRuleContext_1.ParserRuleContext {
    qualifiedIdentifier() {
        return this.getRuleContext(0, QualifiedIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_functionRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterFunctionRef) {
            listener.enterFunctionRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFunctionRef) {
            listener.exitFunctionRef(this);
        }
    }
}
exports.FunctionRefContext = FunctionRefContext;
class TriggerNameContext extends ParserRuleContext_1.ParserRuleContext {
    qualifiedIdentifier() {
        return this.getRuleContext(0, QualifiedIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_triggerName; }
    // @Override
    enterRule(listener) {
        if (listener.enterTriggerName) {
            listener.enterTriggerName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTriggerName) {
            listener.exitTriggerName(this);
        }
    }
}
exports.TriggerNameContext = TriggerNameContext;
class TriggerRefContext extends ParserRuleContext_1.ParserRuleContext {
    qualifiedIdentifier() {
        return this.getRuleContext(0, QualifiedIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_triggerRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterTriggerRef) {
            listener.enterTriggerRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTriggerRef) {
            listener.exitTriggerRef(this);
        }
    }
}
exports.TriggerRefContext = TriggerRefContext;
class ViewNameContext extends ParserRuleContext_1.ParserRuleContext {
    qualifiedIdentifier() {
        return this.tryGetRuleContext(0, QualifiedIdentifierContext);
    }
    dotIdentifier() {
        return this.tryGetRuleContext(0, DotIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_viewName; }
    // @Override
    enterRule(listener) {
        if (listener.enterViewName) {
            listener.enterViewName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitViewName) {
            listener.exitViewName(this);
        }
    }
}
exports.ViewNameContext = ViewNameContext;
class ViewRefContext extends ParserRuleContext_1.ParserRuleContext {
    qualifiedIdentifier() {
        return this.tryGetRuleContext(0, QualifiedIdentifierContext);
    }
    dotIdentifier() {
        return this.tryGetRuleContext(0, DotIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_viewRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterViewRef) {
            listener.enterViewRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitViewRef) {
            listener.exitViewRef(this);
        }
    }
}
exports.ViewRefContext = ViewRefContext;
class TablespaceNameContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tablespaceName; }
    // @Override
    enterRule(listener) {
        if (listener.enterTablespaceName) {
            listener.enterTablespaceName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTablespaceName) {
            listener.exitTablespaceName(this);
        }
    }
}
exports.TablespaceNameContext = TablespaceNameContext;
class TablespaceRefContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tablespaceRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterTablespaceRef) {
            listener.enterTablespaceRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTablespaceRef) {
            listener.exitTablespaceRef(this);
        }
    }
}
exports.TablespaceRefContext = TablespaceRefContext;
class LogfileGroupNameContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_logfileGroupName; }
    // @Override
    enterRule(listener) {
        if (listener.enterLogfileGroupName) {
            listener.enterLogfileGroupName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLogfileGroupName) {
            listener.exitLogfileGroupName(this);
        }
    }
}
exports.LogfileGroupNameContext = LogfileGroupNameContext;
class LogfileGroupRefContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_logfileGroupRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterLogfileGroupRef) {
            listener.enterLogfileGroupRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLogfileGroupRef) {
            listener.exitLogfileGroupRef(this);
        }
    }
}
exports.LogfileGroupRefContext = LogfileGroupRefContext;
class EventNameContext extends ParserRuleContext_1.ParserRuleContext {
    qualifiedIdentifier() {
        return this.getRuleContext(0, QualifiedIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_eventName; }
    // @Override
    enterRule(listener) {
        if (listener.enterEventName) {
            listener.enterEventName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEventName) {
            listener.exitEventName(this);
        }
    }
}
exports.EventNameContext = EventNameContext;
class EventRefContext extends ParserRuleContext_1.ParserRuleContext {
    qualifiedIdentifier() {
        return this.getRuleContext(0, QualifiedIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_eventRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterEventRef) {
            listener.enterEventRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEventRef) {
            listener.exitEventRef(this);
        }
    }
}
exports.EventRefContext = EventRefContext;
class UdfNameContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_udfName; }
    // @Override
    enterRule(listener) {
        if (listener.enterUdfName) {
            listener.enterUdfName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUdfName) {
            listener.exitUdfName(this);
        }
    }
}
exports.UdfNameContext = UdfNameContext;
class ServerNameContext extends ParserRuleContext_1.ParserRuleContext {
    textOrIdentifier() {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_serverName; }
    // @Override
    enterRule(listener) {
        if (listener.enterServerName) {
            listener.enterServerName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitServerName) {
            listener.exitServerName(this);
        }
    }
}
exports.ServerNameContext = ServerNameContext;
class ServerRefContext extends ParserRuleContext_1.ParserRuleContext {
    textOrIdentifier() {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_serverRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterServerRef) {
            listener.enterServerRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitServerRef) {
            listener.exitServerRef(this);
        }
    }
}
exports.ServerRefContext = ServerRefContext;
class EngineRefContext extends ParserRuleContext_1.ParserRuleContext {
    textOrIdentifier() {
        return this.getRuleContext(0, TextOrIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_engineRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterEngineRef) {
            listener.enterEngineRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEngineRef) {
            listener.exitEngineRef(this);
        }
    }
}
exports.EngineRefContext = EngineRefContext;
class TableNameContext extends ParserRuleContext_1.ParserRuleContext {
    qualifiedIdentifier() {
        return this.tryGetRuleContext(0, QualifiedIdentifierContext);
    }
    dotIdentifier() {
        return this.tryGetRuleContext(0, DotIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tableName; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableName) {
            listener.enterTableName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableName) {
            listener.exitTableName(this);
        }
    }
}
exports.TableNameContext = TableNameContext;
class FilterTableRefContext extends ParserRuleContext_1.ParserRuleContext {
    schemaRef() {
        return this.getRuleContext(0, SchemaRefContext);
    }
    dotIdentifier() {
        return this.getRuleContext(0, DotIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_filterTableRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterFilterTableRef) {
            listener.enterFilterTableRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFilterTableRef) {
            listener.exitFilterTableRef(this);
        }
    }
}
exports.FilterTableRefContext = FilterTableRefContext;
class TableRefWithWildcardContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    DOT_SYMBOL() { return this.tryGetToken(MySQLParser.DOT_SYMBOL, 0); }
    MULT_OPERATOR() { return this.tryGetToken(MySQLParser.MULT_OPERATOR, 0); }
    dotIdentifier() {
        return this.tryGetRuleContext(0, DotIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tableRefWithWildcard; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableRefWithWildcard) {
            listener.enterTableRefWithWildcard(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableRefWithWildcard) {
            listener.exitTableRefWithWildcard(this);
        }
    }
}
exports.TableRefWithWildcardContext = TableRefWithWildcardContext;
class TableRefContext extends ParserRuleContext_1.ParserRuleContext {
    qualifiedIdentifier() {
        return this.tryGetRuleContext(0, QualifiedIdentifierContext);
    }
    dotIdentifier() {
        return this.tryGetRuleContext(0, DotIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tableRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableRef) {
            listener.enterTableRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableRef) {
            listener.exitTableRef(this);
        }
    }
}
exports.TableRefContext = TableRefContext;
class TableRefListContext extends ParserRuleContext_1.ParserRuleContext {
    tableRef(i) {
        if (i === undefined) {
            return this.getRuleContexts(TableRefContext);
        }
        else {
            return this.getRuleContext(i, TableRefContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tableRefList; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableRefList) {
            listener.enterTableRefList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableRefList) {
            listener.exitTableRefList(this);
        }
    }
}
exports.TableRefListContext = TableRefListContext;
class TableAliasRefListContext extends ParserRuleContext_1.ParserRuleContext {
    tableRefWithWildcard(i) {
        if (i === undefined) {
            return this.getRuleContexts(TableRefWithWildcardContext);
        }
        else {
            return this.getRuleContext(i, TableRefWithWildcardContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_tableAliasRefList; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableAliasRefList) {
            listener.enterTableAliasRefList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableAliasRefList) {
            listener.exitTableAliasRefList(this);
        }
    }
}
exports.TableAliasRefListContext = TableAliasRefListContext;
class ParameterNameContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_parameterName; }
    // @Override
    enterRule(listener) {
        if (listener.enterParameterName) {
            listener.enterParameterName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitParameterName) {
            listener.exitParameterName(this);
        }
    }
}
exports.ParameterNameContext = ParameterNameContext;
class LabelIdentifierContext extends ParserRuleContext_1.ParserRuleContext {
    pureIdentifier() {
        return this.tryGetRuleContext(0, PureIdentifierContext);
    }
    labelKeyword() {
        return this.tryGetRuleContext(0, LabelKeywordContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_labelIdentifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterLabelIdentifier) {
            listener.enterLabelIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLabelIdentifier) {
            listener.exitLabelIdentifier(this);
        }
    }
}
exports.LabelIdentifierContext = LabelIdentifierContext;
class LabelRefContext extends ParserRuleContext_1.ParserRuleContext {
    labelIdentifier() {
        return this.getRuleContext(0, LabelIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_labelRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterLabelRef) {
            listener.enterLabelRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLabelRef) {
            listener.exitLabelRef(this);
        }
    }
}
exports.LabelRefContext = LabelRefContext;
class RoleIdentifierContext extends ParserRuleContext_1.ParserRuleContext {
    pureIdentifier() {
        return this.tryGetRuleContext(0, PureIdentifierContext);
    }
    roleKeyword() {
        return this.tryGetRuleContext(0, RoleKeywordContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_roleIdentifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterRoleIdentifier) {
            listener.enterRoleIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRoleIdentifier) {
            listener.exitRoleIdentifier(this);
        }
    }
}
exports.RoleIdentifierContext = RoleIdentifierContext;
class RoleRefContext extends ParserRuleContext_1.ParserRuleContext {
    roleIdentifier() {
        return this.getRuleContext(0, RoleIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_roleRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterRoleRef) {
            listener.enterRoleRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRoleRef) {
            listener.exitRoleRef(this);
        }
    }
}
exports.RoleRefContext = RoleRefContext;
class PluginRefContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_pluginRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterPluginRef) {
            listener.enterPluginRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPluginRef) {
            listener.exitPluginRef(this);
        }
    }
}
exports.PluginRefContext = PluginRefContext;
class ComponentRefContext extends ParserRuleContext_1.ParserRuleContext {
    textStringLiteral() {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_componentRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterComponentRef) {
            listener.enterComponentRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitComponentRef) {
            listener.exitComponentRef(this);
        }
    }
}
exports.ComponentRefContext = ComponentRefContext;
class ResourceGroupRefContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_resourceGroupRef; }
    // @Override
    enterRule(listener) {
        if (listener.enterResourceGroupRef) {
            listener.enterResourceGroupRef(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResourceGroupRef) {
            listener.exitResourceGroupRef(this);
        }
    }
}
exports.ResourceGroupRefContext = ResourceGroupRefContext;
class WindowNameContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_windowName; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowName) {
            listener.enterWindowName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowName) {
            listener.exitWindowName(this);
        }
    }
}
exports.WindowNameContext = WindowNameContext;
class PureIdentifierContext extends ParserRuleContext_1.ParserRuleContext {
    IDENTIFIER() { return this.tryGetToken(MySQLParser.IDENTIFIER, 0); }
    BACK_TICK_QUOTED_ID() { return this.tryGetToken(MySQLParser.BACK_TICK_QUOTED_ID, 0); }
    DOUBLE_QUOTED_TEXT() { return this.tryGetToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_pureIdentifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterPureIdentifier) {
            listener.enterPureIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPureIdentifier) {
            listener.exitPureIdentifier(this);
        }
    }
}
exports.PureIdentifierContext = PureIdentifierContext;
class IdentifierContext extends ParserRuleContext_1.ParserRuleContext {
    pureIdentifier() {
        return this.tryGetRuleContext(0, PureIdentifierContext);
    }
    identifierKeyword() {
        return this.tryGetRuleContext(0, IdentifierKeywordContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_identifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentifier) {
            listener.enterIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentifier) {
            listener.exitIdentifier(this);
        }
    }
}
exports.IdentifierContext = IdentifierContext;
class IdentifierListContext extends ParserRuleContext_1.ParserRuleContext {
    identifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_identifierList; }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentifierList) {
            listener.enterIdentifierList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentifierList) {
            listener.exitIdentifierList(this);
        }
    }
}
exports.IdentifierListContext = IdentifierListContext;
class IdentifierListWithParenthesesContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    identifierList() {
        return this.getRuleContext(0, IdentifierListContext);
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_identifierListWithParentheses; }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentifierListWithParentheses) {
            listener.enterIdentifierListWithParentheses(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentifierListWithParentheses) {
            listener.exitIdentifierListWithParentheses(this);
        }
    }
}
exports.IdentifierListWithParenthesesContext = IdentifierListWithParenthesesContext;
class QualifiedIdentifierContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    dotIdentifier() {
        return this.tryGetRuleContext(0, DotIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_qualifiedIdentifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterQualifiedIdentifier) {
            listener.enterQualifiedIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQualifiedIdentifier) {
            listener.exitQualifiedIdentifier(this);
        }
    }
}
exports.QualifiedIdentifierContext = QualifiedIdentifierContext;
class SimpleIdentifierContext extends ParserRuleContext_1.ParserRuleContext {
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    dotIdentifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(DotIdentifierContext);
        }
        else {
            return this.getRuleContext(i, DotIdentifierContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_simpleIdentifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleIdentifier) {
            listener.enterSimpleIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleIdentifier) {
            listener.exitSimpleIdentifier(this);
        }
    }
}
exports.SimpleIdentifierContext = SimpleIdentifierContext;
class DotIdentifierContext extends ParserRuleContext_1.ParserRuleContext {
    DOT_SYMBOL() { return this.getToken(MySQLParser.DOT_SYMBOL, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_dotIdentifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterDotIdentifier) {
            listener.enterDotIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDotIdentifier) {
            listener.exitDotIdentifier(this);
        }
    }
}
exports.DotIdentifierContext = DotIdentifierContext;
class Ulong_numberContext extends ParserRuleContext_1.ParserRuleContext {
    INT_NUMBER() { return this.tryGetToken(MySQLParser.INT_NUMBER, 0); }
    HEX_NUMBER() { return this.tryGetToken(MySQLParser.HEX_NUMBER, 0); }
    LONG_NUMBER() { return this.tryGetToken(MySQLParser.LONG_NUMBER, 0); }
    ULONGLONG_NUMBER() { return this.tryGetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
    DECIMAL_NUMBER() { return this.tryGetToken(MySQLParser.DECIMAL_NUMBER, 0); }
    FLOAT_NUMBER() { return this.tryGetToken(MySQLParser.FLOAT_NUMBER, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_ulong_number; }
    // @Override
    enterRule(listener) {
        if (listener.enterUlong_number) {
            listener.enterUlong_number(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUlong_number) {
            listener.exitUlong_number(this);
        }
    }
}
exports.Ulong_numberContext = Ulong_numberContext;
class Real_ulong_numberContext extends ParserRuleContext_1.ParserRuleContext {
    INT_NUMBER() { return this.tryGetToken(MySQLParser.INT_NUMBER, 0); }
    HEX_NUMBER() { return this.tryGetToken(MySQLParser.HEX_NUMBER, 0); }
    LONG_NUMBER() { return this.tryGetToken(MySQLParser.LONG_NUMBER, 0); }
    ULONGLONG_NUMBER() { return this.tryGetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_real_ulong_number; }
    // @Override
    enterRule(listener) {
        if (listener.enterReal_ulong_number) {
            listener.enterReal_ulong_number(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReal_ulong_number) {
            listener.exitReal_ulong_number(this);
        }
    }
}
exports.Real_ulong_numberContext = Real_ulong_numberContext;
class Ulonglong_numberContext extends ParserRuleContext_1.ParserRuleContext {
    INT_NUMBER() { return this.tryGetToken(MySQLParser.INT_NUMBER, 0); }
    LONG_NUMBER() { return this.tryGetToken(MySQLParser.LONG_NUMBER, 0); }
    ULONGLONG_NUMBER() { return this.tryGetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
    DECIMAL_NUMBER() { return this.tryGetToken(MySQLParser.DECIMAL_NUMBER, 0); }
    FLOAT_NUMBER() { return this.tryGetToken(MySQLParser.FLOAT_NUMBER, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_ulonglong_number; }
    // @Override
    enterRule(listener) {
        if (listener.enterUlonglong_number) {
            listener.enterUlonglong_number(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUlonglong_number) {
            listener.exitUlonglong_number(this);
        }
    }
}
exports.Ulonglong_numberContext = Ulonglong_numberContext;
class Real_ulonglong_numberContext extends ParserRuleContext_1.ParserRuleContext {
    INT_NUMBER() { return this.tryGetToken(MySQLParser.INT_NUMBER, 0); }
    HEX_NUMBER() { return this.tryGetToken(MySQLParser.HEX_NUMBER, 0); }
    ULONGLONG_NUMBER() { return this.tryGetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
    LONG_NUMBER() { return this.tryGetToken(MySQLParser.LONG_NUMBER, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_real_ulonglong_number; }
    // @Override
    enterRule(listener) {
        if (listener.enterReal_ulonglong_number) {
            listener.enterReal_ulonglong_number(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReal_ulonglong_number) {
            listener.exitReal_ulonglong_number(this);
        }
    }
}
exports.Real_ulonglong_numberContext = Real_ulonglong_numberContext;
class LiteralContext extends ParserRuleContext_1.ParserRuleContext {
    textLiteral() {
        return this.tryGetRuleContext(0, TextLiteralContext);
    }
    numLiteral() {
        return this.tryGetRuleContext(0, NumLiteralContext);
    }
    temporalLiteral() {
        return this.tryGetRuleContext(0, TemporalLiteralContext);
    }
    nullLiteral() {
        return this.tryGetRuleContext(0, NullLiteralContext);
    }
    boolLiteral() {
        return this.tryGetRuleContext(0, BoolLiteralContext);
    }
    HEX_NUMBER() { return this.tryGetToken(MySQLParser.HEX_NUMBER, 0); }
    BIN_NUMBER() { return this.tryGetToken(MySQLParser.BIN_NUMBER, 0); }
    UNDERSCORE_CHARSET() { return this.tryGetToken(MySQLParser.UNDERSCORE_CHARSET, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_literal; }
    // @Override
    enterRule(listener) {
        if (listener.enterLiteral) {
            listener.enterLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLiteral) {
            listener.exitLiteral(this);
        }
    }
}
exports.LiteralContext = LiteralContext;
class SignedLiteralContext extends ParserRuleContext_1.ParserRuleContext {
    literal() {
        return this.tryGetRuleContext(0, LiteralContext);
    }
    PLUS_OPERATOR() { return this.tryGetToken(MySQLParser.PLUS_OPERATOR, 0); }
    ulong_number() {
        return this.tryGetRuleContext(0, Ulong_numberContext);
    }
    MINUS_OPERATOR() { return this.tryGetToken(MySQLParser.MINUS_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_signedLiteral; }
    // @Override
    enterRule(listener) {
        if (listener.enterSignedLiteral) {
            listener.enterSignedLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSignedLiteral) {
            listener.exitSignedLiteral(this);
        }
    }
}
exports.SignedLiteralContext = SignedLiteralContext;
class StringListContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    textString(i) {
        if (i === undefined) {
            return this.getRuleContexts(TextStringContext);
        }
        else {
            return this.getRuleContext(i, TextStringContext);
        }
    }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_stringList; }
    // @Override
    enterRule(listener) {
        if (listener.enterStringList) {
            listener.enterStringList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStringList) {
            listener.exitStringList(this);
        }
    }
}
exports.StringListContext = StringListContext;
class TextStringLiteralContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    SINGLE_QUOTED_TEXT() { return this.tryGetToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
    DOUBLE_QUOTED_TEXT() { return this.tryGetToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0); }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_textStringLiteral; }
    // @Override
    enterRule(listener) {
        if (listener.enterTextStringLiteral) {
            listener.enterTextStringLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTextStringLiteral) {
            listener.exitTextStringLiteral(this);
        }
    }
}
exports.TextStringLiteralContext = TextStringLiteralContext;
class TextStringContext extends ParserRuleContext_1.ParserRuleContext {
    textStringLiteral() {
        return this.tryGetRuleContext(0, TextStringLiteralContext);
    }
    HEX_NUMBER() { return this.tryGetToken(MySQLParser.HEX_NUMBER, 0); }
    BIN_NUMBER() { return this.tryGetToken(MySQLParser.BIN_NUMBER, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_textString; }
    // @Override
    enterRule(listener) {
        if (listener.enterTextString) {
            listener.enterTextString(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTextString) {
            listener.exitTextString(this);
        }
    }
}
exports.TextStringContext = TextStringContext;
class TextStringHashContext extends ParserRuleContext_1.ParserRuleContext {
    textStringLiteral() {
        return this.tryGetRuleContext(0, TextStringLiteralContext);
    }
    HEX_NUMBER() { return this.tryGetToken(MySQLParser.HEX_NUMBER, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_textStringHash; }
    // @Override
    enterRule(listener) {
        if (listener.enterTextStringHash) {
            listener.enterTextStringHash(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTextStringHash) {
            listener.exitTextStringHash(this);
        }
    }
}
exports.TextStringHashContext = TextStringHashContext;
class TextLiteralContext extends ParserRuleContext_1.ParserRuleContext {
    textStringLiteral(i) {
        if (i === undefined) {
            return this.getRuleContexts(TextStringLiteralContext);
        }
        else {
            return this.getRuleContext(i, TextStringLiteralContext);
        }
    }
    NCHAR_TEXT() { return this.tryGetToken(MySQLParser.NCHAR_TEXT, 0); }
    UNDERSCORE_CHARSET() { return this.tryGetToken(MySQLParser.UNDERSCORE_CHARSET, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_textLiteral; }
    // @Override
    enterRule(listener) {
        if (listener.enterTextLiteral) {
            listener.enterTextLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTextLiteral) {
            listener.exitTextLiteral(this);
        }
    }
}
exports.TextLiteralContext = TextLiteralContext;
class TextStringNoLinebreakContext extends ParserRuleContext_1.ParserRuleContext {
    textStringLiteral() {
        return this.getRuleContext(0, TextStringLiteralContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_textStringNoLinebreak; }
    // @Override
    enterRule(listener) {
        if (listener.enterTextStringNoLinebreak) {
            listener.enterTextStringNoLinebreak(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTextStringNoLinebreak) {
            listener.exitTextStringNoLinebreak(this);
        }
    }
}
exports.TextStringNoLinebreakContext = TextStringNoLinebreakContext;
class TextStringLiteralListContext extends ParserRuleContext_1.ParserRuleContext {
    textStringLiteral(i) {
        if (i === undefined) {
            return this.getRuleContexts(TextStringLiteralContext);
        }
        else {
            return this.getRuleContext(i, TextStringLiteralContext);
        }
    }
    COMMA_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
        }
        else {
            return this.getToken(MySQLParser.COMMA_SYMBOL, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_textStringLiteralList; }
    // @Override
    enterRule(listener) {
        if (listener.enterTextStringLiteralList) {
            listener.enterTextStringLiteralList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTextStringLiteralList) {
            listener.exitTextStringLiteralList(this);
        }
    }
}
exports.TextStringLiteralListContext = TextStringLiteralListContext;
class NumLiteralContext extends ParserRuleContext_1.ParserRuleContext {
    INT_NUMBER() { return this.tryGetToken(MySQLParser.INT_NUMBER, 0); }
    LONG_NUMBER() { return this.tryGetToken(MySQLParser.LONG_NUMBER, 0); }
    ULONGLONG_NUMBER() { return this.tryGetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
    DECIMAL_NUMBER() { return this.tryGetToken(MySQLParser.DECIMAL_NUMBER, 0); }
    FLOAT_NUMBER() { return this.tryGetToken(MySQLParser.FLOAT_NUMBER, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_numLiteral; }
    // @Override
    enterRule(listener) {
        if (listener.enterNumLiteral) {
            listener.enterNumLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNumLiteral) {
            listener.exitNumLiteral(this);
        }
    }
}
exports.NumLiteralContext = NumLiteralContext;
class BoolLiteralContext extends ParserRuleContext_1.ParserRuleContext {
    TRUE_SYMBOL() { return this.tryGetToken(MySQLParser.TRUE_SYMBOL, 0); }
    FALSE_SYMBOL() { return this.tryGetToken(MySQLParser.FALSE_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_boolLiteral; }
    // @Override
    enterRule(listener) {
        if (listener.enterBoolLiteral) {
            listener.enterBoolLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBoolLiteral) {
            listener.exitBoolLiteral(this);
        }
    }
}
exports.BoolLiteralContext = BoolLiteralContext;
class NullLiteralContext extends ParserRuleContext_1.ParserRuleContext {
    NULL_SYMBOL() { return this.tryGetToken(MySQLParser.NULL_SYMBOL, 0); }
    NULL2_SYMBOL() { return this.tryGetToken(MySQLParser.NULL2_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_nullLiteral; }
    // @Override
    enterRule(listener) {
        if (listener.enterNullLiteral) {
            listener.enterNullLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNullLiteral) {
            listener.exitNullLiteral(this);
        }
    }
}
exports.NullLiteralContext = NullLiteralContext;
class TemporalLiteralContext extends ParserRuleContext_1.ParserRuleContext {
    DATE_SYMBOL() { return this.tryGetToken(MySQLParser.DATE_SYMBOL, 0); }
    SINGLE_QUOTED_TEXT() { return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
    TIME_SYMBOL() { return this.tryGetToken(MySQLParser.TIME_SYMBOL, 0); }
    TIMESTAMP_SYMBOL() { return this.tryGetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_temporalLiteral; }
    // @Override
    enterRule(listener) {
        if (listener.enterTemporalLiteral) {
            listener.enterTemporalLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTemporalLiteral) {
            listener.exitTemporalLiteral(this);
        }
    }
}
exports.TemporalLiteralContext = TemporalLiteralContext;
class FloatOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    fieldLength() {
        return this.tryGetRuleContext(0, FieldLengthContext);
    }
    precision() {
        return this.tryGetRuleContext(0, PrecisionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_floatOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterFloatOptions) {
            listener.enterFloatOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFloatOptions) {
            listener.exitFloatOptions(this);
        }
    }
}
exports.FloatOptionsContext = FloatOptionsContext;
class StandardFloatOptionsContext extends ParserRuleContext_1.ParserRuleContext {
    precision() {
        return this.getRuleContext(0, PrecisionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_standardFloatOptions; }
    // @Override
    enterRule(listener) {
        if (listener.enterStandardFloatOptions) {
            listener.enterStandardFloatOptions(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStandardFloatOptions) {
            listener.exitStandardFloatOptions(this);
        }
    }
}
exports.StandardFloatOptionsContext = StandardFloatOptionsContext;
class PrecisionContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    INT_NUMBER(i) {
        if (i === undefined) {
            return this.getTokens(MySQLParser.INT_NUMBER);
        }
        else {
            return this.getToken(MySQLParser.INT_NUMBER, i);
        }
    }
    COMMA_SYMBOL() { return this.getToken(MySQLParser.COMMA_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_precision; }
    // @Override
    enterRule(listener) {
        if (listener.enterPrecision) {
            listener.enterPrecision(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPrecision) {
            listener.exitPrecision(this);
        }
    }
}
exports.PrecisionContext = PrecisionContext;
class TextOrIdentifierContext extends ParserRuleContext_1.ParserRuleContext {
    SINGLE_QUOTED_TEXT() { return this.tryGetToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_textOrIdentifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterTextOrIdentifier) {
            listener.enterTextOrIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTextOrIdentifier) {
            listener.exitTextOrIdentifier(this);
        }
    }
}
exports.TextOrIdentifierContext = TextOrIdentifierContext;
class LValueIdentifierContext extends ParserRuleContext_1.ParserRuleContext {
    pureIdentifier() {
        return this.tryGetRuleContext(0, PureIdentifierContext);
    }
    lValueKeyword() {
        return this.tryGetRuleContext(0, LValueKeywordContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_lValueIdentifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterLValueIdentifier) {
            listener.enterLValueIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLValueIdentifier) {
            listener.exitLValueIdentifier(this);
        }
    }
}
exports.LValueIdentifierContext = LValueIdentifierContext;
class RoleIdentifierOrTextContext extends ParserRuleContext_1.ParserRuleContext {
    roleIdentifier() {
        return this.tryGetRuleContext(0, RoleIdentifierContext);
    }
    textStringLiteral() {
        return this.tryGetRuleContext(0, TextStringLiteralContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_roleIdentifierOrText; }
    // @Override
    enterRule(listener) {
        if (listener.enterRoleIdentifierOrText) {
            listener.enterRoleIdentifierOrText(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRoleIdentifierOrText) {
            listener.exitRoleIdentifierOrText(this);
        }
    }
}
exports.RoleIdentifierOrTextContext = RoleIdentifierOrTextContext;
class SizeNumberContext extends ParserRuleContext_1.ParserRuleContext {
    real_ulonglong_number() {
        return this.tryGetRuleContext(0, Real_ulonglong_numberContext);
    }
    pureIdentifier() {
        return this.tryGetRuleContext(0, PureIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_sizeNumber; }
    // @Override
    enterRule(listener) {
        if (listener.enterSizeNumber) {
            listener.enterSizeNumber(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSizeNumber) {
            listener.exitSizeNumber(this);
        }
    }
}
exports.SizeNumberContext = SizeNumberContext;
class ParenthesesContext extends ParserRuleContext_1.ParserRuleContext {
    OPEN_PAR_SYMBOL() { return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
    CLOSE_PAR_SYMBOL() { return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_parentheses; }
    // @Override
    enterRule(listener) {
        if (listener.enterParentheses) {
            listener.enterParentheses(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitParentheses) {
            listener.exitParentheses(this);
        }
    }
}
exports.ParenthesesContext = ParenthesesContext;
class EqualContext extends ParserRuleContext_1.ParserRuleContext {
    EQUAL_OPERATOR() { return this.tryGetToken(MySQLParser.EQUAL_OPERATOR, 0); }
    ASSIGN_OPERATOR() { return this.tryGetToken(MySQLParser.ASSIGN_OPERATOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_equal; }
    // @Override
    enterRule(listener) {
        if (listener.enterEqual) {
            listener.enterEqual(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEqual) {
            listener.exitEqual(this);
        }
    }
}
exports.EqualContext = EqualContext;
class OptionTypeContext extends ParserRuleContext_1.ParserRuleContext {
    PERSIST_SYMBOL() { return this.tryGetToken(MySQLParser.PERSIST_SYMBOL, 0); }
    PERSIST_ONLY_SYMBOL() { return this.tryGetToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
    GLOBAL_SYMBOL() { return this.tryGetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
    LOCAL_SYMBOL() { return this.tryGetToken(MySQLParser.LOCAL_SYMBOL, 0); }
    SESSION_SYMBOL() { return this.tryGetToken(MySQLParser.SESSION_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_optionType; }
    // @Override
    enterRule(listener) {
        if (listener.enterOptionType) {
            listener.enterOptionType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOptionType) {
            listener.exitOptionType(this);
        }
    }
}
exports.OptionTypeContext = OptionTypeContext;
class VarIdentTypeContext extends ParserRuleContext_1.ParserRuleContext {
    GLOBAL_SYMBOL() { return this.tryGetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
    DOT_SYMBOL() { return this.getToken(MySQLParser.DOT_SYMBOL, 0); }
    LOCAL_SYMBOL() { return this.tryGetToken(MySQLParser.LOCAL_SYMBOL, 0); }
    SESSION_SYMBOL() { return this.tryGetToken(MySQLParser.SESSION_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_varIdentType; }
    // @Override
    enterRule(listener) {
        if (listener.enterVarIdentType) {
            listener.enterVarIdentType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVarIdentType) {
            listener.exitVarIdentType(this);
        }
    }
}
exports.VarIdentTypeContext = VarIdentTypeContext;
class SetVarIdentTypeContext extends ParserRuleContext_1.ParserRuleContext {
    PERSIST_SYMBOL() { return this.tryGetToken(MySQLParser.PERSIST_SYMBOL, 0); }
    DOT_SYMBOL() { return this.getToken(MySQLParser.DOT_SYMBOL, 0); }
    PERSIST_ONLY_SYMBOL() { return this.tryGetToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
    GLOBAL_SYMBOL() { return this.tryGetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
    LOCAL_SYMBOL() { return this.tryGetToken(MySQLParser.LOCAL_SYMBOL, 0); }
    SESSION_SYMBOL() { return this.tryGetToken(MySQLParser.SESSION_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_setVarIdentType; }
    // @Override
    enterRule(listener) {
        if (listener.enterSetVarIdentType) {
            listener.enterSetVarIdentType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSetVarIdentType) {
            listener.exitSetVarIdentType(this);
        }
    }
}
exports.SetVarIdentTypeContext = SetVarIdentTypeContext;
class IdentifierKeywordContext extends ParserRuleContext_1.ParserRuleContext {
    labelKeyword() {
        return this.tryGetRuleContext(0, LabelKeywordContext);
    }
    roleOrIdentifierKeyword() {
        return this.tryGetRuleContext(0, RoleOrIdentifierKeywordContext);
    }
    EXECUTE_SYMBOL() { return this.tryGetToken(MySQLParser.EXECUTE_SYMBOL, 0); }
    SHUTDOWN_SYMBOL() { return this.tryGetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
    RESTART_SYMBOL() { return this.tryGetToken(MySQLParser.RESTART_SYMBOL, 0); }
    identifierKeywordsUnambiguous() {
        return this.tryGetRuleContext(0, IdentifierKeywordsUnambiguousContext);
    }
    identifierKeywordsAmbiguous1RolesAndLabels() {
        return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous1RolesAndLabelsContext);
    }
    identifierKeywordsAmbiguous2Labels() {
        return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous2LabelsContext);
    }
    identifierKeywordsAmbiguous3Roles() {
        return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous3RolesContext);
    }
    identifierKeywordsAmbiguous4SystemVariables() {
        return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous4SystemVariablesContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_identifierKeyword; }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentifierKeyword) {
            listener.enterIdentifierKeyword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentifierKeyword) {
            listener.exitIdentifierKeyword(this);
        }
    }
}
exports.IdentifierKeywordContext = IdentifierKeywordContext;
class IdentifierKeywordsAmbiguous1RolesAndLabelsContext extends ParserRuleContext_1.ParserRuleContext {
    EXECUTE_SYMBOL() { return this.tryGetToken(MySQLParser.EXECUTE_SYMBOL, 0); }
    RESTART_SYMBOL() { return this.tryGetToken(MySQLParser.RESTART_SYMBOL, 0); }
    SHUTDOWN_SYMBOL() { return this.tryGetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels; }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentifierKeywordsAmbiguous1RolesAndLabels) {
            listener.enterIdentifierKeywordsAmbiguous1RolesAndLabels(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentifierKeywordsAmbiguous1RolesAndLabels) {
            listener.exitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
        }
    }
}
exports.IdentifierKeywordsAmbiguous1RolesAndLabelsContext = IdentifierKeywordsAmbiguous1RolesAndLabelsContext;
class IdentifierKeywordsAmbiguous2LabelsContext extends ParserRuleContext_1.ParserRuleContext {
    ASCII_SYMBOL() { return this.tryGetToken(MySQLParser.ASCII_SYMBOL, 0); }
    BEGIN_SYMBOL() { return this.tryGetToken(MySQLParser.BEGIN_SYMBOL, 0); }
    BYTE_SYMBOL() { return this.tryGetToken(MySQLParser.BYTE_SYMBOL, 0); }
    CACHE_SYMBOL() { return this.tryGetToken(MySQLParser.CACHE_SYMBOL, 0); }
    CHARSET_SYMBOL() { return this.tryGetToken(MySQLParser.CHARSET_SYMBOL, 0); }
    CHECKSUM_SYMBOL() { return this.tryGetToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
    CLONE_SYMBOL() { return this.tryGetToken(MySQLParser.CLONE_SYMBOL, 0); }
    COMMENT_SYMBOL() { return this.tryGetToken(MySQLParser.COMMENT_SYMBOL, 0); }
    COMMIT_SYMBOL() { return this.tryGetToken(MySQLParser.COMMIT_SYMBOL, 0); }
    CONTAINS_SYMBOL() { return this.tryGetToken(MySQLParser.CONTAINS_SYMBOL, 0); }
    DEALLOCATE_SYMBOL() { return this.tryGetToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
    DO_SYMBOL() { return this.tryGetToken(MySQLParser.DO_SYMBOL, 0); }
    END_SYMBOL() { return this.tryGetToken(MySQLParser.END_SYMBOL, 0); }
    FLUSH_SYMBOL() { return this.tryGetToken(MySQLParser.FLUSH_SYMBOL, 0); }
    FOLLOWS_SYMBOL() { return this.tryGetToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
    HANDLER_SYMBOL() { return this.tryGetToken(MySQLParser.HANDLER_SYMBOL, 0); }
    HELP_SYMBOL() { return this.tryGetToken(MySQLParser.HELP_SYMBOL, 0); }
    IMPORT_SYMBOL() { return this.tryGetToken(MySQLParser.IMPORT_SYMBOL, 0); }
    INSTALL_SYMBOL() { return this.tryGetToken(MySQLParser.INSTALL_SYMBOL, 0); }
    LANGUAGE_SYMBOL() { return this.tryGetToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
    NO_SYMBOL() { return this.tryGetToken(MySQLParser.NO_SYMBOL, 0); }
    PRECEDES_SYMBOL() { return this.tryGetToken(MySQLParser.PRECEDES_SYMBOL, 0); }
    PREPARE_SYMBOL() { return this.tryGetToken(MySQLParser.PREPARE_SYMBOL, 0); }
    REPAIR_SYMBOL() { return this.tryGetToken(MySQLParser.REPAIR_SYMBOL, 0); }
    RESET_SYMBOL() { return this.tryGetToken(MySQLParser.RESET_SYMBOL, 0); }
    ROLLBACK_SYMBOL() { return this.tryGetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
    SAVEPOINT_SYMBOL() { return this.tryGetToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
    SIGNED_SYMBOL() { return this.tryGetToken(MySQLParser.SIGNED_SYMBOL, 0); }
    SLAVE_SYMBOL() { return this.tryGetToken(MySQLParser.SLAVE_SYMBOL, 0); }
    START_SYMBOL() { return this.tryGetToken(MySQLParser.START_SYMBOL, 0); }
    STOP_SYMBOL() { return this.tryGetToken(MySQLParser.STOP_SYMBOL, 0); }
    TRUNCATE_SYMBOL() { return this.tryGetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
    UNICODE_SYMBOL() { return this.tryGetToken(MySQLParser.UNICODE_SYMBOL, 0); }
    UNINSTALL_SYMBOL() { return this.tryGetToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
    XA_SYMBOL() { return this.tryGetToken(MySQLParser.XA_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_identifierKeywordsAmbiguous2Labels; }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentifierKeywordsAmbiguous2Labels) {
            listener.enterIdentifierKeywordsAmbiguous2Labels(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentifierKeywordsAmbiguous2Labels) {
            listener.exitIdentifierKeywordsAmbiguous2Labels(this);
        }
    }
}
exports.IdentifierKeywordsAmbiguous2LabelsContext = IdentifierKeywordsAmbiguous2LabelsContext;
class LabelKeywordContext extends ParserRuleContext_1.ParserRuleContext {
    roleOrLabelKeyword() {
        return this.tryGetRuleContext(0, RoleOrLabelKeywordContext);
    }
    EVENT_SYMBOL() { return this.tryGetToken(MySQLParser.EVENT_SYMBOL, 0); }
    FILE_SYMBOL() { return this.tryGetToken(MySQLParser.FILE_SYMBOL, 0); }
    NONE_SYMBOL() { return this.tryGetToken(MySQLParser.NONE_SYMBOL, 0); }
    PROCESS_SYMBOL() { return this.tryGetToken(MySQLParser.PROCESS_SYMBOL, 0); }
    PROXY_SYMBOL() { return this.tryGetToken(MySQLParser.PROXY_SYMBOL, 0); }
    RELOAD_SYMBOL() { return this.tryGetToken(MySQLParser.RELOAD_SYMBOL, 0); }
    REPLICATION_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
    RESOURCE_SYMBOL() { return this.tryGetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
    SUPER_SYMBOL() { return this.tryGetToken(MySQLParser.SUPER_SYMBOL, 0); }
    identifierKeywordsUnambiguous() {
        return this.tryGetRuleContext(0, IdentifierKeywordsUnambiguousContext);
    }
    identifierKeywordsAmbiguous3Roles() {
        return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous3RolesContext);
    }
    identifierKeywordsAmbiguous4SystemVariables() {
        return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous4SystemVariablesContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_labelKeyword; }
    // @Override
    enterRule(listener) {
        if (listener.enterLabelKeyword) {
            listener.enterLabelKeyword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLabelKeyword) {
            listener.exitLabelKeyword(this);
        }
    }
}
exports.LabelKeywordContext = LabelKeywordContext;
class IdentifierKeywordsAmbiguous3RolesContext extends ParserRuleContext_1.ParserRuleContext {
    EVENT_SYMBOL() { return this.tryGetToken(MySQLParser.EVENT_SYMBOL, 0); }
    FILE_SYMBOL() { return this.tryGetToken(MySQLParser.FILE_SYMBOL, 0); }
    NONE_SYMBOL() { return this.tryGetToken(MySQLParser.NONE_SYMBOL, 0); }
    PROCESS_SYMBOL() { return this.tryGetToken(MySQLParser.PROCESS_SYMBOL, 0); }
    PROXY_SYMBOL() { return this.tryGetToken(MySQLParser.PROXY_SYMBOL, 0); }
    RELOAD_SYMBOL() { return this.tryGetToken(MySQLParser.RELOAD_SYMBOL, 0); }
    REPLICATION_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
    RESOURCE_SYMBOL() { return this.tryGetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
    SUPER_SYMBOL() { return this.tryGetToken(MySQLParser.SUPER_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_identifierKeywordsAmbiguous3Roles; }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentifierKeywordsAmbiguous3Roles) {
            listener.enterIdentifierKeywordsAmbiguous3Roles(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentifierKeywordsAmbiguous3Roles) {
            listener.exitIdentifierKeywordsAmbiguous3Roles(this);
        }
    }
}
exports.IdentifierKeywordsAmbiguous3RolesContext = IdentifierKeywordsAmbiguous3RolesContext;
class IdentifierKeywordsUnambiguousContext extends ParserRuleContext_1.ParserRuleContext {
    ACTION_SYMBOL() { return this.tryGetToken(MySQLParser.ACTION_SYMBOL, 0); }
    ACCOUNT_SYMBOL() { return this.tryGetToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
    ACTIVE_SYMBOL() { return this.tryGetToken(MySQLParser.ACTIVE_SYMBOL, 0); }
    ADDDATE_SYMBOL() { return this.tryGetToken(MySQLParser.ADDDATE_SYMBOL, 0); }
    ADMIN_SYMBOL() { return this.tryGetToken(MySQLParser.ADMIN_SYMBOL, 0); }
    AFTER_SYMBOL() { return this.tryGetToken(MySQLParser.AFTER_SYMBOL, 0); }
    AGAINST_SYMBOL() { return this.tryGetToken(MySQLParser.AGAINST_SYMBOL, 0); }
    AGGREGATE_SYMBOL() { return this.tryGetToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
    ALGORITHM_SYMBOL() { return this.tryGetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
    ALWAYS_SYMBOL() { return this.tryGetToken(MySQLParser.ALWAYS_SYMBOL, 0); }
    ANY_SYMBOL() { return this.tryGetToken(MySQLParser.ANY_SYMBOL, 0); }
    AT_SYMBOL() { return this.tryGetToken(MySQLParser.AT_SYMBOL, 0); }
    AUTOEXTEND_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
    AUTO_INCREMENT_SYMBOL() { return this.tryGetToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
    AVG_ROW_LENGTH_SYMBOL() { return this.tryGetToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
    AVG_SYMBOL() { return this.tryGetToken(MySQLParser.AVG_SYMBOL, 0); }
    BACKUP_SYMBOL() { return this.tryGetToken(MySQLParser.BACKUP_SYMBOL, 0); }
    BINLOG_SYMBOL() { return this.tryGetToken(MySQLParser.BINLOG_SYMBOL, 0); }
    BIT_SYMBOL() { return this.tryGetToken(MySQLParser.BIT_SYMBOL, 0); }
    BLOCK_SYMBOL() { return this.tryGetToken(MySQLParser.BLOCK_SYMBOL, 0); }
    BOOLEAN_SYMBOL() { return this.tryGetToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
    BOOL_SYMBOL() { return this.tryGetToken(MySQLParser.BOOL_SYMBOL, 0); }
    BTREE_SYMBOL() { return this.tryGetToken(MySQLParser.BTREE_SYMBOL, 0); }
    BUCKETS_SYMBOL() { return this.tryGetToken(MySQLParser.BUCKETS_SYMBOL, 0); }
    CASCADED_SYMBOL() { return this.tryGetToken(MySQLParser.CASCADED_SYMBOL, 0); }
    CATALOG_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
    CHAIN_SYMBOL() { return this.tryGetToken(MySQLParser.CHAIN_SYMBOL, 0); }
    CHANGED_SYMBOL() { return this.tryGetToken(MySQLParser.CHANGED_SYMBOL, 0); }
    CHANNEL_SYMBOL() { return this.tryGetToken(MySQLParser.CHANNEL_SYMBOL, 0); }
    CIPHER_SYMBOL() { return this.tryGetToken(MySQLParser.CIPHER_SYMBOL, 0); }
    CLASS_ORIGIN_SYMBOL() { return this.tryGetToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
    CLIENT_SYMBOL() { return this.tryGetToken(MySQLParser.CLIENT_SYMBOL, 0); }
    CLOSE_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_SYMBOL, 0); }
    COALESCE_SYMBOL() { return this.tryGetToken(MySQLParser.COALESCE_SYMBOL, 0); }
    CODE_SYMBOL() { return this.tryGetToken(MySQLParser.CODE_SYMBOL, 0); }
    COLLATION_SYMBOL() { return this.tryGetToken(MySQLParser.COLLATION_SYMBOL, 0); }
    COLUMNS_SYMBOL() { return this.tryGetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
    COLUMN_FORMAT_SYMBOL() { return this.tryGetToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
    COLUMN_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
    COMMITTED_SYMBOL() { return this.tryGetToken(MySQLParser.COMMITTED_SYMBOL, 0); }
    COMPACT_SYMBOL() { return this.tryGetToken(MySQLParser.COMPACT_SYMBOL, 0); }
    COMPLETION_SYMBOL() { return this.tryGetToken(MySQLParser.COMPLETION_SYMBOL, 0); }
    COMPONENT_SYMBOL() { return this.tryGetToken(MySQLParser.COMPONENT_SYMBOL, 0); }
    COMPRESSED_SYMBOL() { return this.tryGetToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
    COMPRESSION_SYMBOL() { return this.tryGetToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
    CONCURRENT_SYMBOL() { return this.tryGetToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
    CONNECTION_SYMBOL() { return this.tryGetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
    CONSISTENT_SYMBOL() { return this.tryGetToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
    CONSTRAINT_CATALOG_SYMBOL() { return this.tryGetToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
    CONSTRAINT_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
    CONSTRAINT_SCHEMA_SYMBOL() { return this.tryGetToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
    CONTEXT_SYMBOL() { return this.tryGetToken(MySQLParser.CONTEXT_SYMBOL, 0); }
    CPU_SYMBOL() { return this.tryGetToken(MySQLParser.CPU_SYMBOL, 0); }
    CURRENT_SYMBOL() { return this.tryGetToken(MySQLParser.CURRENT_SYMBOL, 0); }
    CURSOR_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
    DATAFILE_SYMBOL() { return this.tryGetToken(MySQLParser.DATAFILE_SYMBOL, 0); }
    DATA_SYMBOL() { return this.tryGetToken(MySQLParser.DATA_SYMBOL, 0); }
    DATETIME_SYMBOL() { return this.tryGetToken(MySQLParser.DATETIME_SYMBOL, 0); }
    DATE_SYMBOL() { return this.tryGetToken(MySQLParser.DATE_SYMBOL, 0); }
    DAY_SYMBOL() { return this.tryGetToken(MySQLParser.DAY_SYMBOL, 0); }
    DEFAULT_AUTH_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
    DEFINER_SYMBOL() { return this.tryGetToken(MySQLParser.DEFINER_SYMBOL, 0); }
    DEFINITION_SYMBOL() { return this.tryGetToken(MySQLParser.DEFINITION_SYMBOL, 0); }
    DELAY_KEY_WRITE_SYMBOL() { return this.tryGetToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
    DESCRIPTION_SYMBOL() { return this.tryGetToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
    DIAGNOSTICS_SYMBOL() { return this.tryGetToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
    DIRECTORY_SYMBOL() { return this.tryGetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
    DISABLE_SYMBOL() { return this.tryGetToken(MySQLParser.DISABLE_SYMBOL, 0); }
    DISCARD_SYMBOL() { return this.tryGetToken(MySQLParser.DISCARD_SYMBOL, 0); }
    DISK_SYMBOL() { return this.tryGetToken(MySQLParser.DISK_SYMBOL, 0); }
    DUMPFILE_SYMBOL() { return this.tryGetToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
    DUPLICATE_SYMBOL() { return this.tryGetToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
    DYNAMIC_SYMBOL() { return this.tryGetToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
    ENABLE_SYMBOL() { return this.tryGetToken(MySQLParser.ENABLE_SYMBOL, 0); }
    ENCRYPTION_SYMBOL() { return this.tryGetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
    ENDS_SYMBOL() { return this.tryGetToken(MySQLParser.ENDS_SYMBOL, 0); }
    ENFORCED_SYMBOL() { return this.tryGetToken(MySQLParser.ENFORCED_SYMBOL, 0); }
    ENGINES_SYMBOL() { return this.tryGetToken(MySQLParser.ENGINES_SYMBOL, 0); }
    ENGINE_SYMBOL() { return this.tryGetToken(MySQLParser.ENGINE_SYMBOL, 0); }
    ENUM_SYMBOL() { return this.tryGetToken(MySQLParser.ENUM_SYMBOL, 0); }
    ERRORS_SYMBOL() { return this.tryGetToken(MySQLParser.ERRORS_SYMBOL, 0); }
    ERROR_SYMBOL() { return this.tryGetToken(MySQLParser.ERROR_SYMBOL, 0); }
    ESCAPE_SYMBOL() { return this.tryGetToken(MySQLParser.ESCAPE_SYMBOL, 0); }
    EVENTS_SYMBOL() { return this.tryGetToken(MySQLParser.EVENTS_SYMBOL, 0); }
    EVERY_SYMBOL() { return this.tryGetToken(MySQLParser.EVERY_SYMBOL, 0); }
    EXCHANGE_SYMBOL() { return this.tryGetToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
    EXCLUDE_SYMBOL() { return this.tryGetToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
    EXPANSION_SYMBOL() { return this.tryGetToken(MySQLParser.EXPANSION_SYMBOL, 0); }
    EXPIRE_SYMBOL() { return this.tryGetToken(MySQLParser.EXPIRE_SYMBOL, 0); }
    EXPORT_SYMBOL() { return this.tryGetToken(MySQLParser.EXPORT_SYMBOL, 0); }
    EXTENDED_SYMBOL() { return this.tryGetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
    EXTENT_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
    FAST_SYMBOL() { return this.tryGetToken(MySQLParser.FAST_SYMBOL, 0); }
    FAULTS_SYMBOL() { return this.tryGetToken(MySQLParser.FAULTS_SYMBOL, 0); }
    FILE_BLOCK_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
    FILTER_SYMBOL() { return this.tryGetToken(MySQLParser.FILTER_SYMBOL, 0); }
    FIRST_SYMBOL() { return this.tryGetToken(MySQLParser.FIRST_SYMBOL, 0); }
    FIXED_SYMBOL() { return this.tryGetToken(MySQLParser.FIXED_SYMBOL, 0); }
    FOLLOWING_SYMBOL() { return this.tryGetToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
    FORMAT_SYMBOL() { return this.tryGetToken(MySQLParser.FORMAT_SYMBOL, 0); }
    FOUND_SYMBOL() { return this.tryGetToken(MySQLParser.FOUND_SYMBOL, 0); }
    FULL_SYMBOL() { return this.tryGetToken(MySQLParser.FULL_SYMBOL, 0); }
    GENERAL_SYMBOL() { return this.tryGetToken(MySQLParser.GENERAL_SYMBOL, 0); }
    GEOMETRYCOLLECTION_SYMBOL() { return this.tryGetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
    GEOMETRY_SYMBOL() { return this.tryGetToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
    GET_FORMAT_SYMBOL() { return this.tryGetToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
    GET_MASTER_PUBLIC_KEY_SYMBOL() { return this.tryGetToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
    GRANTS_SYMBOL() { return this.tryGetToken(MySQLParser.GRANTS_SYMBOL, 0); }
    GROUP_REPLICATION_SYMBOL() { return this.tryGetToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
    HASH_SYMBOL() { return this.tryGetToken(MySQLParser.HASH_SYMBOL, 0); }
    HISTOGRAM_SYMBOL() { return this.tryGetToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
    HISTORY_SYMBOL() { return this.tryGetToken(MySQLParser.HISTORY_SYMBOL, 0); }
    HOSTS_SYMBOL() { return this.tryGetToken(MySQLParser.HOSTS_SYMBOL, 0); }
    HOST_SYMBOL() { return this.tryGetToken(MySQLParser.HOST_SYMBOL, 0); }
    HOUR_SYMBOL() { return this.tryGetToken(MySQLParser.HOUR_SYMBOL, 0); }
    IDENTIFIED_SYMBOL() { return this.tryGetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
    IGNORE_SERVER_IDS_SYMBOL() { return this.tryGetToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
    INACTIVE_SYMBOL() { return this.tryGetToken(MySQLParser.INACTIVE_SYMBOL, 0); }
    INDEXES_SYMBOL() { return this.tryGetToken(MySQLParser.INDEXES_SYMBOL, 0); }
    INITIAL_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
    INSERT_METHOD_SYMBOL() { return this.tryGetToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
    INSTANCE_SYMBOL() { return this.tryGetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
    INVISIBLE_SYMBOL() { return this.tryGetToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
    INVOKER_SYMBOL() { return this.tryGetToken(MySQLParser.INVOKER_SYMBOL, 0); }
    IO_SYMBOL() { return this.tryGetToken(MySQLParser.IO_SYMBOL, 0); }
    IPC_SYMBOL() { return this.tryGetToken(MySQLParser.IPC_SYMBOL, 0); }
    ISOLATION_SYMBOL() { return this.tryGetToken(MySQLParser.ISOLATION_SYMBOL, 0); }
    ISSUER_SYMBOL() { return this.tryGetToken(MySQLParser.ISSUER_SYMBOL, 0); }
    JSON_SYMBOL() { return this.tryGetToken(MySQLParser.JSON_SYMBOL, 0); }
    KEY_BLOCK_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
    LAST_SYMBOL() { return this.tryGetToken(MySQLParser.LAST_SYMBOL, 0); }
    LEAVES_SYMBOL() { return this.tryGetToken(MySQLParser.LEAVES_SYMBOL, 0); }
    LESS_SYMBOL() { return this.tryGetToken(MySQLParser.LESS_SYMBOL, 0); }
    LEVEL_SYMBOL() { return this.tryGetToken(MySQLParser.LEVEL_SYMBOL, 0); }
    LINESTRING_SYMBOL() { return this.tryGetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
    LIST_SYMBOL() { return this.tryGetToken(MySQLParser.LIST_SYMBOL, 0); }
    LOCKED_SYMBOL() { return this.tryGetToken(MySQLParser.LOCKED_SYMBOL, 0); }
    LOCKS_SYMBOL() { return this.tryGetToken(MySQLParser.LOCKS_SYMBOL, 0); }
    LOGFILE_SYMBOL() { return this.tryGetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
    LOGS_SYMBOL() { return this.tryGetToken(MySQLParser.LOGS_SYMBOL, 0); }
    MASTER_AUTO_POSITION_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
    MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
    MASTER_CONNECT_RETRY_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
    MASTER_DELAY_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
    MASTER_HEARTBEAT_PERIOD_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
    MASTER_HOST_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
    NETWORK_NAMESPACE_SYMBOL() { return this.tryGetToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
    MASTER_LOG_FILE_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
    MASTER_LOG_POS_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
    MASTER_PASSWORD_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
    MASTER_PORT_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
    MASTER_PUBLIC_KEY_PATH_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
    MASTER_RETRY_COUNT_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
    MASTER_SERVER_ID_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0); }
    MASTER_SSL_CAPATH_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
    MASTER_SSL_CA_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
    MASTER_SSL_CERT_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
    MASTER_SSL_CIPHER_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
    MASTER_SSL_CRLPATH_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
    MASTER_SSL_CRL_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
    MASTER_SSL_KEY_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
    MASTER_SSL_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
    MASTER_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SYMBOL, 0); }
    MASTER_TLS_CIPHERSUITES_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
    MASTER_TLS_VERSION_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
    MASTER_USER_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
    MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
    MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
    MAX_QUERIES_PER_HOUR_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
    MAX_ROWS_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
    MAX_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
    MAX_UPDATES_PER_HOUR_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
    MAX_USER_CONNECTIONS_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
    MEDIUM_SYMBOL() { return this.tryGetToken(MySQLParser.MEDIUM_SYMBOL, 0); }
    MEMORY_SYMBOL() { return this.tryGetToken(MySQLParser.MEMORY_SYMBOL, 0); }
    MERGE_SYMBOL() { return this.tryGetToken(MySQLParser.MERGE_SYMBOL, 0); }
    MESSAGE_TEXT_SYMBOL() { return this.tryGetToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
    MICROSECOND_SYMBOL() { return this.tryGetToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
    MIGRATE_SYMBOL() { return this.tryGetToken(MySQLParser.MIGRATE_SYMBOL, 0); }
    MINUTE_SYMBOL() { return this.tryGetToken(MySQLParser.MINUTE_SYMBOL, 0); }
    MIN_ROWS_SYMBOL() { return this.tryGetToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
    MODE_SYMBOL() { return this.tryGetToken(MySQLParser.MODE_SYMBOL, 0); }
    MODIFY_SYMBOL() { return this.tryGetToken(MySQLParser.MODIFY_SYMBOL, 0); }
    MONTH_SYMBOL() { return this.tryGetToken(MySQLParser.MONTH_SYMBOL, 0); }
    MULTILINESTRING_SYMBOL() { return this.tryGetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
    MULTIPOINT_SYMBOL() { return this.tryGetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
    MULTIPOLYGON_SYMBOL() { return this.tryGetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
    MUTEX_SYMBOL() { return this.tryGetToken(MySQLParser.MUTEX_SYMBOL, 0); }
    MYSQL_ERRNO_SYMBOL() { return this.tryGetToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
    NAMES_SYMBOL() { return this.tryGetToken(MySQLParser.NAMES_SYMBOL, 0); }
    NAME_SYMBOL() { return this.tryGetToken(MySQLParser.NAME_SYMBOL, 0); }
    NATIONAL_SYMBOL() { return this.tryGetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
    NCHAR_SYMBOL() { return this.tryGetToken(MySQLParser.NCHAR_SYMBOL, 0); }
    NDBCLUSTER_SYMBOL() { return this.tryGetToken(MySQLParser.NDBCLUSTER_SYMBOL, 0); }
    NESTED_SYMBOL() { return this.tryGetToken(MySQLParser.NESTED_SYMBOL, 0); }
    NEVER_SYMBOL() { return this.tryGetToken(MySQLParser.NEVER_SYMBOL, 0); }
    NEW_SYMBOL() { return this.tryGetToken(MySQLParser.NEW_SYMBOL, 0); }
    NEXT_SYMBOL() { return this.tryGetToken(MySQLParser.NEXT_SYMBOL, 0); }
    NODEGROUP_SYMBOL() { return this.tryGetToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
    NOWAIT_SYMBOL() { return this.tryGetToken(MySQLParser.NOWAIT_SYMBOL, 0); }
    NO_WAIT_SYMBOL() { return this.tryGetToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
    NULLS_SYMBOL() { return this.tryGetToken(MySQLParser.NULLS_SYMBOL, 0); }
    NUMBER_SYMBOL() { return this.tryGetToken(MySQLParser.NUMBER_SYMBOL, 0); }
    NVARCHAR_SYMBOL() { return this.tryGetToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
    OFFSET_SYMBOL() { return this.tryGetToken(MySQLParser.OFFSET_SYMBOL, 0); }
    OJ_SYMBOL() { return this.tryGetToken(MySQLParser.OJ_SYMBOL, 0); }
    OLD_SYMBOL() { return this.tryGetToken(MySQLParser.OLD_SYMBOL, 0); }
    ONE_SYMBOL() { return this.tryGetToken(MySQLParser.ONE_SYMBOL, 0); }
    ONLY_SYMBOL() { return this.tryGetToken(MySQLParser.ONLY_SYMBOL, 0); }
    OPEN_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_SYMBOL, 0); }
    OPTIONAL_SYMBOL() { return this.tryGetToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
    OPTIONS_SYMBOL() { return this.tryGetToken(MySQLParser.OPTIONS_SYMBOL, 0); }
    ORDINALITY_SYMBOL() { return this.tryGetToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
    ORGANIZATION_SYMBOL() { return this.tryGetToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
    OTHERS_SYMBOL() { return this.tryGetToken(MySQLParser.OTHERS_SYMBOL, 0); }
    OWNER_SYMBOL() { return this.tryGetToken(MySQLParser.OWNER_SYMBOL, 0); }
    PACK_KEYS_SYMBOL() { return this.tryGetToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
    PAGE_SYMBOL() { return this.tryGetToken(MySQLParser.PAGE_SYMBOL, 0); }
    PARSER_SYMBOL() { return this.tryGetToken(MySQLParser.PARSER_SYMBOL, 0); }
    PARTIAL_SYMBOL() { return this.tryGetToken(MySQLParser.PARTIAL_SYMBOL, 0); }
    PARTITIONING_SYMBOL() { return this.tryGetToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
    PARTITIONS_SYMBOL() { return this.tryGetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
    PASSWORD_SYMBOL() { return this.tryGetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
    PATH_SYMBOL() { return this.tryGetToken(MySQLParser.PATH_SYMBOL, 0); }
    PHASE_SYMBOL() { return this.tryGetToken(MySQLParser.PHASE_SYMBOL, 0); }
    PLUGINS_SYMBOL() { return this.tryGetToken(MySQLParser.PLUGINS_SYMBOL, 0); }
    PLUGIN_DIR_SYMBOL() { return this.tryGetToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
    PLUGIN_SYMBOL() { return this.tryGetToken(MySQLParser.PLUGIN_SYMBOL, 0); }
    POINT_SYMBOL() { return this.tryGetToken(MySQLParser.POINT_SYMBOL, 0); }
    POLYGON_SYMBOL() { return this.tryGetToken(MySQLParser.POLYGON_SYMBOL, 0); }
    PORT_SYMBOL() { return this.tryGetToken(MySQLParser.PORT_SYMBOL, 0); }
    PRECEDING_SYMBOL() { return this.tryGetToken(MySQLParser.PRECEDING_SYMBOL, 0); }
    PRESERVE_SYMBOL() { return this.tryGetToken(MySQLParser.PRESERVE_SYMBOL, 0); }
    PREV_SYMBOL() { return this.tryGetToken(MySQLParser.PREV_SYMBOL, 0); }
    PRIVILEGES_SYMBOL() { return this.tryGetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
    PRIVILEGE_CHECKS_USER_SYMBOL() { return this.tryGetToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
    PROCESSLIST_SYMBOL() { return this.tryGetToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
    PROFILES_SYMBOL() { return this.tryGetToken(MySQLParser.PROFILES_SYMBOL, 0); }
    PROFILE_SYMBOL() { return this.tryGetToken(MySQLParser.PROFILE_SYMBOL, 0); }
    QUARTER_SYMBOL() { return this.tryGetToken(MySQLParser.QUARTER_SYMBOL, 0); }
    QUERY_SYMBOL() { return this.tryGetToken(MySQLParser.QUERY_SYMBOL, 0); }
    QUICK_SYMBOL() { return this.tryGetToken(MySQLParser.QUICK_SYMBOL, 0); }
    READ_ONLY_SYMBOL() { return this.tryGetToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
    REBUILD_SYMBOL() { return this.tryGetToken(MySQLParser.REBUILD_SYMBOL, 0); }
    RECOVER_SYMBOL() { return this.tryGetToken(MySQLParser.RECOVER_SYMBOL, 0); }
    REDO_BUFFER_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
    REDUNDANT_SYMBOL() { return this.tryGetToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
    REFERENCE_SYMBOL() { return this.tryGetToken(MySQLParser.REFERENCE_SYMBOL, 0); }
    RELAY_SYMBOL() { return this.tryGetToken(MySQLParser.RELAY_SYMBOL, 0); }
    RELAYLOG_SYMBOL() { return this.tryGetToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
    RELAY_LOG_FILE_SYMBOL() { return this.tryGetToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
    RELAY_LOG_POS_SYMBOL() { return this.tryGetToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
    RELAY_THREAD_SYMBOL() { return this.tryGetToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
    REMOVE_SYMBOL() { return this.tryGetToken(MySQLParser.REMOVE_SYMBOL, 0); }
    REORGANIZE_SYMBOL() { return this.tryGetToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
    REPEATABLE_SYMBOL() { return this.tryGetToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
    REPLICATE_DO_DB_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
    REPLICATE_DO_TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
    REPLICATE_IGNORE_DB_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
    REPLICATE_IGNORE_TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
    REPLICATE_REWRITE_DB_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
    REPLICATE_WILD_DO_TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
    REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
    USER_RESOURCES_SYMBOL() { return this.tryGetToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
    RESPECT_SYMBOL() { return this.tryGetToken(MySQLParser.RESPECT_SYMBOL, 0); }
    RESTORE_SYMBOL() { return this.tryGetToken(MySQLParser.RESTORE_SYMBOL, 0); }
    RESUME_SYMBOL() { return this.tryGetToken(MySQLParser.RESUME_SYMBOL, 0); }
    RETAIN_SYMBOL() { return this.tryGetToken(MySQLParser.RETAIN_SYMBOL, 0); }
    RETURNED_SQLSTATE_SYMBOL() { return this.tryGetToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
    RETURNS_SYMBOL() { return this.tryGetToken(MySQLParser.RETURNS_SYMBOL, 0); }
    REUSE_SYMBOL() { return this.tryGetToken(MySQLParser.REUSE_SYMBOL, 0); }
    REVERSE_SYMBOL() { return this.tryGetToken(MySQLParser.REVERSE_SYMBOL, 0); }
    ROLE_SYMBOL() { return this.tryGetToken(MySQLParser.ROLE_SYMBOL, 0); }
    ROLLUP_SYMBOL() { return this.tryGetToken(MySQLParser.ROLLUP_SYMBOL, 0); }
    ROTATE_SYMBOL() { return this.tryGetToken(MySQLParser.ROTATE_SYMBOL, 0); }
    ROUTINE_SYMBOL() { return this.tryGetToken(MySQLParser.ROUTINE_SYMBOL, 0); }
    ROW_COUNT_SYMBOL() { return this.tryGetToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
    ROW_FORMAT_SYMBOL() { return this.tryGetToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
    RTREE_SYMBOL() { return this.tryGetToken(MySQLParser.RTREE_SYMBOL, 0); }
    SCHEDULE_SYMBOL() { return this.tryGetToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
    SCHEMA_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
    SECONDARY_ENGINE_SYMBOL() { return this.tryGetToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
    SECONDARY_LOAD_SYMBOL() { return this.tryGetToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
    SECONDARY_SYMBOL() { return this.tryGetToken(MySQLParser.SECONDARY_SYMBOL, 0); }
    SECONDARY_UNLOAD_SYMBOL() { return this.tryGetToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
    SECOND_SYMBOL() { return this.tryGetToken(MySQLParser.SECOND_SYMBOL, 0); }
    SECURITY_SYMBOL() { return this.tryGetToken(MySQLParser.SECURITY_SYMBOL, 0); }
    SERIALIZABLE_SYMBOL() { return this.tryGetToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
    SERIAL_SYMBOL() { return this.tryGetToken(MySQLParser.SERIAL_SYMBOL, 0); }
    SERVER_SYMBOL() { return this.tryGetToken(MySQLParser.SERVER_SYMBOL, 0); }
    SHARE_SYMBOL() { return this.tryGetToken(MySQLParser.SHARE_SYMBOL, 0); }
    SIMPLE_SYMBOL() { return this.tryGetToken(MySQLParser.SIMPLE_SYMBOL, 0); }
    SKIP_SYMBOL() { return this.tryGetToken(MySQLParser.SKIP_SYMBOL, 0); }
    SLOW_SYMBOL() { return this.tryGetToken(MySQLParser.SLOW_SYMBOL, 0); }
    SNAPSHOT_SYMBOL() { return this.tryGetToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
    SOCKET_SYMBOL() { return this.tryGetToken(MySQLParser.SOCKET_SYMBOL, 0); }
    SONAME_SYMBOL() { return this.tryGetToken(MySQLParser.SONAME_SYMBOL, 0); }
    SOUNDS_SYMBOL() { return this.tryGetToken(MySQLParser.SOUNDS_SYMBOL, 0); }
    SOURCE_SYMBOL() { return this.tryGetToken(MySQLParser.SOURCE_SYMBOL, 0); }
    SQL_AFTER_GTIDS_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
    SQL_AFTER_MTS_GAPS_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
    SQL_BEFORE_GTIDS_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
    SQL_BUFFER_RESULT_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
    SQL_NO_CACHE_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
    SQL_THREAD_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
    SRID_SYMBOL() { return this.tryGetToken(MySQLParser.SRID_SYMBOL, 0); }
    STACKED_SYMBOL() { return this.tryGetToken(MySQLParser.STACKED_SYMBOL, 0); }
    STARTS_SYMBOL() { return this.tryGetToken(MySQLParser.STARTS_SYMBOL, 0); }
    STATS_AUTO_RECALC_SYMBOL() { return this.tryGetToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
    STATS_PERSISTENT_SYMBOL() { return this.tryGetToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
    STATS_SAMPLE_PAGES_SYMBOL() { return this.tryGetToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
    STATUS_SYMBOL() { return this.tryGetToken(MySQLParser.STATUS_SYMBOL, 0); }
    STORAGE_SYMBOL() { return this.tryGetToken(MySQLParser.STORAGE_SYMBOL, 0); }
    STRING_SYMBOL() { return this.tryGetToken(MySQLParser.STRING_SYMBOL, 0); }
    SUBCLASS_ORIGIN_SYMBOL() { return this.tryGetToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
    SUBDATE_SYMBOL() { return this.tryGetToken(MySQLParser.SUBDATE_SYMBOL, 0); }
    SUBJECT_SYMBOL() { return this.tryGetToken(MySQLParser.SUBJECT_SYMBOL, 0); }
    SUBPARTITIONS_SYMBOL() { return this.tryGetToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
    SUBPARTITION_SYMBOL() { return this.tryGetToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
    SUSPEND_SYMBOL() { return this.tryGetToken(MySQLParser.SUSPEND_SYMBOL, 0); }
    SWAPS_SYMBOL() { return this.tryGetToken(MySQLParser.SWAPS_SYMBOL, 0); }
    SWITCHES_SYMBOL() { return this.tryGetToken(MySQLParser.SWITCHES_SYMBOL, 0); }
    TABLES_SYMBOL() { return this.tryGetToken(MySQLParser.TABLES_SYMBOL, 0); }
    TABLESPACE_SYMBOL() { return this.tryGetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
    TABLE_CHECKSUM_SYMBOL() { return this.tryGetToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
    TABLE_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
    TEMPORARY_SYMBOL() { return this.tryGetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
    TEMPTABLE_SYMBOL() { return this.tryGetToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
    TEXT_SYMBOL() { return this.tryGetToken(MySQLParser.TEXT_SYMBOL, 0); }
    THAN_SYMBOL() { return this.tryGetToken(MySQLParser.THAN_SYMBOL, 0); }
    THREAD_PRIORITY_SYMBOL() { return this.tryGetToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
    TIES_SYMBOL() { return this.tryGetToken(MySQLParser.TIES_SYMBOL, 0); }
    TIMESTAMP_ADD_SYMBOL() { return this.tryGetToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
    TIMESTAMP_DIFF_SYMBOL() { return this.tryGetToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
    TIMESTAMP_SYMBOL() { return this.tryGetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
    TIME_SYMBOL() { return this.tryGetToken(MySQLParser.TIME_SYMBOL, 0); }
    TRANSACTION_SYMBOL() { return this.tryGetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
    TRIGGERS_SYMBOL() { return this.tryGetToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
    TYPES_SYMBOL() { return this.tryGetToken(MySQLParser.TYPES_SYMBOL, 0); }
    TYPE_SYMBOL() { return this.tryGetToken(MySQLParser.TYPE_SYMBOL, 0); }
    UNBOUNDED_SYMBOL() { return this.tryGetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
    UNCOMMITTED_SYMBOL() { return this.tryGetToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
    UNDEFINED_SYMBOL() { return this.tryGetToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
    UNDOFILE_SYMBOL() { return this.tryGetToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
    UNDO_BUFFER_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
    UNKNOWN_SYMBOL() { return this.tryGetToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
    UNTIL_SYMBOL() { return this.tryGetToken(MySQLParser.UNTIL_SYMBOL, 0); }
    UPGRADE_SYMBOL() { return this.tryGetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
    USER_SYMBOL() { return this.tryGetToken(MySQLParser.USER_SYMBOL, 0); }
    USE_FRM_SYMBOL() { return this.tryGetToken(MySQLParser.USE_FRM_SYMBOL, 0); }
    VALIDATION_SYMBOL() { return this.tryGetToken(MySQLParser.VALIDATION_SYMBOL, 0); }
    VALUE_SYMBOL() { return this.tryGetToken(MySQLParser.VALUE_SYMBOL, 0); }
    VARIABLES_SYMBOL() { return this.tryGetToken(MySQLParser.VARIABLES_SYMBOL, 0); }
    VCPU_SYMBOL() { return this.tryGetToken(MySQLParser.VCPU_SYMBOL, 0); }
    VIEW_SYMBOL() { return this.tryGetToken(MySQLParser.VIEW_SYMBOL, 0); }
    VISIBLE_SYMBOL() { return this.tryGetToken(MySQLParser.VISIBLE_SYMBOL, 0); }
    WAIT_SYMBOL() { return this.tryGetToken(MySQLParser.WAIT_SYMBOL, 0); }
    WARNINGS_SYMBOL() { return this.tryGetToken(MySQLParser.WARNINGS_SYMBOL, 0); }
    WEEK_SYMBOL() { return this.tryGetToken(MySQLParser.WEEK_SYMBOL, 0); }
    WEIGHT_STRING_SYMBOL() { return this.tryGetToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
    WITHOUT_SYMBOL() { return this.tryGetToken(MySQLParser.WITHOUT_SYMBOL, 0); }
    WORK_SYMBOL() { return this.tryGetToken(MySQLParser.WORK_SYMBOL, 0); }
    WRAPPER_SYMBOL() { return this.tryGetToken(MySQLParser.WRAPPER_SYMBOL, 0); }
    X509_SYMBOL() { return this.tryGetToken(MySQLParser.X509_SYMBOL, 0); }
    XID_SYMBOL() { return this.tryGetToken(MySQLParser.XID_SYMBOL, 0); }
    XML_SYMBOL() { return this.tryGetToken(MySQLParser.XML_SYMBOL, 0); }
    YEAR_SYMBOL() { return this.tryGetToken(MySQLParser.YEAR_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_identifierKeywordsUnambiguous; }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentifierKeywordsUnambiguous) {
            listener.enterIdentifierKeywordsUnambiguous(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentifierKeywordsUnambiguous) {
            listener.exitIdentifierKeywordsUnambiguous(this);
        }
    }
}
exports.IdentifierKeywordsUnambiguousContext = IdentifierKeywordsUnambiguousContext;
class RoleKeywordContext extends ParserRuleContext_1.ParserRuleContext {
    roleOrLabelKeyword() {
        return this.tryGetRuleContext(0, RoleOrLabelKeywordContext);
    }
    roleOrIdentifierKeyword() {
        return this.tryGetRuleContext(0, RoleOrIdentifierKeywordContext);
    }
    identifierKeywordsUnambiguous() {
        return this.tryGetRuleContext(0, IdentifierKeywordsUnambiguousContext);
    }
    identifierKeywordsAmbiguous2Labels() {
        return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous2LabelsContext);
    }
    identifierKeywordsAmbiguous4SystemVariables() {
        return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous4SystemVariablesContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_roleKeyword; }
    // @Override
    enterRule(listener) {
        if (listener.enterRoleKeyword) {
            listener.enterRoleKeyword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRoleKeyword) {
            listener.exitRoleKeyword(this);
        }
    }
}
exports.RoleKeywordContext = RoleKeywordContext;
class LValueKeywordContext extends ParserRuleContext_1.ParserRuleContext {
    identifierKeywordsUnambiguous() {
        return this.tryGetRuleContext(0, IdentifierKeywordsUnambiguousContext);
    }
    identifierKeywordsAmbiguous1RolesAndLabels() {
        return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous1RolesAndLabelsContext);
    }
    identifierKeywordsAmbiguous2Labels() {
        return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous2LabelsContext);
    }
    identifierKeywordsAmbiguous3Roles() {
        return this.tryGetRuleContext(0, IdentifierKeywordsAmbiguous3RolesContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_lValueKeyword; }
    // @Override
    enterRule(listener) {
        if (listener.enterLValueKeyword) {
            listener.enterLValueKeyword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLValueKeyword) {
            listener.exitLValueKeyword(this);
        }
    }
}
exports.LValueKeywordContext = LValueKeywordContext;
class IdentifierKeywordsAmbiguous4SystemVariablesContext extends ParserRuleContext_1.ParserRuleContext {
    GLOBAL_SYMBOL() { return this.tryGetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
    LOCAL_SYMBOL() { return this.tryGetToken(MySQLParser.LOCAL_SYMBOL, 0); }
    PERSIST_SYMBOL() { return this.tryGetToken(MySQLParser.PERSIST_SYMBOL, 0); }
    PERSIST_ONLY_SYMBOL() { return this.tryGetToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
    SESSION_SYMBOL() { return this.tryGetToken(MySQLParser.SESSION_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables; }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentifierKeywordsAmbiguous4SystemVariables) {
            listener.enterIdentifierKeywordsAmbiguous4SystemVariables(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentifierKeywordsAmbiguous4SystemVariables) {
            listener.exitIdentifierKeywordsAmbiguous4SystemVariables(this);
        }
    }
}
exports.IdentifierKeywordsAmbiguous4SystemVariablesContext = IdentifierKeywordsAmbiguous4SystemVariablesContext;
class RoleOrIdentifierKeywordContext extends ParserRuleContext_1.ParserRuleContext {
    ACCOUNT_SYMBOL() { return this.tryGetToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
    ASCII_SYMBOL() { return this.tryGetToken(MySQLParser.ASCII_SYMBOL, 0); }
    ALWAYS_SYMBOL() { return this.tryGetToken(MySQLParser.ALWAYS_SYMBOL, 0); }
    BACKUP_SYMBOL() { return this.tryGetToken(MySQLParser.BACKUP_SYMBOL, 0); }
    BEGIN_SYMBOL() { return this.tryGetToken(MySQLParser.BEGIN_SYMBOL, 0); }
    BYTE_SYMBOL() { return this.tryGetToken(MySQLParser.BYTE_SYMBOL, 0); }
    CACHE_SYMBOL() { return this.tryGetToken(MySQLParser.CACHE_SYMBOL, 0); }
    CHARSET_SYMBOL() { return this.tryGetToken(MySQLParser.CHARSET_SYMBOL, 0); }
    CHECKSUM_SYMBOL() { return this.tryGetToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
    CLONE_SYMBOL() { return this.tryGetToken(MySQLParser.CLONE_SYMBOL, 0); }
    CLOSE_SYMBOL() { return this.tryGetToken(MySQLParser.CLOSE_SYMBOL, 0); }
    COMMENT_SYMBOL() { return this.tryGetToken(MySQLParser.COMMENT_SYMBOL, 0); }
    COMMIT_SYMBOL() { return this.tryGetToken(MySQLParser.COMMIT_SYMBOL, 0); }
    CONTAINS_SYMBOL() { return this.tryGetToken(MySQLParser.CONTAINS_SYMBOL, 0); }
    DEALLOCATE_SYMBOL() { return this.tryGetToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
    DO_SYMBOL() { return this.tryGetToken(MySQLParser.DO_SYMBOL, 0); }
    END_SYMBOL() { return this.tryGetToken(MySQLParser.END_SYMBOL, 0); }
    FLUSH_SYMBOL() { return this.tryGetToken(MySQLParser.FLUSH_SYMBOL, 0); }
    FOLLOWS_SYMBOL() { return this.tryGetToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
    FORMAT_SYMBOL() { return this.tryGetToken(MySQLParser.FORMAT_SYMBOL, 0); }
    GROUP_REPLICATION_SYMBOL() { return this.tryGetToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
    HANDLER_SYMBOL() { return this.tryGetToken(MySQLParser.HANDLER_SYMBOL, 0); }
    HELP_SYMBOL() { return this.tryGetToken(MySQLParser.HELP_SYMBOL, 0); }
    HOST_SYMBOL() { return this.tryGetToken(MySQLParser.HOST_SYMBOL, 0); }
    INSTALL_SYMBOL() { return this.tryGetToken(MySQLParser.INSTALL_SYMBOL, 0); }
    INVISIBLE_SYMBOL() { return this.tryGetToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
    LANGUAGE_SYMBOL() { return this.tryGetToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
    NO_SYMBOL() { return this.tryGetToken(MySQLParser.NO_SYMBOL, 0); }
    OPEN_SYMBOL() { return this.tryGetToken(MySQLParser.OPEN_SYMBOL, 0); }
    OPTIONS_SYMBOL() { return this.tryGetToken(MySQLParser.OPTIONS_SYMBOL, 0); }
    OWNER_SYMBOL() { return this.tryGetToken(MySQLParser.OWNER_SYMBOL, 0); }
    PARSER_SYMBOL() { return this.tryGetToken(MySQLParser.PARSER_SYMBOL, 0); }
    PARTITION_SYMBOL() { return this.tryGetToken(MySQLParser.PARTITION_SYMBOL, 0); }
    PORT_SYMBOL() { return this.tryGetToken(MySQLParser.PORT_SYMBOL, 0); }
    PRECEDES_SYMBOL() { return this.tryGetToken(MySQLParser.PRECEDES_SYMBOL, 0); }
    PREPARE_SYMBOL() { return this.tryGetToken(MySQLParser.PREPARE_SYMBOL, 0); }
    REMOVE_SYMBOL() { return this.tryGetToken(MySQLParser.REMOVE_SYMBOL, 0); }
    REPAIR_SYMBOL() { return this.tryGetToken(MySQLParser.REPAIR_SYMBOL, 0); }
    RESET_SYMBOL() { return this.tryGetToken(MySQLParser.RESET_SYMBOL, 0); }
    RESTORE_SYMBOL() { return this.tryGetToken(MySQLParser.RESTORE_SYMBOL, 0); }
    ROLE_SYMBOL() { return this.tryGetToken(MySQLParser.ROLE_SYMBOL, 0); }
    ROLLBACK_SYMBOL() { return this.tryGetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
    SAVEPOINT_SYMBOL() { return this.tryGetToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
    SECONDARY_SYMBOL() { return this.tryGetToken(MySQLParser.SECONDARY_SYMBOL, 0); }
    SECONDARY_ENGINE_SYMBOL() { return this.tryGetToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
    SECONDARY_LOAD_SYMBOL() { return this.tryGetToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
    SECONDARY_UNLOAD_SYMBOL() { return this.tryGetToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
    SECURITY_SYMBOL() { return this.tryGetToken(MySQLParser.SECURITY_SYMBOL, 0); }
    SERVER_SYMBOL() { return this.tryGetToken(MySQLParser.SERVER_SYMBOL, 0); }
    SIGNED_SYMBOL() { return this.tryGetToken(MySQLParser.SIGNED_SYMBOL, 0); }
    SOCKET_SYMBOL() { return this.tryGetToken(MySQLParser.SOCKET_SYMBOL, 0); }
    SLAVE_SYMBOL() { return this.tryGetToken(MySQLParser.SLAVE_SYMBOL, 0); }
    SONAME_SYMBOL() { return this.tryGetToken(MySQLParser.SONAME_SYMBOL, 0); }
    START_SYMBOL() { return this.tryGetToken(MySQLParser.START_SYMBOL, 0); }
    STOP_SYMBOL() { return this.tryGetToken(MySQLParser.STOP_SYMBOL, 0); }
    TRUNCATE_SYMBOL() { return this.tryGetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
    UNICODE_SYMBOL() { return this.tryGetToken(MySQLParser.UNICODE_SYMBOL, 0); }
    UNINSTALL_SYMBOL() { return this.tryGetToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
    UPGRADE_SYMBOL() { return this.tryGetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
    VISIBLE_SYMBOL() { return this.tryGetToken(MySQLParser.VISIBLE_SYMBOL, 0); }
    WRAPPER_SYMBOL() { return this.tryGetToken(MySQLParser.WRAPPER_SYMBOL, 0); }
    XA_SYMBOL() { return this.tryGetToken(MySQLParser.XA_SYMBOL, 0); }
    SHUTDOWN_SYMBOL() { return this.tryGetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
    IMPORT_SYMBOL() { return this.tryGetToken(MySQLParser.IMPORT_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_roleOrIdentifierKeyword; }
    // @Override
    enterRule(listener) {
        if (listener.enterRoleOrIdentifierKeyword) {
            listener.enterRoleOrIdentifierKeyword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRoleOrIdentifierKeyword) {
            listener.exitRoleOrIdentifierKeyword(this);
        }
    }
}
exports.RoleOrIdentifierKeywordContext = RoleOrIdentifierKeywordContext;
class RoleOrLabelKeywordContext extends ParserRuleContext_1.ParserRuleContext {
    ACTION_SYMBOL() { return this.tryGetToken(MySQLParser.ACTION_SYMBOL, 0); }
    ACTIVE_SYMBOL() { return this.tryGetToken(MySQLParser.ACTIVE_SYMBOL, 0); }
    ADDDATE_SYMBOL() { return this.tryGetToken(MySQLParser.ADDDATE_SYMBOL, 0); }
    AFTER_SYMBOL() { return this.tryGetToken(MySQLParser.AFTER_SYMBOL, 0); }
    AGAINST_SYMBOL() { return this.tryGetToken(MySQLParser.AGAINST_SYMBOL, 0); }
    AGGREGATE_SYMBOL() { return this.tryGetToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
    ALGORITHM_SYMBOL() { return this.tryGetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
    ANALYSE_SYMBOL() { return this.tryGetToken(MySQLParser.ANALYSE_SYMBOL, 0); }
    ANY_SYMBOL() { return this.tryGetToken(MySQLParser.ANY_SYMBOL, 0); }
    AT_SYMBOL() { return this.tryGetToken(MySQLParser.AT_SYMBOL, 0); }
    AUTHORS_SYMBOL() { return this.tryGetToken(MySQLParser.AUTHORS_SYMBOL, 0); }
    AUTO_INCREMENT_SYMBOL() { return this.tryGetToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
    AUTOEXTEND_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
    AVG_ROW_LENGTH_SYMBOL() { return this.tryGetToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
    AVG_SYMBOL() { return this.tryGetToken(MySQLParser.AVG_SYMBOL, 0); }
    BINLOG_SYMBOL() { return this.tryGetToken(MySQLParser.BINLOG_SYMBOL, 0); }
    BIT_SYMBOL() { return this.tryGetToken(MySQLParser.BIT_SYMBOL, 0); }
    BLOCK_SYMBOL() { return this.tryGetToken(MySQLParser.BLOCK_SYMBOL, 0); }
    BOOL_SYMBOL() { return this.tryGetToken(MySQLParser.BOOL_SYMBOL, 0); }
    BOOLEAN_SYMBOL() { return this.tryGetToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
    BTREE_SYMBOL() { return this.tryGetToken(MySQLParser.BTREE_SYMBOL, 0); }
    BUCKETS_SYMBOL() { return this.tryGetToken(MySQLParser.BUCKETS_SYMBOL, 0); }
    CASCADED_SYMBOL() { return this.tryGetToken(MySQLParser.CASCADED_SYMBOL, 0); }
    CATALOG_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
    CHAIN_SYMBOL() { return this.tryGetToken(MySQLParser.CHAIN_SYMBOL, 0); }
    CHANGED_SYMBOL() { return this.tryGetToken(MySQLParser.CHANGED_SYMBOL, 0); }
    CHANNEL_SYMBOL() { return this.tryGetToken(MySQLParser.CHANNEL_SYMBOL, 0); }
    CIPHER_SYMBOL() { return this.tryGetToken(MySQLParser.CIPHER_SYMBOL, 0); }
    CLIENT_SYMBOL() { return this.tryGetToken(MySQLParser.CLIENT_SYMBOL, 0); }
    CLASS_ORIGIN_SYMBOL() { return this.tryGetToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
    COALESCE_SYMBOL() { return this.tryGetToken(MySQLParser.COALESCE_SYMBOL, 0); }
    CODE_SYMBOL() { return this.tryGetToken(MySQLParser.CODE_SYMBOL, 0); }
    COLLATION_SYMBOL() { return this.tryGetToken(MySQLParser.COLLATION_SYMBOL, 0); }
    COLUMN_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
    COLUMN_FORMAT_SYMBOL() { return this.tryGetToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
    COLUMNS_SYMBOL() { return this.tryGetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
    COMMITTED_SYMBOL() { return this.tryGetToken(MySQLParser.COMMITTED_SYMBOL, 0); }
    COMPACT_SYMBOL() { return this.tryGetToken(MySQLParser.COMPACT_SYMBOL, 0); }
    COMPLETION_SYMBOL() { return this.tryGetToken(MySQLParser.COMPLETION_SYMBOL, 0); }
    COMPONENT_SYMBOL() { return this.tryGetToken(MySQLParser.COMPONENT_SYMBOL, 0); }
    COMPRESSED_SYMBOL() { return this.tryGetToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
    COMPRESSION_SYMBOL() { return this.tryGetToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
    CONCURRENT_SYMBOL() { return this.tryGetToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
    CONNECTION_SYMBOL() { return this.tryGetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
    CONSISTENT_SYMBOL() { return this.tryGetToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
    CONSTRAINT_CATALOG_SYMBOL() { return this.tryGetToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
    CONSTRAINT_SCHEMA_SYMBOL() { return this.tryGetToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
    CONSTRAINT_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
    CONTEXT_SYMBOL() { return this.tryGetToken(MySQLParser.CONTEXT_SYMBOL, 0); }
    CONTRIBUTORS_SYMBOL() { return this.tryGetToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0); }
    CPU_SYMBOL() { return this.tryGetToken(MySQLParser.CPU_SYMBOL, 0); }
    CURRENT_SYMBOL() { return this.tryGetToken(MySQLParser.CURRENT_SYMBOL, 0); }
    CURSOR_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
    DATA_SYMBOL() { return this.tryGetToken(MySQLParser.DATA_SYMBOL, 0); }
    DATAFILE_SYMBOL() { return this.tryGetToken(MySQLParser.DATAFILE_SYMBOL, 0); }
    DATETIME_SYMBOL() { return this.tryGetToken(MySQLParser.DATETIME_SYMBOL, 0); }
    DATE_SYMBOL() { return this.tryGetToken(MySQLParser.DATE_SYMBOL, 0); }
    DAY_SYMBOL() { return this.tryGetToken(MySQLParser.DAY_SYMBOL, 0); }
    DEFAULT_AUTH_SYMBOL() { return this.tryGetToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
    DEFINER_SYMBOL() { return this.tryGetToken(MySQLParser.DEFINER_SYMBOL, 0); }
    DELAY_KEY_WRITE_SYMBOL() { return this.tryGetToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
    DES_KEY_FILE_SYMBOL() { return this.tryGetToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0); }
    DESCRIPTION_SYMBOL() { return this.tryGetToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
    DIAGNOSTICS_SYMBOL() { return this.tryGetToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
    DIRECTORY_SYMBOL() { return this.tryGetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
    DISABLE_SYMBOL() { return this.tryGetToken(MySQLParser.DISABLE_SYMBOL, 0); }
    DISCARD_SYMBOL() { return this.tryGetToken(MySQLParser.DISCARD_SYMBOL, 0); }
    DISK_SYMBOL() { return this.tryGetToken(MySQLParser.DISK_SYMBOL, 0); }
    DUMPFILE_SYMBOL() { return this.tryGetToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
    DUPLICATE_SYMBOL() { return this.tryGetToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
    DYNAMIC_SYMBOL() { return this.tryGetToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
    ENCRYPTION_SYMBOL() { return this.tryGetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
    ENDS_SYMBOL() { return this.tryGetToken(MySQLParser.ENDS_SYMBOL, 0); }
    ENUM_SYMBOL() { return this.tryGetToken(MySQLParser.ENUM_SYMBOL, 0); }
    ENGINE_SYMBOL() { return this.tryGetToken(MySQLParser.ENGINE_SYMBOL, 0); }
    ENGINES_SYMBOL() { return this.tryGetToken(MySQLParser.ENGINES_SYMBOL, 0); }
    ERROR_SYMBOL() { return this.tryGetToken(MySQLParser.ERROR_SYMBOL, 0); }
    ERRORS_SYMBOL() { return this.tryGetToken(MySQLParser.ERRORS_SYMBOL, 0); }
    ESCAPE_SYMBOL() { return this.tryGetToken(MySQLParser.ESCAPE_SYMBOL, 0); }
    EVENTS_SYMBOL() { return this.tryGetToken(MySQLParser.EVENTS_SYMBOL, 0); }
    EVERY_SYMBOL() { return this.tryGetToken(MySQLParser.EVERY_SYMBOL, 0); }
    EXCLUDE_SYMBOL() { return this.tryGetToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
    EXPANSION_SYMBOL() { return this.tryGetToken(MySQLParser.EXPANSION_SYMBOL, 0); }
    EXPORT_SYMBOL() { return this.tryGetToken(MySQLParser.EXPORT_SYMBOL, 0); }
    EXTENDED_SYMBOL() { return this.tryGetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
    EXTENT_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
    FAULTS_SYMBOL() { return this.tryGetToken(MySQLParser.FAULTS_SYMBOL, 0); }
    FAST_SYMBOL() { return this.tryGetToken(MySQLParser.FAST_SYMBOL, 0); }
    FOLLOWING_SYMBOL() { return this.tryGetToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
    FOUND_SYMBOL() { return this.tryGetToken(MySQLParser.FOUND_SYMBOL, 0); }
    ENABLE_SYMBOL() { return this.tryGetToken(MySQLParser.ENABLE_SYMBOL, 0); }
    FULL_SYMBOL() { return this.tryGetToken(MySQLParser.FULL_SYMBOL, 0); }
    FILE_BLOCK_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
    FILTER_SYMBOL() { return this.tryGetToken(MySQLParser.FILTER_SYMBOL, 0); }
    FIRST_SYMBOL() { return this.tryGetToken(MySQLParser.FIRST_SYMBOL, 0); }
    FIXED_SYMBOL() { return this.tryGetToken(MySQLParser.FIXED_SYMBOL, 0); }
    GENERAL_SYMBOL() { return this.tryGetToken(MySQLParser.GENERAL_SYMBOL, 0); }
    GEOMETRY_SYMBOL() { return this.tryGetToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
    GEOMETRYCOLLECTION_SYMBOL() { return this.tryGetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
    GET_FORMAT_SYMBOL() { return this.tryGetToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
    GRANTS_SYMBOL() { return this.tryGetToken(MySQLParser.GRANTS_SYMBOL, 0); }
    GLOBAL_SYMBOL() { return this.tryGetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
    HASH_SYMBOL() { return this.tryGetToken(MySQLParser.HASH_SYMBOL, 0); }
    HISTOGRAM_SYMBOL() { return this.tryGetToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
    HISTORY_SYMBOL() { return this.tryGetToken(MySQLParser.HISTORY_SYMBOL, 0); }
    HOSTS_SYMBOL() { return this.tryGetToken(MySQLParser.HOSTS_SYMBOL, 0); }
    HOUR_SYMBOL() { return this.tryGetToken(MySQLParser.HOUR_SYMBOL, 0); }
    IDENTIFIED_SYMBOL() { return this.tryGetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
    IGNORE_SERVER_IDS_SYMBOL() { return this.tryGetToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
    INVOKER_SYMBOL() { return this.tryGetToken(MySQLParser.INVOKER_SYMBOL, 0); }
    INDEXES_SYMBOL() { return this.tryGetToken(MySQLParser.INDEXES_SYMBOL, 0); }
    INITIAL_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
    INSTANCE_SYMBOL() { return this.tryGetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
    INACTIVE_SYMBOL() { return this.tryGetToken(MySQLParser.INACTIVE_SYMBOL, 0); }
    IO_SYMBOL() { return this.tryGetToken(MySQLParser.IO_SYMBOL, 0); }
    IPC_SYMBOL() { return this.tryGetToken(MySQLParser.IPC_SYMBOL, 0); }
    ISOLATION_SYMBOL() { return this.tryGetToken(MySQLParser.ISOLATION_SYMBOL, 0); }
    ISSUER_SYMBOL() { return this.tryGetToken(MySQLParser.ISSUER_SYMBOL, 0); }
    INSERT_METHOD_SYMBOL() { return this.tryGetToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
    JSON_SYMBOL() { return this.tryGetToken(MySQLParser.JSON_SYMBOL, 0); }
    KEY_BLOCK_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
    LAST_SYMBOL() { return this.tryGetToken(MySQLParser.LAST_SYMBOL, 0); }
    LEAVES_SYMBOL() { return this.tryGetToken(MySQLParser.LEAVES_SYMBOL, 0); }
    LESS_SYMBOL() { return this.tryGetToken(MySQLParser.LESS_SYMBOL, 0); }
    LEVEL_SYMBOL() { return this.tryGetToken(MySQLParser.LEVEL_SYMBOL, 0); }
    LINESTRING_SYMBOL() { return this.tryGetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
    LIST_SYMBOL() { return this.tryGetToken(MySQLParser.LIST_SYMBOL, 0); }
    LOCAL_SYMBOL() { return this.tryGetToken(MySQLParser.LOCAL_SYMBOL, 0); }
    LOCKED_SYMBOL() { return this.tryGetToken(MySQLParser.LOCKED_SYMBOL, 0); }
    LOCKS_SYMBOL() { return this.tryGetToken(MySQLParser.LOCKS_SYMBOL, 0); }
    LOGFILE_SYMBOL() { return this.tryGetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
    LOGS_SYMBOL() { return this.tryGetToken(MySQLParser.LOGS_SYMBOL, 0); }
    MAX_ROWS_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
    MASTER_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SYMBOL, 0); }
    MASTER_HEARTBEAT_PERIOD_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
    MASTER_HOST_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
    MASTER_PORT_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
    MASTER_LOG_FILE_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
    MASTER_LOG_POS_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
    MASTER_USER_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
    MASTER_PASSWORD_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
    MASTER_PUBLIC_KEY_PATH_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
    MASTER_SERVER_ID_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0); }
    MASTER_CONNECT_RETRY_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
    MASTER_RETRY_COUNT_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
    MASTER_DELAY_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
    MASTER_SSL_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
    MASTER_SSL_CA_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
    MASTER_SSL_CAPATH_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
    MASTER_TLS_VERSION_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
    MASTER_SSL_CERT_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
    MASTER_SSL_CIPHER_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
    MASTER_SSL_CRL_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
    MASTER_SSL_CRLPATH_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
    MASTER_SSL_KEY_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
    MASTER_AUTO_POSITION_SYMBOL() { return this.tryGetToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
    MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
    MAX_QUERIES_PER_HOUR_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
    MAX_STATEMENT_TIME_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
    MAX_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
    MAX_UPDATES_PER_HOUR_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
    MAX_USER_CONNECTIONS_SYMBOL() { return this.tryGetToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
    MEDIUM_SYMBOL() { return this.tryGetToken(MySQLParser.MEDIUM_SYMBOL, 0); }
    MEMORY_SYMBOL() { return this.tryGetToken(MySQLParser.MEMORY_SYMBOL, 0); }
    MERGE_SYMBOL() { return this.tryGetToken(MySQLParser.MERGE_SYMBOL, 0); }
    MESSAGE_TEXT_SYMBOL() { return this.tryGetToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
    MICROSECOND_SYMBOL() { return this.tryGetToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
    MIGRATE_SYMBOL() { return this.tryGetToken(MySQLParser.MIGRATE_SYMBOL, 0); }
    MINUTE_SYMBOL() { return this.tryGetToken(MySQLParser.MINUTE_SYMBOL, 0); }
    MIN_ROWS_SYMBOL() { return this.tryGetToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
    MODIFY_SYMBOL() { return this.tryGetToken(MySQLParser.MODIFY_SYMBOL, 0); }
    MODE_SYMBOL() { return this.tryGetToken(MySQLParser.MODE_SYMBOL, 0); }
    MONTH_SYMBOL() { return this.tryGetToken(MySQLParser.MONTH_SYMBOL, 0); }
    MULTILINESTRING_SYMBOL() { return this.tryGetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
    MULTIPOINT_SYMBOL() { return this.tryGetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
    MULTIPOLYGON_SYMBOL() { return this.tryGetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
    MUTEX_SYMBOL() { return this.tryGetToken(MySQLParser.MUTEX_SYMBOL, 0); }
    MYSQL_ERRNO_SYMBOL() { return this.tryGetToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
    NAME_SYMBOL() { return this.tryGetToken(MySQLParser.NAME_SYMBOL, 0); }
    NAMES_SYMBOL() { return this.tryGetToken(MySQLParser.NAMES_SYMBOL, 0); }
    NATIONAL_SYMBOL() { return this.tryGetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
    NCHAR_SYMBOL() { return this.tryGetToken(MySQLParser.NCHAR_SYMBOL, 0); }
    NDBCLUSTER_SYMBOL() { return this.tryGetToken(MySQLParser.NDBCLUSTER_SYMBOL, 0); }
    NESTED_SYMBOL() { return this.tryGetToken(MySQLParser.NESTED_SYMBOL, 0); }
    NEVER_SYMBOL() { return this.tryGetToken(MySQLParser.NEVER_SYMBOL, 0); }
    NEXT_SYMBOL() { return this.tryGetToken(MySQLParser.NEXT_SYMBOL, 0); }
    NEW_SYMBOL() { return this.tryGetToken(MySQLParser.NEW_SYMBOL, 0); }
    NO_WAIT_SYMBOL() { return this.tryGetToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
    NODEGROUP_SYMBOL() { return this.tryGetToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
    NULLS_SYMBOL() { return this.tryGetToken(MySQLParser.NULLS_SYMBOL, 0); }
    NOWAIT_SYMBOL() { return this.tryGetToken(MySQLParser.NOWAIT_SYMBOL, 0); }
    NUMBER_SYMBOL() { return this.tryGetToken(MySQLParser.NUMBER_SYMBOL, 0); }
    NVARCHAR_SYMBOL() { return this.tryGetToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
    OFFSET_SYMBOL() { return this.tryGetToken(MySQLParser.OFFSET_SYMBOL, 0); }
    OLD_SYMBOL() { return this.tryGetToken(MySQLParser.OLD_SYMBOL, 0); }
    OLD_PASSWORD_SYMBOL() { return this.tryGetToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
    ONE_SYMBOL() { return this.tryGetToken(MySQLParser.ONE_SYMBOL, 0); }
    OPTIONAL_SYMBOL() { return this.tryGetToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
    ORDINALITY_SYMBOL() { return this.tryGetToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
    ORGANIZATION_SYMBOL() { return this.tryGetToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
    OTHERS_SYMBOL() { return this.tryGetToken(MySQLParser.OTHERS_SYMBOL, 0); }
    PACK_KEYS_SYMBOL() { return this.tryGetToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
    PAGE_SYMBOL() { return this.tryGetToken(MySQLParser.PAGE_SYMBOL, 0); }
    PARTIAL_SYMBOL() { return this.tryGetToken(MySQLParser.PARTIAL_SYMBOL, 0); }
    PARTITIONING_SYMBOL() { return this.tryGetToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
    PARTITIONS_SYMBOL() { return this.tryGetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
    PASSWORD_SYMBOL() { return this.tryGetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
    PATH_SYMBOL() { return this.tryGetToken(MySQLParser.PATH_SYMBOL, 0); }
    PHASE_SYMBOL() { return this.tryGetToken(MySQLParser.PHASE_SYMBOL, 0); }
    PLUGIN_DIR_SYMBOL() { return this.tryGetToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
    PLUGIN_SYMBOL() { return this.tryGetToken(MySQLParser.PLUGIN_SYMBOL, 0); }
    PLUGINS_SYMBOL() { return this.tryGetToken(MySQLParser.PLUGINS_SYMBOL, 0); }
    POINT_SYMBOL() { return this.tryGetToken(MySQLParser.POINT_SYMBOL, 0); }
    POLYGON_SYMBOL() { return this.tryGetToken(MySQLParser.POLYGON_SYMBOL, 0); }
    PRECEDING_SYMBOL() { return this.tryGetToken(MySQLParser.PRECEDING_SYMBOL, 0); }
    PRESERVE_SYMBOL() { return this.tryGetToken(MySQLParser.PRESERVE_SYMBOL, 0); }
    PREV_SYMBOL() { return this.tryGetToken(MySQLParser.PREV_SYMBOL, 0); }
    THREAD_PRIORITY_SYMBOL() { return this.tryGetToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
    PRIVILEGES_SYMBOL() { return this.tryGetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
    PROCESSLIST_SYMBOL() { return this.tryGetToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
    PROFILE_SYMBOL() { return this.tryGetToken(MySQLParser.PROFILE_SYMBOL, 0); }
    PROFILES_SYMBOL() { return this.tryGetToken(MySQLParser.PROFILES_SYMBOL, 0); }
    QUARTER_SYMBOL() { return this.tryGetToken(MySQLParser.QUARTER_SYMBOL, 0); }
    QUERY_SYMBOL() { return this.tryGetToken(MySQLParser.QUERY_SYMBOL, 0); }
    QUICK_SYMBOL() { return this.tryGetToken(MySQLParser.QUICK_SYMBOL, 0); }
    READ_ONLY_SYMBOL() { return this.tryGetToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
    REBUILD_SYMBOL() { return this.tryGetToken(MySQLParser.REBUILD_SYMBOL, 0); }
    RECOVER_SYMBOL() { return this.tryGetToken(MySQLParser.RECOVER_SYMBOL, 0); }
    REDO_BUFFER_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
    REDOFILE_SYMBOL() { return this.tryGetToken(MySQLParser.REDOFILE_SYMBOL, 0); }
    REDUNDANT_SYMBOL() { return this.tryGetToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
    RELAY_SYMBOL() { return this.tryGetToken(MySQLParser.RELAY_SYMBOL, 0); }
    RELAYLOG_SYMBOL() { return this.tryGetToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
    RELAY_LOG_FILE_SYMBOL() { return this.tryGetToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
    RELAY_LOG_POS_SYMBOL() { return this.tryGetToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
    RELAY_THREAD_SYMBOL() { return this.tryGetToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
    REMOTE_SYMBOL() { return this.tryGetToken(MySQLParser.REMOTE_SYMBOL, 0); }
    REORGANIZE_SYMBOL() { return this.tryGetToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
    REPEATABLE_SYMBOL() { return this.tryGetToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
    REPLICATE_DO_DB_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
    REPLICATE_IGNORE_DB_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
    REPLICATE_DO_TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
    REPLICATE_IGNORE_TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
    REPLICATE_WILD_DO_TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
    REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
    REPLICATE_REWRITE_DB_SYMBOL() { return this.tryGetToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
    USER_RESOURCES_SYMBOL() { return this.tryGetToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
    RESPECT_SYMBOL() { return this.tryGetToken(MySQLParser.RESPECT_SYMBOL, 0); }
    RESUME_SYMBOL() { return this.tryGetToken(MySQLParser.RESUME_SYMBOL, 0); }
    RETAIN_SYMBOL() { return this.tryGetToken(MySQLParser.RETAIN_SYMBOL, 0); }
    RETURNED_SQLSTATE_SYMBOL() { return this.tryGetToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
    RETURNS_SYMBOL() { return this.tryGetToken(MySQLParser.RETURNS_SYMBOL, 0); }
    REUSE_SYMBOL() { return this.tryGetToken(MySQLParser.REUSE_SYMBOL, 0); }
    REVERSE_SYMBOL() { return this.tryGetToken(MySQLParser.REVERSE_SYMBOL, 0); }
    ROLLUP_SYMBOL() { return this.tryGetToken(MySQLParser.ROLLUP_SYMBOL, 0); }
    ROTATE_SYMBOL() { return this.tryGetToken(MySQLParser.ROTATE_SYMBOL, 0); }
    ROUTINE_SYMBOL() { return this.tryGetToken(MySQLParser.ROUTINE_SYMBOL, 0); }
    ROW_COUNT_SYMBOL() { return this.tryGetToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
    ROW_FORMAT_SYMBOL() { return this.tryGetToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
    RTREE_SYMBOL() { return this.tryGetToken(MySQLParser.RTREE_SYMBOL, 0); }
    SCHEDULE_SYMBOL() { return this.tryGetToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
    SCHEMA_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
    SECOND_SYMBOL() { return this.tryGetToken(MySQLParser.SECOND_SYMBOL, 0); }
    SERIAL_SYMBOL() { return this.tryGetToken(MySQLParser.SERIAL_SYMBOL, 0); }
    SERIALIZABLE_SYMBOL() { return this.tryGetToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
    SESSION_SYMBOL() { return this.tryGetToken(MySQLParser.SESSION_SYMBOL, 0); }
    SHARE_SYMBOL() { return this.tryGetToken(MySQLParser.SHARE_SYMBOL, 0); }
    SIMPLE_SYMBOL() { return this.tryGetToken(MySQLParser.SIMPLE_SYMBOL, 0); }
    SKIP_SYMBOL() { return this.tryGetToken(MySQLParser.SKIP_SYMBOL, 0); }
    SLOW_SYMBOL() { return this.tryGetToken(MySQLParser.SLOW_SYMBOL, 0); }
    SNAPSHOT_SYMBOL() { return this.tryGetToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
    SOUNDS_SYMBOL() { return this.tryGetToken(MySQLParser.SOUNDS_SYMBOL, 0); }
    SOURCE_SYMBOL() { return this.tryGetToken(MySQLParser.SOURCE_SYMBOL, 0); }
    SQL_AFTER_GTIDS_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
    SQL_AFTER_MTS_GAPS_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
    SQL_BEFORE_GTIDS_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
    SQL_CACHE_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_CACHE_SYMBOL, 0); }
    SQL_BUFFER_RESULT_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
    SQL_NO_CACHE_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
    SQL_THREAD_SYMBOL() { return this.tryGetToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
    SRID_SYMBOL() { return this.tryGetToken(MySQLParser.SRID_SYMBOL, 0); }
    STACKED_SYMBOL() { return this.tryGetToken(MySQLParser.STACKED_SYMBOL, 0); }
    STARTS_SYMBOL() { return this.tryGetToken(MySQLParser.STARTS_SYMBOL, 0); }
    STATS_AUTO_RECALC_SYMBOL() { return this.tryGetToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
    STATS_PERSISTENT_SYMBOL() { return this.tryGetToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
    STATS_SAMPLE_PAGES_SYMBOL() { return this.tryGetToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
    STATUS_SYMBOL() { return this.tryGetToken(MySQLParser.STATUS_SYMBOL, 0); }
    STORAGE_SYMBOL() { return this.tryGetToken(MySQLParser.STORAGE_SYMBOL, 0); }
    STRING_SYMBOL() { return this.tryGetToken(MySQLParser.STRING_SYMBOL, 0); }
    SUBCLASS_ORIGIN_SYMBOL() { return this.tryGetToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
    SUBDATE_SYMBOL() { return this.tryGetToken(MySQLParser.SUBDATE_SYMBOL, 0); }
    SUBJECT_SYMBOL() { return this.tryGetToken(MySQLParser.SUBJECT_SYMBOL, 0); }
    SUBPARTITION_SYMBOL() { return this.tryGetToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
    SUBPARTITIONS_SYMBOL() { return this.tryGetToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
    SUPER_SYMBOL() { return this.tryGetToken(MySQLParser.SUPER_SYMBOL, 0); }
    SUSPEND_SYMBOL() { return this.tryGetToken(MySQLParser.SUSPEND_SYMBOL, 0); }
    SWAPS_SYMBOL() { return this.tryGetToken(MySQLParser.SWAPS_SYMBOL, 0); }
    SWITCHES_SYMBOL() { return this.tryGetToken(MySQLParser.SWITCHES_SYMBOL, 0); }
    TABLE_NAME_SYMBOL() { return this.tryGetToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
    TABLES_SYMBOL() { return this.tryGetToken(MySQLParser.TABLES_SYMBOL, 0); }
    TABLE_CHECKSUM_SYMBOL() { return this.tryGetToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
    TABLESPACE_SYMBOL() { return this.tryGetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
    TEMPORARY_SYMBOL() { return this.tryGetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
    TEMPTABLE_SYMBOL() { return this.tryGetToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
    TEXT_SYMBOL() { return this.tryGetToken(MySQLParser.TEXT_SYMBOL, 0); }
    THAN_SYMBOL() { return this.tryGetToken(MySQLParser.THAN_SYMBOL, 0); }
    TIES_SYMBOL() { return this.tryGetToken(MySQLParser.TIES_SYMBOL, 0); }
    TRANSACTION_SYMBOL() { return this.tryGetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
    TRIGGERS_SYMBOL() { return this.tryGetToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
    TIMESTAMP_SYMBOL() { return this.tryGetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
    TIMESTAMP_ADD_SYMBOL() { return this.tryGetToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
    TIMESTAMP_DIFF_SYMBOL() { return this.tryGetToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
    TIME_SYMBOL() { return this.tryGetToken(MySQLParser.TIME_SYMBOL, 0); }
    TYPES_SYMBOL() { return this.tryGetToken(MySQLParser.TYPES_SYMBOL, 0); }
    TYPE_SYMBOL() { return this.tryGetToken(MySQLParser.TYPE_SYMBOL, 0); }
    UDF_RETURNS_SYMBOL() { return this.tryGetToken(MySQLParser.UDF_RETURNS_SYMBOL, 0); }
    UNBOUNDED_SYMBOL() { return this.tryGetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
    UNCOMMITTED_SYMBOL() { return this.tryGetToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
    UNDEFINED_SYMBOL() { return this.tryGetToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
    UNDO_BUFFER_SIZE_SYMBOL() { return this.tryGetToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
    UNDOFILE_SYMBOL() { return this.tryGetToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
    UNKNOWN_SYMBOL() { return this.tryGetToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
    UNTIL_SYMBOL() { return this.tryGetToken(MySQLParser.UNTIL_SYMBOL, 0); }
    USER_SYMBOL() { return this.tryGetToken(MySQLParser.USER_SYMBOL, 0); }
    USE_FRM_SYMBOL() { return this.tryGetToken(MySQLParser.USE_FRM_SYMBOL, 0); }
    VARIABLES_SYMBOL() { return this.tryGetToken(MySQLParser.VARIABLES_SYMBOL, 0); }
    VCPU_SYMBOL() { return this.tryGetToken(MySQLParser.VCPU_SYMBOL, 0); }
    VIEW_SYMBOL() { return this.tryGetToken(MySQLParser.VIEW_SYMBOL, 0); }
    VALUE_SYMBOL() { return this.tryGetToken(MySQLParser.VALUE_SYMBOL, 0); }
    WARNINGS_SYMBOL() { return this.tryGetToken(MySQLParser.WARNINGS_SYMBOL, 0); }
    WAIT_SYMBOL() { return this.tryGetToken(MySQLParser.WAIT_SYMBOL, 0); }
    WEEK_SYMBOL() { return this.tryGetToken(MySQLParser.WEEK_SYMBOL, 0); }
    WORK_SYMBOL() { return this.tryGetToken(MySQLParser.WORK_SYMBOL, 0); }
    WEIGHT_STRING_SYMBOL() { return this.tryGetToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
    X509_SYMBOL() { return this.tryGetToken(MySQLParser.X509_SYMBOL, 0); }
    XID_SYMBOL() { return this.tryGetToken(MySQLParser.XID_SYMBOL, 0); }
    XML_SYMBOL() { return this.tryGetToken(MySQLParser.XML_SYMBOL, 0); }
    YEAR_SYMBOL() { return this.tryGetToken(MySQLParser.YEAR_SYMBOL, 0); }
    SHUTDOWN_SYMBOL() { return this.tryGetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
    CUBE_SYMBOL() { return this.tryGetToken(MySQLParser.CUBE_SYMBOL, 0); }
    IMPORT_SYMBOL() { return this.tryGetToken(MySQLParser.IMPORT_SYMBOL, 0); }
    FUNCTION_SYMBOL() { return this.tryGetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
    ROWS_SYMBOL() { return this.tryGetToken(MySQLParser.ROWS_SYMBOL, 0); }
    ROW_SYMBOL() { return this.tryGetToken(MySQLParser.ROW_SYMBOL, 0); }
    EXCHANGE_SYMBOL() { return this.tryGetToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
    EXPIRE_SYMBOL() { return this.tryGetToken(MySQLParser.EXPIRE_SYMBOL, 0); }
    ONLY_SYMBOL() { return this.tryGetToken(MySQLParser.ONLY_SYMBOL, 0); }
    VALIDATION_SYMBOL() { return this.tryGetToken(MySQLParser.VALIDATION_SYMBOL, 0); }
    WITHOUT_SYMBOL() { return this.tryGetToken(MySQLParser.WITHOUT_SYMBOL, 0); }
    ADMIN_SYMBOL() { return this.tryGetToken(MySQLParser.ADMIN_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return MySQLParser.RULE_roleOrLabelKeyword; }
    // @Override
    enterRule(listener) {
        if (listener.enterRoleOrLabelKeyword) {
            listener.enterRoleOrLabelKeyword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRoleOrLabelKeyword) {
            listener.exitRoleOrLabelKeyword(this);
        }
    }
}
exports.RoleOrLabelKeywordContext = RoleOrLabelKeywordContext;
//# sourceMappingURL=MySQLParser.js.map