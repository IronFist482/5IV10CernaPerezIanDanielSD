"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const keywords_1 = require("../grammar/keywords");
var MySQLVersion;
(function (MySQLVersion) {
    MySQLVersion[MySQLVersion["Unknown"] = 0] = "Unknown";
    MySQLVersion[MySQLVersion["MySQL56"] = 1] = "MySQL56";
    MySQLVersion[MySQLVersion["MySQL57"] = 2] = "MySQL57";
    MySQLVersion[MySQLVersion["MySQL80"] = 3] = "MySQL80";
})(MySQLVersion = exports.MySQLVersion || (exports.MySQLVersion = {}));
function versionToNumber(version) {
    const [major, minor, patch] = version.split('.');
    const majorMinor = `${major}0${minor}`;
    if (String(patch).length === 2) {
        return Number(`${majorMinor}${patch}`);
    }
    return Number(`${majorMinor}0${patch}`);
}
exports.versionToNumber = versionToNumber;
function numberToVersion(version) {
    const major = Math.floor(version / 10000);
    const minor = Math.floor((version / 100) % 100);
    if (major < 5 || major > 8) {
        return MySQLVersion.Unknown;
    }
    if (major === 8) {
        return MySQLVersion.MySQL80;
    }
    if (major != 5) {
        return MySQLVersion.Unknown;
    }
    switch (minor) {
        case 6:
            return MySQLVersion.MySQL56;
        case 7:
            return MySQLVersion.MySQL57;
        default:
            return MySQLVersion.Unknown;
    }
}
exports.numberToVersion = numberToVersion;
function keywordsForVersion(version) {
    const mySQLVersion = numberToVersion(version);
    switch (mySQLVersion) {
        case MySQLVersion.MySQL56:
            return keywords_1.keywords56.map(keyword => keyword.word);
        case MySQLVersion.MySQL57:
            return keywords_1.keywords57.map(keyword => keyword.word);
        case MySQLVersion.MySQL80:
            return keywords_1.keywords80.map(keyword => keyword.word);
        default:
            return [];
    }
}
exports.keywordsForVersion = keywordsForVersion;
function reservedKeywordsForVersion(version) {
    const mySQLVersion = numberToVersion(version);
    switch (mySQLVersion) {
        case MySQLVersion.MySQL56: {
            const reserved = keywords_1.keywords56.filter(({ isReserved }) => isReserved);
            return reserved.map(keyword => keyword.word);
        }
        case MySQLVersion.MySQL57: {
            const reserved = keywords_1.keywords57.filter(({ isReserved }) => isReserved);
            return reserved.map(keyword => keyword.word);
        }
        case MySQLVersion.MySQL80: {
            const reserved = keywords_1.keywords80.filter(({ isReserved }) => isReserved);
            return reserved.map(keyword => keyword.word);
        }
        default:
            return [];
    }
}
exports.reservedKeywordsForVersion = reservedKeywordsForVersion;
//# sourceMappingURL=version.js.map